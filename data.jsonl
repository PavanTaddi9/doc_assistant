{"title": "Rocket.Chat Intro", "content": "Rocket.Chat is the leading open-source communication platform, designed for organizations that prioritize security, privacy, and full data ownership. Built for seamless collaboration, Rocket.Chat empowers teams with customizable messaging, integrations, and enterprise-grade security controls . As a broad overview, with Rocket.Chat you can: Collaborate with your teams: A single point for secure internal and cross-company communication. This includes group and direct messages with various message actions, attachment options, integrations, and conference calls . Communicate across platforms: Engage in seamless interactions with your customers regardless of the platform they choose to connect with you. Through the Rocket.Chat Marketplace, you can interact across multiple platforms, such as WhatsApp, Telegram, Instagram Direct, and more . Developer tools: With the Rocket.Chat Apps-Engine feature, build internal and public apps with reduced development time and launch time. Furthermore, using the Chat Engine solution, you can create customized messaging experiences within your existing apps . To create a workspace, Rocket.Chat offers the following workspace deployment options: Self-hosted/self-managed: Maintain full ownership with a secure, self-managed installation tailored to your security and compliance needs . This option allows you to host and manage your workspace on your preferred server. SaaS/cloud-hosted: Leverage Rocket.Chat\u2019s scalable cloud infrastructure for optimal performance and compliance. Cloud-hosted workspaces are deployed and managed on Rocket .Chat\u2019s Cloud Hosting Service. Air-gapped: Deploy your workspace in a fully isolated environment, disconnected from external or unsecured networks, ensuring maximum security and control. Choose your deployment method and follow the step-by-step guide to get Rocket .Chat up and running. Additionally, make informed decisions around your workspace with options for scaling and environment configuration. Once your workspace is deployed, follow these steps to explore the various offerings: Set up your account: Create your admin account and access your workspace . Workspace administration: Manage your workspace with advanced controls and user management features. Collaborate: You are ready to engage with your users and take advantage of the various features. Rocket .Chat offers commercial and community plans to suit your needs, providing flexibility in the workspace features. See plans for further information. You also have access to the Rocket.Chat trials so that you can experience and evaluate all the functionalities before selecting a plan", "tokens": 500}
{"title": "Rocket.Chat IntroRocket.Chat Explore", "content": ". Discover the newest features from the latest releases. Stay informed about the changes and how they may impact your setup. Engage with other Rocket.Chat users, contribute to the conversation, and help shape the future of communication . To learn more about the process, refer to the code of conduct and the support center. Rocket.Chat strives to ensure digital accessibility and continually improve the user experience for all. See the accessibility statement for more information . To know about the use of the service, see customer terms of service. As of December 15, 2023, Rocket .Chat has ceased support for connections from cloud services and official mobile/desktop apps to workspaces running legacy versions outside our support window. Users on unsupported legacy servers are advised to upgrade to the latest Rocket .Chat version to ensure continued access to cloud, mobile, and desktop applications. Each Rocket.Chat version is supported for six months post-release. For more details, see support prerequisites and version durability. Dive into our user guides to master unparalleled connectivity. Learn about Rocket.Chat deployment, features and more. Explore developer documentation, sample code and more to build and white-label. Dive into our API documentation now and transform your chat solution! Maximum control and security within your own infrastructure, tailored for compliance and customization. Absolute isolation for unmatched security, ensuring your data remains invulnerable within a completely offline environment. Harness the power of the cloud for scalable, flexible and cost-efficient hosting, accessible anytime, anywhere. Secure, unified collaboration platform. Seamlessly interact with customers across all touch-points. Boost communication with extensive apps and integrations. Embed secure app experiences into your existing web or mobile app. Stay updated with the latest. AI with high information accuracy and security. Manage workspaces and connect to cloud services. Updated livechat widget theme and visibility options.", "tokens": 397}
{"title": "Access Your Workspace", "content": "To access your Rocket.Chat workspace, you need the URL. If you don\u2019t have a link yet, ask your IT or workspace administrator for your organization\u2019s Rocket.Chat URL . You can use this link to access the workspace via a browser, desktop, or mobile app. Open one of the supported web browsers. Enter the workspace URL in the browser's address bar, such as https://open.rocket.chat . After entering a valid Rocket.Chat workspace address, the login page is displayed. Enter your credentials to log in or click Create an account to register as a workspace member. Download the Rocket.Chat desktop app for your operating system. Install and open the app . The workspace connect screen appears. Enter a valid workspace URL and click Connect. The login page appears. You can enter your credentials to log in or click Create an account to register as a workspace member. When using a Rocket .Chat desktop application you can connect to multiple Rocket.Chat workspaces. To add a new workspace, click the plus icon below the workspace list on the left sidebar and continue with the above steps to connect to a new Rocket.Chat workspace . Download and install the Rocket.Chat app compatible with your mobile operating system. Open the app. If this is your first time using the mobile app, the workspace connect screen will be displayed. Click Join a workspace . Enter a valid workspace address and click Connect. After entering a valid Rocket.Chat workspace address, click Login. Enter your credentials to log in or click Create an account to become a workspace member . To add another workspace that you are already part of, follow these steps: Click the title of your current workspace. Click Add workspace. Enter the workspace URL. Select Apply your certificate if you have an SSL certificate on your device . For details, see Supporting SSL for development on Rocket.Chat. Click Connect to log in to the workspace using your credentials. According to your workspace configuration, you can log in in one of the following ways: Using email address or username with password . Using SSO to log on with third-party credentials, such as Google or Microsoft. Additionally, you may need to enter 2FA codes while logging in using apps like Google Authenticator or Microsoft Authenticator", "tokens": 495}
{"title": "Access Your Workspace", "content": ". If you don\u2019t have an account set up, you can register as a user in one of the following ways: Manual registration: Provide your name, email, username, and password, and confirm the password. Some workspaces may require email verification . The registration credentials may vary based on the workspace configurations. Contact your workspace administrator if you're unsure of how to register your account . OAuth registration: If your workspace has enabled OAuth services (such as GitHub or Google), you can use your account from those supported services to register and access the workspace. Once you have completed a successful registration, proceed to select a unique username . Your username serves as a unique identifier for others to direct message or mention you within the workspace. It differs from your display name and must be unique within the workspace, while display names can be duplicated . If you have forgotten your password, click Forgot your password? and enter the email address associated with your account. You will receive further instructions in your email inbox. Alternatively, contact your workspace administrator for assistance . If you want to change your current password, follow these steps: Log in to your workspace using your credentials. Click your user icon and select Profile from the drop-down menu. Enter the new password in the New password and Confirm password fields . Click Save changes. Now you can log in with your new password. Note that your administrator may have disabled the option to change passwords. In that case, you must contact your administrator.", "tokens": 324}
{"title": "Your Rocket.Chat Account", "content": "Once you have logged in to your workspace, you will find various icons and options. This document explains your account icons and menu options, which are designed to enhance your navigation experience in the workspace . The main navigation menu consists of the following: User menu: Click your avatar icon to access the user menu. It provides access to your account management options and allows you to log out of the workspace . Home: Click the home icon  to navigate to your workspace\u2019s home screen. The home screen welcomes a user to the Rocket.Chat workspace. It is the first screen that is displayed after a user logs in successfully . It prompts users to start using their workspace and also provides links to some key features of Rocket.Chat. Search: The search icon  allows you to quickly find a user or room within the workspace . To perform a search, simply click on the search icon, and a search bar will appear. Type your query, and the related results are displayed in real-time . Directory: The directory icon  offers a convenient way to access the workspace's directory and search for channels, users, and teams within the workspace . Display: The display icon  controls the display settings of your workspace sidebar, allowing you to customize how chats are presented. Display: Customize the amount of information shown for chat rooms in your workspace sidebar . This allows you to show or hide your avatar and adjust the display to be more condensed or extended. Sort by: Adjust the order of chat rooms displayed in your workspace sidebar. You can sort rooms by Activity or Name . Group by: Organize rooms on the sidebar based on specific criteria. Available grouping options include Unread, Favorites, and Types. Create new: Click the create new icon  to create a new room in your workspace . You can create a new direct message, team, channel, or discussion. Administration: Click the kebab icon to access the administration panel. The options displayed for a user vary depending on the permission assigned to them . The Administration tab allows workspace administrators to manage workspace and omnichannel settings. The Apps tab provides the option to explore Rocket.Chat marketplace and manage apps in your workspace", "tokens": 460}
{"title": "Your Rocket.Chat Account", "content": ". The Audit tab is available for auditors in the workspace to audit messages and review the audit log history. The icons may be displayed differently if the Feature Preview - Navigation option has been enabled in your workspace . Access the user menu by clicking your avatar from the main menu. The user menu has four major sections: Profile overview: Displays your avatar, username, and current status . Status: Choose from various status options, including Online, Away, Busy, Meeting, and Offline. You can also set a custom status or select from those predefined by your workspace administrator . The custom status feature supports markdown for formatting text in italics or bold. Account: Manage your account profile, preferences, and appearance. Logout: Log out your account from the workspace . The Custom Status option allows you to customize your status by adding a custom status message. The main menu on top of the mobile app has three action icons: Create new: Create new rooms. Search: Search your whole workspace for rooms and users . Directory: Browse between all the channels, teams, and users in the workspace. The user menu in the mobile app is accessible by selecting the kebab menu in the top-left corner next to your workspace name . The menu displays your profile avatar and name. Additionally, it includes the following items: Edit status: Set a custom status. Chats: It displays the rooms you belong to, enabling you to select any and start a conversation . Profile: It takes you to the screen to manage your profile. Display: This takes you to the display settings screen, where you can choose between expanded or condensed messages, the sort order, and the grouping order of your rooms . Settings: This takes you to the app's settings screen, where you can change the language, default browser, and theme. Admin panel: You can access the workspace management settings if you have the admin role or permissions . In the next sub-articles, you will find information about each option to help you make the most of your Rocket.Chat account and personalize it according to your preferences.", "tokens": 441}
{"title": "User Guides", "content": "The user guide section will help you optimize your workspace and onboard you to use various features of Rocket.Chat. Learn ways to access and log in or register to your workspace. Find details about your Rocket.Chat account and how to manage your profile and account security preferences. Explore the types of rooms and how to make the most of their features. Learn more about the messaging options to optimize your chat experience.", "tokens": 89}
{"title": "Our Plans", "content": "As a leader in secure and compliant collaboration solutions, Rocket.Chat offers a range of plans to suit the diverse needs of its user base. Our plans are designed to provide optimal features and flexibility for individuals and small teams to large enterprises . This document details our Enterprise, Pro, Starter, and Community plans, helping you choose the best fit for your organization. The Rocket.Chat Enterprise plan is tailored for large-scale organizations requiring a comprehensive, secure, and highly customizable communication solution . This plan offers extensive scalability, advanced compliance tools, and priority support, catering to the complex needs of large enterprises and industries with stringent regulatory requirements . With its focus on high performance, reliability, and advanced integrations, the Enterprise plan is the optimal choice for organizations seeking a top-tier collaboration platform. Key features: Large-scale capacity: Tailored for extensive, compliance-focused environments . Advanced capabilities: Includes support for multiple server instances, microservices architecture, and sophisticated user management with an option to add guest users, enhancing flexibility for varied communication needs. Compliance tools: Enhanced tools for meeting regulatory and compliance standards . Customization and integration: Greater flexibility in customization and integration with existing systems. Priority support: Access to priority support and dedicated account management. Hosting: Standard, Premium, and Dedicated SaaS hosting . Scalability and reliability: Designed for high scalability and reliability, suitable for mission-critical operations. Ideal for: Large enterprises: Organizations requiring a robust, scalable, and compliant communication platform . High compliance industries: Ideal for sectors with stringent regulatory requirements, such as finance, healthcare, and government. Available from Rocket.Chat version 6.5 or higher Rocket .Chat Pro plan is designed for growing organizations seeking to leverage enhanced features and support for expanding communication needs. This plan offers a robust platform with increased user capacity, extended monthly active contacts, and additional premium features . Ideal for businesses scaling their operations, the Pro plan provides a perfect balance of advanced functionality and support, ensuring a seamless collaboration experience. Key features: User capacity: Designed for up to 500 users . Monthly active contacts: Manage up to 15,000 omnichannel contacts. Customization: Option to remove the Rocket.Chat watermark. Support & hosting: Standard support with an option for standard SaaS hosting . Ideal for: Scaling organizations: Best suited for businesses expanding their use of premium features. Enhanced support requirements: Additional support and hosting services for more complex operational needs", "tokens": 498}
{"title": "Our Plans", "content": ". Your workspace will be automatically provisioned a free Starter plan license when you install or upgrade to Rocket.Chat version 6.5 or higher. This plan offers free access to almost all of our premium features, for limited usage . As your usage of Rocket.Chat expands, or if you're updating an already scaled workspace, your workspace will be automatically updated to a trial license so that you can continue your Rocket .Chat usage while you evaluate upgrading to one of our paid plans \u2014 Pro or Enterprise \u2014 or, alternatively, you can choose to switch back to our Community. Key features: User capacity: Up to 50 users . Monthly active contacts: Supports up to 100 omnichannel contacts. Premium features: Comprehensive access to premium features, including read receipts and multiple queues. Notifications & apps: Unlimited push notifications and a wide selection of apps . Channel access: Full access to all channels, including WhatsApp (omnichannel). Matrix federation: Complete Matrix federation support. Usage and scalability: Ideal for smaller environments: Perfect for trial phases, small teams, or personal projects . Flexible scaling options: Upgrade or adjust your usage if you exceed the Starter plan limits. Open source commitment: The Community option remains steadfast for those preferring a free open-source solution. Rocket .Chat Community is a free open-source solution, self-hosted version of the Rocket.Chat platform. Key features: Open source: Free to use, modify, and distribute, with source code available on GitHub . Self-hosted: Allows hosting on your own servers for full data control and enhanced privacy. Core chat features: Includes essential functionalities such as messaging, group chats, and file sharing . Customization and integration: Offers options for customization and integration with various tools and services. Community support: Supported by a community of users and developers, with resources available through forums and online guides . Limitations: Advanced features and official support services are reserved for premium versions. Ideal for smaller teams and those with the capability to manage their IT infrastructure, Community is a versatile choice for organizations that prioritize the ownership and privacy of their conversations . For a detailed comparison of these plans, including specific features and pricing, please visit our pricing page. Rocket.Chat remains committed to evolving with the needs of the digital collaboration space . Our diverse range of plans ensures that organizations of all sizes have access to the tools they need for effective communication and collaboration. Our support team is readily available for the most current information or assistance.", "tokens": 519}
{"title": "Glossary", "content": "A dashboard for which only administrators have access, on which they can find all workspace settings. It refers to the main navigation options for the admin panel. A resource container to manage billing information and workspaces Document360 is a cloud-based help desk solution that enables users in businesses across various industries to create, collaborate and publish self-service knowledge bases for their products. Features include content management, guided problem solving, discussion boards, product cataloging, and more. Technically there's only one edition of Rocket.Chat so we don't use \"edition\" A glossary is a collection of words pertaining to a specific topic. In your articles or dissertation, it\u2019s a list of all terms you used that may not immediately be obvious to your reader. Your glossary only needs to include terms that your reader may not be familiar with, and it\u2019s intended to enhance their understanding of your work. Glossaries are not mandatory, but if you use a lot of technical or field-specific terms, it may improve readability to add one. A knowledge base is a self-serve online library of information about a product, service, department, or topic. The data in your knowledge base can come from anywhere. Typically, contributors who are well versed in the relevant subjects add to and expand the knowledge base. The content can range from the ins and outs of your HR or legal department to an explanation of how a product works. Appears on sidebar footer above watermark. Logo can be removed and customized regarless of whether a paid plan is active or not. Storefront for apps developed to be used in the Rocket.Chat platform. Paid license type", "tokens": 342}
{"title": "Rocket.Chat Developer", "content": "Rocket.Chat is more than just a communication platform. It's a versatile workspace that you can tailor to your needs. You can even integrate your custom apps using Rocket.Chat's webhooks to funnel data from external services. This guide is created to assist developers in building upon the Rocket.Chat platform. Here\u2019s what you can do: Learn the various deployment options to get Rocket.Chat up and running quickly and efficiently in your environment. To get started, set up your development environment for the various Rocket.Chat components: Rocket.Chat core server: This is the heart of the Rocket.Chat application. Learn how to get the source code and install the necessary dependencies for development. Desktop application: Learn how to set up and customize your development environment to build and run Rocket.Chat desktop application. Mobile application: This details setting up your development environment for creating the Rocket.Chat mobile application compatible with both Android and iOS platforms. Enhance your Rocket.Chat experience by: Creating Bots that interact with Rocket.Chat. You can also integrate external bots from the Rocket.Chat marketplace. Using Apps-Engine to create and host custom Rocket.Chat apps and integrate workflows with popular tools like GitHub and Jira. Building Omnichannel apps to interact seamlessly with customers across various channels. Take control of your Rocket.Chat workspace by: Using the Rocket.Chat API to extend Rocket.Chat's capabilities and tailor the platform to your specific needs. Leveraging Fuselage, Rocket.Chat\u2019s design system to create consistent and high-quality user interfaces. White-labeling or integrating iframe your workspace to suit your brand identity. Your expertise matters; regardless of your technical background, you can contribute to Rocket.Chat by creating issues, writing code, implementing new features, or fixing bugs, all in line with the contribution guidelines. You can also contribute to the documentation by providing feedback according to the feedback guidelines. Join the open server community and repositories to connect and collaborate. Get assistance from the global community and open channels. Visit the user guide to learn more about Rocket.Chat. Welcome aboard, and let's build better communication together!", "tokens": 450}
{"title": "Deploy Rocket.Chat", "content": "Deploying Rocket.Chat can be done in various ways to suit different environments and requirements. Refer to the Rocket.Chat deployment documentation for a comprehensive guideline on the different deployment processes, including prerequisites, installation steps, and configuration options. This documentation will help ensure a smooth and successful deployment. You can deploy Rocket.Chat using different options, which we will explore extensively in this section. Furthermore, we will discuss hosting, system requirements, optimization, and top-notch security measures for seamless deployment . Follow the System Requirements guide to deploy a successful and stable Rocket.Chat workspace. Select the appropriate system specifications for hardware, file storage, and MongoDB for your workspace . The following three modes of deployment are recommended for the production environment : Deploy with Docker & Docker Compose: Install and set up Rocket.Chat with Docker & Docker compose. Deploy with AWS: Use Docker to set up Rocket .Chat and streamline your deployment on AWS. Deploy with Kubernetes: Use the official Rocket.Chat Helm chart with Kubernetes. Deploy with Snaps: Snaps are also a convenient way to rapidly deploy a Rocket.Chat instance for development or discovery purposes . However, we do not recommend Snaps for managing the production environment. Refer to the deployment FAQ if you encounter any problem. If you are using a firewall, you may need to whitelist some URLs to communicate with our cloud services . See Firewall Configuration for the complete list. Once your workspace is deployed, learn how to update Rocket.Chat to the latest version or your preferred release. For additional information about the releases, visit our release page. You can scale Rocket .Chat workspaces to ensure optimal performance even with thousands of users and more. You can do this by deploying Rocket.Chat using microservices or several smaller components, each focusing on a single feature of Rocket.Chat . Find additional methods to deploy and test your workspaces: Deploy with Digital Ocean: Deploy Rocket.Chat with a one-click install from the Digital Ocean marketplace. Deploy on Ubuntu: Set up Rocket.Chat on Ubuntu, one of the most popular Linux distributions . Deploy on Windows 10: Install and run Rocket.Chat on your Windows 10 machine. Deploy on Debian: Support Rocket.Chat installation for all Debian-based distros. Deploy on CentOS: Install and run Rocket", "tokens": 499}
{"title": "Deploy Rocket.Chat", "content": ".Chat on CentOS Encountering any issues with your deployment? See the Deployment FAQ guide for more details. As of December 15, 2023, Rocket .Chat has ceased support for connections from cloud services and official mobile/desktop apps to workspaces running legacy versions outside our support window. Users on unsupported legacy servers are advised to upgrade to the latest Rocket .Chat version to ensure continued access to cloud, mobile, and desktop applications. Each Rocket.Chat version is supported for six months post-release.", "tokens": 108}
{"title": "Architecture and Components", "content": "Rocket.Chat's architecture is a comprehensive, multi-component system designed for robustness, flexibility, and scalability. The separate components(modules) can function independently but are designed to work together. This modular design enhances the application's flexibility and scalability . For instance, organizations can integrate specific modules like video conferencing or file-sharing functionalities based on their needs, ensuring a customized and efficient communication platform. Based on a client-server model, the server component is written in JavaScript using Node .js and uses MongoDB for data storage. This architecture ensures high performance and real-time communication, making it suitable for various use cases, whether deployed on-premises or in the cloud. For example, businesses can deploy Rocket .Chat to facilitate seamless real-time collaboration across different departments, and customer support teams can leverage Rocket.Chat to provide instant assistance to clients, ensuring prompt resolution of queries. Rocket .Chat's premium plans offer an advanced, scalable solution that extends the capabilities of the community workspace. It is specifically designed to cater to the needs of larger organizations and complex use cases, focusing on scalability, reliability, and ease of maintenance . Refer to the official guide for a comprehensive overview of these premium plans. Premium plan architecture A Rocket.Chat workspace can be deployed as a Monolith, with multiple nodes working together, or a Microservices architecture . Using the Microservices approach, each system component operates independently and offers several advantages, such as enhanced scalability, load balancing, and high availability. Additionally, the microservices architecture allows individual components to be updated or replaced without impacting the entire system . This ensures flexibility and reliability for Rocket.Chat deployments, making it an ideal solution for businesses, educational institutions, and customer support teams that require robust, scalable, and easily maintainable communication platforms. Rocket.Chat is designed to be extensible and interoperable . Apps are developed using the Apps-Engine, which interfaces with the Rocket.Chat server. Examples include the WhatsApp app and Google Calendar app. Integrations allow for the incorporation of other external systems and services using APIs and webhooks . Bridge services provide a way of seamlessly transmitting data and conversation with different conversational platforms or protocols. Rocket.Chat currently supports bridging with the Matrix protocol", "tokens": 485}
{"title": "Architecture and Components", "content": ". Files such as assets, user files, images, and other media files are stored locally on the server's system or over network services like Amazon S3 and WebDAV. This layered approach to data storage ensures efficient data management . See the standard architecture section for details about the other components. Community plan architecture A Rocket.Chat workspace can be deployed as a monolith, where a central processing unit manages logic and computation, user accounts, message storage, and communication with other components . This unified structure ensures the system's smooth operation by handling all essential functions in a single entity. This deployment type ensures consistent performance and reliability, making it an ideal choice for organizations that prefer a straightforward and cohesive communication platform . Refer to the standard architecture section for information on the remaining components. Rocket.Chat clients provide users with an interface on the web, desktop, or mobile application, connecting with the server mainly through HTTP requests and Websockets . Since all functionalities are exposed via REST APIs and WebSockets, integrating Rocket.Chat into your own user experience (UX) is straightforward . This multi-platform design ensures that users can access the chat application from virtually any device, whether on a computer at work, a smartphone on the go, or a tablet at home. This flexibility makes Rocket .Chat an ideal solution for organizations that need consistent and accessible communication tools across different devices and environments. Push notifications are integral to real-time communication platforms. Rocket.Chat's premium plans offer workspaces with unlimited secure push notifications, ensuring users receive timely alerts . These notifications are delivered to mobile devices via a cloud push notification gateway, facilitating real-time communication. For example, in team collaborations, members are immediately informed about critical updates or mentions, ensuring they stay engaged and informed . SMTP and email notifications can also be configured, providing users with flexible notification options. This means that users can receive notifications through traditional email channels, ensuring they never miss critical updates even if they are not connected to the app. Rocket .Chat uses the WebSocket protocol to enable real-time communication between the client and server. The WebSocket protocol is a high-performance, bi-directional communication protocol that enables instant data transfer, essential for a real-time chat application", "tokens": 474}
{"title": "Architecture and Components", "content": ". The use of a server proxy in Rocket.Chat adds an extra layer of security and efficiency to workspaces on any of Rocket.Chat's premium plan . Acting as an intermediary for client requests seeking resources from other servers, the server proxy enhances functionality by providing load balancing, caching, and security checks . For instance, in a large enterprise with heavy communication traffic, the server proxy can distribute the load evenly across multiple servers, ensuring smooth and efficient operation. It can also cache frequently accessed data, speeding up response times and improving user experience . Additionally, the server proxy helps protect the system from potential attacks by filtering out malicious requests. This added security layer is particularly valuable for organizations handling sensitive information, such as healthcare providers, ensuring that their communication platform remains secure and reliable. Rocket .Chat features a reactivity layer, which ensures real-time data updates in the system. This is crucial for a real-time chat application like Rocket.Chat, ensuring that users see the most up-to-date information in their chat interfaces. Rocket .Chat has components for managing user permissions. This is crucial for access control within the chat application, ensuring users can only access the features and data they are authorized to use. The Rocket .Chat Apps-Engine is a framework that enables users to create and host custom apps for Rocket.Chat, providing a tailored communication experience. This flexibility allows organizations to customize and enhance Rocket.Chat\u2019s capabilities to meet their specific needs. Rocket .Chat uses MongoDB as a database to store all chat messages, user information, and other system configurations and related data. Rocket.Chat supports federation using the Matrix protocol, an open standard for interoperable, decentralized, real-time communication. This integration allows Rocket .Chat to transmit data and conversations across different platforms on the Matrix protocol, enabling seamless communication between diverse systems. This interoperability ensures that Rocket.Chat users can maintain real-time communication across various platforms, enhancing collaboration and connectivity in a decentralized manner . User authentication, authorization, and access control can be managed using open standard protocols like OAuth, SAML, and LDAP. This integration with multiple authentication protocols ensures secure user login processes. This architecture demonstrates Rocket .Chat as a seamless and secure chat solution, designed for versatility and robustness. It accommodates various platforms, integrates with multiple protocols and systems, and helps you manage data effectively.", "tokens": 500}
{"title": "Deep linking", "content": "Rocket.Chat's deep linking feature allows mobile and desktop clients to handle links specifically designed for the Rocket.Chat application. This is achieved using a unique URL that the applications are registered to handle . The deep linking feature enhances the user experience by providing shortcuts to specific content or actions within the Rocket.Chat application. There are two types of prefixes available for deep linking: Go links: These are links that start with https://go.rocket.chat . They are universal and work across web, mobile, and desktop clients. Alternative prefix: This prefix is rocketchat:// and is only handled by mobile and desktop clients. In all examples, https://go.rocket .chat/ is interchangeable with rocketchat://. Adding a server: Deep links can be used to add a server to your client in one click, simplifying the deployment process. You can create a universal link that will add the server to the clients . Authentication Links: These links start with https://go.rocket.chat/auth and can include the server's host, the user's token, and the user's ID to be authenticated . This allows you to create a link that directs the user to the server and automatically logs them in . Examples: Link directly to the server: Link directly to the server and authenticate: Room links: You can link directly to a room using deep links that start with https://go.rocket.chat/room . These links require the host of the server and the rid (room id) of the room to be opened. Optionally, you can also include the path URL to be opened on the web . Example: Invite links: You can invite a user to a room through a link. These links start with https://go.rocket .chat/invite and require the host of the server and the path URL with the token param to be authenticated and opened on the web. Example: Conference call links: You can start a conference call using a deep link with the provider's information . These links start with https://go.rocket.chat/conference and require the host of the server, the path URL with the conferenceId param, the path URL of the call, and the name of the call provider. Example: Rocket .Chat's deep linking feature provides a seamless way to navigate to specific content or perform specific actions within the application, enhancing the user experience and making it easier for users to interact with the platform.", "tokens": 535}
{"title": "Two-Factor Authentication", "content": "Enhance your account security with Rocket.Chat's two-factor authentication (2FA). This robust feature requires you to provide both your password and a unique code, ensuring that only you can access your account . Users have a variety of sources for generating the two-factor code: Authenticator app: Users can configure apps like Google Authenticator or Authy to generate the 2FA code . Email: Users with verified emails can receive the 2FA code via email. Password: Although not a two-factor method in itself, the password serves as a fallback for cases where the user has no other 2FA option configured . However, this password fallback is disabled for the login process to prevent the system from requiring the password twice when the user configures no other 2FA method. Any Realtime API or REST call may require 2FA . Therefore, it's recommended that you create a wrapper for your calls to handle the errors and execute the request again, passing the required info . For more detailed information on how 2FA works with the Realtime API and REST API, you can visit the respective pages on the Rocket.Chat developer documentation . By default, after a 2FA validation, the client (identified by a hash of the user-agent and IP address) will be trusted for 5 minutes. This duration can be adjusted in the workspace administration settings . Some methods may override this feature, requiring 2FA for every API request to that method or endpoint. For example, the methods for disabling 2FA by email and logging in always require 2FA . We use the error code totp-required for compatibility purposes; however, this does not mean the error is related only to TOTP. As a result, we provide additional details to identify the required action", "tokens": 374}
{"title": "Two-Factor Authentication", "content": ". Personal Access Tokens serve a vital function in the Rocket.Chat's 2FA system. Users can generate these tokens, which do not expire and can bypass the 2FA requirement . This is especially useful for users who need to maintain long-term integrations or automated processes with a Rocket.Chat account. However, keeping these tokens secure and confidential is crucial, as a compromised token could grant unrestricted access to the user's account . In summary, Rocket.Chat's 2FA feature and Personal Access Tokens strike a balance between security and convenience. They provide robust protection for user accounts while enabling seamless integrations and interactions with other applications and services.", "tokens": 140}
{"title": "Customize and Embed", "content": "To enhance user experience, Rocket.Chat workspaces can be personalized to meet your requirements, brand identity, and workflow. You can also embed Rocket.Chat into various applications and websites. In this section, you can find more information about the following customization and embed options: For a truly unique experience, Rocket.Chat allows white labeling to ensure the workspace aligns with each organization's brand identity. White Labeling on Rocket.Chat can be done in several ways, including: Changing the platform homepage display: Customize the look and feel of the homepage to reflect the organization's branding. Customizing logos, icons, images, and other assets: Replace default assets with ones representing the organization. Modifying color schemes: Use color variables to change the platform's color palette to match the organization's visual identity. Extend your existing websites or applications by embedding Rocket.Chat and seamlessly integrating communication into the user experience. This can be done through the following methods: Embedded layout: Create focused, immersive communication experiences within a single channel or room. It's particularly useful when combined with iframe integration. Iframe integration: Embed a specific Rocket.Chat channel within an application using an iframe, allowing users to access Rocket.Chat functionalities without leaving the application. Plan your customizations: Before making changes, outline your desired look and functionality to ensure consistency. Test in a staging environment: Always test customizations in a non-production environment first to avoid disruptions. Leverage community resources: Explore the Rocket.Chat community or forums for inspiration and solutions. Whether you're looking to customize the interface or embed Rocket.Chat in any platform of your choice, Rocket.Chat offers the flexibility and tools needed to create a unique Rocket.Chat experience that aligns perfectly with your goals. Remember to balance customization with maintainability and performance to ensure a smooth user experience.", "tokens": 396}
{"title": "Embedded Layout", "content": "The embedded layout feature of Rocket.Chat is a powerful tool for creating focused, immersive communication experiences within a single channel or room. When combined with Iframe integration, it allows for seamless interaction with a specified channel embedded within an application. With Iframe integration, you can log in the user and display a specified channel embedded within your application. This means the user can interact with the channel as if they were on the Rocket.Chat platform, but within the context of your own application. This seamless integration provides a cohesive user experience, allowing for focused communication and collaboration. When embedding Rocket.Chat in your site, you can change the layout by adding ?layout=embedded after your server URL. For example, https://open.rocket.chat/channel/general?layout=embedded. It changes the workspace layout to a more \"simplistic\" view, hiding the left sidebar menu and room top navbar. To enable the top navbar of the room in the embedded layout, Navigate to Administration > Workspace > Settings > Layout > User Interface Enable Show top navbar in embedded layout. When a URL is set to embedded mode, the view will be restricted to a single room, as the user won't have access to the channel lists. When combined with Iframe integration, the embedded layout works as expected because you can authenticate the user and only show a specified channel embedded in the application. You can test this feature by going to https://open.rocket.chat/channel/general?layout=embedded. To prevent users from accessing other channels, relying on the embedded layout alone won't suffice. Users could alter the URL using browser tools. Therefore, it's recommended to edit the user permissions to restrict access to other channels. Whether you're looking to enhance the communication capabilities of your application or provide a distraction-free environment for focused discussions, the embedded layout feature is a valuable addition to your toolkit.", "tokens": 417}
{"title": "White Labeling", "content": "As a robust open-source communication platform, Rocket.Chat offers extensive customization options, including white-labeling. This enhances user experience, promotes brand consistency, and adds a unique, personalized touch to your communication platform. We recommend cloning the Rocket.Chat GitHub repository to customize Rocket.Chat. This allows building on the existing codebase and making necessary changes based on requirements to the following: Add new packages Build custom UIs Extend logic, etc. Customize colors This approach ensures that the core functionality remains intact while allowing individualized adjustments. Due to the unique needs of each user, it is difficult to provide detailed information on the specific customizations that can be made with the Rocket.Chat codebase. The extent and nature of these customizations will depend on individual requirements and preferences. Check out the open-source projects to explore more customization options available across the different Rocket.Chat platforms. Deploying a customized version of Rocket.Chat is straightforward. If you're planning to build a custom deployment option, such as a Docker image or snap package, you can refer to the Rocket.Chat Dockerfile and build script. These resources provide all the necessary information and tools to kickstart your customization journey. Additionally, you can personalize your workspace's layout using custom CSS and JavaScript and create email templates for outgoing emails. For basic customization without altering the source code, explore the available white-labeling options. By leveraging the white-labeling features, you can tailor your workspace\u2019s appearance and functionality to match your brand identity and specific needs, with or without altering the source code.", "tokens": 338}
{"title": "Customizing Colors", "content": "Customizing colors are applicable from Rocket.Chat v6.0 One of the key aspects of white-labeling your Rocket.Chat workspace is the ability to customize colors. This feature allows you to ensure that your Rocket.Chat workspace aligns with your brand's color palette, further enhancing the sense of brand consistency and identity. Rocket.Chat provides a comprehensive list of color variables that you can adjust to match your brand's color scheme. These variables control various workspace elements, including stroke colors, surface colors, font colors, status colors, shadow colors, and button colors. Colors are customizable through the custom CSS field in the admin panel. Go to Administration > Workspace > Settings > Layout > Custom CSS. button: UI elements it's responsible for. background: part of this UI element. primary: type of UI element. default: state of this UI element. Append !important if you want to overwrite existing CSS fields. This is due to the CSS specificity rules. For details, refer to !important. By adjusting the color variables, you can ensure that your Rocket.Chat workspace aligns perfectly with your brand identity, providing a consistent and engaging user experience.", "tokens": 252}
{"title": "Iframe Integration", "content": "An iframe (inline frame) is an HTML element that allows you to embed another web page within your own web page. This can be used to display content from other websites, such as a chat room, without having to leave your own website. Rocket.Chat offers a multitude of customization and embedding options to seamlessly integrate its functionalities into your existing digital ecosystem. In Rocket.Chat, iframe integration allows you to embed a chat room from your Rocket.Chat workspace in an iframe on your own website. This can be a great way to provide your users with a seamless chat experience, without having to leave your website. Rocket.Chat's iframe integration goes beyond embedding \u2013 it lets you seamlessly integrate Rocket.Chat into your app. You can authenticate users through your login page, eliminating the need for Rocket.Chat login. This ensures a smooth user journey, boosting satisfaction and engagement. Some key features of Rocket.Chat iFrame includes the following: Iframe user authentication: To authenticate users via iframe integration, navigate to Administration > Workspace > Settings > Accounts > Iframe. Toggle on the Enabled option and proceed with configuring the iframe auth. It allows you to set up user authentication through your own login page. Embedding Rocket.Chat: Depending on your needs, you can embed Rocket.Chat in your application using an iframe. This provides a seamless integration of Rocket.Chat's features into your application's interface. Event listening: While embedding Rocket.Chat in your app, you can listen to events. To do this, navigate to Administration > Settings > General > Iframe Integration. You can enable send (events) or receive (commands) depending on your needs. This feature allows your application to interact with Rocket.Chat, providing a dynamic and interactive user experience. By leveraging these features, you can significantly enhance the communication capabilities of your application, driving user engagement and satisfaction.", "tokens": 426}
{"title": "Configuring iFrame auth", "content": "Iframe authentication in Rocket.Chat enables user authentication via your custom login page in your web application, rather than the Rocket.Chat login page. This can be useful if you want to have a single sign-on system for your website and Rocket.Chat . This guide will walk you through setting up iFrame authentication in Rocket.Chat. To enable iframe integration in your workspace, Navigate to Administration > Workspace > Settings > Accounts > Iframe and toggle on enabled. When enabled, Rocket .Chat communicates with a third-party application to verify if a user is logged in. If the user isn't authenticated, Rocket.Chat displays the iFrame URL within an iFrame, enabling them to log in on the third-party website . This process ensures the user's authentication not just on the third-party site but also within Rocket.Chat. You can use your own login page or API to log people into Rocket.Chat using iframe auth. If Rocket .Chat is enabled on your workspace, it sends a XMLHttpRequest to the iFrame API URL to see if the user is logged in at the third-party application. If it doesn't succeed, then Rocket .Chat presents the iframe URL within an iframe for the user to log in on the third-party website, therefore authenticating the user on Rocket.Chat as well. For more information on the iframe authentication flow, see this NodeJs example app", "tokens": 319}
{"title": "Configuring iFrame auth", "content": ". Configuring API URL and API Method Rocket.Chat utilizes an API URL and API Method to facilitate user login and authentication verification within your third-party application . The API URL is an endpoint on your third-party application that is responsible for confirming the user's login status. The API Method is used to select the submission method Rocket.Chat will use to submit information to the API URL, e.g., POST . When a user is logged into the third-party application, the API URL connects with Rocket.Chat and sends back a JSON object containing a token or loginToken property . If the user is not logged in, the API URL responds with an empty body and a 401 status code. The property returned by the API URL varies based on how the third-party application interacts with Rocket.Chat. Interacting with Rocket .Chat Iframe Interaction with Rocket.Chat iframe can be through using Rocket.Chat API or managing MongoDB directly. Using Rocket.Chat API: You can use Rocket .Chat's REST APIs to authenticate the user if you have the user's password stored or if it is the same between your third-party system and Rocket.Chat. This way, you receive an authToken back from Rocket .Chat that should be returned as loginToken by your endpoint. If the user does not have a Rocket.Chat account, you can either create a user as an admin or register them using the Rocket.Chat REST API . Managing MongoDB directly: Here, you have access to Rocket.Chat's database, you can connect there directly and manage the user records yourself. It is useful if you already have MongoDB on your stack and don't want to learn Rocket.Chat's API", "tokens": 382}
{"title": "Configuring iFrame auth", "content": ". The endpoint should connect to Rocket.Chat's MongoDB database and ensure the generated-token is saved on users collection on the corresponding user record. The generated-token should be saved on the field path services.iframe.token . Here is a snippet of the user record: Here is a snippet of the response: IFrame URL IFrame URL is the URL of the webpage you want to embed as the login page of your Rocket.Chat instance . It can be developed using any programming language/framework of your choice. This login page communicates back to Rocket.Chat using postMessage API. When a user logs in to your website or application, you need to authenticate them with Rocket .Chat so that they can access the chat functionality. This authentication process involves sending a request to Rocket.Chat's API URL endpoint with the user's login credentials. Once the user is authenticated, render the chat interface within an iframe on your application . To do this, return a JavaScript code to execute within the iframe and handle the authentication on the Rocket.Chat side. This Javascript code varies depending on how you logged in the user. If you have used Rocket .Chat's APIs to log in the user or already have the user's token saved in your end, return: If you have saved user's token connecting directly to Rocket.Chat's database on the user's field services.iframe .token: Using OAuth configured on Rocket.Chat's auth Suppose you have OAuth services configured on Rocket.Chat, you can trigger them from within your login page as well. To implement this authentication, you will receive a postMessage back from Rocket .Chat after triggering the OAuth authentication with the user's credentials response from the OAuth service. You need to manage the user creation/authentication on Rocket.Chat's database by yourself, as described earlier", "tokens": 422}
{"title": "Configuring iFrame auth", "content": ". Facebook The reply will be either a postMessage or an error back to your page. PostMessage Error 2 . Google The reply will be either a postMessage or an error back to your page . PostMessage Error The reply will be either a postMessage or an error back to your page. PostMessage Error Login in Rocket.Chat with the default account system while in development When you activate the iframe auth, you cannot access Rocket .Chat's default login page on your workspace. However, if you still want to use your Rocket .Chat's credentials to log in on your workspace, you can do that by opening the browser's developer console and executing the following code: With the iframe authentication properly set up, let's now move forward to testing the iFrame authentication.", "tokens": 186}
{"title": "Testing the iFrame Authentication", "content": "After you've successfully completed configuring iFrame auth, it's essential to confirm its functionality by testing. This guide offers a concise outline for testing iFrame authentication within Rocket.Chat. The process entails utilizing a test tool created by the Rocket.Chat team. The test service can be used as an example of how to set up the iFrame auth calls to Rocket.Chat. This test tool is designed for your localhost enviroment. To test your iFrame auth configuration, Clone the GitHub repository for the iframe-auth-example test service. Navigate to the project directory and run these commands to start the project: The project is running on port 3030. On your Rocket.Chat workspace, navigate to Administration > Workspace > Settings > Accounts > Iframe. Toggle on Enabled. Add the iFrame URL and API URL. Navigate to the login page of the test project, which is accessible at localhost:3030/login for this example. Proceed to test the iFrame auth by submitting a username and password. The test project requires the following hardcoded credentials for login: Username: new-user Password: new-users-passw0rd Change the currentUsername to ' true' at line 105 in the index.js to enable re-login with the same user. Note that modifying the code allows any existing Rocket.Chat user to be used. To learn more, see this pull request. Once the iframe-auth-example service runs, the iframe authentication calls are executed. It returns unauthorized if the credentials are not valid. By adhering to the outlined steps and leveraging the provided test tool, you can confirm the successful integration of iframe authentication into your Rocket.Chat setup.", "tokens": 391}
{"title": "Adding a Rocket.Chat chat room to your web app", "content": "After configuring iFrame auth, you can explore Rocket.Chat, customize, and embed by adding a Rocket.Chat room to your webapp. Iframe integration in Rocket.Chat allows you to embed chat rooms from your Rocket.Chat server on other websites or web apps . Once iframe integration is enabled on your Rocket.Chat server, you can connect your application to the server. Prerequisites A running Rocket.Chat server with at least one room. See the official deployment guide to explore various ways of setting up your Rocket.Chat workspace . Activate the Iframe integration To enable the Iframe integration setting in your Rocket.Chat server, Navigate to Administration > Workspace > Settings > Accounts > Iframe. Toggle on the Enabled option . Fill in the iframe URL with the application URL where you want to integrate the current Rocket.Chat application. Add the API URL, which is essential for Rocket.Chat to verify that a user is logged into the application . If a user from your application goes to a web page containing the Rocket.Chat Room iframe, the Rocket.Chat server will use this API endpoint to verify the following: The user is identified on your web app . The credentials provided are used to attempt a login into the Rocket.Chat server. Click Save Changes. This demo sample uses http://localhost:3030/ and assumes the application is running on port 3000 . Navigate to Administration > Workspace > Settings > General. Disable Restrict access inside any Iframe. Disabling this feature is a security hole in your Rocket.Chat server. It allows anyone to load the Iframe from your server into their app . Enabling it allows only your application's URL to use the Iframe. Click Save Changes. The user must have an account and be identified to use the iframe. For authentication, there are two possibilities: The user already has a Rocket .Chat account The user does not have a Rocket.Chat account It is essential to know how to manage these cases to ensure Rocket.Chat can identify the user of the iframe. You can test iframe authentication with our sample demo on GitHub. Clone the GitHub repository", "tokens": 472}
{"title": "Adding a Rocket.Chat chat room to your web app", "content": ". Navigate to the cloned directory and open it in your IDE. Install the demo packages. Do not launch the demo app directly now; you still need to make some modifications! Before using the demo code, there are still some modifications to do . Update the index.js file with this code: Create a new file, home.html, in the root directory. Update the home.html with this code: When a new user is created, they are redirected to the home.html page", "tokens": 107}
{"title": "Adding a Rocket.Chat chat room to your web app", "content": ". Navigate to Administration > Workspace > Settings > Accounts > Iframe; the API method is POST. It must sync with the request methods in our backend for the link added as the API URL. The demo backend for handling the Rocket .Chat server is /sso POST request. In index.js, the app.post('/sso' ... ) function in the backend only runs once the user has been on the page containing the iframe, which is home.html in the demo . It also verifies that the user is logged in to Rocket.Chat. The axios.post('http://localhost:3000/api/v1/users.register'....) function makes a POST request to the Rocket .Chat server API with the user's credentials to create a new user and log the user in to obtain the authToken. The axios.post('http://localhost:3000/api/v1/login' ... .) function onwards makes a POST request to the Rocket.Chat server API with the user's credentials to create a rocket.chat session for the user. The login credentials must match those previously entered by the user . For the demo, we will put them back as we created them. Run this command to launch the demo app: The demo application is currently running on port 3030. The index.js file is the backend of our demo, while login .html is the front end of the demo. The POST /login and POST /sso endpoints in index.js are significant for iframe integration. After receiving the credentials through the form on the front end, pass them through the authentication logic of your application . The sample demo doesn't have authentication. However, your application should have one to manage users. When the credentials are passed through authentication in your application, they are used for two purposes: They are used to connect to the Rocket .chat app via the Rocket.Chat server /login endpoint. You can copy and paste the demo code into your application. If Rocket.Chat has not found a user, it creates one with the identifiers received by your application. The home", "tokens": 475}
{"title": "Adding a Rocket.Chat chat room to your web app", "content": ".html file has two critical features, which include the following: The button and the function of the button: See fast-loading to learn more . The iframe: When the user arrives on the page, the iframe will load the src of the iframe and call the URL to Rocket.Chat server. Then, Rocket.Chat requests to the SSO endpoint (http://localhost:3030/sso) . It checks if the user is logged in or not. Once the user is successfully identified, Rocket.Chat stores the token in the database and the user credentials in the users' browser local storage . Now go to localhost:3030/login, enter new credentials, and click Submit . Use a private browser so the iframe doesn't use the credentials in your local storage and connect to your account instead of the one you are trying to create in the demo app. Rocket .Chat is designed as a client-side rendered application to ensure a seamless user experience. Upon arrival, the entire application loads in the user's browser, eliminating any loading waits when switching rooms within the application . However, when using an iframe, the experience may differ slightly as there may be some latency when changing rooms within the iframe . To mitigate this, optimize the iframe loading process to ensure that the entire iframe loads completely upon the user's initial visit to the page. Doing so eliminates any latency and provides a smoother user experience for those using Rocket.Chat through an iframe. Rocket", "tokens": 339}
{"title": "Adding a Rocket.Chat chat room to your web app", "content": ".Chat provides commands for iframe integration. In these commands, there is postMessage(). Using this command in your client-side code, the iframe content Window will route the client side to a chat room, making the switching instant without loading . To use these commands, you must change a setting in your Rocket.Chat server. Go to Administration > Settings > General > iframe Integration Toggle on Enable Recieve. Add the URL of your application that receives commands in the Receive Origins field . It allows the iframe's parent window to send commands to the Rocket.Chat server. For this demo, use http://localhost:3030/. Once saved, it allows the iframe's parent window to send commands to the Rocket.Chat server . In home.html, review the function for clicking the Go To General button. This command navigates directly to the general room of the Rocket.Chat server. Once the necessary permissions are enabled on your server, you can switch rooms without reloading the page . This allows you to seamlessly add and manage chat rooms within your web application. Rocket.Chat provides more than the ability to have an embedded room. You can use the application code and server permissions to use specific commands and events the embedded application triggers . Go to home.html and add the x() function to the tag script. Replace the <button> tag in home.html with this: You can now click on the button in the embedded room and change your status . Iframe integration: Sending commands Rocket.Chat provides events in the iframe. These events trigger different actions by the user. To enable the sending of iframe events, Go to Administration > Settings > General > Iframe Integration. Toggle on Enable Send . It allows your Rocket.Chat server to send events to the parent window of the iframe. In the Send Target Origin field, add * or the URL of your application. Click Save Changes. In home .html , add this script: Go to your embedded room, and type \u201c#<ARoomName>\u201d in the message field. Click Enter . If you click the link and open a new room, an alert appears on your screen that you have opened a room. Iframe Events Currently, the application is in embedded mode. You can only see the room you're in . The left sidebar and room header are not present. After disabling, you can see the entire Rocket.Chat window in your application.", "tokens": 530}
{"title": "Iframe EventsIframe integration: Sending commands", "content": "When the iframe integration is enabled, some events are triggered. These events include the following: Event name Description startup Fired when an iframe initializes notification Fired when a user receives a notification unread-changed-by-subscription Fired each time a user's subscription record changes (i.e.: unread counts, etc) unread-changed Fired when the pages title changes room-opened Fired when a room is opened new-message Fired every time the opened room receives a new message click-user-card-message Fired when the user clicks on a username link click-mention-link Fired when the user clicks on a mention link click-message-link Fired when the user clicks on a posted link click-action-link Fired when the user clicks on an action link button (i.e.: \"click to join\" to video conferences) Here is a sample code that listens to events fired from Rocket.Chat opened on an iframe: When integrating an iframe into Rocket.Chat, you can also send commands to the embedded content using the postMessage Rocket.Chat API. It allows you to interact with the content in real time and perform various actions. Command Params Description go - path string Change url login-with-token - token string Allow login with token call-custom-oauth-login - service string Allow login via oauth methods set-user-status - status string Set the status of the user logout Log the user out of their current session Here is an example of how to send a command through a Rocket.Chat iframe: Another useful example is setting user status in an iframe embedded in Rocket.Chat:", "tokens": 360}
{"title": "Open-Source Projects", "content": "Rocket.Chat enhances team collaboration and communication by providing versatile open-source usage options: desktop applications for physical locations, mobile apps for on-the-go access, and a robust server solution. This section introduces the three options of Rocket.Chat and guides on getting started with each. This is the core of Rocket.Chat. With the server, you can: Deploy Rocket.Chat server application on-premise or on the cloud Set up a development environment on Gitpod, Linux, etc., to contribute to Rocket.Chat Customize the server application to suit your brand needs Visit the server documentation for in-depth information on carrying out these processes. Rocket.Chat\u2019s desktop application is a multiplatform solution that works on platforms like Windows and macOS. Check out the desktop application documentation for details on how to: Develop a Rocket.Chat desktop application. Use the Desktop white labeling to customize the desktop application to suit your needs. Keep the conversation going on the move with Rocket.Chat\u2019s mobile apps available for Android and iOS. The mobile application is built using React Native, allowing you to develop for all mobile platforms from a single codebase. Visit the mobile application documentation to: Set up your mobile development environment and test the application. White-label your application to suit your needs. Regardless of the chosen open, each of the open-source applications offers developers and users customization options to meet individual or organizational needs. Rocket.Chat thrives on community contributions. Whether you're a developer or an enthusiast, your input helps us grow and improve. Join the community to get involved. Rocket.Chat community forum Rocket.Chat open server Read the contribution guidelines to get started on contributing to Rocket.Chat.", "tokens": 352}
{"title": "Server", "content": "The Rocket.The chat server, powered by Node.js, MongoDB, and Meteor, ensures you enjoy a seamless, scalable, and secure experience. Designed to meet the needs of any organization, whether small or large, our server-side features provide you with the essential tools to enhance productivity and streamline your workflows, making your team's collaboration more efficient and effective. Rocket.Chat clients communicate with the server in real-time using APIs and WebSockets. Data is stored in MongoDB, a NoSQL database, and files can be stored locally on the server or on a network service like Amazon S3. For a deeper understanding of how these components work together, see architecture and components. Using this server document, you can: Explore Rocket.Chat server further by checking out the server source code on GitHub along with the repository structure document. Set up your server environment to begin extending or contributing to Rocket.Chat. Customize your server to suit your organization\u2019s needs. Explore the server architecture to understand the server structure. Rocket.Chat offers various deployment methods, including Docker and AWS. The deployment document provides a comprehensive overview of the deployment process, covering prerequisites, installation steps, and configuration options. By gaining a deep understanding of the server's role and capabilities, developers can more effectively contribute to and leverage Rocket.Chat's features. To learn more about contributing to Rocket.Chat, see participate in Rocket.Chat development.", "tokens": 310}
{"title": "Repository Structure", "content": "Gaining a deep understanding of Rocket.Chat\u2019s server repository structure is a foundational requirement for developers. The Rocket .Chat server's\u00a0architectural design\u00a0prioritizes modularity and clarity, reflected in the repository structure, segregating functions for diverse developer levels. Rocket.Chat uses a monorepo\u00a0to house essential code and packages required by various Rocket .Chat projects, such as the\u00a0Apps-Engine and\u00a0Livechat. This makes maintaining and sharing the code easier and allows developers to work on different projects simultaneously. Rocket.Chat builds its components using the\u00a0Meteor framework\u00a0and\u00a0React .\u00a0To understand the Rocket.Chat repository structure, you should be familiar with the\u00a0Meteor and\u00a0React project structures. In the near future, Rocket .Chat will move away from Meteor to a more manual structure, which will allow it to be more flexible and scalable. This document helps you navigate and understand the server\u2019s components, directories, functionalities, and organizational principles . apps/meteor/app/: This directory shows the various features Rocket.Chat offers. Each primary folder here contains a client/ and server/ subdirectory, housing feature-specific code for the feature, respectively . Occasionally, a lib/ directory contains code usable by both the app's server and client. To learn more, see the Meteor guide. Rocket.Chat is incorporating new features that won't adhere to the legacy Meteor structure within the apps/ directory . These new features will adopt a distinct structure, while the existing code structure will continue to be mantained. apps/meteor/client/views/: Every Rocket.Chat page a client-side user interacts with is a result of multiple components working together . A good starting point for beginners to see how this works is the apps/meteor/client/views/ directory, which contains all of the views for Rocket.Chat. The root view of Rocket.Chat is the first file that is executed when a user opens Rocket .Chat in their web browser can be found at apps/meteor/client/views/root/AppRoot.tsx. apps/meteor/client/lib/: This is a collection of objects that are reused on all client sides . This exists to limit code duplication, encourage contributors to use the code already in the codebase, and avoid re-implementing logic or re-creating functions", "tokens": 482}
{"title": "Repository StructureServer Environment Setup", "content": ". apps/meteor/packages/: This directory houses any meteor packages used in the project or customized for a specific purpose. Notable examples include the meteor-accounts-linkedin for LinkedIn login service, rocketchat-i18n for internationalization, etc . apps/meteor/server/methods/: This directory contains all meteor methods apps/meteor/server/lib/: This directory holds versatile functions related to server-side code. Now that you are familiar with the repository structure, you can confidently continue with your server environment setup . You can create a Rocket.Chat server development environment to modify and contribute to the Rocket.Chat source code, regardless of your system. Install and configure necessary dependencies on your machine following the steps for your specific operating system. \u2705 To deploy Rocket.Chat for your day-to-day use, follow the recommended methods in the official deployment guide. Gitpod: Use the online development environment pre-configuration to develop Rocket.Chat server. Linux: See how to set up a Rocket.Chat server development environment on any Linux distribution. Mac OSX: Learn how to set up a Rocket.Chat server development environment on Mac. Windows 10: Set up a Rocket.Chat server development environment on Windows.", "tokens": 263}
{"title": "Linux and Windows Rocket.Chat Development Environment", "content": "Setting up a Rocket.Chat development environment allows you to contribute to the platform\u2019s development. This document will walk you through the essential steps to get your development environment up and running efficiently on Windows and Linux . At least 12GB RAM is required for building in a development environment. For deployment and other uses, 2GB RAM suffices Use a standard user account (not root) for setup . Avoid using sudo to prevent potential file permission issues The sample Linux distribution for this guide is Ubuntu. However, the steps are similar for other Linux distributions . Software requirements Windows 10, version 2004 or above Install and configure WSL 2 following the Microsoft documentation. The default Linux distribution to be installed is Ubuntu. Download and install the latest Linux kernel updates Install nvm to manage your Node .js version Machine requirements To set up Rocket .Chat development environment, you'll require a Windows machine that meets the following minimum specifications: 12 GB of RAM (16+ GB highly recommended) Four or more cores on CPU (at least 3 GHz boosted, 4 .2 GHz or higher recommended) 80 GB of available fast SSD storage (PCIe 4.0 NVMe SSD recommended) All the steps for the Windows development environment must be performed within the Ubuntu WSL 2 shell", "tokens": 271}
{"title": "Linux and Windows Rocket.Chat Development Environment", "content": ". Open Ubuntu shell on your Windows or Linux environment and update the distro by running this command: Install the necessary build tools: Fork the Rocket.Chat repository on GitHub Open the Ubuntu shell and navigate into the (~/home/your username) directory . Clone the forked repository by running the command below: All the steps below must be completed within the Rocket.Chat root folder. Run cd Rocket.Chat to achieve this. Confirm the Node .js version required by your RocketChat project by executing the following command: Install Node.js, replacing x.x.x with the required Node.js version number obtained from the step above. Check the node version installed by running: Ensure this is the required version . Install Yarn by running: After installation, you can verify Yarn's version with: Confirm the Deno version version required by your RocketChat project by running this command: Install the required version of Deno, replacing x.x .x with the appropriate number: For alternative installation scripts, check the official Deno installation documentation. Confirm you have the correct version installed by running: Ensure Deno is added to your system's PATH Note: Depending on the Rocket .Chat version, you may need to install a specific Meteor version: For Rocket.Chat <=6.x.x, use Meteor 2.x For Rocket.Chat >=7.x.x, use Meteor 3.x Always verify the required Meteor version for your Rocket .Chat instance by checking the .meteor/release file. Confirm the Meteor version version required by your RocketChat project by running this command: Install Meteor with the command below, replacing x .x with the correct version number: After installation, verify the version by running: You should see the installed version displayed in your terminal. Navigate into the Rocket .Chat directory and install all the dependencies by running these commands: Navigating into the specified directory above is necessary, otherwise, MongoDB won't start When completed, build and run the server by executing this command: The first build can take ten or more minutes . Subsequent dev builds will take lesser time. During the build, you may notice warnings about peer or transitive dependencies", "tokens": 466}
{"title": "Linux and Windows Rocket.Chat Development Environment", "content": ". These are typically safe to ignore unless you are developing the specific features or modules that require them A successful running server will open up port 3000 on your machine where you can access Rocket.Chat using any browser or the Rocket .Chat client app through http://localhost:3000. The recommended IDE is Visual Studio Code. To edit Rocket.Chat files, Launch your IDE and open the cloned repository folder in your IDE When you make changes to Rocket .Chat the server will automatically rebuild Sometimes, changes can shut down the server. If that happens, run yarn dsv again If you encounter any issues during the setup, refer to the development environment troubleshooting guide for assistance . Now that your development server is running, you can contribute to the Rocket.Chat server! See participate in Rocket.Chat development to learn more about Rocket.Chat contributions.", "tokens": 178}
{"title": "Gitpod Rocket.Chat Development Environment Setup", "content": "The quickest way to set up a Rocket.Chat development environment is by using Gitpod. Gitpod offers a shared workspace for open-source project developers, including those working on SaaS projects like Rocket.Chat . It provides a hosted development environment accessible through a web browser, allowing you to contribute to Rocket.Chat conveniently. This documentation is based on Gitpod Flex. Follow the steps below to set up your Rocket.Chat development environment in Gitpod . Create a GitHub account Sign up for a Gitpod account Generate a GitHub Personal Access Token (PAT) if you don\u2019t already have one Set up a runner for your Gitpod development environment using one of the following options: Gitpod Desktop for local development Remote self-hosted runners such as AWS Fork the Rocket .Chat GitHub repository to your GitHub account Once your runner is ready: Navigate to Gitpod\u2019s environment setup page Provide the URL of your forked Rocket.Chat repository Specify the environment class for your setup, i.e ., the runner Generate a PAT (if you don't already have one) Add this token to your Gitpod account to enable authentication and repository access Start the Gitpod environment for your forked Rocket.Chat repository . The environment launch may take a few minutes as it processes the following: Clone the repository Load secrets (environment variables) and automation Start the development container Open Rocket .Chat in VS Code: Once the environment is running, click Open VS Code in the top-right corner of the Gitpod workspace. This will open the Rocket.Chat project in VS Code Start the Rocket .Chat server: In the Gitpod environment page, scroll down to the Services section. Click on the Start button to build the project; this will run the necessary build commands Verify port 3000: Open the terminal in VS Code . Navigate to the Ports tab and confirm that port 3000 is open with the dev container origin Access the application: Open your browser and navigate to http://localhost:3000. You should see your Rocket .Chat app running Make changes: Edit files directly in the VS Code instance. Rebuild the project by starting or stopping services as needed to see your changes reflected in the browser. Always pull the latest changes from the Rocket .Chat upstream repository to stay up to date. Following these steps, you can set up your development environment and start contributing to Rocket.Chat. To learn more about the contribution process, check out the contribution guide.", "tokens": 524}
{"title": "Mac OSX", "content": "You can set up and configure a Rocket.Chat development environment on your macOS system, whether running on Apple Silicon or non-Apple Silicon chips . Install the following: Yarn Homebrew Install Node Version Manager (nvm) with this command: Confirm that your nvm version is 0.39.2 or higher by running the command nvm --version in your terminal . Only Deno versions >=1.37.1 and <2.0.0 are supported. Install by running: Ensure that Deno is added to your system's PATH . To verify the installation, open a new terminal and run the command, deno. If it\u2019s successfully installed, you will see the Deno version information. For alternative installation scripts, check the official Deno installation documentation . Install Meteor with the command below - \u00a0replacing \u201cx.x\u201d with the correct version number: Note: Depending on the Rocket.Chat version, you may need to install a specific Meteor version: For Rocket.Chat <=6.x .x, use Meteor 2.x For Rocket.Chat >=7.x.x, use Meteor 3.x Always verify the required Meteor version for your Rocket.Chat instance by checking the .meteor/release . After installation, verify the version by running: You should see the installed version displayed in your terminal. Fork the Rocket.Chat repository on GitHub . Clone the forked repository to your local dev box using this command: Navigate into the project directory and configure a remote to connect your local copy and the original Rocket.Chat repository . This allows you to easily pull updates and bug fixes from the main project without needing to clone it again. Confirm the Node.js version required by your RocketChat version by executing the following command: Install the required version of NodeJS replacing x.x .x with the required NodeJs version number: Check the node version installed by running: Ensure this is the required version. Initialize the meteor framework. This will show the version of the meteor requested by Rocket.Chat (located in apps/meteor/ .meteor/release). It will also initialize the framework. Install all needed packages and proceed to build the Rocket.Chat app with these commands: Start your development server", "tokens": 475}
{"title": "Mac OSX", "content": ". For systems with 16 GB of memory or higher, use this command: For systems with less than 16 GB of memory, use: Once it is finished, check your terminal for a message confirming the successful deployment . The local server will now be running on http://localhost:3000. If you encounter any issues, see troubleshooting. This setup instruction has been tested on MacBook Pro 2015, 8Gig Ram, 512Gb SSD,i5 . Meteor comes pre-installed with npm and node. Confirm the versions by executing this command: Install Yarn if it's not already on your system. It is the recommended package manager . Information on the various versions of packages needed can be found in the package.json To easily manage the node versions on your machine, install the n node package manager and switch to your desired NodeJs version. Replace x.x .x with the NodeJs version number. Fork the Rocket.Chat repository on GitHub. Clone the forked repository and navigate to the project directory using this command: Run the following commands to navigate to the meteor directory and download the necessary meteor version for Rocket .Chat, as configured in .meteor/release file: Navigate to the project root directory and install all the needed packages by executing this command: Build and start your development server by running this command: Once it is finished, check your terminal for a message confirming the successful deployment . The local server will now be running on http://localhost:3000. Modify the code in your IDE to see the changes on the server instance. You can now start contributing to Rocket.Chat . Check out the contribution guide to learn more about the contribution process . Resolving yarn permission error Failure linking \"fibers\" (Apple Silicon) Bcrypt requires arm64 binary but has amd64 one instead (Apple Silicon) If yarn dsv fails and shows \u201csomething went wrong installing the \u201csharp\u201d module.\u201d", "tokens": 411}
{"title": "Troubleshooting your Development Environment Setup", "content": "This document provides solutions to some common Rocket.Chat development problems, but remember, each issue is unique, and sometimes, you may need to dig deeper to find the root cause. Resolving the missing babel-runtime npm package Resolving the slower JavaScript implementation of bcrypt Fixing symbolic link issues with libcuda.so.1 Resolving error exit 139 \u00a0from segmentation fault. Resolving yarn permission error Failure linking \"fibers\" (Apple Silicon) Bcrypt requires arm64 binary but has amd64 one instead (Apple Silicon) yarn dsv failing and shows \u201csomething went wrong installing the \u2018sharp\u2019 module.\u201d Troubleshooting is a vital part of the development process, and understanding how to navigate and resolve common issues can significantly enhance your productivity.", "tokens": 156}
{"title": "Server Architecture", "content": "Explore the Rocket.Chat server architecture to understand the platform\u2019s structure. Whether you're a developer or just curious, this document offers a clear look into Rocket.Chat\u2019s scalable designs and component interactions which shape the server\u2019s robustness and versatility . See architecture and components for a holistic view of Rocket.Chat's architecture and components. Core server This component contains packages essential for user authentication, messaging, and other core functionalities of the Rocket.Chat server. Database Rocket .Chat uses MongoDB to store its data, such as chat messages, user information, and system configurations. File storage Additionally, the server employs a file storage system for storing assets, user files, images, and various media files. The Rocket .Chat server architecture consists of internal and external services. Internal services operate within the meteor instance, closely integrated with the main process. On the other hand, external services can operate independently in separate processes. Some external services in Rocket .Chat includes the following: Authorization: Manages user authorization and permissions, ensuring users have the proper access rights to various functionalities. It can be horizontally scaled and is stateless. Account: Handles user account management, including creating, updating, and deleting . It facilitates user authentication methods like login and logout. This service is stateless and can be horizontally scaled. Presence: This handles\u00a0user presence management, tracking, and updating the user's online status. It can be horizontally scaled and is stateless . StreamHub: Captures database changes and broadcasts real-time data to other services. It's currently a single-instance service without support for horizontal scaling . DDPStreamer: Oversees DDP (Distributed Data Protocol) connections, managing client-server interactions, subscriptions, and data transmission to clients. It can be horizontally scaled. Apps-Engine: Handles Rocket .Chat apps, managing their installation, updates, execution, and removal. Although it's designed for horizontal scaling, please note that this service is currently in the development phase. Note: Horizontally scaled: The Rocket .Chat server can be expanded by adding more servers or instances. This distributes the workload and improves performance without a single point of failure. Stateless: The service does not retain data or state between requests, making each request independent", "tokens": 470}
{"title": "Server Architecture", "content": ". This simplifies scaling and enhances reliability, as any instance can handle any request without needing to remember previous interactions. Banner: This service oversees banners, including their creation, updates, and deletion . LDAP: This service manages LDAP (Lightweight Directory Access Protocol) integration, establishing connections to LDAP servers and overseeing user synchronization. NPS: This service collaborates with the Banner service to manage Net Promoter Score (NPS) surveys . It generates banners for specific users and manages survey responses. Room: Manages chat rooms, including creation, updating, and deletion. OmniChannel: It's responsible for managing various omnichannel tasks . Omnichannel Voip: It handles VoIP (Voice over Internet Protocol) calls within the omnichannel system. Team: It manages teams within Rocket.Chat, including creation, updating, and deletion . UiKitCoreApp: This service handles UIKit actions and events, utilizing the Apps-Engine service for app-related tasks and events, along with Meteor Legacy for core actions . Push: This service is responsible for managing push notifications, and sending them to mobile applications. Upload: This service oversees file uploads, including uploading files to the file system and handling file management. Messaging: This service is accountable for managing messages within Rocket .Chat. Settings: This service is in charge of managing system settings, involving tasks like creating, updating, and deleting settings. In essence, the Rocket.Chat Server Architecture represents a sophisticated blend of components, seamlessly uniting to create a robust communication platform . From user authorization to data management, each service plays a pivotal role. This architecture adapts and evolves to accommodate new features, showcasing its commitment to innovation and user satisfaction.", "tokens": 376}
{"title": "Server Customization", "content": "Rocket.Chat offers a flexible and customizable platform for team collaboration. Recognizing that businesses and communities have unique needs, this document will walk you through how to customize your Rocket.Chat server, from basic to advanced options. Beyond white labeling your workspace, you can modify the codebase directly, enabling you to build and deploy a fully tailored server with all the required features. Across the Rocket.Chat server, some features you can customize include the following: Create and apply unique visual styles to match your brand. Adjust the color scheme to align with your organization's identity. Rocket.Chat's UI components collectively form the server's visual and interactive foundation. Customizing these components allows you to align the interface with your organization's branding, enhance user experience, and introduce specialized features. Below are component examples that aim to enhance development ease and prevent redundant contributions of similar components with conflicting styles and usage patterns. The Rocket.Chat side nav UI component renders the side navigation menu for the Rocket.Chat server. The component takes in a few props, including the current user's data, the list of channels, and the list of rooms. The component uses this data to render a list of navigation items, each linking to a different page in the Rocket.Chat app. The component also includes a search bar that users can use to find channels and rooms. See participate in Rocket.Chat development to contribute to Rocket.Chat", "tokens": 293}
{"title": "Desktop App", "content": "The Rocket.Chat desktop app is a multiplatform client built with Electron, a robust framework for creating cross-platform applications using web technologies. This document outlines the process of setting up and building your Rocket.Chat Desktop app directly from the source code. We'll also cover the steps for setting up the development environment, including downloading and installing the necessary dependencies. Make sure that you have an active internet connection throughout the installation process. Before you begin with the installation, make sure you have the following on your machine: Git Node.js node-gyp Yarn is recommended instead of npm A Rocket.Chat workspace URL Go to your working directory in the terminal and clone the Github repository by executing this command: Go to the cloned repository directory, install the project dependencies, and start the project with these commands: Once the project is running successfully, a Rocket.Chat desktop app window will launch, prompting you to input your server details to initiate the setup process. The Rocket.Chat desktop app's source code resides in the src folder. Running the app with yarn start command triggers a build process that compiles all the code in the src folder and outputs the result in the app folder, making the application ready to run. This means the app folder will contain the complete, runnable application, ensuring the app is always up-to-date with the latest changes to the source code. After setting up the application environment, develop your desktop app and\u00a0customize it to meet your specific requirements.", "tokens": 316}
{"title": "Develop your Desktop App", "content": "Developing Rocket.Chat desktop apps require using TypeScript 4. Consult the TypeScript 4 release handbook to stay informed and updated. The foundation of the build process relies on the rollup bundler, which is responsible for compiling and integrating all components . The codebase has three entry files: src/main.ts: The script runs during the main electron process, orchestrating the whole application. src/rootWindow .ts: The script that renders the UI of the root window, which serves as the app's main window; src/preload.ts: The script runs in a privileged mode to connect the app and the webviews rendering Rocket.Chat's web client . When extending the app's functionalities with modules, it's crucial to distinguish between modules required as dependencies and those marked as devDependencies in the package.json file", "tokens": 186}
{"title": "Develop your Desktop App", "content": ". Similar to any other project relying on packages, only modules listed in dependencies will be included in the final distributable app. To establish automatic connections when the application launches, you can define default servers. This involves creating a servers .json file in the root directory of the project. This configuration ensures that the server list sidebar is automatically populated when the app launches or when all servers are deleted. The servers.json file syntax is as follows: You have the option to bundle a servers .json file with the installation package. This file should be located at the root level of the project application in the same directory as the package.json file. When the file is located, the initial \"Connect to server\" screen won't appear . Instead, the app will try to connect to the first server listed in the array. Once connected, the user will be taken directly to the login screen. Note that the servers.json file will only be checked if no other servers have been added previously . Even if you uninstall the app without removing previous preferences, this check will not be triggered again. If you cannot or prefer not to include the file within the app bundle, an alternative approach is available. You can generate a servers .json file in the user preferences folder, which will override the packaged one. This file should be positioned in any of the directories outlined below, depending on your operating system: ~\\Users\\<username>\\AppData\\Roaming\\Rocket .Chat\\ ~\\Program Files\\Rocket.Chat\\Resources\\ ~/Users/<username>/Library/Application Support/Rocket.Chat/ ~/Applications/Rocket.Chat.app/Contents/Resources/ /home/<username>/.config/Rocket.Chat/ /opt/Rocket", "tokens": 380}
{"title": "Develop your Desktop AppDebugging your Desktop App", "content": ".Chat/resources/ We use Jest testing framework with the Jest electron runner. It searches for all files in the src/ directory that matches the glob pattern *.(spec|test).{js,ts,tsx} and performs tests on them . Run this command to execute tests on your changes: To bundle your application into an installer, use the following command: This command initiates the packaging procedure for the specific operating system you're currently using . Once completed, the resulting output file is prepared for distribution and can be located in the dist/ directory. It's important to note that electron-builder manages all packaging operations, and it offers many customization possibilities . If you encounter an error or unexpected behavior, you can follow the debugging options we have documented. In this development phase, you'll explore troubleshooting techniques to ensure your application functions seamlessly. You'll gain valuable insights and strategies for identifying, isolating, and rectifying issues that may arise during the development process. Install node-gyp Follow the installation instructions on node-gyp README. If you encounter package failures, it is advisable to conduct a thorough cross-check to ensure that the specified packages are readily available within your environment. For Windows users, the second option outlined in the node-gyp installation guide, which involves installing Visual Studio, might be necessary. Additionally, installing Xcode Command Line Tools is essential. To install, run this command: xcode-select --install Alternatively, if you already have the full Xcode installed, navigate to Xcode -> Open Developer Tool -> More Developer Tools to get it. This step will install clang, clang++, and make Install these packages: build-essential libevas-dev libxss-dev Your project may require these additional packages: libX11 libXScrnSaver-devel gcc-c++", "tokens": 411}
{"title": "White Label Your Desktop App", "content": "Whitelabeling Rocket.Chat desktop app lets you customize the branding and appearance to match your organization's identity. This document provides a step-by-step process for white labeling your app. To follow the instructions, you must have a basic understanding of Git, Node.js, JavaScript, and Electron. Theming for Rocket.Chat is still under development. You can follow the discussion to learn more about it. Commonly, the primary adjustment is altering icons. Some specific folders in your root project directory where assets can be customized include: Take caution as these files are React components, so ensure that you modify them correctly. When the changes are done, generate your new files by running this command: There are two options for customizing the TrayIcon: Navigate to public/images/tray to review and potentially modify the icons used by the application. Alternatively, open and modify ui/icon/AppIcon.tsx. This is the icon base for automatically generating all the icons. If you're familiar with tsx/jsx, this might be the more straightforward approach to take. After making the changes, run this command: Configure notification preferences to stay in tune with notifications in your workspace To change this screen, navigate to ./src/ui/components/AboutDialog/index.tsx - you can also change the copyright. If you've changed the logo already, it will automatically reflect on this page. We use electron-builder to \"compile\" and produce the executable files. To make any updates, check the file electron-builder.json. Update all references to the term rocket.chat/rocket/chat.rocket/rocketchat based on the context of each setting. See the electron-builder configuration guide for more details. To maintain automatic updates, see the electron-builder publish guide. After making any change in the configuration, build a new release by running these commands: See the GitHub repository for more information on configuring CI/CD.", "tokens": 422}
{"title": "Mobile App", "content": "The Rocket.Chat Mobile App is built using React Native, allowing you to develop Android and iOS applications from a single codebase. Setting up the development environment requires you to download and install some dependencies. Please maintain an active internet connection throughout the installation process. Before setting up, confirm that these tools are installed and running correctly on your device: Git Node.js Yarn (recommended instead of npm) macOS with XCode Command Line Tools to run the iOS version, Android Studio to run the Android version. Follow the React Native CLI quickstart documentation for your operating system to set up your React Native environment. This is necessary as Rocket.Chat does not support Expo-managed flow. Clone the GitHub repository and install the required dependencies by running these commands: Run the app by executing these commands: Open the project in Android Studio and launch an emulator using the Android Studio Device Manager, or connect a physical device. Navigate to the application's root folder, locate the \u201candroid\u201d folder, and create a local.properties. In this file, add your Android SDK. Like so: For Mac users: For Windows users: Mac and Windows handle file paths differently. While Mac uses the forward slash (/), Windows uses the backslash (\\). Now, run the following command to start the application: The app is now running on the emulator or your device. Your application may take longer to set up depending on your internet connection. Refer to the frequently asked questions for solutions to any problems you may encounter. To contribute or make a feature request, see the\u00a0help wanted\u00a0section on GitHub or the\u00a0good first issue\u00a0labels. Triaging issues is a great way to contribute if you can't code. To learn more about Rocket.Chat contribution process, see participate in Rocket.Chat development. You can share your ongoing work before completion by adding [WIP] to your pull request (PR) title. This allows others to review your code and offer assistance if you encounter challenges while solving a problem.", "tokens": 417}
{"title": "Supporting SSL for development on Rocket.Chat", "content": "The server must support SSL when working with mobile apps. As a \"middle-tier application server,\" \u00a0Rocket.Chat does not handle SSL itself. However, it works well with several industrial-grade reverse proxy servers you can configure to handle SSL. Your Rocket .Chat server may or may not be publicly accessible on the internet. Below are the instructions for configuring SSL for both scenarios. If your server is publicly accessible, it is recommended that you use a service like Let's Encrypt to obtain your SSL certificates . For Ubuntu users, it can be configured automatically using Snaps. If your server is not accessible on the internet, you need to provide self-signed certificates to configure SSL on the server . The steps highlighted below are adapted from the resource \"Self-Signed Certificate with Custom Root CA.\" The root key is crucial for signing certificate requests. Keep it secure, as it can sign certificates on your behalf . If you want a non-password-protected key, remove the -des3 option. Create the root certificate with the root key and distribute it to all computers that should trust you . Do not distribute this root certificate in production, as a breach could compromise all devices that trust it. Replace mydomain.com with your IP address . Bonjour local domains also work! While creating the certificate signing request, it is important to specify the Common Name providing the IP address or URL for the service; otherwise, the certificate cannot be verified. Use the mydomain .com CSR, along with the Rocket.Chat-root CA. The mydomain.com.crt and mydomain.com.key files generated above are used as the certificate and the private key to configure SSL . To learn more about configuring your choice of SSL Reverse proxy servers, see configuring SSL reverse proxy. All the devices that need to communicate with the server during development must trust the root certificate generated earlier (Rocket.Chat-root.crt) . For Apple devices, see installing a CA\u2019s root certificate on your test device. For Android devices, see add & remove certificates. Once the root certificate has been installed successfully, the device can access Rocket.Chat over SSL . If your device is not able to connect over SSL, ensure that the URL has https:// explicitly typed out before it.", "tokens": 509}
{"title": "Analytics & Data Usage", "content": "In the fast-paced world of mobile communication, where speed and efficiency are paramount, harnessing the power of data analysis becomes the cornerstone of delivering an exceptional user experience. Developing mobile apps for Rocket.Chat requires careful analysis and consideration of data usage to ensure a smooth user experience. Rocket.Chat Mobile apps can use a significant amount of data, especially if they are used to send and receive large files or images. It is important to be aware of the data usage implications of your app and to design it accordingly. Rocket.Chat utilizes Crashlytics and Bugsnag for crash reporting in both iOS and Android apps. These tools collect crash information from mobile apps, transmit it, and store them securely on their servers for developer diagnosis. The transmitted data contains no users, channels, or group information and no message content. It contains only anonymous application and system state information during the crash that can be helpful for diagnosis. This data can be used to identify and fix bugs that are causing crashes. Firebase Analytics is used to track app usage events in Rocket.Chat like sending messages or changing themes. It is also anonymous and contains no private information from the user. It is only used to understand what features are used more and how they're used. This data can be used to improve the performance and usability of your app and to make better decisions about its future development. Users can disable these reports on iOS and Android by disabling crash reports in the Settings screen.", "tokens": 298}
{"title": "Testing your Mobile App", "content": "Testing is an integral part of mobile app development to ensure the reliability, functionality, and user experience of your Rocket.Chat Mobile app. The Rocket.Chat Mobile App has unit tests and e2e tests. This guide will walk you through various testing approaches for Rocket.Chat mobile App. Reactotron is used to inspect logs, redux state, redux-sagas, HTTP requests, etc. Unit tests focus on isolating and testing individual components or functions within your app. They help identify and fix bugs early in the development process and ensure that each part of your app works as intended. For unit tests, we use Jest and Storybook. Storybook Storybook is a tool for developing UI Components with some plugins to make Jest generate snapshots. Navigate to the index.js file on your project's root directory, and keep only the last Storybook import while commenting the remaining part of the code. Then, refresh your project, and you will observe the generation of tests like this: We use Jest for unit tests and to generate Storybook snapshots. There is a pre-commit hook to prevent commits that breaks any test. To check for test issues on your code, run this command: Detox framework tests our app end-to-end and ensures everything works properly. To run the test, follow the steps on the e2e GitHub repository. ESLint is used to enforce code style and best practices. There is a pre-commit hook enforcing commits to follow our lint rules. To check for lint issues on your code, run this command: Prettier is used to format the code style in our project. There is a pre-commit hook enforcing the commits to follow our style guides. To fix your code formatting issues, run this on your terminal: To integrate Prettier with your preferred code editor, see the official documentation.", "tokens": 392}
{"title": "Mobile App White Labeling", "content": "You can rebrand Rocket.Chat Mobile Apps to suit your style guide. You can customize the App Icons, Splash Screens, App Name, and Colors for your mobile app. This document provides a step-by-step overview of how to white label the Rocket.Chat mobile app for both Android and iOS platforms. To customize your mobile apps, here are some essential requirements: Intermediate knowledge of Android/iOS development and basic Javascript knowledge. The repo contains targets/build flavors for our\u00a0experimental\u00a0and\u00a0official\u00a0apps. Both apps are equal but released at\u00a0different paces in the stores. The experimental folder contains the assets for the non-official app. If you see it, avoid worrying about breaking anything. Ensure you have both iOS and Google developer accounts and the respective development environments working. Follow the getting started with ReactNative guide to set up your enviroment. Clone the Rocket.Chat ReactNative GitHub repo and checkout to the single-server branch with this command: You can also clone the single-server branch directly by running this command: Create an account on Bugsnag. Set server, appGroup, and appStoreId in the app.json file. appGroup must be the same App Group created for the iOS app Change app colors in the colors.ts file. Create a project Google Cloud Platform (GCP) Sign in to Google Console. Navigate to New Project. Fill in the required project details and click Create. You are redirected to the newly created project page. Create a new Firebase project Sign in to Firebase. Click Create a Project. Select the project you created in GCP. Follow the setup prompts and click \"Create\". Continue with the steps in mobile app White Labeling and iOS app White Labeling depending on your what you are building.", "tokens": 370}
{"title": "iOS App White Labeling", "content": "As explained in the requirements, the repo contains targets/build flavors to build our experimental and official apps. This guide covers the default flavor, which is the Experimental app. Open RocketChatRN.xcworkspace on Xcode (13 .0 or newer) On the General tab, select \u201cRocketChatRN\u201d and change Display Name, Bundle Identifier, Version, and Build . Select \u201cShareRocketChatRN\u201d and \u201cNotificationService\u201d and change the same properties Display Name and Bundle Identifier are different from the previous target. Version and Build must be the same on all targets . On Signing and Capabilities for \u201cRocketChatRN,\u201d check \u201cAutomatically manage signing,\u201d select your app group, and add a keychain group . Similarly, on the \u201cShareRocketChatRN\u201d and \u201cNotificationService\u201d targets, check \u201cAutomatically manage signing,\u201d select your app group, and add the same keychain group. Set the same app group on RocketChatRN/Info .plist, ShareRocketChatRN/Info.plist and NotificationService/Info.plist Set the same keychain group on RocketChatRN/Info.plist, ShareRocketChatRN/Info.plist and NotificationService/Info .plist It needs to be the same on all entitlements. Change the app icon on Experimental.xcassets/App Icon Change the app splash screen on Experimental.xcassets/Launch Screen Icon Change the splash background colors on Experimental .xcassets/splashBackgroundColor Set your Bugsnag API key on RocketChatRN/Info.plist Visit the project overview on your Firebase console. Go to Settings > Project settings", "tokens": 373}
{"title": "iOS App White Labeling", "content": ". On the \u201cGeneral\u201d tab, click on \u201ciOS\u201d button under \u201cYour apps\u201d section: Enter your bundle ID and then \u201cRegister app\u201d: Download the config file and move it as instructed: Add it to all targets: Execute the following in the project terminal: Visit your Apple developer account . Enter your credentials. Click Certificates, Identifiers & Profiles. Visit the Apple identifier list. Click to add identifier. Select App IDs and click Continue. Add a Description and Bundle ID: On Capabilities, select App Groups and Push notifications . Click Continue and then Register. Share extension is a version of the app that opens when you share data from another app to Rocket.Chat. For example, share a photo from the gallery. Visit the resources identifier list. Click to add Identifier . Select App IDs and Continue. Add a description and Bundle ID. This time, select only App Groups under Capabilities. Click Continue and then Register. Visit the resources identifier list. Click to add Identifier. Select App IDs and Continue . Enter a Description and an Identifier: Click Continue and then Register. Visit the resources identifier list. Click on the first identifier you created. On App Groups, click Configure. Select the App Group you created and click Continue. Click Save . Repeat these steps for the second identifier you created for the Share Extension and notification service. Visit the resources identifier list. Click on the first identifier you created. On Push Notifications, click Configure. On Development SSL Certificate, click Create Certificate", "tokens": 338}
{"title": "iOS App White Labeling", "content": ". Follow the official tutorial to generate a Certificate Signing Request. Select the certificate you created and click Continue. Download the certificate and install it on your machine per the on-screen instructions. After installing it, Keychain Access should have opened automatically on your Mac . Export the certificate to generate a .p12 file. For simplicity, save it in the same folder of your CSR and .cer. You\u2019ll need it later for SSL/TLS authentication and encryption. On Production SSL Certificate, click Create Certificate . Follow the official tutorial to generate a Certificate Signing Request. Select the certificate you created and click Continue. Download the certificate and install it on your machine per the on-screen instructions. After installing it, Keychain Access should have opened automatically on your Mac . Export the certificate to generate a .p12 file For simplicity, save it in the same folder of your CSR and .cer. You\u2019ll need it later for SSL/TLS authentication and encryption.", "tokens": 208}
{"title": "Android App White Labeling", "content": "Like iOS, we have build flavors to generate our Official, Experimental, and F-Droid app versions. To see these flavors, navigate to android > app > src \u00a0folder. experimental and official folders contain app icons and splash screens. play and foss folders contain the necessary code to run the app with or without Google Play services. foss build doesn't contain push notifications implemented. main folder contains core implementations. debug folder contains code to run the app in debug mode. To build the Experimental app using experimental, play debug, and main folders: Set APPLICATION_ID, VERSIONCODE and BugsnagAPIKey on ./android/gradle.properties Generate a new image asset for ic_notification and target main. Generate a new image asset for ic_launcher and target experimental. Splash screen uses the same asset as the ic_launcher, and you can change the background on splashBackground. Change the app name and share the extension name on ./android/app/src/main/res/values/strings.xml Follow these steps to generate the Keystore for verifying your app on Google Play: Run the following commands: To learn more about generating an upload key in ReactNative, see the official documentation. The command prompts you for some credentials. Set KEYSTORE_PASSWORD and KEY_PASSWORD on ./android/gradle.properties with the passwords you were prompted for. Go to the project overview on Firebase. Navigate to Settings > Project settings. On the General tab, click on Add app under Your apps. Enter your bundle ID as the Android package name and click Register app. Download the config file and move it as instructed. To run the app, execute the following commands: For example, the app created on this document would use: This script uses experimentalPlayDebug build flavor. When you build your app on release mode, use experimentalPlayRelease. See the official documentation for more info.", "tokens": 413}
{"title": "Configuring Push Notifications", "content": "You can manually configure push notifications to your customized app build without using Rocket.Chat Saas to manage your workspace. It allows your workspace users using mobile devices to receive push notifications on their devices. This guide shows how to achieve that . Navigate to Administration > Workspace > Settings > Push on your workspace. Disable Gateway. Disable Production if you\u2019re trying in debug mode. Navigate to the Cloud Messaging tab on the Firebase project . Under Firebase Cloud Messaging API, tap on Manage Service Accounts to be redirected to Google Cloud Console . Go to Create Service Account, fill name and ID and click Create and Continue On Grant this service account access to project, filter for a role called Firebase Cloud Messaging API Admin Click Done and navigate to the Service Account you just created Go to Keys > Add Key Service account > Keys Select JSON and click Create Generate service account JSON This JSON file is going to be used to send push notifications Navigate to Administration > Workspace > Settings > Push Make sure Use legacy notification provider is turned off On Certificates and Keys, copy the Service Account content you just created to Google FCM API Credentials Save and restart your workspace . Log into the server as the same user on your mobile device and close it (it won\u2019t receive push notification if it\u2019s open). Navigate to Administration > Workspace > Settings > Push and click on the Send a test push to my user button", "tokens": 304}
{"title": "Configuring Push Notifications", "content": ". Ensure you have done \"Creating Push Notifications certificates\u201d. In your terminal, go to the folder which contains your push files (CSR, .cer, .p12) . To generate PEM files for a development environment, Run the following commands: You must set a password for your PEM file . To generate PEM files for a production environment, Run the following commands:: You must set a password for your PEM file Page embed from Whimsical: https://whimsical .com/notification-workflow-PRwN4MWNsxSwqHjHXaPUuC Copy the contents of your development PEM files and password into APN Dev Key, APN Dev Cert, and APN Dev Passphrase on your Push > Certificates and Keys workspace settings . Copy the contents of your production PEM files and password into APN Key, APN Cert, and APN Passphrase on your Push > Certificates and Keys . Get the content of your PEM files using cat by running this command: Save and restart your workspace. Log into the server as the same user on your mobile device and close it (it won\u2019t receive push notification if it\u2019s open) . Navigate to Administration > Workspace > Settings > Push and click on the Send a test push to my user button. Page embed from Whimsical: Notification workflow You can find more information on push notifications configuration in our admin guide.", "tokens": 314}
{"title": "Mobile App FAQsOmnichannel", "content": "Why am I not receiving push notifications on mobile apps? Will Rocket.Chat push notification gateway work on my Whitelabel app? Do I need previous knowledge to build a white-label app? Why is Bugsnag required to build my white-label app? The \"single-server\" branch is outdated. When is it going to be updated? How to resolve \u201cWatchman Crawl Failed\" Error on MacOS? How do I resolve the \u201cSDK location not found\u201d error? Rocket.Chat\u2019s Omnichannel feature is designed to provide a seamless multi-channel communication environment between companies and their customers. It integrates various communication platforms, such as SMS, Facebook, or Telegram, into a single workspace, improving the customer service experience. A typical use case of omnichannel is a healthcare provider using Rocket.Chat omnichannel feature to handle appointment requests and patient inquiries through SMS, phone calls, and online chat, providing a unified and efficient scheduling system. This documentation section will show you how to set up your omnichannel development environment and build omnichannel bots. To explore more features, check out the following: Omnichannel admin guide Omnichannel apps", "tokens": 255}
{"title": "Omnichannel", "content": "Rocket.Chat's Omnichannel feature allows you to integrate multiple customer communication channels into your workspace, ensuring seamless interactions with external users across platforms like WhatsApp, SMS, Facebook, Instagram Direct, Telegram, and more. The use of Omnichannel is instrumental in attracting and retaining customers in a multi-channel environment, thereby safeguarding potential sales opportunities and fostering customer relationships through different platforms. In addition to Omnichannel Apps, you can enhance customer engagement by adding the Livechat widget to your website, enabling direct interaction with your Rocket.Chat workspace. Key features Omnichannel Apps that give your customers the chance to engage with you on channels of their choice. Omnichannel Livechat widget for your websites, acting as a gateway for customer interactions or direct support. Analytics dashboard to track performance over any period of time. Custom fields to obtain additional customer information according to your business requirements. Canned responses (or template responses) to provide quick pre-defined responses. To enable the Omnichannel feature on your workspace, see the Omnichannel Admin's Guide. The primary users of Omnichannel are: Workspace admins Livechat managers Livechat agents Livechat monitors To learn about the required roles, see Rocket.Chat Omnichannel Roles. The rest of this section guides you through the Omnichannel features and how you can use them effectively for multi-channel communication. Effective December 6, 2023, Rocket.Chat will cease support for connections from cloud services and official mobile/desktop apps to workspaces running legacy versions outside our support window. Users on unsupported legacy servers are advised to upgrade to the latest Rocket.Chat version to ensure continued access to cloud, mobile, and desktop applications. Each Rocket.Chat version is supported for six months post-release. See Support Prerequisites and Version Durability for more information.", "tokens": 403}
{"title": "Omnichannel Environment Setup", "content": "This documentation will guide you through setting up your Rocket.Chat omnichannel development environment. Ensure you have the following installed on your device. Git Node.js Yarn is recommended instead of npm. This Livechat platform is a minimal lightweight application developed with Preact. It is a critical feature of the Rocket.Chat omnichannel as it facilitates B2C (business-to-customer) communication between agents and website visitors. This setup is done assuming you have a Rocket.Chat server running. We will use a local instance at http://localhost:3000 for this guide. To set up the omnichannel Livechat, Clone the Livechat source code from the GitHub repository by running this command: Navigate to the Livechat folder in the cloned directory. Install dependencies by running: You can check the recommended version of node and yarn in the package.json file in the root directory. Compile the Preact application to the /build folder by running: In another terminal, start the development server with hot reload capabilities on http://localhost:8080: Open the widget-demo.html file in your browser by accessing http://localhost:8080/widget-demo.html. You should see a page with the Livechat initiation icon at the bottom right. For better performance, you can run this widget-demo.html on an HTTP server.", "tokens": 307}
{"title": "Livechat Widget Development and CustomizationOmnichannel FAQs", "content": "One of the initial steps in developing a Livechat widget is to ensure that it points directly to the running Rocket.Chat server. To select a different host for your local widget, navigate to the /src/api.ts \u00a0file in the project directory. Within the file, look for the server URL, which by default should be http://localhost:3000, and change it to your desired host. The Livechat widget can be fully customized using the Storybook components. To extend its functionalities, you can also use the\u00a0LiveChat Widget API. What is LiveChat inquiry? What is Omnichannel? How can I integrate chatbots with Rocket.Chat's Omnichannel? How do I resolve CORS error when sending a message via LiveChat with a locally hosted Rocket.Chat instance?", "tokens": 182}
{"title": "WhatsApp Business Template Messages", "content": "Integrating Whatsapp business in your Rocket.Chat workspace offers valuable enhancements to simplify your business communication workflows. The Whatsapp business integration allows you to send template messages to targeted contacts from your workspace . Template messages on WhatsApp serve as a proactive means for organizations to engage with their WhatsApp contacts. These messages can be related to appointment reminders, delivery updates, issue resolution, or payment updates . They also act as notifications, encouraging users to respond and kickstart conversations to foster interaction between organizations and their audiences. When using Rocket.Chat Whatsapp apps, you must define the template messages within your WhatsApp provider account before sending them through Rocket.Chat . The procedure may vary depending on the app. There are only three pre-defined template messages available on WhatsApp Sandbox. Templates cannot be created or modified. Refer to the official documentation for more details . Consult the official 360Dialog template message documentation to learn how to create template messages in \u00a0360dialog. Before you proceed, refer to the Meta template guide for a comprehensive understanding of template messages . In this document, we'll be creating a simple shipping reminder template message. To create this template message for WhatsApp Cloud, Go to the app created on your Facebook developer console. Navigate to WhatsApp > Quickstart . Click Message Templates from the WhatsApp Business section. It redirects you to the message templates page on your Meta Business account. Click Create template. Add the category, name, and language of the template message. Category: Select Utility for this example guide . Name: Add a name for the template message. Language: Select English for this example guide. Click Continue. For this example, add this simple text in the Body : \"Your package has been shipped . It will be delivered in {{1}} business days.\" Put a random integer in the Samples for body content. Click Submit. The template message is now sent for review", "tokens": 415}
{"title": "WhatsApp Business Template Messages", "content": ". Once it has been approved, you can now start sending template messages to contacts from your workspace. Visit this quick guide to learn more about creating WhatsApp template messages . Once you have the template messages in your WhatsApp provider account, you can send them to targeted contacts within your workspace using any WhatsApp app available on the Rocket.Chat marketplace. There are two distinct methods for sending Whatsapp template messages in Rocket .Chat: Using slash commands Using the API endpoint Send the template message using the GUI form in your workspace. To trigger the GUI, open a WhatsApp contact room and run the respective send-template command for the WhatsApp app . WhatsApp Sandbox: Run the /whatsapp-sandbox send-template command in the room. A pop-up modal prompts you to select the template name, language, and other required details for the selected template . Click Confirm to send the template message to the contact. Visit the official documentation to learn more about the available WhatsApp Sandbox template messages. To see the available template messages, run /whatsapp-sandbox view-templates . WhatsApp 360Dialog (Cloud API): Run /whatsapp-360d-cloud send-template in the room. A pop-up modal prompts you to select the template name, language, and other required details for the selected template . Click Confirm to send the template message to the contact. To see the available template messages, run /whatsapp-360d-cloud view-template. WhatsApp Cloud app does not support slash commands for sending template messages. All Rocket .Chat WhatsApp apps use the POST templateMessage endpoint to send template messages to contacts. To get the valid endpoint URL for your Whatsapp App, navigate to App Info > Details > \u00a0APIs > POST templateMessage . Refer to the Send a WhatsApp Template Message API endpoint for more details . Below is an example JSON body parameter for sending the previously created template message via the WhatsApp Cloud API: If your template message includes parameters, make sure to replace all of them with the appropriate information before sending . Failure to do so may lead to an error. In conclusion, the ability to send template messages through WhatsApp Business Integration enables businesses to maintain a consistent and professional communication approach with their audience.", "tokens": 498}
{"title": "Monitoring WhatsApp Outgoing Messages", "content": "Keeping track of the delivery status for outgoing WhatsApp messages is crucial for effective communication and customer engagement. Rocket.Chat WhatsApp apps provide a convenient way to receive real-time updates on the status of your messages. To start receiving these updates, go to the WhatsApp app and follow these steps: Navigate to the Settings tab and set the Message Status Endpoint URL. Enable Allow Quote Messages settings. Click Save Changes. The app sends a request with the status payload to the specified URL each time your message's status changes, such as when it is sent, delivered, or read. Always confirm that the \"Allow Quote Messages\" setting is enabled to receive the full information payload. The table below highlights the payload format you will receive on the endpoint for status update: Field Name Type Description msId string or undefined The message Id. mobileNo string The recipient\u2019s WhatsApp phone number. MessageStatus string Status of the message - sent, delivered, read timestamp string Timestamp of request ErrorDetails Optional Type: String or WhatsApp error format Errors from template messages will be shown here type string The type of message. It can either be a template message or a regular message. connectedWhatsAppNo string Your connected WhatsApp Number from which you had sent the message to the user message string The outgoing message You can choose to filter the message status updates you receive at the Message Status Endpoint URL based on the message type. Go to Filter Message Status settings and select from the following options: All: Receive the status of all messages Regular Messages: Receive the status of regular messages only Template Messages: Receive the status of template messages only By utilizing this functionality, you can gain valuable insights into the delivery and engagement of your WhatsApp communications, helping you optimize your messaging strategies and provide better customer experiences.", "tokens": 382}
{"title": "Rocket.Chat API", "content": "Welcome to Rocket.Chat's API documentation. This comprehensive guide is structured to equip you with the knowledge to interact proficiently with Rocket.Chat\u2019s REST API endpoints, Realtime API methods, and the Livechat widget API . Our API collection empowers you to engage with your workspace, oversee rooms and users, manage apps, and seamlessly augment Rocket.Chat's capabilities. Rocket.Chat APIs include the following: Rocket .Chat\u2019s REST API endpoints adhere to the principles of Representational State Transfer (REST); this API utilizes conventional HTTP methods such as GET, POST, PUT, and DELETE, enabling operations on various resources . Livechat Widget API allows developers to integrate the Omnichannel Livechat widget functionalities into their apps. Realtime API allows developers to integrate Rocket.Chat\u2019s real-time messaging and collaboration features in their applications through WebSockets . Additionally, you can find the following information: Schema definition provides an overview of the structure and fields used in Rocket.Chat schema. Deprecated endpoints and parameters provide details on deprecated and removed endpoints and parameters . Securing your connection to the production server is crucial when using the Rocket.Chat REST API. Always use the login API exclusively over HTTPS during authentication to ensure confidentiality of user credentials . Implement a strict system that expires and renews authorization tokens regularly to prevent unauthorized access. The precise configuration of user permissions cannot be overstated. Assigning exact access rights to specific endpoints is critical in averting unauthorized actions and potential data breaches", "tokens": 337}
{"title": "Rocket.Chat API", "content": ". Rate limiting serves as a critical mechanism within the Rocket.Chat API, aiming to regulate the frequency of API requests effectively. It is enabled by default across all endpoints, contributing to server stability, preventing misuse, and facilitating equitable user access . To enable rate limiter in your workspace, Navigate to Administration > Workspace > Settings > Rate Limiter > API Rate Limiter . Adjust the following settings to fit your requirements: Enable Rate Limiter Enable Rate Limiter in development Default number calls to the rate limiter: The number of default calls for each endpoint allowed within the defined time range . Default time limit for the rate limiter (in ms): Default timeout to limit the number of calls at each endpoint (in milliseconds). Click Save Changes . To disable the rate limiter, assign the api-bypass-rate-limit permission for your user group role. To modify or disable the rate limiter for an API endpoint in your code, you can use the .addRoute function and provide the desired configuration within the existing options object. By setting the rateLimiterOptions property to false , you can disable the rate limiter for that specific endpoint . Alternatively, you can specify a valid configuration object in the format {numRequestsAllowed: 10, intervalTimeInMS: 60000} to adjust the number of allowed requests and the interval time for the rate limiter . When making requests to an API endpoint with a rate limiter, the response headers will include three additional properties: x-ratelimit-limit : This indicates the number of calls allowed within a specific period . x-ratelimit-remaining : It represents the number of remaining requests that can be made within the current rate limit window. x-ratelimit-reset : This specifies the time in UTC epoch milliseconds when the current rate limit window will reset . These properties provide information about the rate limit constraints and help you track the usage and availability of the API calls within the defined limits. Specific endpoints, such as /api/v1/users", "tokens": 436}
{"title": "Rocket.Chat API", "content": ".updateOwnBasicInfo, may trigger the rate limiter and currently cannot be customized or disabled through the administration panel. Rocket.Chat is not the maintainer of these wrappers. They are owned and supported by community members . Language Wrapper Java rocket-chat-rest-client PHP rocketchat-php Python rocketchat_API rocket-python Ruby rocketchat-ruby Clojure rocketchat-clojure Golang rocketchat-golang As an end-user, you can submit a new feature request for new APIs in Rocket .Chat. Please find the documentation here - API", "tokens": 133}
{"title": "Query Parameters", "content": "Starting from version 0.49, specific endpoints in the Rocket .Chat API support the following query parameters: Pagination Query and fields The pagination query parameters are as follows: Parameter Example Description Format offset 50 The number of items to \"skip\" in the query, i.e . requests return count items, skipping the first offset items. Positive integer count 50 The number of items to return. Integer sort {\"value\": -1, \"_id\": 1} List of fields to order by, and in which direction . JSON object, with properties listed in the desired order, with values of 1 for ascending or -1 for descending . To modify the offset and count behavior, you can access the REST API settings in Administration > Workspace > Settings > General > REST API. Default Count: The default count for REST API results if the count parameter is not provided . Max Record Amount: The maximum limit for the count parameter. If a higher count is specified, this limit will be applied. Allow Getting Everything: This setting determines whether passing 0 as the count parameter is allowed to retrieve all records . This feature provides flexibility in controlling the number of results, pagination, and sorting in the Rocket.Chat API . To retrieve a specific page of results with five items per page, use the count=5 and offset=10 parameters in the API request: To sort the results by name in descending order and status in ascending order, use the sort parameter with the", "tokens": 304}
{"title": "Query Parameters", "content": "appropriate JSON syntax: The query and fields parameters have been deprecated since version 5 .0.0 across all supported endpoints to prevent malicious queries. They are disabled by default from version 7.0.0 and can only be enabled by setting the ALLOW_UNSAFE_QUERY_AND_FIELDS_API_PARAMS: true environment variable in your deployment configuration . Enabling these parameters may expose your workspace to security risks, and Rocket.Chat is not responsible for any resulting vulnerabilities. Proceed with caution and ensure proper security measures are in place . When enabled, a deprecation message is included in the response header as X-Deprecation-Message. These parameters are scheduled for removal in version 8.0.0, after which enabling them will no longer be an option . The query and fields parameters accept JSON objects, but the request will fail if an invalid JSON object is provided. Parameter Example Description query To query users with a name that contains the letter \"g\": https://localhost:3000/api/v1/users .list?query={ \"name\": { \"$regex\": \"g\" } } This parameter allows you to use MongoDB query operators to search for specific data. fields To only retrieve the usernames of users: http://localhost:3000/api/v1/users .list?fields={ \"username\": 1 } This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response . Note that the query parameter follows the EJSON structure, similar to JSON, but with some differences in handling date and binary fields . For queries involving date fields, you can use the following examples: If you provide a field value of {\"_id\": false, \"value\": false}, you can retrieve all other fields except for _id and value . These query and field parameters enhance the flexibility and precision of data retrieval in the Rocket.Chat API.", "tokens": 425}
{"title": "Permissions and RolesHTTP Response Codes", "content": "In Rocket.Chat, permissions control the actions and operations your users can execute on your workspace. Configuring these permissions appropriately is crucial to maintaining the integrity and security of your Rocket.Chat instance. In the API reference, the relevant permissions are stated in the descriptions. For example, you need the create-user permission to create a new user in your workspace. Visit the Permissions user guide to learn more about the permissions and how you can set them for different user roles. Roles are a set of permissions that are assigned to a group of users or a specific user. A user's role determines the actions they can perform in the workspace. Refer to the Roles user guide to learn more about roles and how to manage them in your workspace. The roles and permissions reference documentation details how to manage them through the Rocket.Chat API. However, you can not test the POST requests for roles and permission using our sandbox enviroment. The Rocket.Chat REST API will generate success and error responses to an API request and provide further details to fix the errors. Here is a summary to help you understand some of the responses and how you can fix the errors. Status codes Description 200 OK The API request is successfully processed. 400 Bad Request In most cases, the request cannot be processed due to missing mandatory parameters or incorrect formats. Ensure you enter the values for all the required parameters in the correct format. 401 Unauthorized The request cannot be authenticated as the user ID or authentication token is invalid. Use the authentication endpoint to generate the token. 403 Forbidden The user is not authorized to perform the action. Make sure that you assign the required permissions to the users.", "tokens": 351}
{"title": "Introduction to Authentication", "content": "Rocket.Chat provides diverse authentication methods for secure API communication, spanning from basic username and password authentication to OAuth integration with services such as Google, Facebook, and Twitter. To access protected endpoints in the Rocket.Chat API, you must include the user ID and a valid authentication token of the user as headers in the request. Add the authentication token as x-Auth-Token and the user ID as x-User-Id in the headers of your request. Authentication tokens are unique identifiers confirming a user's active session within your Rocket.Chat workspace. These tokens validate the user's identity and permissions, providing secure access to various features and resources. When making requests to protected endpoints that mandate authentication, use this authentication token as x-Auth-Token header in your request. In Rocket.Chat, there are primarily two types of authentication tokens: authToken and personal access token. authToken authToken is a temporary authentication token returned\u00a0to\u00a0users after a successful login through any login endpoint. Additionally, workspace administrators can\u00a0create\u00a0authtoken for a user via the Create User Token endpoint. personal access token Personal access tokens are permanent authentication tokens that users can generate for themselves to access the API securely without exposing their primary credentials. See the Get Personal Access Tokens endpoint for more details.", "tokens": 289}
{"title": "Introduction to User ManagementIntroduction to Rooms", "content": "Rocket.Chat provides a set of APIs to programmatically manage users, permissions, roles, and LDAP integration. These APIs allow administrators to automate user management tasks, enforce access control, and integrate with external identity providers. Create, update, and delete user accounts via API requests. Manage user profiles programmatically, including names, emails, and avatars. Configure user preferences such as language settings and notification options. Generate and manage authentication tokens for API access and integrations. Define and enforce granular access controls for Rocket.Chat features. Assign or restrict permissions for actions like messaging, file uploads, and administrative tasks. Customize permission sets through API calls to align with security policies. Assign predefined or custom roles (e.g., Administrator, Moderator, Guest) using API methods. Control role-based access to features and settings. Manage hierarchical roles to structure user permissions efficiently. Programmatically configure and sync user accounts with an LDAP server. Perform test synchronizations to validate authentication and data consistency. Automate user provisioning and access management through directory service settings. Conversations take place in rooms. This section includes the following: Groups: Organize discussions with groups or channels. Channels: Create and manage dedicated channels for various topics. Rooms: Manage rooms and modify room settings. Teams: Create and manage teams and team members. Directory: Search workspace users, teams, and channels.", "tokens": 306}
{"title": "Introduction to MessagingIntroduction to Omnichannel", "content": "Chat: Create and manage chat messages. IM: Create and manage direct messages. With the Rocket.Chat Omnichannel feature, you can talk to your customers and website visitors, regardless of the channel they choose to connect with you. The Omnichannel endpoints are of two types: Endpoints requiring authentication: The workspace admins and managers use the endpoints that require authentication with a login method. Endpoints not requiring authentication: Visitors can use the endpoints that require no authentication. These endpoints require a visitor token which is like an authentication parameter for visitors. Visitors can register themselves by providing a unique random string as the token, which can be used for similar endpoints. This section includes the following endpoints: Livechat: Manage livechat users, visitors, conversations, and view analytics. Voice Channel: Initiate and receive calls with visitors. Canned Responses: Create and manage template messages.", "tokens": 190}
{"title": "Workspace Administration", "content": "This guide is for workspace administrators who administer and manage a Rocket.Chat workspace. They must have an administrator role in the workspace. To access this menu, go to Administration > Workspace This menu is only accessible to users who have been assigned the Administrator role. Workspace: A consolidated view of basic information about your workspace. Subscription: Manage your workspace subscriptions including plans, seats, and MAC. Registration: Rocket.Chat Registration gives you access to connect your self-hosted workspace to Rocket.Chat cloud. Learn how to use create a new cloud account and use connectivity services. Engagement: Evaluate user engagement on the channels of your workspace. Moderation: Assess reported messages on your workspace and take appropriate action against detrimental users. Federation: Check statistics about the federation connection on your server. Rooms: Learn how to create and manage rooms. Users: Learn how to manage user accounts. Invites: Under Invites, you can view and delete the invite links generated to invite users to the team/channels. User Status: See how to manage user presence and status on your workspace. Permissions: Customize which users can perform specific actions under Rocket. Chat's rich permissions system. Device management: Manage the devices linked to your workspace. Email Inboxes: Learn to manage Omnichannel email inboxes or email accounts for the email channels. Mailer: Use the Mailer tool to email users inside your Rocket.Chat workspace. Third-party Login: Learn to set up custom applications to be used for Open Authentication. Integrations: Integrate tools and services to ease everyday workflows. Import: Import data from other services to your Rocket.Chat workspace. Reports: Check your workspace logs and analytics reports Sounds: Discover to work with custom sounds in your Rocket.Chat workspace. Emoji: Learn to work with custom emojis in your Rocket.Chat workspace. Settings: Rocket.Chat is very flexible thanks to the vast amount of settings that allow you to configure your workspace the way you prefer. If the information in this section doesn't solve your problem, look at these other resources to find something that meets your needs. Alternatively, you can get help from our community or premium support services.", "tokens": 468}
{"title": "Workspace", "content": "The workspace menu gives you a consolidated view of statistics and other information about your workspace. This can help you to better evaluate your workspace and monitor the various activities. To access this menu, go to Administration > Workspace > Workspace . It shows your workspace plan, version number, registration status, and support window. The deployment info card shows information related to your server deployment. Version: The current version of your Rocket.Chat server . This can be different from the latest version if not updated. Deployment ID: Your server's deployment ID. Cloud Workspace ID: Your workspace ID. Apps Engine Version: The version of Apps-Engine . It can be different from the latest if not updated. Node Version: The Node.js version your server is running on. Database Migration: The date of database migration to the current Rocket.Chat version . MongoDB: The MongoDB version Commit Details: Details on the recent commit of your server. PID: It is the process ID of the operational system that is running the Rocket.Chat deployment", "tokens": 221}
{"title": "Workspace", "content": ". Instances: Click the Instances buttons to view all the instances running in the workspace. Users Total: The total number of users on the server. Online: The number of users that are currently online . Busy: The number of users that are in Busy mode. Offline: The number of users that are offline. Types and Distribution Users Connected: The number of connected users. Activated Users: The number of activated users on your server . Activated Guests: The number of guests that have been activated. Deactivated Users: Number of inactive users. Rocket.Chat App Users: The number of Rocket.Chat users. Example bot users, app users . Uploads Total Uploads: The number of total uploads that have been made on the server. Total Uploads Size: The total size of all uploads. Total Rooms Channels: Total number of channels on your server . Private groups: Total number of private groups on the server. Direct messages: Total number of direct messages created on the server. Discussions: Total number of discussions. Omnichannel: Total number of Omnichannel rooms . Total: Total number of all the rooms on the server. Messages Threads: The total number of threads on the server . Messages in channels: Total messages in all channels only Messages in private groups: Total number of messages in private groups only Messages in direct messages: Total number of messages that have been sent in all direct messages Messages in omnichannel: The total number of messages in Omnichannel . Messages in discussions: Total messages in discussions Total: Total messages sent and received on the server. Click the See on Engagement Dashboard button to view more usage statistics on the Engagement. This button is disabled for workspaces on the community plan", "tokens": 359}
{"title": "Workspace", "content": ". To download info about your server, Click the Download info button at the top right of Workspace menu. A download is prompted with a file named statistics.json. Refreshing info on your Rocket.Chat server will prompt for the latest stats to be pulled . To refresh info, Click the Refresh button at the top right of the Workspace screen. Registering your workspace is a mandatory step during the setup process. However, certain issues may arise that require you to remove the workspace registration from the database . When a workspace is no longer registered, a Register workspace button becomes available in the workspace UI, allowing you to re-register it easily. To re-register your workspace, go to Administration > Workspace > Workspace and click the Register workspace button . This will open a registration interface offering two options: Select this option if you have a registration token from Rocket.Chat Cloud portal, Support team, or Sales team. Enter the token in the provided field and click Next to complete the process . If the registration is successful, a \"Connected\" message will appear, confirming the workspace is registered. Use this option to register your workspace online. This button won\u2019t be available on air-gapped workspaces . Add your Cloud account email to link the workspace to an existing Rocket.Chat cloud account. Agree to the Terms and Privacy Policy Click Register workspace to proceed to the last step. An email with a confirmation link is sent to the email you provided . Open the email and click Verify Registration to ensure the security codes match and complete the registration. You may need to referesh your workspace to see the updated registration status.", "tokens": 343}
{"title": "Subscription", "content": "The Subscription page displays information related to your workspace subscription. To access this page, go to Administration > Workspace > Subscription. You can find the following details : Workspace plan information, renewal date, and the type of hosting. The available features for your workspace are according to the subscribed plan. The number of available user seats on your workspace. Each unique user occupies one seat. Deactivated users do not occupy seats. The active license type defines the total number of seats. For further information, see the Seats FAQ, Fair Use Allowance FAQ, and License Application. The number of available monthly active contacts (MACs)\u00a0is the number of unique omnichannel contacts engaged during the calendar month. For details, see\u00a0Monthly Active Contacts. You can take the following actions from the Subscription page: Sync license update: Sync the workspace license with the Rocket.Chat Cloud in case any changes have been made to your workspace license. Manage subscription: Purchase additional user seats or upgrade your plan. The workspace admin who created the workspace is redirected to the Rocket.Chat cloud portal from where they can manage the subscription. See the Cloud Workspaces document for details. Cancel workspace subscription: To cancel your workspace subscription and revert to Community workspace, click the Cancel Subscription button. You can only cancel your subscription from the workspace when you have subscribed to the Starter plan or to any of our trials. For other plans, log in to the Rocket.Chat cloud portal to cancel your subscription. If you are a Community user, you can find the following additional workspace details: Apps: View the app limit details for the Community workspace. Active sessions: Total concurrent user connections to the workspace. A single user can be connected multiple times. User presence service is disabled at 200 or more to prevent performance issues. Active sessions peak: Highest amount of active connections in the past 30 days.", "tokens": 398}
{"title": "Subscription", "content": "The subscription object contains information about the room and the user in relation to it. This is stored in the rocketchat_subscription collection on MongoDB. Interface You can check the ISubscription interface here. Rocket.Chat/ISubscription .ts at develop \u00b7 RocketChat/Rocket.Chat Example object Parameter Data type Description _id String Unique identifier for the subscription. u Object Information about the user associated with the subscription (_id, username, name) . v Object Information about the visitor associated with the subscription (_id, username, name). rid String The room ID associated with the subscription. open Boolean Indicates if the room is open for the user(it defaults to false on direct messages) . Clients use this to determine whether the user can see this subscription in their list since you can hide rooms from being visible without leaving them. ts Date The timestamp the room was created at, so this should equal the room's ts field . name String Name of the subscription. alert Boolean Indicates if there is an alert for the subscription to be displayed to the user. unread Number Number of unread messages in the subscription . NOTE: The unread counter value depends on your settings in the Administration > Workspace > Settings > General. t String Type of room associated with the subscription (e.g., \"c\" for channel, \"d\" for direct message . See Room Schema Definition). ls Date Timestamp of the last seen activity in the subscription. f Boolean Indicates if the subscription is a favorite. lr Date Timestamp of the last reply in a thread . hideUnreadStatus Boolean Whether the subscribed room should be marked as containing unread messages in the UI or not. hideMentionStatus Boolean Indicates if the mention status is hidden . teamMain Boolean Whether this subscription points to the main room of a team or not. teamId String (Optional) ID of the team associated with the subscription, if the subscription points to a team room", "tokens": 429}
{"title": "Subscription", "content": ". userMentions Number Number of unread mentions to the user in the room. groupMentions Number Number of unread mentions to a group which the user is part of (e.g @all, @here) . broadcast Boolean Indicates if the subscription is a broadcast. tunread Array of string (Optional) List of IDs of unread threads . tunreadGroup Array of string (Optional) List of thread IDs that contain an unread mention to a group that the user is part of. tunreadUser Array of string (Optional) List of thread IDs that contain an unread mention to the user", "tokens": 137}
{"title": "Subscription", "content": ". prid String Parent room ID. This will only be available if this is a subscription to a discussion. roles Array of string An array of role IDs associated with the subscription . onHold Boolean (Omnichannel) Whether or not this room has been put on hold. encrypted Boolean Indicates if the subscription is encrypted. E2EKey String Encryption key for the subscription . E2ESuggestedKey String Suggested encryption key for the subscription. unreadAlert String Type of alert for unread messages in the subscription (default, all, mentions, nothing). fname String Friendly name of the subscription. code unknown Unknown data type . archived Boolean Indicates if the subscription is archived. audioNotificationValue String Value for audio notifications. desktopNotifications String Desktop notification preferences for the subscription (all, mentions, nothing) . mobilePushNotifications String Mobile push notification preferences for the subscription (all, mentions, nothing). emailNotifications String Email notification preferences for the subscription (all, mentions, nothing) . userHighlights Array of string An array of user IDs to highlight in the subscription. blocked unknown Unknown data type. blocker unknown Unknown data type. autoTranslate Boolean Indicates if auto-translation is enabled for the subscription . autoTranslateLanguage String Language code for auto-translation in the subscription. disableNotifications Boolean Indicates if notifications are disabled for the subscription. muteGroupMentions Boolean Indicates if group mentions are muted for the subscription . ignored Array of string An array of user IDs to ignore in the subscription. department unknown Unknown data type. desktopPrefOrigin String Origin of the desktop preference (subscription or user) . mobilePrefOrigin String Origin of the mobile preference (subscription or user). emailPrefOrigin String Origin of the email preference (subscription or user). customFields Record<string, any> Custom fields associated with the subscription . Notes about customFields: customFields inherits from room's custom fields for channels (Room Type: c = chanel) and groups (Room Type: p = group) and changes with room's custom fields . customFields inherits from user's custom fields for direct messages (Room Type: d = direct) and changes with user's custom fields. Note that users of DM rooms will have own custom fields.", "tokens": 503}
{"title": "Registration", "content": "The Registration tab has been deprecated since the 6.5.0 version. Use the Subscription tab instead. To learn about the version support window, see Support Prerequisites and Version Durability. Rocket .Chat Registration gives you access to connect your workplace to Rocket.Chat Cloud. To access this menu, go to Administration > Workspace > Registration for workspaces above Rocket.Chat 6.0 or Administration > Workspace > Connectivity Services for workspaces below 6 .0. Connecting your workplace to the cloud gives you access to interact with services like Mobile push notifications gateway Apps Marketplace Live Chat Omnichannel proxy OAuth proxy for social network Automatic license synchronization Below are the steps required to connect and synchronize a Rocket", "tokens": 158}
{"title": "Registration", "content": ".Chat self-hosted workspace to Rocket.Chat Cloud infrastructure at cloud.rocket.chat. The steps below are required only for self-managed instances. Rocket.Chat SaaS workspaces are provisioned and connected to the Cloud infrastructure . To connect your workspace to our Rocket.Chat Cloud, you must be running a version within our support window. The registration steps are different depending on the version of Rocket.Chat your workspace is running on. Workspaces as from Rocket.Chat 6 .x Workspaces below Rocket.Chat 6.x When deploying a self-managed Rocket.Chat >=6.x workspace you are automatically required to register your workspace upon completing the Rocket.Chat Setup Wizard. With your workspace setup completed, sync it to Rocket .Chat Cloud as an Administrator by: Navigate to Administration > Workspace > Registration > Manage. Click on Sync to synchronize the workspace. To disconnect your workspace from Rocket.Chat Cloud: Go to Administration > Workspace > Registration > Manage. Click Disconnect and Disconnect workspace . Go to cloud.rocket.chat Hit Create account Fill up the registration form and hit Next. A verification email is sent to your provided email address. Click to open the verification link. You are redirected to cloud.rocket .chat where you get logged in to your Cloud console. Under Workspaces on your Rocket.Chat Cloud portal, click Register self-manage by the top right to register your self-hosted workspace. Select the workspace type from the modal displayed . Continue Online with Cloud Services: Rocket.Chat server that has a connection to the internet (connected to the outside) Continue Offline: Special cases where Rocket.Chat workspace is air-gapped. See the guide on how to register an offline workspace . Air-gapped Workspace Configuration In the following section, we are going to cover the option for Internet Access. A registration token is presented under the Online option. Copy the token, as this will be used to register your Rocket.Chat server . On your Rocket.Chat workspace, navigate to Administration > Workspace > Connectivity Services. Click on Register workspace and enter the token copied from Rocket.Chat Cloud account in the Token field Hit Connect. This sets the connection between your Rocket.Chat workspace and Rocket .Chat Cloud console when successful. Click on Sync to synchronize your workspace. The newly registered workspace is listed in the Workspace section at cloud.rocket.chat", "tokens": 522}
{"title": "Engagement", "content": "The Rocket.Chat Engagement dashboard gives you great insights into the users, messages, and channel activities. To access this menu, go to Administration > Workspace > Engagement. The engagement dashboard has sections for Users, Messages, and Channels. The download button at the top-left lets you download the data for any metric in CSV. From the Users tab, you can view the following metrics: New users: It displays the total number of new users for a select period. You can also see the number of users who increased/decreased from the last interval of the selected period. Active users: It displays the total number of users using the application daily, weekly, and monthly. Users by time of day: This displays the total number of users by time of\u00a0day for a selected period. The darker the color of the brick, the more users are online at that time. You can also check the exact count of users for an hour by hovering over the mouse cursor on the respective brick. When is the chat busier?: It displays the time by day or hour when your chat is busier. From the Messages tab, you can view the following metrics: Messages sent: It displays the total number of messages sent for a select period. You can also see the number by which the sent message count increased/decreased from the last interval of a select period. Where are the messages being sent?: For a selected period, it shows the top five most popular private chats and public and private channels where the most messages are being sent. For a selected period, this table shows the total number of messages sent across all of your channels, along with the increase or decrease in that number from the previous interval. Click the download icon to export any of the metrics as CSV.", "tokens": 364}
{"title": "Moderation", "content": "Content moderation is vital for maintaining a safe and inclusive digital workspace. Moderation in Rocket.Chat allows workspace admins and moderators of rooms to view the reported messages and take appropriate action against detrimental users . To access this menu, go to Administration > Workspace > Moderation. The following tabs are displayed on the Moderation page. Reported messages Reported users Let's look at each of these tabs in detail . The Reported messages tab displays the messages that have been reported. You can find the following information: The users whose messages are reported. The reported message. The room in which the message is reported. The date and time on which the message is reported . The number of reported messages of the user. Click the kebab menu  across a report to view all the actions you can do to the user and the message that was reported: See messages - View the details of the reported messages . Dismiss reports - Delete the reports. The messages are not affected. Delete all messages - Delete the reported messages from the rooms and dismiss the report. Deactivate user - The user cannot log in unless reactivated . The reported messages are deleted from the rooms. Reset user avatar - Remove the current user avatar. The Reported users tab displays the users that have been reported. You can find the following information. The reported user . The date and time on which the user is created. The user email. The date and time on which the user is reported. The number of times the user is reported . Click the kebab menu  across a report to view all the actions you can do to the reported user: See reports - View the details of the reported user. Dismiss reports - Delete the reports. The messages are not affected . Deactivate user - The user cannot log in unless reactivated. The reported messages are deleted from the rooms. Reset user avatar - Remove the current user avatar . You can search and filter the reports in the following ways: Use the Search field to find specific reports. Click the All drop-down menu to find the reports for a specific duration of time . You can select any of the following options: Today Yesterday This Week Previous Week This Month All Moderation is available to all workspaces from version 6.2 or above . To learn how to report messages and users, see Report a message or user. You can also install content moderation apps that screen the rooms and report offensive messages automatically. See Content Moderation Apps for details.", "tokens": 512}
{"title": "Federation", "content": "The Federation tab shows statistics about the federation connection on your server. The Federation menu is displayed only when Federation is enabled in the workspace. With the Rocket.Chat Federation setup, you can configure your server to communicate seamlessly with other servers. To access the dashboard, go to Administration > Workspace > Federation. Number of events: This shows the number of federated events that have been triggered. Number of federated users: This shows the number of federated users your server has made access to. Number of federated servers: The number of federated servers your workspace has communicated with. See Rocket.Chat Federation to explore the various federation features and the plans they're supported in.", "tokens": 145}
{"title": "Rooms", "content": "Rocket.Chat rooms are where communication or interaction with other users occurs. This section guides you through various management options for rooms in Rocket.Chat, such as viewing room details, editing, and deleting rooms. To access the room administration menu, navigate to Administration > Workspace > Rooms. It displays all the rooms in your workspace alongside the following details: Name: The name of the room. Type: The category or type of the room. Users: The total number of users in the room. Messages: The total number of messages in the room. Default: Indicates whether the room is set as a default channel. Featured: Indicates whether the room is set as a featured channel. Created at: Displays the date of the room creation. To view or update a room, follow these steps: 1. Navigate to Administration > Workspace > Rooms. 2. Click on the room you want to update. 3. Update any of the following fields: Field Description Avatar Upload or change the room's avatar Name Edit the room's name Owner You can only view the current room owner here. To assign a new room owner, visit Update Room members or View and assign users to roles. Description Provide or update a description of the room Announcement Add an announcement to be displayed as a top banner in the room Topic Set or update the room's topic. Private Toggle the room's privacy setting. Only invited people can access a private channel. Read-only Specify if only authorized users can send new messages to the room Favorite Mark the room as a favorite Default Set the room as a default channel for all new users to automatically join. Archived Archive the room Featured Highlight the room as featured 4. Click Save to apply the changes. To delete a room, Search and click on the room you want to delete Hit Delete Click Yes, delete it! to confirm and delete the room.", "tokens": 387}
{"title": "Users", "content": "The Users menu provides access to various account management functions for users within your Rocket.Chat workspace. This guide will help you navigate the user management settings, allowing you to view and manage your team members' accounts efficiently . To access this menu, go to Administration > Workspace > Users. Users can join your workspace through the following methods: Create an account for the user: Administrators can manually create user accounts . Invite users or self-registration: An admin can invite users or register themselves through the workspace's sign-up page. Additionally, users can be added via Identity management and authentication services integrated with your Rocket.Chat workspace . To manually add a new user: Navigate to Administration > Workspace > Users. Click New user in the top right corner. Enter the values for the following fields: Field Description Email* The email address associated with the user . This email will be used for notifications and communications within the workspace. Mark email as verified Enable this option to automatically verify the user upon creation, eliminating the need for them to manually verify their email . This is important if your workspace requires email verification for user logins. Name* The full name of the user as it should appear within the workspace. Username* A unique identifier for the user within the workspace, used for login and mentions . Usernames can include alphanumeric characters, hyphens, underscores, and periods, but no spaces or other characters. They must be at least one character long . Set password randomly and send by email Automatically generate a random password and send it to the user via email. This requires setting up an SMTP configuration workspace. Set password manually Manually enter and confirm a password for the user, setting a specific login password . If password policies are enabled, there\u2019ll be real-time verification to show how well the password adheres to the rules. Roles* Assign the user one or more roles. Roles determine the user\u2019s permissions and access levels within the workspace . Join default channels Enable this setting to automatically add the user to the default channels (rooms) upon their first login. Send welcome email Send a welcome email inviting the user to join the workspace. This feature requires an\u00a0SMTP configuration", "tokens": 465}
{"title": "Users", "content": ". Status message A custom status message to be displayed alongside the user\u2019s name in the workspace. Bio A short biography or description that other users can view on the user's profile . Nickname An alternate name or alias that the user can choose to display instead of their full name. Show/hide additional fields Display/hide additional fields if custom fields are defined for users in the workspace. Click Save to complete the process . Manually created users will initially be tagged as pending. Once they log in for the first time, their status is updated to active . If the Manually approve new user setting is enabled, the workspace admin must activate the newlyregistered user\u2019s account before they can access the workspace. To invite users to join your workspace: Go to Administration > Workspace > Users . Click the Invite button in the top right corner. Enter the email addresses of the invitees. Click Send to dispatch the invitations. Invitees will receive an email to create an account and access the workspace . For self-managed workspaces, SMTP is required for your workspace to send invitations. The User menu is divided into four sections: All, Pending, Active, and Deactivated . You can search for and select a user from the user list to view their details. To update a user\u2019s information, click the Edit button from the User Info tab. Click the kebab menu next to the Edit button for additional management actions . To filter users by roles, select the roles from the filter input next to the search bar. The All tab displays a list of all the users in your workspace, including bots. Each user's name, username, and registration status are displayed . To get more details about a user, select the user to view their user info . A user\u2019s registration status can be one of the following: Pending: The user has registered and their account is pending activation by an admin, or the admin created the user and they have not logged in for the first time . Active: The user account has been activated by an admin, or the user has logged in for the first time. Deactivated: The user has been deactivated by an admin", "tokens": 465}
{"title": "Users", "content": ". Workspace admins can perform various actions by selecting the appropriate button from the kebab menu next to each user. The available actions are: Deactivate/activate the user: A deactivated user cannot access the workspace unless they are activated again . Delete the user: Deletes the user and the user\u2019s details from the workspace. Make Admin: Assign the admin role to the user . Reset E2E Key: If you have configured E2E in the workspace, this will reset the user's E2E key. The user will have to save the new password . Reset TOTP: If you have enabled 2FA in the workspace, reset the TOTP for the user. The user will be logged out of their account and can log back in using their password", "tokens": 170}
{"title": "Users", "content": ". They can then update the 2FA methods again from their profiles. The pending tab displays users whose accounts are not activated (if required) and who have not logged in for the first time . When an admin creates a user, the user's account is pending until they log in from their welcome email or the login page and activate their account . Workspace admins have the option to resend this welcome email and remind the user to log in in case they have forgotten. Each user's name, username, and pending action are displayed . The \u201cPending Action\u201d column shows whether the user needs to be activated or complete their first-time login . Workspace admins can select the appropriate action button from the actions button next to each user to either activate/deactivate the user, delete the user, or resend the welcome email . The Active tab shows users whose accounts are activated (if applicable) and who have logged in for the first time. It displays each user's name and username . Workspace admins can perform various actions by selecting the appropriate button from the kebab menu next to each user . These actions include promoting/demoting the user as an admin, resetting their E2E key, deactivating their account, or deleting the user. The Deactivated tab displays users whose accounts were once active but have been deactivated . Each entry shows the user's name and username. Workspace admins can reactivate or delete the user's account using the appropriate button from the kebab menu next to each user. The rocket.cat bot is a default feature in Rocket.Chat workspaces . It provides administrators with regular updates, alerts, and notifications regarding version changes and other important events. Like any other workspace user, the bot\u2019s settings can be customized, or it can be deactivated or deleted if needed.", "tokens": 398}
{"title": "Guest Users", "content": "The Guest Users feature in Rocket.Chat enables organizations to extend collaboration beyond internal teams by inviting external users with limited capabilities to your workspace. This setup is ideal for collaboration with partners, contractors, or customers, allowing businesses to grant project-specific access while ensuring security . Key capabilities of guest users: Start discussions. Access and participate in invited rooms. Reply to direct messages. Guest users can join a maximum of one room aside from DMs. Go to Administration > Workspace > Users > New . On the Add User page, enter the guest users' information: Name: Enter the name of the guest user. Username: Enter the guest users's username. Email: Enter the guest users' email address . Verified: Enable or disable this option to verify the guest user. Status Message: Set the guest user's status message. Bio: Enter the guest user's bio information. Nickname: Enter the guest users's nickname . Password: Enter the guest users's password. Require password change: Enable or disable this option to change or reset the password. Set random password and send by email: Enable or disable this option to set a random password and send by email . Roles: Select the guest role from the dropdown menu. Join default channels: Set whether you want the guest user to join default channels. Send welcome email: Set whether you want to send a welcome email to the guest user. Click Save . Once the guest user is added, you can edit, activate, or deactivate the guest user. To edit the guest user, Go to Administration > Workspace > Users. Click the guest user from the list of users to view the User Info . Click the Edit button to edit the user. Click the kebab menu for other actions like activating, deactivating, and deleting the user", "tokens": 379}
{"title": "Guest Users", "content": ". To view the guest user permissions granted in a workspace, Navigate to Administration > Workspace > Permissions and locate the guest role. You can view the enabled permissions for the guest role . By default, the following permissions are enabled for guest users: View Private Room View Joined Room Start Discussion View Direct Messages Guest role permissions cannot be modified for Rocket.Chat workspaces on version 6.0 and above subscribed to the Enterprise plan . You must be an administrator to manage guest users in your workspace. By default, guest users on the Rocket.Chat mobile app have restricted file upload capabilities(e.g., sending images, documents, and audio messages) . However, administrators can grant or revoke the \u00a0Allow file upload on mobile devicespermission for guests using the Execute a Meteor method API . To enable file upload for guests on the mobile app, see the cURL example for Assign Permission to Role method below: To disable file upload for guests on the mobile app, see the cURL example for Remove Permission from Role method below: Rocket .Chat Guest Users feature is a valuable tool for organizations seeking seamless collaboration with external users. It streamlines communication and promotes efficient collaboration without compromising the security of your workspace.", "tokens": 261}
{"title": "Monthly Active Contacts (MACs)", "content": "Monthly Active Contacts (MACs) are a key measure to track how many unique contacts interacting with your workspace through Omnichannel each month. Each plan starts with a default limit of 100 MACs . A contact is deemed active when they send a message that is received, processed by the routing system, and responded to by an agent . If a contact engages through multiple channels (like Livechat, SMS, WhatsApp), they are counted once in the same month, provided they are identified by primary fields (email, phone number) in their profile . Without such identification, the contact is counted multiple times. 100 MACs: All instances start with a default limit of 100 MACs for testing purposes", "tokens": 150}
{"title": "Monthly Active Contacts (MACs)", "content": ". MAC packs allow you to increase your Monthly Active Contacts (MAC) limit for a billing period. Each pack contains up to 3000 active contacts. To exceed the default 100 MACs, you must purchase additional MAC packs . Automatic trial: If you have MAC packs and exceed your limit, a trial period will automatically activate to prevent service disruption. If your usage exceeds the allocated MACs, purchasing additional packs ensures continued service without interruption . The number of MAC packs purchasable depends on the workspace's subscription plan. The billing cycle operates on a monthly basis, commencing from the date of your plan upgrade. This cycle resets at the beginning of each new calendar month . To illustrate, if you switch to the Pro plan on January 18th, your interaction limit with contacts is capped at 15,000 for the period from January 18th to January 31st . Subsequently, on February 1st, this interaction limit is reset, allowing you to engage with up to 15,000 Monthly Active Contacts until the onset of March 1st . With MAC packs: If you exceed your limit with MAC packs, a trial period is activated. Without MAC packs: If you reach the 100 MAC limit without any MAC packs, your service will be interrupted immediately . You will need to purchase MAC packs to restore service. Rocket.Chat permits temporary exceeding of MAC scale limits without extra costs. Triggered when the limit of the current plan is reached, it offers a 30-day trial license for the next plan . Throughout this period, you can engage with multiple contacts within the scale limit specified by the trial plan. This allowance is available once per major release (e.g., 6.x, 7.x, 8.x) . After the trial period, the workspace reverts to the original plan. Different Rocket.Chat plans have specific rules regarding Monthly Active Contacts (MACs). It is crucial to factor in your anticipated monthly contact interaction volume when selecting a plan . Starter plan: Offers 100 free MACs. Upon reaching this limit: If no Pro trial was previously granted, a Pro Trial is activated. If a Pro trial was granted, upgrade to PRO or wait until the next billing month . During this wait interval, the workspace will continue to receive incoming chats. However, agents will not be able to retrieve these chats from the queue", "tokens": 472}
{"title": "Monthly Active Contacts (MACs)", "content": ". Pro plan: Includes Starter plan benefits plus the ability to purchase additional up to 5 MAC packs (each capped at 3000). Upon reaching this limit: If no Enterprise trial was previously granted, an Enterprise Trial is activated . You can continue to interact with your contacts until the trial period expires. If an Enterprise trial was granted, purchase additional MAC packs (up to 5) or upgrade to Enterprise . Alternatively, you have the option to defer handling incoming chats until the beginning of the next billing month. During this interim, the workspace will continue to accept incoming chats, yet agents will be unable to retrieve these chats from the queue . Enterprise plan: Customizable MAC scale limit with the option to purchase additional MAC packs. When a workspace is subject to limit restrictions, workspace managers and administrators have the ability to view incoming chats in current chats, but are restricted from interacting with them . To purchase MAC packs on your workspace, contact our sales team or continue with these steps on your Rocket.Chat Cloud portal, Select the workspace. Click the Manage Subscription button. Select MAC pack as the add-on you want to purchase . Select either a monthly or yearly renewal period. Enter the number of MAC packs you want to purchase. Click Save, and your workspace is updated with the purchased MACs . With MAC packs, workspaces can efficiently manage and scale their interactions with contacts, ensuring a cost-effective and tailored solution for effective Omnichannel engagement. For more details on MACs, visit Monthly Active Contacts FAQs . Purchase MAC packs: Navigate to the billing section of your Rocket.Chat instance. Monitor usage: Keep track of your MAC usage to avoid interruptions. Adjust as needed: Purchase additional MAC packs based on your anticipated usage.", "tokens": 370}
{"title": "Add Users with Identity Management and Authentication Services", "content": "Rocket. Chat provides you with various options for adding users to your workspace. LDAP configuration on Rocket.Chat can be used to establish connections, used for authentication, storing information about users and sync your data. LDAP (Lightweight Directory Access Protocol) enables anyone to locate data about your server or company. To configure LDAP authentication, go to Administration > Workspace > Setting > LDAP. LDAP SAML (Security Assertion Markup Language) is used for exchanging authentication and authorization data. To access SAML setting, go to Administration > Workspace > Settings > SAML. SAML You can configure authentication methods beyond just username and password. To access OAuth setting, go to Administration > Workspace > Settings > OAuth. OAuth CAS (Central Authentication Service) allows members to use one set of credentials to sign in to multiple sites over multiple protocols. To access this setting, go to Administration > Workspace > Settings > CAS. CAS", "tokens": 204}
{"title": "Invites", "content": "Here, you can view and delete the invite links generated to invite users to the team or channels. To access this menu, go to Administration > Workspace > Invites. To create an invite link, see Send an invite link. If you want to delete any of these invite records: Click the cancel button next to it. Hit Yes to confirm the deletion. This feature is handy when you have an invite link with an Expiration date: Never. To prevent abuse, you can revoke the invite link by deleting its record.", "tokens": 114}
{"title": "User Status", "content": "The Rocket.Chat User Status setting lets you manage users' presence and status in your workspace. A Presence is used to determine the Status of a user in the workspace. By default, Rocket.Chat has the following Presence presets. Online: Used to indicate a user is online and available. Away: Indicates a user is idle and away from the workspace. See how to configure the idle time limit here Default User Preferences or as a user in User Presence. Busy: This shows a user is busy and unavailable on the workspace. Offline: Used to indicate a user is offline and not connected. To access this menu, go to Administration > Workspace > User Status. With the Presence service enabled, users can see the status of other users in the workspace. To enable the Presence service, Navigate to Administration > Workspace > User Status > Presence service. Click the Presence Service button. Toggle the Service status to on. Workspaces on the community plan have a maximum limit of 200 concurrent connections. While you can have more connections active, users' statuses will no longer be visible, and the presence service gets disabled once you reach this cap. However, this limitation does not impact their capacity to send and receive messages. When the Presence service gets disabled automatically due to the cap on concurrent connections, Users see the status indicator for all users, including themselves as disabled. The workspace administrator has to manually reactivate the Presence service when the number of connections drops below the connection limit of 200. Workspace users and administrator(s) are notified that Presence is inactive because the workspace has exceeded the connection limit. To create a custom status, Navigate to Administration > Workspace > User Status. Click New custom status. Enter a name for your custom status. Select a presence to tie with your custom status. Hit Save. The custom status and default status presets will be visible to all users in your workspace. To set a custom status, Click on your avatar by the top left of your workspace. From the dropdown, select the custom status from the list of statuses. To delete or edit a custom status, Navigate to Administration > Workspace > User Status. Search and click the custom status you want to edit or delete. Update the details and click Save to edit the status. Click Delete to delete the status.", "tokens": 487}
{"title": "Permissions", "content": "Permissions are essential for maintaining the security and integrity of your workspace, ensuring that users have appropriate access to specific functionalities and resources. Rocket.Chat offers a robust permission-based framework to manage access across various workspace features . Permissions are assigned to roles, and users with those roles gain the corresponding access. Workspace administrators and users with the necessary permissions can modify both roles and their associated permissions as needed. To learn about managing roles, see Roles in Rocket.Chat . To access the Permissions menu, go to Administration > Workspace > Permissions. Permission updates take effect instantly without requiring users to log out, sign in again, or refresh the system . The permissions you can assign to a role on your workspace include the following: The list of permissions is not comprehensive. Name Codebase Name Purpose Access Mailer Screen access-mailer Permission to use the Mailer Tool", "tokens": 186}
{"title": "Permissions", "content": ". Access Permissions Screen access-permissions Permission to create and edit roles and permissions. Add all users to a room add-all-to-room Permission to add all users to a room . Add Omnichannel Agents to Departments add-livechat-department-agents Permission to assign an omnichannel agent to a department. Add OAuth Service add-oauth-service Permission to manage different OAuth services and apps . Add Team Channel add-team-channel Permission to add channels to a team. It has been renamed to Move room within team from 7.0.0. Move room within team move-room-to-team Permission to add an existing room to a team . Add Team Member add-team-member Permission to add members to a team. Add User to Any Public Channel add-user-to-any-c-room Permission to add a user to a public channel . Add User to Any Private Channel add-user-to-any-p-room Permission to add a user to a private channel. Add User to Any Joined Channel add-user-to-joined-room Permission to add a user to a joined channel . Bypass rate limit for REST API api-bypass-rate-limit Permission to call API without rate limitation. See Rate Limiter. Archive Room archive-room Permission to archive a channel . Assign Admin Role assign-admin-role Permission to assign a user to the admin role. Requires view-user-administration permission. Assign Roles assign-roles Permission to assign roles for a user. Requires view-user-administration permission . Auto Translate auto-translate Permission to use the Auto Translate Tool. Ban User ban-user Permission to ban a user. Block IP Device Management bulk-create-c Permission to bulk create public channels. Bulk Create Users bulk-register-user Permission to bulk add users . Bypass time limit Call Management call-management Permission to start a meeting. Requires Video Conference -> BigBlueButton enabled. Accessible from More -> BBB Video Chat -> Start Meeting", "tokens": 426}
{"title": "Permissions", "content": ". Clean Channel History clean-channel-history Permission to prune a channel's messages and/or files. clean-group-history Permission to prune a group's messages and/or files. clean-direct-history Permission to prune direct messages and/or files . Close Omnichannel Room close-livechat-room Permission to close your own Livechat channels. Close Other Omnichannel Room close-others-livechat-room Permission to close other Livechat channels. Convert Team convert-team Permission to convert team to channel . Create Public Channels create-c Permission to create public channels. Create Direct Messages create-d Permission to start direct messages . Create Invite Links create-invite-links Permission to create invite links to add members to a room Create Private Channels create-p Permission to create private groups. Create Personal Access Tokens create-personal-access-tokens Permission to create Personal Access Tokens . Accessible from My Account -> Personal Access Tokens. Create User create-user Permission to create new users. Accessible from Administration -> Users. Click the + sign found on the top right-hand corner of the Users list to create a new user . Create Team create-team Permission to create a team. Create group within team create-team-group Permission to create private channels in a Team. Create channel within team create-team-channel Permission to create public channels in a Team . Delete Public Channels delete-c Permission to delete public channels. Delete Direct Messages delete-d Permission to delete direct messages. Delete Message delete-message Permission to delete a message within a channel. Delete Own Message delete-own-message Permission to delete your own message . Delete Private Channels delete-p Permission to delete private channels . Delete group within Team delete-team-group Permission to delete private channels in a Team Delete channel within Team delete-team-channel Permission to delete public channels in a Team Edit Livechat Room Custom Fields edit-livechat-room-customfields Permission to edit a livechat custom field", "tokens": 442}
{"title": "Permissions", "content": ". Delete User delete-user Permission to delete users. Delete Team delete-team Permission to delete a team Edit Message edit-message Permission to edit a message. Edit Omnichannel Contact edit-omnichannel-contact Permission to edit omnichannel contact . Edit Other User Active Status edit-other-user-active-status Permission to enable or disable other accounts. Accessible from Administration -> Users. Edit Other User Avatar edit-other-user-avatar Permission to edit other users avatar . Edit Other User E2E Encryption edit-other-user-e2ee Permission to edit other users E2E key. Edit Other User Information edit-other-user-info Permission to change other user's name, username, or email address . Accessible from Administration -> Users. Edit Other User Password edit-other-user-password Permission to modify other user's passwords. Requires edit-other-user-info permission. Accessible from Administration -> Users . Edit Other User Two Factor TOTP edit-other-user-totp Permission to edit other user TOTP. Edit Privileged Setting edit-privileged-setting Permission to edit privileged settings . Edit Room edit-room Permission to edit a room's name, topic, type (private or public status), and status (active or archived). Edit Room Avatar edit-room-avatar Permission to edit a room avatar . Edit Room's Retention Policy edit-room-retention-policy Permission to edit a room's retention policy. Edit Team edit-team Permission to edit a team . Edit Team Channel edit-team-channel Permission to add a team channel Edit Team Member edit-team-member Permission to add a team member. Force Delete Message force-delete-message Permission to forcefully delete messages, independent of any deletion blocking setting . Inbound Voip Calls inbound-voip-calls Join Without Join Code join-without-join-code Permission to bypass join codes when entering a channel with a join code set. Leave Channels leave-c Permission to leave the public channel . Leave Private Groups leave-p Permission to leave the private channel. Logout Device Management logout-device-management Permission to log out device. Logout Other User logout-other-user Permission to log out other users", "tokens": 479}
{"title": "Permissions", "content": ". Mail Messages mail-messages Permission to use the \"Mail Messages\" tool in the channel actions menu. Manage Agent Extension Association manage-agent-extension-association Permission to manage extension association. Manage Apps manage-apps Permission to manage all apps . Accessible from Administration -> Apps. Manage Assets manage-assets Permission to manage assets. Must also be admin Accessible from Administration -> Assets. manage-chatpal Manage Email Inbox manage-email-inbox Permission to manage email inbox . Manage Cloud manage-cloud Permission to manage cloud. Requires view-user-administration permission. Accessible from Administration -> Cloud. Manage Emoji manage-emoji Permission to add custom emojis to the server. Accessible from Administration -> Custom Emoji . Manage Incoming Integrations manage-incoming-integrations Permission to manage all incoming integrations. Accessible from Administration -> Integrations. Manage Outgoing Integrations manage-outgoing-integrations Permission to manage all outgoing integrations . Accessible from Administration -> Integrations. Manage OAuth Apps manage-oauth-apps Permission to manage OAuth apps. Accessible from Administration -> OAuth. Manage Outgoing Integrations manage-outgoing-integrations Permission to manage all outgoing integrations . Accessible from Administration -> Integrations. Manage Outgoing Integrations manage-own-outgoing-integrations User can create and edit own outgoing integration - webhooks", "tokens": 288}
{"title": "Permissions", "content": ". Manage Own Incoming Integrations manage-own-incoming-integrations User can create and edit own incoming integration - webhooks. Manage Omnichannel Agents manage-livechat-agents Permission to manage omnichannel agents . Manage Omnichannel Canned Responses manage-livechat-canned-responses Permission to manage canned responses. Manage Omnichannel Departments manage-livechat-departments Permission to manage omnichannel departments . Manage Omnichannel Managers manage-livechat-managers Permission to manage omnichannel managers. Manage Omnichannel Monitors manage-livechat-monitors Permission to manage omnichannel monitors . Manage Omnichannel Priorities manage-livechat-priorities Permission to manage omnichannel priorities . Manage Omnichannel SLA manage-livechat-sla Permission to manage omnichannel SLA Manage Omnichannel Tags manage-livechat-tags Permission to manage omnichannel tags . Manage Omnichannel Units manage-livechat-units Permission to manage omnichannel units. Manage Moderation Actions manage-moderation-actions Permission to manage moderation. Change Some Settings manage-selected-settings Permission to change settings which are explicitly granted to be changed . Manage Sounds manage-sounds Permission to manage sounds. Accessible from Administration -> Custom Sounds. Manage User Status manage-user-status Permission to manage user status. Manage Voip Call Settings manage-voip-call-settings Permission to manage Voip call settings . Manage Voip Contact Center Settings manage-voip-contact-center-settings Permission to manage Voip contact center. Mention All mention-all Permission to mention everyone in a channel. Mention Here mention-here Permission to notify active users in a channel . Impersonate Other Users message-impersonate Permission to impersonate other users using message alias. Accessible from Administration -> Permissions. | Mute User mute-user Permission to mute other users in the same channel . On Hold Omnichannel Room on-hold-livechat-room Permission to put a room on hold. On Hold Others Omnichannel Room on-hold-others-livechat-room Permission to put livechat room on hold for others", "tokens": 470}
{"title": "Permissions", "content": ". Outbound Voip Calls outbound-voip-calls Permission to outbound voip calls. Pin Message pin-message Permission to pin a message in a channel. Post ReadOnly post-readonly Permission to post messages on read-only channels . Preview Public Channel preview-c-room Permission to preview messages in public channels without joining the room. Register On Cloud register-on-cloud Permission to register a workspace manually. Remove Canned Responses remove-canned-responses Permission to remove canned responses . Remove Closed Omnichannel Room remove-closed-livechat-rooms Permission to close Live Chat rooms. Requires view-livechat-rooms permission. Accessible from Live Chat -> Current Chats . Remove Omnichannel Departments remove-livechat-department Permission to remove omnichannel departments. Remove Slackbridge Links remove-slackbridge-links Permission to remove slackbridge links Remove Team Channel remove-team-channel Permission to remove a channel from a team . Remove User remove-user Permission to remove users from channels. Request PDF Transcript request-pdf-transcript Permission to request a PDF transcript for a chat. Restart the server restart_server Permission to reset the server . Reset Other User E2E reset-other-user-e2e-key Permission to set E2E key. See End to End Encryption. Run Import run-import Permission to use the data importer tools. Must also be an admin . Accessible from Administration -> Import. Run Migration run-migration Permission to run migrations. Save All Canned Responses save-all-canned-responses Permission to save all canned responses. Save Canned Responses save-canned-responses Permission to save canned responses . Save Department Canned Responses save-department-canned-responses Permission to save canned responses in the right. Save Others Omnichannel Room Info save-others-livechat-room-info Permission to add additional information to both the visitor and Live Chat rooms . Send Many Messages send-many-messages Permission to bypasses rate limit of 5 messages per second. Send Omnichannel Conversation Transcript send-omnichannel-chat-transcript Permission to send omnichannel transcript . Set Leader set-leader Permission to set leaders for channels Set Moderator set-moderator Permission to set moderators for channels. Set Owner set-owner Permission to set other users as owner of a public channel", "tokens": 487}
{"title": "Permissions", "content": ". Set React When ReadOnly set-react-when-readonly Permission to react to messages in only channels. Set ReadOnly set-readonly Permission to set room read-only. Accessible from Room Info -> Edit. Snippet Message snippet-message Permission to create message snippets . Spy Voip Calls spy-voip-calls Start Discussion start-discussion Permission to start a discussion . Start Discussion (Other-User) start-discussion-other-user Permission to start a discussion, which permits the user to create a discussion from a message sent by another user as well", "tokens": 130}
{"title": "Permissions", "content": ". Sync authentication services' users sync-auth-services-users Permission to sync users from other authentication services to the workspace. Toggle Room E2E Encryption toggle-room-e2e-encryption Permission to toggle E2E encryption . Unarchive Room unarchive-room Permission to unarchive channels. User Generate Access Token user-generate-access-token Permission to create authorization tokens for users. Ring other users when calling videoconf-ring-users Permission to ring other users when calling . View Agent Canned Responses view-agent-canned-responses Permission to view canned responses of an agent. View Agent Extension Association view-agent-extension-association Permission to view agent extension association . View All Canned Responses view-all-canned-responses Permission to view all canned responses View All Team Channels view-all-team-channels Permission to view all team's channels View All Teams view-all-teams Permission to view all teams View Members List in Broadcast Room view-broadcast-member-list Permission to view the list of users in a broadcast channel . View Public Channel view-c-room Permission to view public channels. View Direct Messages view-d-room Permission to view direct messages. Does not affect the ability to begin/start a direct message with another user . View Device Management view-device-management Permission to view device management dashboard View Engagement Dashboard view-engagement-dashboard Permission to view engagement dashboard . View Federation Data view-federation-data Permission to view federation data View Full Other User Info view-full-other-user-info Permission to view full profile of other users including account creation date, last login, etc . View Import Operations view-import-operations Permission to view import operations View Join Code view-join-code Permission to view the join code of channels. View Joined Room view-joined-room Permission to view current joined channels", "tokens": 385}
{"title": "Permissions", "content": ". View Omnichannel Rooms view-l-room Permission to view Live Chat channel. View Omnichannel Analytics view-livechat-analytics Permission to view Live Chat analytics. Requires Live Chat feature enabled and view-Livehat-manager permission . View Omnichannel Appearance view-livechat-appearance Permission to view live chat appearance. View Omnichannel Business-Hours view-livechat-business-hours Permission to view live chat business hours . View Omnichannel Current Chats view-livechat-current-chats Permission to view live chat current chats View Omnichannel Custom Fields view-livechat-customfields Permission to view Omnichannel custom fields . View Omnichannel Departments view-livechat-departments Permission to view Omnichannel departments . View Omnichannel Installation view-livechat-installation Permission to view Omnichannel installation View Omnichannel Manager view-livechat-manager Permission to view other Live Chat managers . View Omnichannel Queue view-livechat-queue Permission to view Omnichannel queue View Omnichannel Real-time Monitoring view-livechat-real-time-monitoring Permission to view livechat real-time monitoring . View Omnichannel Rooms closed by another agent view-livechat-room-closed-by-another-agent Permission to view live chat rooms closed by another agent . View Omnichannel Rooms closed by another agent in the same department view-livechat-room-closed-same-department Permission to view live chat rooms closed by another agent in the same department . View Omnichannel Rooms view-livechat-rooms Permission to view a list of Live Chat channels. View Omnichannel Triggers view-livechat-triggers Permission to view live chat triggers . View Omnichannel Webhooks view-livechat-webhooks Permission to view live chat webhooks View Logs view-logs Permission to view logs. Accessible from Administration -> View Logs", "tokens": 433}
{"title": "Permissions", "content": ". View Moderation Console view-moderation-console Permission to view the moderation console of the server. View Omnichannel Contact Center View Omnichannel Contact Center Permission to manage access to the contact center . View Other User Channels view-other-user-channels Permission to manage channels on the admin screen. View Outside Room view-outside-room Permission to find new channels and users . Users without this permission won't see channels that they are not part of when searching using the spotlight. View Private Room view-p-room Permission to view private channels. View Privileged Setting view-privileged-setting Permission to view privileged settings . View Room Administration view-room-administration Enables Administration -> Channels module. Enables Permission to view public, private, and direct message statistics. Does not include permission to view conversations or archives. View StatisticsView User Administration view-statistics Enables Administration -> Info module . Enables the permission to view system statistics such as number of users logged in, number of rooms, operating system information. View User Administration view-user-administration Enables Administration -> Users module . Only includes partial, read-only list view of other user accounts currently logged into the system. No user account information is accessible with this permission. Add view-full-other-user-info to see a complete list of other users via the Administration -> Users . Manage Voice Calls manage-voip-extensions Permission to manage voice calls and assign VoIP extension to users View Voice Call Extensions voip-extension-details Permission to see contact information during calls Allow Voice Calls view-user-voip-extension Permission to access user-facing features in the Team Voice Calls (VoIP) interface, excluding administrative controls . Without this permission, voice calling functionality will be disabled for the user Can Audit can-audit Permission to access the Message Auditing Panel Can Audit Log can-audit-log Permission to check the details about who used the Message Auditing Panel and their search results Allow file upload on mobile devices Allow file upload on mobile devices Permission to allow mobile users to upload files to the workspace . By carefully managing permissions, administrators can provide a safe space for collaboration. As we move on to the next section, we'll discuss managing permissions for workspace settings.", "tokens": 472}
{"title": "Setting's Permission", "content": "The Settings in the Permissions tab enable you to control the settings users can alter within a workspace based on their roles. Rather than providing unrestricted access, you have the option to grant specific permissions associated with particular tasks . For instance, a user responsible for file uploads can allocate permissions to change settings strictly related to file upload while limiting access to other sensitive workspace settings . Managing permissions with such precision can enhance security, mitigate the risk of inadvertent alterations, and streamline the distribution of duties throughout the workspace. All settings have permissions to determine which users can access them . To access the settings, go to Administration > Workspace > Permissions > Settings. The following list of settings is not comprehensive. You can find more settings on your workspace . Name Codebase Name Description General > REST API > Allow Getting Everything API_Allow_Infinite_Count Allow REST API requests to return all results in one call . General > REST API > CORS Origin API_CORS_Origin General > REST API > Apply permission view-outside-room to api users.list API_Apply_permission_view-outside-room_on_users-list Temporary setting to enforce view-outside-room permission to users . General > REST API > Default Count API_Default_Count The default count for REST API results if the consumer did not provided any Message > Embed Cache Expiration Days API_EmbedCacheExpirationDays Embed Cache Expiration Days . Message > Embed Request User Agent API_Embed_UserAgent Message > API_Embed_clear_cache_now API_Embed_UserAgent Message > Safe Ports API_EmbedIgnoredHosts List of hosts or CIDR addresses, eg. localhost, 127 .0.0.1, 10.0.0.0/8, 172.16.0.0/12, 192.168.0 .0/16 OAuth > Drupal > Drupal Server URL API_Drupal_URL Example: https://domain", "tokens": 444}
{"title": "Setting's Permission", "content": ".com (excluding trailing slash Embed Link Previews API_Embed Whether embedded link previews are enabled or not when a user posts a link to a website Accounts Accounts > Allow Anonymous Read Accounts_AllowAnonymousRead Accounts > Allow Anonymous Write Accounts_AllowAnonymousWrite Accounts > Allow Users to Delete Own Account Accounts_AllowDeleteOwnAccount Accounts > Allow Email Change Accounts_AllowEmailChange Accounts > Allow Email Notifications Accounts_AllowEmailNotifications Accounts > Allow Invisible status option Accounts_AllowInvisibleStatusOption Accounts > Allow Password Change Accounts_AllowPasswordChange Accounts > Allow Password Change for OAuth users Accounts_AllowPasswordChangeForOAuthUsers Accounts > Allow Name Change Accounts_AllowRealNameChange Accounts > Allow User Avatar Change Accounts_AllowUserAvatarChange Accounts > Allow User Profile Change Accounts_AllowUserProfileChange Accounts > Allow Custom Status Message Accounts_AllowUserStatusMessageChange Accounts > Allow Username Change Accounts_AllowUsernameChang Accounts > Registration > Allowed DomainsList Accounts_AllowedDomainsList Accounts > Avatar > Block Unauthenticated Access Accounts_AvatarBlockUnauthenticatedAccess Block Unauthenticated Access to Avatars Accounts > Avatar > Avatar cache time Accounts_AvatarCacheTime Number of seconds the http protocol is told to cache the avatar images . Accounts > Avatar > Resize Avatars Accounts_AvatarResize Accounts > Avatar > Avatar Size Accounts_AvatarSize Accounts > Registration > Blocked Domain List Accounts_BlockedDomainsList Comma-separated list of blocked domains . Accounts > Avatar > Resize Avatars Accounts_AvatarResize Accounts > Avatar > Avatar External ProviderUrl Accounts_AvatarExternalProviderUrl Avatar External Provider URL Accounts > Registration > Blocked Username List Accounts_BlockedUsernameLis Comma-separated list of blocked usernames (case-insensitive) Accounts > Registration > Accounts_CustomFields_Description Accounts_CustomFields_Description Should be a valid JSON where keys are the field names containing a dictionary of field settings Accounts > Custom Fields to Show in User Info Accounts_CustomFieldsToShowInUserInfo Custom Fields to Show in User Info", "tokens": 468}
{"title": "Setting's Permission", "content": ". Accounts > Registration > Default Username Prefix Suggestion Accounts_DefaultUsernamePrefixSuggestion Default Username Prefix Suggestion Accounts > Default User Preferences > Also Send Thread To Channel Description Accounts_Default_User_Preferences_alsoSendThreadToChannel Allow users to select the Also send to channel behavior Accounts > Default User Preferences > Collapse Embedded Media by Default Collapse_Embedded_Media_By_Default Collapse Embedded Media by Default Accounts > Default User Preferences > Accounts > Convert ASCII to Emoji Convert_Ascii_Emojis Convert ASCII to Emoji Accounts > Default User Preferences > Accounts > Desktop Notification Require Interaction Notification_RequireInteraction Require Interaction to Dismiss Desktop Notification Accounts > Default User Preferences > Accounts > Email Notification Mode Email_Notification_Mode Offline Email Notifications Accounts > Default User Preferences > Accounts > Enable Auto Away Enable_Auto_Away Enable Auto Away Accounts > Default User Preferences > Hide Flex Tab Hide_flextab Hide Contextual Bar by clicking outside of it Accounts > Default User Preferences > Accounts > Hide Roles Hide_roles Hide Roles Accounts > Default User Preferences > Accounts > Hide Usernames Hide_usernames Hide Usernames Accounts > Default User Preferences > Accounts > Idle Time Limit Idle_Time_Limit Period of time until status changes to away . Value needs to be in seconds . Accounts > Default User Preferences > Accounts > Mute Focused Conversations Mute_Focused_Conversations Mute Focused Conversations Accounts > Default User Preferences > Accounts > New Message Notification New_Message_Notification New Message Notification Accounts > Default User Preferences > Accounts > New Room Notification New_Room_Notification New Room Notification Accounts > Default User Preferences > Accounts > Notifications sound volume Notifications_Sound_Volume Notifications sound volume Accounts > Default User Preferences > Accounts > Push Notifications Accounts_Default_User_Preferences_pushNotifications Push Notifications Default Alert Accounts > Default User Preferences > Accounts > Save Mobile Bandwidth Save_Mobile_Bandwidth Save Mobile Bandwidth Accounts > Default User Preferences > Accounts > Display Avatars in Sidebar Display_Avatars_Sidebar Display Avatars in Sidebar Accounts > Default User Preferences > Accounts > Group by Type Group_by_Type Group by Type Accounts > Default User Preferences > Accounts >Use Emojis Use_Emojis Use Emojis Accounts > Default Directory Listing Accounts_Directory_DefaultView Default Directory Listing Accounts >", "tokens": 489}
{"title": "Setting's Permission", "content": "Accounts_EmailOrUsernamePlaceholder Placeholder_for_email_or_username_login_field Placeholder for Email or Username Login Field Accounts > Registration > Only allow verified users to login Accounts_EmailVerification Allow onlly verified users to login Email > Registration > Enrollment Email Accounts_Enrollment_Email Enrollment Email Email > Registration > Accounts_Enrollment_Email Subject Accounts_Enrollment_Email_Subject_Default Accounts Enrollment Email Subject Accounts > Forget User Session on Window Close Accounts_ForgetUserSessionOnWindowClose Forget User Session on Window Close Accounts > Iframe > Api Method Accounts_Iframe_api_method Api Method Accounts > Iframe > API URL Accounts_Iframe_api_url API URL Accounts > Login Expiration in Days Accounts_LoginExpiration Login Expiration in Days Accounts > Registration > Manually", "tokens": 188}
{"title": "Setting's Permission", "content": "Approve New Users Accounts_ManuallyApproveNewUsers Manually Approve New Users OAuth > Apple > Accounts_OAuth_Apple_Id Accounts_OAuth_Apple Enable Apple Login OAuth > Drupal > Drupal Login Enabled Accounts_OAuth_Drupal Drupal Login Enabled OAuth > Drupal > Drupal oAuth2 Redirect URI Accounts_OAuth_Drupal_callback_url Drupal oAuth2 Redirect URI OAuth > Drupal > Drupal oAuth2 Client ID Accounts_OAuth_Drupal_id Drupal oAuth2 Client ID OAuth > Drupal > Drupal oAuth2 Client Secret Accounts_OAuth_Drupal_secret Drupal oAuth2 Client Secret OAuth > Facebook > Facebook Login Accounts_OAuth_Facebook Facebook Login OAuth > Facebook > Facebook App ID Accounts_OAuth_Facebook_id Facebook App ID OAuth > Facebook > Facebook Callback URL Accounts_OAuth_Facebook_callback_url Facebook Callback URL OAuth > GitHub Enterprise > OAuth Enabled Accounts_OAuth_Github Enable Github Oauth OAuth > GitHub Enterprise > GitHub Enterprise Callback URL Accounts_OAuth_GitHub_Enterprise_callback_url GitHub Enterprise Callback URL OAuth > GitHub Enterprise > Client Id Accounts_OAuth_GitHub_Enterprise_id Github Enterprise Client Id OAuth > GitHub Enterprise > Client Secret Accounts_OAuth_GitHub_Enterprise_secret Github Enterprise Client Secret OAuth > GitHub Enterprise > Client Id Accounts_OAuth_Github_id Github Enterprise Client Id OAuth > GitHub > Client Secret Accounts_OAuth_Github_secret Github Enterprise Client Secret OAuth > GitHub > GitHub Enterprise Callback URL Accounts_OAuth_Github_callback_url GitHub Callback URL OAuth > GitHub > Client Id Accounts_OAuth_Github_id Github Client ID OAuth > GitHub > OAuth Enabled Accounts_OAuth_Github OAuth Enabled OAuth > GitLab > OAuth Enabled Accounts_OAuth_Gitlab OAuth Enable OAuth > GitLab > GitLab Callback URL Accounts_OAuth_Gitlab_callback_url GitLab Callback URL OAuth > GitLab > GitLab Id Accounts_OAuth_Gitlab_id GitLab Id OAuth > GitLab > Identity Path Accounts_OAuth_Gitlab_identity_path GitLab Identihty Pat OAuth > GitLab > Merge Users Accounts_OAuth_Gitlab_merge_users GitLab Merge Users OAuth > GitLab > Client Secret Accounts_OAuth_Gitlab_secret GitLab Client Secret OAuth > Linkedin > LinkedIn Login Accounts_OAuth_Linkedin LinkedIn Login OAuth > Linkedin > Linkedin Callback URL Accounts_OAuth_Linkedin_callback_url Linkedin Callback URL OAuth > Linkedin > LinkedIn Id", "tokens": 778}
{"title": "Setting's Permission", "content": "Accounts_OAuth_Linkedin_id LinkedIn Id OAuth > Linkedin > LinkedIn Secret Accounts_OAuth_Linkedin_secret LinkedIn Secret OAuth > Meteor > Meteor Login Accounts_OAuth_Meteor Meteor Login OAuth > Meteor > Meteor Callback URL Accounts_OAuth_Meteor_callback_url Meteor Callback URL OAuth > Meteor > Meteor Id Accounts_OAuth_Meteor_callback_url Meteor Callback URL OAuth > Meteor > Meteor Id Accounts_OAuth_Meteor_id Meteor Id OAuth > Meteor > Meteor Secret Accounts_OAuth_Meteor_secret Meteor Secret OAuth > Nextcloud > OAuth Enabled Accounts_OAuth_Nextcloud OAuth Enabled OAuth > Nextcloud > Nextcloud Server URL Accounts_OAuth_Nextcloud_URL Nextcloud Server URL OAuth > Nextcloud > Nextcloud Callback Accounts_OAuth_Nextcloud_callback_url Nextcloud Callback URL OAuth > Nextcloud > Nextcloud Id Accounts_OAuth_Nextcloud_id Nextcloud Id OAuth > Nextcloud > Client Secret Accounts_OAuth_Nextcloud_secret Client Secret OAuth > Proxy > Proxy Host Accounts_OAuth_Proxy_host Proxy Host OAuth > Proxy > Proxy Services Accounts_OAuth_Proxy_services Proxy Services OAuth > Tokenpass > Tokenpass Login Accounts_OAuth_Tokenpass Tokenpass Login OAuth > Tokenpass >Tokenpass Callback URL Accounts_OAuth_Tokenpass_callback_url Tokenpass Callback URL OAuth > Tokenpass > Tokenpass Id Accounts_OAuth_Tokenpass_id Tokenpass Id OAuth > Tokenpass > Tokenpass Secret Accounts_OAuth_Tokenpass_secret Tokenpass Secret OAuth > Twitter > Twitter Login Accounts_OAuth_Twitter Twitter Login OAuth > Twitter > Twitter Callback URL Accounts_OAuth_Twitter_callback_url Twitter Callback URLL OAuth > Twitter > Twitter Id Accounts_OAuth_Twitter_id Twitter Id OAuth > Twitter > Twitter Secret Accounts_OAuth_Twitter_secret Twitter Secret OAuth > WordPress > WordPress Login Accounts_OAuth_Wordpress WordPress Login OAuth > WordPress > Authorize Path Accounts_OAuth_Wordpress_authorize_path Wordpress Authorize Path OAuth > WordPress > WordPress Callback URL Accounts_OAuth_Wordpress_callback_url WordPress Callback URL OAuth > WordPress > WordPress Id Accounts_OAuth_Wordpress_id WordPress Id OAuth > WordPress > Identity Path Accounts_OAuth_Wordpress_identity_path Identity Path OAuth > WordPress >Identity Token Sent Via Accounts_OAuth_Wordpress_identity_token_sent_via Identity Token Sent OAuth > WordPress > WordPress Secret Accounts_OAuth_Wordpress_secret WordPress Secret OAuth > WordPress > Scope Accounts_OAuth_Wordpress_scope Wordpress scope Layout > Login > Show Default Login Form Accounts_ShowFormLogin Show Default Login Form", "tokens": 743}
{"title": "Setting's Permission", "content": ". Outlook calendar Outlook_calendar Outlook calendar Accounts > Iframe > Enabled Accounts_iframe_enabled Enable Iframe Accounts > Iframe > Iframe URL Accounts_iframe_url Iframe URL Email > Privacy > Add Sender to Reply-To Add_Sender_To_ReplyTo Add Sender to Reply-To General > Allow Invalid Self-Signed Certs Allow_Invalid_SelfSigned_Certs Allow Invalid Self-Signed Certs Setup Wizard > Organization Info > Allow Marketing Emails Allow_Marketing_Emails Allow Marketing Emails Mobile > Allow Save Media to Gallery Allow_Save_Media_to_Gallery Allow Save Media to Gallery Analytics Analytics Analytics Analytics > Features Enabled > Analytics_Messages Analytics_features_messages Tracks custom events related to actions a user does on messages Analytics > Features Enabled > Analytics_Rooms Analytics_features_rooms Tracks custom events related to actions on a channel or group (create, leave, delete) . Analytics > Features Enabled > Analytics_Users Analytics_features_users Tracks custom events related to actions related to users (password reset times, profile picture change, etc) . General > Apps > Directory for storing apps source package Apps_Framework_Source_Package_Storage_FileSystem_Path Directory for storing apps source package General > Apps > Apps' Source Package Storage type", "tokens": 282}
{"title": "Email Inboxes", "content": "You can configure and manage different email inboxes or email accounts to communicate with other users or your Omnichannel customers via email channels. Before setting up email inboxes, ensure that you configure SMTP in the workspace Email settings . You must enable the Omnichannel feature to use email inboxes. Additionally, agents and managers must be assigned. Go to Administration > Workspace > Email Inboxes. Click + New Email Inbox . Enter the following details: Field Description Inbox Info Active* Enable this option to set this email inbox as active. Email* Enter the email address. Description Enter a description for this email inbox . Sender Info Enter the sender\u2019s information that will be displayed in the From: header of the emails you send. Department Select a department from the drop-down menu. Only members of the selected departments can view the emails . Configure Outgoing Mail (SMTP) Server* Enter the SMTP server URL. Port* Enter the server port. Username* Enter the server username. Password* Enter the server password . Connect with SSL/TLS Enable this option to use the SSL/TLS connection. For Outlook accounts, disable the SSL option under SMTP. Configure Incoming Mail (IMAP) Server* Enter the SMTP server URL. Port* Enter the server port . Username* Enter the server username. Password* Enter the server password. Maximum attempts to reconnect to the server* Enter the number of attempts of attempts the server must wait to reconnect . Connect with SSL/TLS Enable this option to use the SSL/TLS connection. Once you\u2019ve set the values according to your requirements, click Save. Click Send test email to verify that the configuration was successful . The email inbox must be Active for this to work. Now that your email inbox is set up, your users or agents can receive emails within Rocket.Chat . The emails will be redirected to an available livechat room for the specified department, or to all departments if no department is selected. You can also set up multiple email inboxes for different purposes", "tokens": 459}
{"title": "Email Inboxes", "content": ". If your email account has two-factor authentication enabled, connecting with your regular email password will result in an error. You need to generate an app password instead . To generate your app password, follow any of these guides according to your needs: Sign in with App Passwords - Google Account Help Manage app passwords for two-step verification Create and manage third-party app passwords Generate and manage third-party app passwords | Yahoo Help - SLN15241 Learn how to use email inboxes feature as an omnichannel agent. In your Rocket.Chat workspace, you can receive emails from contacts on an email address configured as an email inbox. To use this feature, your workspace administrator must enable Omnichannel and assign agents and managers. Kindly contact your administrator to set up email inboxes on your workspace. Once an email inbox is set up successfully, any new email received is shown in your Rocket.Chat workspace. You can view and reply to these emails from your workspace. When you reply, it appears like any other email in your contact\u2019s inbox. When you log in to your workspace as an agent and set your status to Available, to handle new conversations: Any new email initiated to the department you belong to appears under Chats in Progress. Click on an email to reply to the omnichannel contact. As soon as your contact sends an email, it will appear under Chats in Progress. Click the chat to open it. Click Reply via Email, type your message, and click Send. Your contact receives the reply in their email. If you type without clicking Reply via Email, your contact will NOT receive your reply at all. Suppose you need help with a particular email, you can invite your fellow agent to that channel using /invite @username . Once an agent is invited to an email inbox, they have access to all the previous conversations that have taken place there. You can also have internal conversations with your fellow agent on the same channel. To reply to an email with an attachment, Click Reply via Email, then upload and send the file. Click Send via Email as attachment.", "tokens": 449}
{"title": "Mailer", "content": "Use the Mailer tool to send emails to users inside your Rocket.Chat server. To access this menu, navigate to Administration > Workspace > Mailer. Use the From field to set the address to send the email. Check the Dry Run option to send the email only to the address defined in From. You can also filter who receives the email by using a valid user query in the Query field. Then, you can write a subject and a body for the email. When you write the body, add brackets to add dynamic data to the body. Add the following brackets to the email body: [unsubscribe]: creates an unsubscribe link. The email body must have an unsubscribe link. [name]: uses the full name of the user that receives the email [fname]: uses the first name of the user that receives the email [lname]: uses the last name of the user that receives the email [email]: uses the email address of the user that receives the email", "tokens": 214}
{"title": "Third-party Login", "content": "Rocket.Chat's Third-party login allows you to access custom applications through OAuth using your Rocket.Chat account. For example, you can log in to platforms using your Rocket.Chat credentials. You can add and view the third-party login apps linked with your workspace . This guide walks you through the example of adding a Zapier integration as a third-party login application. With this, you can log in to Zapier using your Rocket.Chat workspace credentials . Create a developer account on the Zapier platform and follow these steps: Go to the My Integrations tab. On the Create Integration page, enter the integration details according to your requirements. Click Create . In the newly created integration, click Authentication > OAuth v2. Note the redirect URL from the Step 2 Copy your OAuth Redirect URL section. Let's move on to adding an application to the Rocket.Chat workspace . To add a new app in the Rocket.Chat workspace, follow these steps: Go to Administration > Workspace > Third-party login to access the third-party login tab. Click New application at the top-right . Enter the following details of the app: Active: Enable this to activate the app. Application Name: The name of the application. It will be displayed to your users. For example, Zapier login . Redirect URI: After OAuth2 authentication, users will be redirected to a URL on this list. You can add one URL per line. For this scenario, paste the URL value you got from the OAuth v2 authentication integration", "tokens": 353}
{"title": "Third-party Login", "content": ". For example, https://zapier.com/dashboard/auth/oauth/return/App201062CLIAPI/ Click Save. Now we will configure the integration that we created in Zapier. This will let us connect the OAuth integration with the Rocket .Chat workspace application. We can then log in to Zapier using the Rocket.Chat credentials. In your Rocket.Chat workspace, click the application you created. The Active status, Application Name, and Redirect URI\u00a0values are displayed . Additional configuration fields\u2014Client ID,\u00a0Client Secret,\u00a0Authorization URL, and\u00a0Access Token URL\u2014are also displayed. The values are automatically filled. You can edit the values to suit your requirements. Make sure to save the application . Copy the Client ID and Client Secret values. Paste these values in the Zapier integration \u201cStep 3 Enter your Application Credentials\u201d section . For example, Client ID: zapier Client secret: RTK6TlndaCIolhQhZ7_KHIGOKnlaOq_o-7J Copy the Authorization URL and Access Token URL values . Paste these values in the Zapier integration \u201cStep 4 Add OAuth v2 Endpoint Configuration\u201d section. For example, the Authorization URL: https://example.rocket.chat/oauth/authorize Access token URL: https://example.dev.rocket .chat/oauth/token Save the values and test the authentication. A pop-up window opens to request access to your Rocket.Chat workspace account. Grant the access and your connection is complete!", "tokens": 351}
{"title": "Data Migration", "content": "When migrating from other services to Rocket.Chat, you can import all your data to your Rocket.Chat workspace. For example, when migrating from Slack to Rocket.Chat. To access this menu, navigate to Administration > Workspace > Import. To import your data, Click Import New File. Select Import Type. In this section, you can find the following import options: Import from Slack Import from HipChat Import from CSV", "tokens": 90}
{"title": "Accessing Your Workspace as Admin", "content": "Once your workspace is deployed successfully, you can access Rocket.Chat through a web browser or desktop application: Add Rocket.Chat server to desktop client: After successfully installing the Rocket.Chat desktop client, launch the application. Enter your workspace URL and click Connect. To add more workspace URLs to the desktop client app, click the plus icon on the left side of the navigation menu. Access Rocket.Chat via a web browser: To access your Rocket.Chat workspace, open a web browser, and visit your workspace URL. Your Rocket.Chat workspace URL can be a localhost or domain server URL, based on your deployment method. Rocket.Chat offers various client applications that can be used for the user interface. Refer to the following documents to learn more about accessing your workspace as an administrator: Rocket.Chat setup wizard: The simple onboarding steps to setting up your new workspace with a client for other access and usage. Admin account creation: Learn how to become the first administrator and delegate administrator roles to other users in your new workspace. Basic white-labeling: Customize your Rocket.Chat workspace to have the look and feel of your organization. Inviting users: Learn how to create new users and invite others to your workspace.", "tokens": 266}
{"title": "Setup Your Workspace", "content": "This guide will walk you through the process of setting up and configuring your Rocket.Chat workspace using the Setup Wizard. By the end of this guide, you'll be well-equipped to create, access, and manage your workspace effectively . After deploying your workspace, access your workspace and follow these steps: Admin information: The first user to access the workspace is recognized as the workspace administrator. Fill in the required user information to create the admin account . Full name: Set the first and last name. Username: Specify the admin username. Email: Enter your email. Password: Create a password for the admin user. Click Next to continue. Organization information: This involves information about your organization . Update the following required information about your organization: Organization name: Your organization name. Organization industry: The industry your organization operates under. Organization size: The size of the organization Country: The country in which your organization is . Click Next to proceed to the third step. Register your workspace: Add an admin email to register your workspace to Rocket.Chat cloud or link the workspace to an existing Rocket.Chat cloud account . Agree to the Terms and Privacy Policy Click Register workspace to proceed to the last step. To learn more about registering the different types of workspaces, refer to Register Your Workspace. An email with a confirmation link is sent to the admin email you provided . Open the email and click Verify Registration to ensure the security codes match. Once you've completed these steps, your workspace will be set up and ready to use. You can access it by logging in with your admin credentials . You can always update these setup information in workspace administration setup wizard. Apply trials or subscribe to any of Rocket.Chat's premium plan to access our premium features on your workspace. When registering your workspace, Rocket", "tokens": 394}
{"title": "Setup Your Workspace", "content": ".Chat collects the following information about your workspace: The workspace Id to help identify the workspace. The organization's address. Contact name for the workspace. Contact email for the workspace. The number of seats for the workspace. The account name. The organization type . The industry that the organization belongs to. The size of the organization. The country of the organization. Language set for the workspace. Website of the organization. Site name of the workspace. The workspace type. The deployment method used for the workspace . The deployment platform. The version of Rocket.Chat deployed. As the workspace administrator, refer to workspace administration to learn more about managing your workspace . Now that your workspace is set and ready to use, proceed to add new users or invite users to your Rocket.Chat workspace. To learn more about using Rocket.Chat, see user guides.", "tokens": 189}
{"title": "Register Your Workspace", "content": "All workspaces must be registered on \u00a0Rocket.Chat Cloud and remain within the support window to access cloud services. The registration process varies depending on the type of workspace. If you do not have a Rocket.Chat Cloud account, see Create Your New Cloud Account. Once you have deployed your workspace through any of the recommended deployment methods, you\u2019re required to register through the setup wizard after deployment. Sometimes, you may need to re-register your workspace, which can be done using a token from Rocket.Chat Cloud. To register a self-managed workspace from Rocket.Chat Cloud, Navigate to the Workspaces tab and click Register self-managed. You can choose to continue online with cloud services or offline to complete the registration. Online cloud services offer benefits like mobile push notifications, marketplace apps, and communication with external providers. To register your workspace online, Click the Continue online with cloud services button Copy the provided Registration Token and continue with either of these methods: Using the registration token in the workspace UI: Visit Register workspace in the UI to learn how to add the token via UI. For older workspaces below 6.5, see Registration. Adding the registration token as an environment variable: Use the token to register your deployed workspace by adding it as a deployment environment variable: Sometimes, our Sales or Operations team may also generate a registration token for you. It is recommended to add the token through the workspace UI. For air-gapped deployments, registering offline disables all cloud services.To enable online registration later, contact Rocket.Chat Sales. To learn how to register an offline workspace, visit Air-gapped Workspace Registration. Cloud-hosted workspaces are hosted on Rocket.Chat's Cloud Hosting Services. You can choose from various hosting options offered by Rocket.Chat. Contact the sales team to find a suitable cloud hosting option. A cloud account is automatically created when you initiate your first workspace with us. If you\u2019d like to explore and assess these features, you can also apply for a SaaS trial.", "tokens": 430}
{"title": "Admin Account Creation", "content": "As you set up your workspace, creating the first administrator account is pivotal for effective workspace management, as the administrator has the highest level of control over the workspace. This topic walks you through the process of creating the first administrator for your Rocket.Chat workspace. Rocket.Chat setup wizard allows you to create the first admin user of your workspace. Alternatively, you can configure an admin user during deployment by specifying it in the configuration files. If your server has no administrators, you can create the first admin account by defining the environment variables INITIAL_USER, ADMIN_PASS, and ADMIN_EMAIL once. Open your terminal and specify these variables line by line. If you are hosting your MongoDB instance, such as MongoDB Atlas, change the MONGO_URL variable to your MongoDB connection string. When installing Rocket.Chat server with the docker compose file, you can also specify the INITIAL_USER, ADMIN_USERNAME, and ADMIN_PASSWORD directly.", "tokens": 214}
{"title": "Basic White-labeling", "content": "A standout feature of Rocket.Chat is its white-labeling capability, which allows you to tailor your workspace to reflect your organization's brand identity. This enhances the user experience and reinforces your brand identity among your team members. However, you must have admin role privileges to leverage these white-labeling capabilities. You can manage the UI changes in the layout settings of your workspace. For in-depth workspace customization, see white-labeling. You can manage the user interface changes through your workspace's layout settings. For comprehensive customization options, refer to our detailed white-labeling guide. Here are some of the key customization features: White-labeling homepage: This allows you to customize how your Rocket.Chat workspace homepage looks. Customize colors: Customize colors to match your theme colors. Custom logo and assets: The guide explains how to specify custom assets for your workspace. White-label login screen: Customize the look of your Rocket.Chat workspace login screen. Rocket.Chat logo The Rocket.Chat logo appears on the sidebar footer for workspaces subscribed to any of our plans, and it can be customized. Rocket.Chat watermark The Rocket.Chat watermark appears on the sidebar footer for workspaces on Community, Starter, Pro trial, or Enterprise trial plans, and cannot be customized or removed. Workspaces with active Pro or Enterprise subscriptions do not display this watermark. Rocket.Chat's white-labeling feature is a powerful tool that allows you to tailor your workspace to reflect your brand's identity. By customizing elements such as the homepage, color scheme, logo, assets, and login screen, you can create a more personalized and engaging environment for your team. Your workspace is now all set for you to invite your users! Kindly refer to the white-labeling FAQs for common questions on white-labeling your workspace.", "tokens": 408}
{"title": "Inviting UsersTrials", "content": "Building a collaborative workspace is not just about creating a platform, but also about bringing together the right people. After setting up your Rocket.Chat workspace and customizing it to reflect your brand's identity through white-labeling, the next crucial step is to invite users to join your workspace. This process is straightforward and can be done by the admin user. However, for self-managed workplaces, it's important to note that the SMTP must be enabled and configured before emails can be sent through the workspace. Users For self-managed workplaces, SMTP must be enabled and configured before emails can be sent through the workspace. By following these steps, you can create a collaborative environment that not only reflects your brand's identity but also facilitates effective communication and collaboration among your team members. Apply Premium license for your 30-day trial. In the world of digital communication platforms, the ability to test and evaluate features before making a commitment is crucial. Rocket.Chat provides a 30-day trial of its Pro and Enterprise plans, allowing potential users to experience its advanced features before deciding to upgrade. This section provides a detailed overview of how the Pro and Enterprise trials are triggered and the benefits they offer. Additionally, you can learn how to apply for a SaaS workspace trial.", "tokens": 268}
{"title": "Pro Trial", "content": "Available from Rocket.Chat version 6.5 or higher, the Pro plan is tailored for growing organizations seeking advanced features and support to enhance their collaboration capabilities. The plan offers a robust platform with larger user capacity, increased monthly active contacts compared to Starter plan, along with a range of premium features. It's an ideal fit for businesses in expansion, balancing advanced functionality with strong support to facilitate effective collaboration. For workspaces currently on the Starter plan, exceeding certain predefined limits triggers a 30-day Pro trial. The following diagram shows the events that will trigger the Pro trial: It's important to note that if a workspace initiates an Enterprise trial while on a Pro trial, the Enterprise trial will continue only for the remaining duration of the initial 30-day Pro trial. For example, if an Enterprise trial begins on the 15th day of the Pro trial, it will be available for the subsequent 15 days. If you decide against participating in the trials, you can opt to cancel workspace subscription at any time during the trial period and switch back to the Community version. This trial mechanism allows potential users to thoroughly explore the Pro plan's advanced capabilities, enabling them to make an informed decision about upgrading to the Pro plan.", "tokens": 252}
{"title": "Enterprise Trial", "content": "The Enterprise plan from Rocket.Chat caters to the unique needs of large-scale organizations that demand a secure, customizable, and all-encompassing communication platform. Tailored for large enterprises and sectors with stringent regulatory requirements, this plan offers scalable solutions, advanced compliance tools, and priority support. It is designed to meet the complex needs of these organizations, focusing on high performance, reliability, and integration capabilities. For businesses seeking a top-tier collaboration platform, the Enterprise plan stands as the optimal choice. If your workspace is on the Pro plan and surpasses certain predefined thresholds, a 30-day Enterprise trial is automatically initiated. The following diagram shows the events that will trigger the Enterprise trial: Keep in mind that if an Enterprise trial is triggered while your workspace is on the Pro trial, the Enterprise trial will only be available for the number of remaining days within your 30-day trial. For example, if an Enterprise trial is triggered on the 15th day of your Pro trial, the Enterprise trial will be available to you for the next 15 days. If you decide against participating in the trials, you can opt to cancel workspace subscription at any time during the trial period and switch back to the Community version. This trial mechanism allows potential users to thoroughly explore the Enterprise plan's advanced capabilities, enabling them to make an informed decision about upgrading to the Enterprise plan.", "tokens": 284}
{"title": "SaaS Trial", "content": "The cloud-hosted SaaS workspaces are only available for the Pro and Enterprise plans. Rocket.Chat hosts the SaaS trial workspaces to the Rocket.Chat Cloud for 30 days. Note that SaaS trial workspaces are launched with the Pro trial. To apply for a SaaS trial, go to https://www.rocket.chat/trial-saas. Enter the following details: Organization email: Provide an organization email ID. This is required to access Rocket.Chat cloud and verification emails. It cannot be a personal email ID. Workspace name: Enter a name for your workspace. Workspace URL: The field is filled automatically according to the workspace name. You can edit the URL according to your requirements. Dots are not allowed in the URL. By default, trial workspace URLs have the rocket.chat extension. Server region: Select the server region where you want to host the trial workspace, US or EU. Language: Select the language of your choice. Select the privacy policy checkbox and submit the form. Once the form is submitted, you will receive a confirmation email on the organization email that you provided. Confirm the email and the trial workspace is launched in a new tab. It may take a few minutes for the launch to be complete. As the first user on the workspace, you are assigned the admin role. Let's take a brief look at how you can get started with the workspace: Add and manage users. Create different types of rooms and communicate with your workspace users. Manage your workspace features and settings as an admin. Enjoy your free trial workspace for 30 days and learn more about the benefits! Now you can also access your cloud account with your email ID. To learn about the cloud features, see Rocket.Chat Cloud. Find additional information in the cloud FAQs. After the trial, you can continue to host on our secure cloud or migrate to your private cloud, data center, or air-gapped environment. If you choose not to continue, you can request an export of your data.", "tokens": 433}
{"title": "Apply Workspace License", "content": "As of December 15, 2023, Rocket.Chat has ceased support for connections from cloud services and official mobile/desktop apps to workspaces running legacy versions outside our support window. Users on unsupported legacy servers are advised to upgrade to the latest Rocket .Chat version to ensure continued access to cloud, mobile, and desktop applications. Each Rocket.Chat version is supported for six months post-release. Subscribing to Rocket .Chat's premium plans give your workspace access to advanced features designed to meet the needs of growing teams and businesses. Whether you\u2019re using a self-hosted or cloud-hosted workspace, these plans provide tools that support enhanced collaboration and secure communication . When you subscribe to a new plan, a license is applied to your workspace, enabling the premium features included in that plan . After deploying and registering your self-hosted workspace, licenses can be acquired through any of these two subscription methods: Self-service subscription Sales-enabled subscription The self-service subscription process allows you to manage your workspace plan directly through the Rocket.Chat Cloud portal . Follow these steps to complete the process: Log in to your Rocket.Chat Cloud account. Navigate to Workspaces and select your workspace. Click Subscribe to open the subscription cart for the workspace . Select the Pro Seats plan, set the billing cycle (Monthly or Yearly), and update the number of seats based on your needs. Review your selections and click Save to continue to the Stripe checkout page", "tokens": 313}
{"title": "Apply Workspace License", "content": ". Enter your payment details and click Subscribe to complete the purchase. After a successful payment, you\u2019ll be redirected back to the Cloud portal, where your workspace reflects the updated subscription. To apply the new license, log into your workspace as an administrator . Navigate to Administration > Workspace > Subscription and click the Sync license update button. This fetches your updated workspace license from Rocket.Chat Cloud . After syncing, your workspace is updated with the new plan, and the details are visible on the\u00a0Subscription\u00a0page. To update your subscription or purchase add-ons like MAC packs, refer to Manage your workspace subscription . The self-service subscription only supports the Pro plan. Refer to sales-enabled subscription for the Enterprise plan. If you opt for the sales-enabled subscription, you must contact our Sales team for a valid license . This option offers the flexibility to discuss your requirements and finalize the subscription based on your preferences. Continue with the following steps to complete your subscription: Contact our sales team here . After your purchase is finalized, you\u2019ll receive a welcome email with further details of the subscription. To apply the new license, log into your workspace as an administrator. Navigate to Administration > Workspace > Subscription and click the Sync license update button . This fetches your workspace license from Rocket.Chat Cloud. After syncing, your workspace is updated with the new plan, and the details are visible on the Subscription page. How to sync workspaces below version 6.5 and 6 .0 If you purchased a license for your cloud-hosted workspace, follow these steps to apply the license: Log into your workspace as an administrator. Navigate to Administration > Workspace > Subscription and click the Sync license update button . This fetches your workspace license from Rocket.Chat Cloud. After syncing, your workspace is updated with the new plan, and the details are visible on the Subscription page. To apply license on an air-gapped workspace, refer to Air-Gapped License", "tokens": 417}
{"title": "Apply Workspace License", "content": ". To cancel your workspace subscription and revert to Community, go to Administration > Workspace > Subscription and click the Cancel Subscription button. This option is only available for self-service subscriptions on the Starter plan or any trial . For sales-enabled subscriptions, if the contract expires without renewal, the workspace will automatically revert to the Community plan. When you cancel your self-service subscription, your workspace will still function with a paid license until the end of your billing period.", "tokens": 104}
{"title": "Environment Configuration", "content": "This guide provides detailed instructions for configuring the environment necessary to run Rocket.Chat. Proper environment configuration ensures optimal performance, security, and functionality of Rocket.Chat. As of December 15, 2023, Rocket .Chat has ceased support for connections from cloud services and official mobile/desktop apps to workspaces running legacy versions outside our support window. Users on unsupported legacy servers are advised to upgrade to the latest Rocket .Chat version to ensure continued access to cloud, mobile, and desktop applications. Each Rocket.Chat version is supported for six months post-release . Before proceeding with the environment configuration, ensure the following prerequisites are met: System requirements: Verify that your system meets the minimum hardware and software requirements for Rocket.Chat. Deploy Rocket.Chat: Make sure that you have a Rocket.Chat workspace installed . You can deploy using any of the following methods: Deploy with Docker and Docker Compose (recommended) Deploy with AWS (recommended) Deploy with Kubernetes (recommended) Deploy with Snaps Deploy with any of the additional deployment methods Basic understanding: Familiarity with command-line interfaces, server management, and network configuration is recommended . Environment variables can be used to influence the workspace deployment or the workspace settings. Configuring the environment variables depends on the method of deployment. Generally, you can follow these steps: Set deployment environment variables: In the .env or the compose .yml file (for Docker deployment), set values for the mandatory variables such as ROOT_URL, PORT, and MONGO_URL. You can also set values for the optional variables according to your requirements", "tokens": 343}
{"title": "Environment Configuration", "content": ". Modify deployment environment variables: Modify the variables you need and deploy the workspace again for the changes to take effect. See environment variables for detailed information. Settings environment variables: Configure the environment variables to manage the workspace settings. Rocket.Chat uses MongoDB . Configure the database connection: MongoDB connection string URI: Connect Rocket.Chat and the MongoDB instance using a connection string URI. The authentication is done with a username and password. Backup and restore: Perform a backup of your workspace data . Replication: Configure a MongoDB replica set to improve the data availability. Integrate external services like email, authentication, and file storage: Email: Use the mailer tool to send emails to users in your workspace . For Omnichannel, use email inboxes to create and manage the email accounts for the channels. Authentication: Set up user authentication and authorization using any of the available methods . File upload and storage: Configure storage options for file uploads and storage (e.g., local file system, AWS S3, Google Cloud Storage, etc.). Enhance the security of your Rocket .Chat server: SSL certificate authentication: Add a layer of security to your workspace by configuring the Nginx web server. SSL reverse proxy configuration: Implement reverse proxy servers to handle SSL . Firewall setup: Configure the server's firewall to allow necessary traffic and block unwanted access. Regular updates: Keep Rocket.Chat and its dependencies updated to patch security vulnerabilities . Add additional resources as your users grow to maintain optimal system performance: Microservices deployment: Get more flexibility and fault tolerance by deploying Rocket.Chat as separate components to manage large user volumes and adapt to dynamic business requirements . Run multiple instances: Utilize your existing hardware to run multiple instances of the Rocket.Chat app on your current host. Automation tools: Streamline the deployment process by using Ansible, OpenShift, Kubernetes with Helm, or Vagrant . Migrate your existing data from another service using the import integration: Import from HipChat: Move your data from HipChat Cloud or HipChat Enterprise. Import from Slack: Get your Slack users and data into Rocket.Chat", "tokens": 479}
{"title": "Environment Configuration", "content": ". Import CSV: Provide a CSV file or URL to import user data. Gather and visualize your workspace metrics with the Prometheus and Grafana integrations. Configuring the monitoring setup provides information such as workspace data, subscriptions, REST API details, and more . Address common issues during environment configuration: Connectivity issues: Ensure all services are correctly configured and can communicate with each other. Environment variable mistakes: Double-check environment variable settings for typos or incorrect values . Proper environment configuration is crucial for a stable and efficient Rocket.Chat deployment. By following these steps, you can ensure that your Rocket.Chat server is well-configured, secure, and ready for use.", "tokens": 149}
{"title": "Deployment Environment Variables", "content": "Environmental variables can be specified to impact how the workspace is deployed or affect the workspace settings and configuration. Setting the deployment environment variables depends on your preferred deployment method . This topic covers the mandatory and optional deployment environment variables so that you can successfully deploy your workspace according to your needs . Using the most common deployment method, deploy with Docker & Docker Compose, these variables can be set within the environment section under services in your compose.yml file. Name Description Comment ROOT_URL The URL where your Rocket.Chat instance will be hosted on . In other words the URL you will enter on your browser to access Rocket.Chat. Format is [protocol]://[domain or ip][: optional port]/[optional path] PORT Port your Rocket.Chat instance will bind to . If served under a FQDN (which is recommended) this doesn't matter much, as long as the configured one is not in reserved range and doesn't collide with any other services. MONGO_URL MongoDB connection string . Read MongoDB's official documentation to understand this better. Usage also depends on your deployment method of choice. MONGO_OPLOG_URL MongoDB connection string to the local database. Similar to the above, except this points directly to the local database. E.g . mongodb://localhost:27017/local Name Description Comment BIND_IP Which IP the node (or main Rocket.Chat) process will bind to . If intended to be accessed under a domain, which is recommended, users should set this to the loopback address (i.e. 127.0.0", "tokens": 350}
{"title": "Deployment Environment Variables", "content": ".1) or any private IP in the host that's accessible via a reverse proxy or load balancer. This will ensure the instance isn't accessible via any IP that isn't intended. ADMIN_USERNAME Admin user's username . Admin user can be created automatically on deployment. Set this to your admin user's desired username. Mandatory if any of the other ADMIN_* variables are passed for a successful account creation. ADMIN_NAME Admin user's name . Mandatory if any of the other ADMIN_* variables are passed for a successful account creation. ADMIN_PASS Admin user's password (in plaintext). Mandatory if any of the other ADMIN_* variables are passed for a successful account creation . ADMIN_EMAIL Admin user's email address. Mandatory if any of the other ADMIN_* variables are passed for a successful account creation. HTTP_FORWARDED_COUNT The number of proxies in front of Rocket.Chat . If not configured, it defaults to 1 as Rocket.Chat assumes there\u2019s always a proxy in front of it. This variable should be properly configured to avoid security and performance issues regarding rate limiting and other controls. INSTANCE_IP The Rocket .Chat IP address accessible by other Rocket.Chat servers when\u00a0scaling multiple instances. It enables instances to communicate directly with each other. This direct communication is essential for transmitting ephemeral events, such as user typing indicators, between instances . ALLOW_UNSAFE_QUERY_AND_FIELDS_API_PARAMS Enable the query and fields API parameters in your workspace. The \u00a0query and fields parameter has been deprecated in 5.0.0 and disabled from 7.0.0 . \u00a0However, they can be enabled in the workspace by setting the ALLOW_UNSAFE_QUERY_AND_FIELDS_API_PARAMS: true \u00a0variable. Enabling these parameters may expose your workspace to security risks, and Rocket .Chat is not responsible for any resulting vulnerabilities. These parameters are scheduled for removal in version 8.0.0, after which enabling them will no longer be an option . APPS_ENGINE_RUNTIME_TIMEOUT Modify the amount of time (in milliseconds) it takes for an app to respond to a call. By default, the timeout is 30 seconds . You can use this variable to set longer timeouts if you have apps with larger operations. After configuring the mandatory and optional deployment environment variables, see how to manage your workspace settings with environment variables in the next topic.", "tokens": 538}
{"title": "Manage Settings Using Environmental Variables", "content": "In software configuration, environmental variables play a crucial role in managing settings. Rocket.Chat leverages environmental variables to provide a flexible and efficient way to manage settings. This guide will provide a comprehensive overview of how Rocket .Chat manages settings using environmental variables When starting your server, you can set any settings value via an environment variable. You will only have to know the setting ID and the data type of the setting (boolean, string, integer, etc.)", "tokens": 94}
{"title": "Manage Settings Using Environmental Variables", "content": ". Name Data Type _id SettingId = string type boolean timezone string relativeUrl password int select multiSelect language color font code action asset roomPick group date public boolean env boolean group (Optional) GroupId = SettingId section (Optional) SectionName = string tab (Optional) TabId = SettingId i18nLabel string value SettingValue can be one of the following types: string boolean number SettingValueMultiSelect Date AssetValue undefined packageValue SettingValue can be one of the following types: string boolean number SettingValueMultiSelect Date AssetValue undefined blocked boolean enableQuery (Optional) string displayQuery (Optional) string sorter number properties (Optional) unknown enterprise (Optional) boolean requiredOnWizard (Optional) boolean hidden (Optional) boolean modules (Optional) Array invalidValue (Optional) SettingValue can be one of the following values: string boolean number SettingValueMultiSelect Date AssetValue undefined valueSource (Optional) string secret (Optional) boolean i18nDescription (Optional) string autocomplete (Optional) boolean processEnvValue (Optional) SettingValue can be one of the following values: string boolean number SettingValueMultiSelect Date AssetValue undefined meteorSettingsValue (Optional) SettingValue can be one of the following values: string boolean number SettingValueMultiSelect Date AssetValue undefined ts Date createdAt Date _updatedAt (Optional) Date multiline (Optional) boolean values (Optional) Array placeholder (Optional) string wizard (Optional) step: number order: number persistent (Optional) boolean readonly (Optional) boolean alert (Optional) string private (Optional) boolean Name Data Type _id string hidden boolean blocked boolean ts Date sorter number i18nLabel string displayQuery string i18nDescription string value undefined type group alert string Name Data Type enterprise true invalidValue SettingValue can be one of the following values: string boolean number SettingValueMultiSelect Date AssetValue undefined Name Data Type type color editor SettingEditor packageEditor (Optional) SettingEditor Name Data Type type action value string actionText (Optional) string Name Data Type type action value string actionText (Optional) string Name Data Type type asset value AssetValue fileConstraints IRocketChatAssetConstraint asset string Name Data Type key The type can be: string number i18nLabel string Name Data Type COLOR color EXPRESSION expression Name Data Type type Date value Date Name Data Type account2fa (Optional) boolean cannedResponsesEnabled (Optional) boolean e2e (Optional) boolean e2eDefaultDirectRoom (Optional) boolean", "tokens": 616}
{"title": "Manage Settings Using Environmental Variables", "content": "e2eDefaultPrivateRoom (Optional) boolean smtpHost (Optional) string smtpPort (Optional) string fromEmail (Optional) string fileUploadEnable (Optional) boolean frameworkDevMode (Optional) boolean frameworkEnable (Optional) boolean surveyEnabled (Optional) boolean updateChecker (Optional) boolean liveStream (Optional) boolean broadcasting (Optional) boolean allowEditing (Optional) boolean allowDeleting (Optional) boolean allowUnrecognizedSlashCommand (Optional) boolean allowBadWordsFilter (Optional) boolean readReceiptEnabled (Optional) boolean readReceiptStoreUsers (Optional) boolean otrEnable (Optional) boolean pushEnable (Optional) boolean globalSearchEnabled (Optional) boolean threadsEnabled (Optional) boolean bigBlueButton (Optional) boolean jitsiEnabled (Optional) boolean webRTCEnableChannel (Optional) boolean webRTCEnablePrivate (Optional) boolean webRTCEnableDirect (Optional) boolean You can take the following actions while configuring your workspace settings: Set the setting values for the first time", "tokens": 273}
{"title": "Manage Settings Using Environmental Variables", "content": ". Overwrite setting values. Block settings from being changed. Hide settings. Set any wizard setting as mandatory. Let's look at these options in detail . To set a setting for the first time, you need only to add the environment variable SETTING_ID=VALUE when starting the server . For example: This only works if the setting isn't already set; hence it's most useful for setting on the initial start. If the setting already has a value, you will need to use overwrite setting . You can overwrite any setting by setting an environment variable prefixed with OVERWRITE_SETTING_<Setting Id>. For example: Settings capable of this can be seen when hovered in the Administration > Workspace > Settings section . You can block a setting from being changed by specifying the SETTINGS_BLOCKED environment variable. It is a comma-separated list. You need to add any setting you want to block to this list . For example: As an administrator, you can't change this from the UI. You must remove it from the list and reboot the server to change this setting. You can hide settings from the client by using the SETTINGS_HIDDEN environment variable . For example: Take extra caution here because the client needs settings like FileUpload_Storage_Type, so it can not be hidden. You can force settings to be required on wizard pages by using the SETTINGS_REQUIRED_ON_WIZARD environment variable . For example: Rocket.Chat's use of environmental variables for managing your workspace settings provides a powerful and flexible configuration mechanism.", "tokens": 320}
{"title": "MongoDB ConfigurationMongoDB URL Authentication", "content": "In this section, you can learn the following about configuring MongoDB with your Rocket.Chat workspace: Connect Rocket.Chat and MongoDB instance with a connection string URI. Backup and restore MongoDB to maintain backups of your Rocket.Chat data. Set additional driver options for MongoDB. Configure a MongoDB replica set to improve data availability and performance. Migrate the data from the built-in Meteor MongoDB server to an external MongoDB server. Migrate from mmap storage to the WiredTiger storage engine. Make sure that you are using the supported database versions. When deploying MongoDB, it is crucial to secure MongoDB instances and close all MongoDB ports from public access. Unsecured instances can lead to significant security vulnerabilities. Your vigilance in these practices is essential for maintaining the integrity and safety of your systems. The connection between Rocket.Chat and MongoDB instance is achieved using a MongoDB connection string URL. MongoDB authentication is done with the username and password. Adding the following snippet to your .env file does the trick: In your container, pass MONGO_URL and MONGO_OPLOG_URL with the right values for connection. Depending on the password you're using, you might need to escape some characters. Refer to the MongoDB documentation for more information Your docker-compose.yml file should look like this: If you are using docker run, it should look like this: MongoDB authentication role If you are using MongoDB authentication, you might also need to add the clusterMonitor role to your user. The clusterMonitor role gives users read-only access to MongoDB monitoring tools. This is a requirement for your instance to be able to use change streams. Change streams allow your workspace to react to real-time changes in data Execute the following command, replacing the users with that selected for your users:", "tokens": 418}
{"title": "MongoDB Backup and Restore", "content": "Maintaining backups of your workspace data is a very important practice. These data backups can act as a safety measure where data can be recovered or restored in case of an emergency. Rocket.Chat uses MongoDB as its database. With MongoDB, you have multiple built-in backup options depending on the deployment method. In this guide, we are going to focus on how to: Perform a backup of your Rocket.Chat workspace data Restore your Rocket.Chat workspace data We are going to see how to backup our MongoDB database, using mongodump. mongodump allows you to create backups from standalone, replica sets or sharded cluster deployments. From MongoDB server 4.4, you need to install the mongodump utility separately. Read more at the MongoDB database tools docs The command to backup a simple MongoDB standalone instance is of the format: Running mongodump alone from the command line without any options will assume the database is located on localhost at port 27017 with no authentication. When the backup is completed, a /dump directory is created. Backing up a remote MongoDB instance can be done with the following command: See more options and how to use mongodump on MongoDB database tools docs. You should see something like the image below when the command is running: After backing up your instance, you may need to restore the data at some time. That can be done using mongorestore. mongorestore allows you to load data from either a binary database dump created by mongodump or the standard input into the MongoDB instance. Make sure you first drop any existing Rocket.Chat schema in your database with the same name as the one you are restoring. The syntax for the mongorestore command is as follows: The simple command below restores from a dump directory to a local mongod instance running on port 27017: You can restore to a remote instance by running the following command: You have the ability to also restore a specific collection or collections from the dump/ directory. See MongoDB docs In a successful command execution, you should see a screen like the one below:", "tokens": 460}
{"title": "Additional MongoDB Driver Options", "content": "It's possible to provide extra connection settings to the Mongo driver that are not covered in the URI connection string. Set the the MONGO_OPTIONS environment variable to a JSON string. For example: You might want to do this, for example, if you're backing Rocket.Chat with a TLS-secured Mongo replica set and need to pass certificates/PEM files, etc. to connect to it. If you see the following error during startup: You can try increasing server selection time by adding the following property to MONGO_OPTIONS to change the default value of 10000 to 20000:", "tokens": 128}
{"title": "Configure a Replica Set for MongoDB", "content": "Rocket.Chat uses the MongoDB replica set to improve performance via Meteor Oplog tailing. Replica sets are used to provide high data availability by maintaining multiple copies of the data across different servers. Check the release notes to ensure you are using a compatible version of MongoDB. To configure the replica set, add this section to the mongod.conf file: For example, run the following command to update the replication settings in the MongoDB configuration file: Follow these steps to initiate the MongoDB replica set: Restart MongoDB service: Start the MongoDB shell and initiate the replica set: The output of the command should look like this: Note that the ok value should be 1. Any other value, i.e. 93, means something is wrong. Hit enter, you should see your prompt turn into rs01:PRIMARY>, this indicates the replica set is being used. Type exit to get back to your regular shell: Troubleshooting Depending on your network settings, including /etc/hosts and DNS, if you have configured Rocket.Chat to use localhost:27017, you may see an error similar to this: rs.initiate() may be defaulting to the host name e.g., test. You can force a different hostname as follows: You should get a response similar to the following: After you configured the replica set, you must add the MONGO_OPLOG_URL environment variable to the service definition and restart Rocket.Chat server. In CentOS, open the file /usr/lib/systemd/system/rocketchat.service In Ubuntu or Debian, open the file /lib/systemd/system/rocketchat.service Add the following to the environment line: Reload the system state and restart Rocket.Chat:", "tokens": 384}
{"title": "Migrate from Built-In Meteor MongoDB to External Server", "content": "Rocket.Chat uses the Meteor open-source framework, and the data is typically stored in MongoDB. If you want to migrate from the built-in Meteor MongoDB server to an external MongoDB server, follow the steps in this guide. We do not advise running Rocket.Chat in production from the source using the meteor command. Instead, we recommend using a separate Mongo database and using a compiled meteor bundle, either our official release or your own. See our recommended deployment methods. Before starting, make sure Meteor is running and follow these steps: Run the command: mongodump -h 127.0.0.1 --port 3001 -d meteor. This will dump the database in a folder called dump. Then, install Mongodb on your system. Once Mongo is installed, restore the data using: mongorestore -d meteor dump/meteor In this step, if you want to use a different database, change the database name. Replace -d meteor with your desired database name. Then follow the remainder of the guide on deploying Rocket.Chat for your current OS.", "tokens": 230}
{"title": "Migrate from mmap to WiredTiger Storage Engine", "content": "Starting with the major release 4.x of Rocket.Chat, MongoDB has to be set up with a WiredTiger storage engine rather than the deprecated mmapv1 one. This is mandatory, if you plan to upgrade to one of the future Rocket.Chat versions have to be prepared before initiating the application upgrade. This guide helps you migrate your existing mmap based MongoDB instance to WiredTiger manually. MongoDB instance with mmap storage engine. Following is an overview of the migration steps: Stop running Rocket.Chat. Create a database dump from the mmapv1 MongoDB (also to have a backup in place). Stop mmapv1 MongoDB service, drop existing data files, and start up with WiredTiger. Import the dump into the new WiredTiger MongoDB. Start Rocket.Chat. Here are the detailed steps of the migration process: Stop Rocket.Chat service to ensure a consistent database dump: Create a database dump from the current mmapv1 MongoDB: Stop MongoDB service: Delete the mmapv1 based data files of your existing MongoDB: Adjust MongoDB configuration to make use of wiredTiger storage engine: Start MongoDB service again: If running with a Replica-Set in your mongo.conf initialize replica set Import dump back into (wiredTiger) MongoDB: Repair databases and rebuild indices: Start Rocket.Chat service:", "tokens": 304}
{"title": "Supported MongoDB Versions", "content": "Required MongoDB versions can change across different major versions. It is very important that you choose the correct database version when deploying and also to make sure your existing installation is using a supported version. This page outlines how you can keep track of the supported versions . You can always check the supported version list on our GitHub releases page. Use the following \"template\" link to inspect the release notes and supported MongoDB releases. https://github.com/RocketChat/Rocket .Chat/releases/<VERSION> For example, if you want to check what are the supported MongoDB versions for release 6.0.0, you can go to https://github.com/RocketChat/Rocket.Chat/releases/6.0 .0 and look for \"Engine versions\". The other option is to use our releases API. This is a relatively new addition; information on old versions can't be viewed by this API . This is a very quick way of getting the list and is also ideal if you want to get this information dynamically for some kind of automation or script . If you want to see the supported MongoDB versions for the latest release, you can perform a GET request against the following endpoint: https://releases.rocket.chat/latest/info You can change latest with any version number and get more specific information . The key you're looking for is compatibleMongoVersions. Using curl with jq would look something like: If it is an existing deployment, being fairly in the middle of the supported list is a good idea . We know how hard it is to update our databases, especially if it's a large deployment. If you're going to deploy fresh, we recommend choosing the latest version that is supported. We don't remove MongoDB support overnight . A version marked to be removed from support is first deprecated and as a workspace admin, you see a deprecation warning in your Rocket.Chat logs and the notice banner on their instances . See a list of Releases, Mongo versions, and their deprecation notice here MongoDB version support Note that without the MongoDB version, we can't ensure you are running a compatible version", "tokens": 469}
{"title": "Supported MongoDB VersionsFirewall Configuration", "content": ". If you are running your MongoDB with authentication enabled and a user different from admin, you may need to grant permissions for this user to check cluster data . You can do it via Mongo shell by running the following command replacing the string YOUR_USER with the correct user name: Mmapv1 is no longer supported in MongoDB since version 4.2. So to make sure you update your Rocket .Chat installations easily in the future, use the WiredTiger storage engine. If you're already running mmapv1, migrate to WiredTiger immediately. If you are using a firewall and not using a reverse proxy, you may have to allow traffic to port 3000: To communicate with Rocket.Chat cloud services, and depending on the services you want to use, you need to whitelist the following URLs in your firewall configuration: cloud.rocket.chat This URL is required for workspace registration, workspace client authentication, and sync license and communications. marketplace.rocket.chat List and install marketplace apps. releases.rocket.chat Check for new versions. billing.rocket.chat Checkout and tier subscription management. gateway.rocket.chat Gateway for Rocket.Chat mobile app push notifications. omni-gateway.rocket.chat Gateway for communications for omnichannel apps (such as WhatsApp, Facebook, Instagram, and Telegram). collector.rocket.chat This URL is used to collect usage statistics. Community workspaces must whitelist this URL, or the workspaces will enter read-only mode. Note that running Rocket.Chat in air-gapped mode requires a premium license. nps.rocket.chat NPS collector.", "tokens": 357}
{"title": "Configuring SSL Reverse Proxy", "content": "Rocket.Chat is designed to be a robust middle-tier application server. While it doesn't handle SSL directly, it seamlessly integrates with trusted and high-performance reverse proxy servers like Nginx . By configuring one of these servers, you can effectively manage SSL for your Rocket.Chat instance, ensuring secure and reliable communication. When deploying Rocket.Chat, you must set the ROOT_URL parameter to a HTTPS address without including a port number . So instead of ROOT_URL=http://localhost:3000, use something like https://your_hostname.com When setting up a reverse proxy in front of your Rocket.Chat server, you must configure Rocket.Chat to use the correct clientAddress . The rate limiter and other features may not function properly if this is not done. Set HTTP_FORWARDED_COUNT environment variable to the correct number of proxies in front of Rocket.Chat - by default, it is set to 1 . If you are using Snap, refer to the official documentation. Additionally, ensure that your proxies and load balancers ignore the X-Real-Ip header when making requests from end users. Rocket .Chat prioritizes the X-Real-Ip header when determining the clientAddress. Misconfigured proxies could allow users to bypass rate limiting and other security measures. These instructions were written for Ubuntu . For Amazon Linux, the conf file for the proxy goes in /etc/nginx/conf.d/ and needs to have a discrete name ending in .conf and nginx is installed using yum -y install nginx", "tokens": 359}
{"title": "Configuring SSL Reverse Proxy", "content": ". Run this as root: Add your private key to /etc/nginx/certificate.key Lock down permissions: chmod 400 /etc/nginx/certificate.key Add your certificate to /etc/nginx/certificate .crt Edit /etc/nginx/sites-enabled/default or if you use Nginx from Docker /etc/nginx/conf.d/default.conf and be sure to use your actual hostname in lieu of the sample hostname \"your_hostname.com\" below . Restart Nginx: service nginx restart Plesk Onyx now has a Docker installation and Nginx proxy Docker rule generator built in, but it doesn't support adding custom directives . Disable it and add the rules manually in the additional Nginx directives space. A scheme follows (replace 30000 with your external Docker mapped port). Note: When deploying Rocket .Chat, you must set the ROOT_URL parameter to a HTTPS address without including a port number. So instead of ROOT_URL=http://localhost:3000, use something like https://your_hostname .com Run this as root: Add your private key to /etc/ssl/private/chat.domain.com.key Lock down permissions: chmod 400 /etc/ssl/private/chat.domain.com.key Add your certificate to /etc/ssl/certs/chat.domain.com .crt Add your intermediate to /etc/ssl/certs/intermediate.ca.pem Edit /etc/apache2/sites-enabled/rocketchat.conf and be sure to use your actual hostname in lieu of the sample hostname \"your_hostname.com\" below . Restart Apache: service apache2 restart First, download Caddy Now Caddy is installed, but you still need a service to run Caddy http server on the background . You must have at least port 443 opened so the Caddy server will request an SSL certificate from Let's Encrypt You can also open port 80 to redirect http requests to https. Open /etc/caddy/Caddyfile Insert", "tokens": 482}
{"title": "Running in a sub folder with Apache", "content": "Running in a subfolder has been officially deprecated. It will no longer be supported in the 4.0 release. See our April 2020 announcement If you want to run your server in a subfolder like https://your.domain.com/chat/ you have to set up a reverse proxy. See run Rocket.Chat behind a SSL reverse proxy If you are using Apache, you will have to tweak the configuration. First, you have to put the Rewrite/Proxy into a Location-tag. For example, if you want to provide the service under the \"chat\" subfolder, your config should look like this: The main difference to the standard reverse proxy configuration is an additional RewriteRule, /var/www in the example, which must be changed to your DocumentRoot (if it's not already your DocumentRoot). If you pass the whole path, including the DocumentRoot to the Rocket.Chat server, you'll get a 404 response and an Unknown path server error. In our example, we used the /chat as a subfolder (it's parsed out of the ROOT_URL provided) but the Rocket.Chat server gets a request for /var/www/chat, detects a mismatch and returns the above-mentioned error. Additional notes: Using the RewriteBase directive won't work. The ProxyPassReverse can be used inside a Location tag and the first parameter must be omitted in this case. You don't need to configure a location for the root folder / when using Rocket.Chat in a subfolder (it's likely configured for other stuff already in this case). For those curious about the details: the mentioned path-handling is in webapp.js, search for Unknown path. Please make sure that the modules rewrite, proxy_http and proxy_wstunnel are enabled in the Apache configuration. Otherwise, the WebSocket calls will return a 500 HTTP response. To run in a subfolder you should pass the environment variable ROOT_URL to the process. For example: If you followed the manual installation guide, you may already have configured (and persisted) this environment variable - in this case, you can ignore this advice.", "tokens": 478}
{"title": "Setting Up Client SSL Certificate Authentication for Rocket.Chat", "content": "You may want to add an extra layer of your security to your app. After installing Rocket.Chat following our deploy with Docker & Docker Compose guide, here are the next steps to follow: Install Certbot to manage SSL certificates from LetsEncrypt You\u2019ll be asked to provide a valid email and the domain set. You can omit the email. Avoid using a common name for the certificate. When you renew the certificate, you'll want the country, state, locality, and organization to match what you've input. Run the same command to renew your certificate. To remember the options you chose, run the following command: Move the CA cert to /etc/ssl/private/client-cert-ca.crt directory. Add CA cert, turn on client SSL authentication and add location block. You can have your users perform most of these steps if you want. But the following are the steps needed to create a certificate to present as client authentication. Answer all of the questions, making sure to include your email address and Common Name (CN). The CSR must be sent to the administrator (or to you if you are handling this on behalf of the user). As the admin, take the CSR given to you or generated by you and sign the CSR and create a valid certificate: You\u2019ll want to increment the serial number with each signing. Once the certificate expires, a new CSR doesn\u2019t need to be recreated; the same one can be signed, which will create a new certificate tied to that public key. The signed certificate (user.crt) can now be sent back to the user along with the CA cert(ca.crt). To be able to use in browsers and mobile generate a pkcs #12 using the user cert and key along with the CA:", "tokens": 392}
{"title": "Setting up Process Managers and Init Systems", "content": "Deploy Rocket.Chat to Linux that run on systemd (RedHat, Centos, Ubuntu, CoreOS and so on). First we need to create the unit file. vi /etc/systemd/system/rocketchat.service With the contents: Then you need to enable the service systemctl enable rocketchat.service To start the service systemctl start rocketchat.service To verify it is running systemctl status rocketchat.service All data will be hourly backed up to /data/domains/example.org/data folder. We advise to copy this folder to a remote location in case of hardware failure. Note: Upstart is no longer supported. We no longer support Ubuntu 14.04. If upgrading please see systemd or Ubuntu 18.04 The following examples are upstart jobs which control automatic start-up and, if necessary, respawning of your Rocket.Chat app, as well as management of an optional Hubot chat-bot. In order to use the examples, simply copy each example and save into a file, paying attention to the fact that the filenames should be preserved unless you edit the examples to reflect any filename changes you make. Be sure to edit the environment variables, and possibly paths, according to your particular installation. Once you've saved the files to the proper directory (/etc/init) usage is as simple as rebooting. Which upstart management jobs that you use depend on what type of Rocket.Chat deployment you are using (docker-compose, non-docker, etc). A race condition exists with docker-compose, which requires that Mongo and the Rocket.Chat application be started independently, thus a slightly modified upstart job is required compared to non-docker instances. Save as: /etc/init/rocketchat.conf Save as: /etc/init/rocketchat_hubot.conf Save as: /etc/init/rocketchat_mongo.conf Save as: /etc/init/rocketchat_app.conf", "tokens": 452}
{"title": "Import from HipChat", "content": "There are currently two different HipChat importers. One for HipChat cloud and another for HipChat enterprise. To start importing values from HipChat you first need to have an instance of Rocket.Chat running . If you already have an instance running and administration privileges, you can follow these steps: Export data from HipChat Wait until your download is ready and download it (it will be a .zip file) Go to https://[your_rocket_chat].rocket.chat/admin/import and click the \"Start\" button on the \"HipChat\" item Choose your downloaded .zip file and wait until Rocket .Chat can read it (it can take a few minutes, depending on the size of your HipChat export) Deselect any items you don't want to import At the top of the page, click Start Importing To import your current data from HipChat Server / Data Center into Rocket .Chat, please do the following. This is a copy from the HipChat Server / Data Center documentation: Browse to the fully qualified domain name you've configured for your HipChat Server, for example https://hipchat.yourcompany .com/ Log in to the web user interface (UI) using your administrator email and password Click Server admin > Export To include files and one-to-one chat history in the export, select the checkboxes Create a password to protect your archive file in the Password and Confirm Password fields . You're required to provide this password when you import your data into HipChat Server. We don't store this password, so be sure to remember it Click Export . Depending on how much data you have, it may take a few hours to export the data", "tokens": 376}
{"title": "Import from HipChat", "content": ". When it's finished, you'll receive an email with a link to download the file When you receive the email, click the link in the email to download the archive file Decrypt the exported file: openssl aes-256-cbc -d -in path_to_encrypted_file .tar.gz.aes -out path_to_decrypted_file.tar.gz -pass pass:your_password . See the table below for descriptions of the command line arguments Ensure the file generated is a tar.gz file, otherwise Rocket .Chat won't accept it Go to https://[your_rocketchat]/admin/import/prepare/hipchatenterprise Choose your decrypted tar.gz file and wait until Rocket .Chat can read it (it can take a few minutes, depending on the size of your export) Deselect any items you don't want to import At the top of the page, click on Start Importing Argument Notes aes-256-cbc This is the cipher to use to decrypt the file . -d This argument is the command to decrypt the file. -in Use this to specify the path to the archive file you're about to decrypt. -out Use this to specify the path where you want to output the decrypted file . -pass pass: Enter the password you created when you exported the archive file. In case you get digital envelope routines:EVP_DecryptFinal_ex:bad decrypt:../crypto/evp/evp_enc .c:541: while decrypting, add the parameter -md md5 If the import fails for large HipChat exports, it may help not to export file attachments. Refer to https://github.com/RocketChat/Rocket.Chat/issues/11693 . If you still have problems contact us at support@rocket.chat and provide your server logs if available.", "tokens": 439}
{"title": "Import from Slack", "content": "With Rocket.Chat's import feature, you can import your Slack users, channels, messages, and other data to your workspace. This page guides you through the required steps. Permission to export Slack data. Permission to import data to Rocket.Chat workspace . Before importing, keep the following points in mind: If your Slack workspace is currently set up to hide emails, they'll also be excluded from exports. You can update your workspace settings temporarily and re-run the export to include emails as well . It can be helpful to export time ranges from Slack such that the size of each import file is less than 15MB . If facing difficulties during the upload phase of the import process, try copying the archive directly to the uploads folder using other means such as scp. Then select Server File Path as the File Type . Channel name with special character: If you use special characters in the channel name, it is important to enable the option \"Allow Special Characters in Room Names\" in layout settings . An advanced option is to edit the special characters accepted in the UTF-8 setting in the general configuration. For example: [0-9a-zA-Z-_ .\u00e3\u00c3\u00e0\u00e8\u00ec\u00f2\u00f9\u00c0\u00c8\u00cc\u00d2\u00d9\u00e1\u00e9\u00ed\u00f3\u00fa\u00fd\u00c1\u00c9\u00cd\u00d3\u00da\u00dd\u00e2\u00ea\u00ee\u00f4\u00fb\u00c2\u00ca\u00ce\u00d4\u00db\u00e3\u00f1\u00f5\u00c3\u00d1\u00d5 \u00e4\u00eb\u00ef\u00f6\u00fc\u00ff\u00c4\u00cb\u00cf\u00d6\u00dc\u0178\u00e7\u00c7\u00df\u00d8\u00f8\u00c5\u00e5\u00c6\u00e6\u0153]+$", "tokens": 289}
{"title": "Import from Slack", "content": "If you import a Slack user with the same username as in your Rocket .Chat workspace, the Slack user is not imported. If you import a Slack channel with the same name as in your Rocket.Chat workspace, the messages from Slack are imported into the existing Rocket.Chat channel . To export your entire Slack workspace data, go to the official documentation for instructions. To export your user list as a CSV file, refer to download a list of members in your workspace for instructions . Once your data is ready, go to the next steps to import it into your workspace. In your Rocket.Chat workspace, go to Administration > Workspace > Import. The Import page lists the import history. Click Import New File . For the Import Type field: Select Slack to import your entire workspace data. Select Slack's Users CSV to import the users only. Select one of the following options for the File Type field: Upload: Upload the exported data as a .zip file . Public URL: Enter the file URL. Server File Path: Enter the file path. Click Import. If you are importing your entire Slack workspace data, the users, channels, and messages tabs are displayed . Deselect the Users and Channels you do not want to import. By default, all messages from the selected users and channels are imported. If you are importing only your Slack's Users CSV, the list of users is displayed . You can deselect the users that you do not want to import. Click Start Importing. Once the import is successful, you can view the import details on the Import page . Now that your Slack data has been successfully imported, you can take the following steps to verify your data: Go to Administration > Workspace > Users. Check that your Slack users are present . Note that the Workspace Admin role of a Slack user is inherited in Rocket.Chat as admin. Other users have the user role. Use the search option to search for the imported channels. You can see the imported messages in the channels.", "tokens": 428}
{"title": "SlackBridge", "content": "Synchronize conversations across your Slack and Rocket.Chat workspace using SlackBridge to mirror messages between channels or private groups in real time. When you send a message in Rocket.Chat, it appears in the corresponding Slack channel, and vice versa. To set this up, create a Slack app that bridges both applications to sync the messages. Go to Slack Apps and click the Create New App button. Select the from an app manifest option and choose the workspace to develop your app in. Enter the following YAML as the app manifest: Review the app summary and click Create. Navigate to Settings > Basic Information and click Install to Workspace. Go to App-Level Tokens and click Generate Token and Scopes. Add a token name and select the following scopes: connections:write authorizations:read app_configurations:write Click Generate and copy the app token generated. Navigate to Features > OAuth & Permissions and copy the Bot User OAuth Token. Navigate to Settings > Basic Information > App Credentials and copy the Signing Secret. Go to Administration > Workspace > Settings > SlackBridge. Enable SlackBridge and disable Use Legacy API Tokens. Add the Bot Token, Signing Secret, and App Token you obtained from configuring your Slack app. Enable SlackBridge Out Enabled to allow sending messages from Rocket.Chat to Slack. Adjust any other settings as needed. Click Save Changes. In your Slack workspace, create a \u00a0channel. In the message box, type the /add command and select Add apps to this channel. Add the RocketChatBridge app to the channel. Return to your Rocket.Chat workspace and go to the directory to search for the channel you created on Slack. Join the channel and send a message. You should see the message appear in Slack. Respond to the message in Slack, and you will see the response in Rocket.Chat. If the messages don\u2019t sync between Slack and Rocket.Chat, restart your workspace. SlackBridge recognizes the same user across Slack and Rocket.Chat if the usernames match. This allows for consistent user identification between the two platforms and supports message reaction.", "tokens": 437}
{"title": "Import from CSV", "content": "The CSV importer allows you to import your own plain text files. However, it does require the .zip file to be in a specific format for the importer to understand . The zip file must be a flat zip, which means there can not be a \"root\" or \"sub\" folder in which the items reside in the zip file. The importer looks for the files channels.csv and users .csv immediately inside the zip and not inside any folder. If you have any questions about this, please ask in the support channel on the open server workspace. Note that the directmessages directory is a special directory name", "tokens": 133}
{"title": "Import from CSV", "content": ". This file should not include channels between 2 users (Direct Messages). See the direct messages / direct channels section for more information. The channels.csv requires a very specific structure and layout. Each line contains information about one channel . Each line must include the channel name, the creator, whether it is private or public, and the members in the channel separated by a semicolon ;. Quotes are required. You can use a text editor to ensure the quotes are correctly placed . Channel name Username of the channel creator Whether the channel is public or private. If the last argument is not private it is assumed the channel is public List of users in the channel, separated by semicolons . If only the creator is in the channel, then there must be empty quotes. The users .csv is a file that contains the user details, each line containing a new user, and the user details are: Username (must not contain @ or any other special characters) Email Name The message CSV files require a particular format . Each line contains a new message, and every piece of information requires quotes to surround it, and there cannot be any spaces between the commas . The details required are: The username who sent the message The timestamp in milliseconds The message and quotes are highly recommended, especially if the message text contains a comma . Direct channels / direct messages are imported from a special directory named directmessages with a specific format based on the message files format . The details required are: The username who sent the message The username who received the message The timestamp in milliseconds The message and quotes are highly recommended, especially if the message text contains a comma . It's required to keep conversations in distinct files; for example, a conversation between user A and B compose a file (messages1.csv), and the conversation between user B and C compose another file (messages2.csv)", "tokens": 402}
{"title": "Import from CSV", "content": ". Once you have that, all set up and zipped; you can start the import process in your Rocket.Chat workspace. Go to Administration > Workspace > Import. Click Import New File. Select the Import Type as CSV. Select your .zip file and wait until Rocket.Chat can read it (it can take a few minutes, depending on the size of the file) Once the file is loaded, deselect any items you don't want to import. Click on Start Importing . Your users and messages are now available in the workspace! If you have problems during the import process, click Reports in the admin section to view the logs.", "tokens": 139}
{"title": "Extracting Multi-Part Data Exports", "content": "This guide provides step-by-step instructions on consolidating and extracting multi-part exported files provided by Rocket.Chat Cloud. Ensure you have all the .tar.gz.part files downloaded to the same directory. Use a Unix-based system (Linux, macOS, or Windows Subsystem for Linux) with standard tools like Bash, tar, and gzip installed. Verify Checksums (Optional but Recommended): Compare the provided checksum file with your downloaded parts using: Ensure all parts are intact before proceeding. Merge File Parts: Run the following command to combine all parts into a single .tgz file: Replace N with the total number of parts you received. Extract the Consolidated File: Extract the .tgz file using: Troubleshooting Extraction Errors: If you encounter errors, first check the integrity of the archive using: If the issue persists, verify the integrity of the consolidated file: Checksum Mismatch: Re-download the affected parts and verify checksums again. Extraction Fails: Ensure sufficient disk space is available (at least twice the size of the exported data). Use the --ignore-zeros (-i) flag if encountering EOF errors. Missing Tools: Install the required tools using your system's package manager (e.g., apt, brew, or yum). Always use the commands provided above to ensure compatibility with exported Rocket.Chat data. If issues persists contact support with details about your system environment and errors.", "tokens": 313}
{"title": "Check Node.js Version", "content": "Rocket.Chat is built on top of Node.js, which is the engine that powers its functionality. For detailed information on Node.js, see the official Node.js documentation. Rocket.Chat is built with Meteor, a JavaScript framework, and the version of Meteor in use dictates the supported Node.js version for that specific version. The guide provides instructions on how to check the supported Node.js version for any specific release. The only reason you may need to check this (except for idle curiosity or debugging purposes) is if you're using the manual method of deployment. We don't recommend manual installation. Instead, Docker is recommended and encouraged. With Docker (or Snap) you won't need to worry about the node version. To determine the Node.js version compatible with a specific release: Visit our GitHub releases page, navigate to the details for that particular version, and look for Engine versions. For example, for the 6.5.2 release, the following information is displayed: You can also use our releases API to access this information. Taking version 6.3.0 as an example, to know the supported node version for this release, perform a GET operation on https://releases.rocket.chat/6.3.0/info. You're looking for the nodeVersion key. For example, for the current latest version, with curl and jq:", "tokens": 301}
{"title": "Roles in Rocket.Chat", "content": "Roles and permissions are integral to managing access in any digital workspace. Rocket.Chat's comprehensive role-based system allows administrators to assign roles, each with a specific set of permissions, to control user actions and access levels within the workspace . A role refers to a set of permissions and privileges assigned to a user or a group of users within the workspace. The roles determine the controls and features a user can access or handle in a workspace . They are displayed as mini tags beside the username on messages. You can view the roles from Administration > Permissions. The Name row displays the roles. The permissions for each role are displayed in the table . You can edit the permissions and roles as you need. This topic guides you through the categories of roles available in Rocket.Chat and the scope within which the roles can be applied to users. The following categories of roles are available in Rocket .Chat: A Rocket.Chat administrator has the admin role, which gives full access to the entire Rocket.Chat workspace. They can manage both workspace administration and omnichannel settings. Rocket .Chat users can have one or more roles, allowing them to perform the various actions granted by the role's permissions. Role Description user The user role is the most common in Rocket.Chat. It serves as a standard role for all members of a Rocket .Chat workspace. Users can join rooms, send messages, upload files, and participate in all forms of communication. bot Bots are automated users that can be programmed to perform specific tasks, such as sending messages, answering questions, and triggering notifications . guest Guest users have limited access to your Rocket.Chat workspace. They can only participate in rooms they belong to. anonymous Unauthenticated visitors on your Rocket.Chat workspace. Anonymous users do not have a specified username. app Automated users that are used by Rocket .Chat Apps from the Rocket.Chat marketplace Owner A room owner is a user designated as the owner of a specific room. The room owner can manage the channel, including controlling access to joining the channel, editing channel settings, and managing messages within the channel . Leader A room leader gets pinned on the top of a channel and can receive 1:1 messages from other channel users. Moderator Moderators can manage messages, delete messages, and ban users from a specific channel", "tokens": 488}
{"title": "Roles in Rocket.Chat", "content": ". auditor It allows a user to view and audit all messages within the workspace. Users with the auditor role alone cannot send messages. auditor-log The auditor-log role allows a user to see logs about all audited messages with timestamps and by whom . Users with the auditor-log role alone cannot send messages. To create and manage custom roles with specified permissions tailored to your needs, see custom roles. Omnichannel roles allow users to interact with or manage various Omnichannel features . Role Description Livechat Agent Livechat agents handle inquiries and support requests through Omnichannel. Livechat Manager Livechat managers can manage agents and all other Omnichannel features . livechat-monitor Users with the livechat-monitor role can view and monitor livechat interactions and analytics. Internally, there are two roles for Rocket.Chat marketplace. The first is within the publisher, and the second is within the workspace . Henceforth, they're known as publisher roles and system roles. There are three different roles within a publisher, which include the following: Owner Developer Viewer The Owner role is applied whenever someone creates a publisher . Each of the subsequent roles only applies to people they have invited. Role Description Publisher: Owner The owner has the permission to manage everything on the publisher dashboard. It includes managing both apps and other users . To change the role of another user: Click Change Role from the Actions dropdown across the user in question. Select the desired role to change. Publisher: Developer A user with the developer role can read everything and update apps . Publisher: Viewer The viewer role can read everything but can't update anything. The user and omnichannel roles are also categorized into global and room scopes", "tokens": 362}
{"title": "Roles in Rocket.Chat", "content": ". Global roles are designed to provide users with permissions that apply to the entire workspace; for example \u2014 admin. They can be assigned permissions relevant at the server level and not specific to individual rooms or channels . For example, Create a Team is a permission that is applicable server-wide, enabling users to create teams regardless of the room or channel they are currently in . Room scope roles are designed to provide users with specific permissions within individual rooms, for example - Moderator. Room scope permissions are helpful when managing room-specific activities and interactions. For example, you can assign the Edit Room permission to a Moderator role . A user must be set as a moderator in a room before they can edit that room information . While you can globally assign some room roles to a user when creating or editing the user, it takes effect once the role is assigned to that user in a specific room. Every Rocket .Chat workspace has some default roles, which include the following: Role Scope Description admin Global Access to all settings and workspace administrator tools. moderator Room Moderation permissions for a channel. It must be assigned by the room owner . owner Room Owner permissions for a room. Users who create a room become the owner of that room. They can also assign more owners for that room. user Global Normal user rights. Most users receive this role when registering in the workspace . bot Global Role for bot users, with some permissions related to bot functionality. leader Room It is used when setting a leader in a room. Leaders appear on the header of a channel . anonymous Global Unauthenticated users that access the workspace when the Allow Anonymous Read setting is activated. guest Global Anonymous users that want to participate in rooms when the Allow Anonymous Read and Allow Anonymous Write settings are activated. livechat-agent Global Omnichannel agents . They can answer livechat requests. livechat-manager Global Omnichannel managers, can manage agents and guests. livechat-guest Global Users coming from a livechat room. You can edit roles only in the Enterprise plan", "tokens": 427}
{"title": "Roles in Rocket.Chat", "content": ". Go to Administration > Permissions. Click the role from the Name row. Update the Description of the role as required. This is displayed as the role name . If you are editing a custom role, note the following points: You cannot edit the custom role name from the workspace. To edit the role name, use the update role endpoint . You can update the Scope of custom roles only, not the default roles. Select Rooms or Global as the custom role scope. You can delete custom roles only, not the default roles . Enable the Users must use Two Factor Authentication setting if you want to force the users in this role (custom and default roles) to use 2FA for certain workspace actions, such as logging in or \u00a0changing certain settings. Click Save . On the Role Editing pane, click Users in Role to see the users who have been assigned to that particular role. You can add more users to the role and delete users from here . The following screenshot shows an example of the user role: You need to select a room for the roles with the\u00a0Room\u00a0scope. The users with that role in the room are displayed . The following screenshot shows an example of the Moderator role in a room called random: In this example, search for the user and click Add to give other users the\u00a0Moderator\u00a0role in the\u00a0random\u00a0room . The user must belong to the selected room before you can assign a role to them. For information on creating custom roles, see custom roles. For information on permissions and settings, see permissions . By offering a variety of predefined roles and the ability to create custom roles, Rocket.Chat ensures that workspace administrators can effectively control and limit user actions.", "tokens": 348}
{"title": "Installing Client Apps", "content": "As of December 15, 2023, Rocket.Chat has ceased support for connections from cloud services and official mobile/desktop apps to workspaces running legacy versions outside our support window. Users on unsupported legacy servers are advised to upgrade to the latest Rocket.Chat version to ensure continued access to cloud, mobile, and desktop applications. Each Rocket.Chat version is supported for six months post-release. Congratulations on successfully deploying the Rocket.Chat server! You've taken a significant step towards creating a robust and secure communication environment. The next crucial phase is to install the Rocket.Chat client applications on your preferred devices, and this guide is designed to help you achieve just that. In today's interconnected world, having access to your communication platform across various devices, be it desktop or mobile, is not just convenient, but a necessity. This guide provides comprehensive instructions to download, install, and set up the Rocket.Chat apps, customized for your specific device and operating system. Regardless of whether you're a tech expert or a beginner, these guidelines are tailored to ensure a smooth installation process. To use desktop & mobile apps, make sure you meet the minimum requirements for client apps.", "tokens": 246}
{"title": "Desktop & Mobile Apps", "content": "As of December 15, 2023, Rocket.Chat has ceased support for connections from cloud services and official mobile/desktop apps to workspaces running legacy versions outside our support window. Users on unsupported legacy servers are advised to upgrade to the latest Rocket .Chat version to ensure continued access to cloud, mobile, and desktop applications. Each Rocket.Chat version is supported for six months post-release. Welcome to the detailed guide on installing Rocket.Chat client applications on your desktop and mobile devices . Embarking on your journey with Rocket.Chat is an exciting prospect, promising efficient, secure, and user-friendly communication. This guide is dedicated to helping you take the first crucial step: setting up the Rocket.Chat apps on your preferred devices . Whether you're on Windows, MacOS, Linux, iOS, or Android, this guide has got you covered. Desktop apps: When it comes to desktop communication, Rocket.Chat offers robust applications that seamlessly integrate with your Windows, MacOS, or Linux environment . To help you set up Rocket.Chat on your desktop, this guide offers clear, step-by-step instructions specific to each of these operating systems . From downloading the right version of the application, to launching it successfully on your desktop, this section is your roadmap to a smooth and error-free installation. The electron-based desktop apps for Rocket.Chat are available here . Windows macOS Linux Releases Mac App Store For Ubuntu users, we suggest installing our snap using the command: sudo snap install rocketchat-desktop The advantage of snaps is that they automatically update, eliminating the need for manual client updates . Snaps are also compatible with other platforms, with more details available here. A Flatpak package is also accessible on Flathub. If you prefer, you can manually download and install the latest releases, which can be found here", "tokens": 387}
{"title": "Desktop & Mobile AppsMinimum Requirements for Client Apps", "content": ". Mobile apps: To ensure that you stay connected, no matter where you are, Rocket.Chat offers dedicated applications for iOS and Android devices. Android Apple Play Store App Store Rocket .Chat beta: Beta versions of our apps are available on Google Play beta and TestFlight. Help us test new features! Android Apple Play Store TestFlight Rocket.Chat experimental: Our experimental mobile apps are built using identical technologies and codebase as the official version . These apps serve as a platform for us to test new features and gather user feedback. Only the features that prove to be stable are incorporated into the official version. Android Apple Play Store iOS version isn't available on App Store anymore. If you\u2019re curious about the technical requirements needed to run Rocket.Chat, read on to learn which operating systems (OS) and browsers we support. Operating System Requirements macOS OS X 10.11 or above Windows Windows 8 or above Linux Fedora 28 or above Ubuntu LTS releases 18.04 or above Red Hat Enterprise Linux 7.0 or above Operating System Requirements iOS iOS 11 or above Android Android 6.0 or above Browser Requirements Google Chrome Latest 3 versions Mozilla Firefox Latest 3 versions Safari Latest 2 versions Microsoft Edge Latest 2 versions Microsoft Internet Explorer Latest version only To deliver the best possible Rocket.Chat experience, and we keep our list of supported browsers and operating systems short. We don\u2019t fix bugs or issues for unsupported browsers, so we do our best to block them from accessing Rocket.Chat.", "tokens": 317}
{"title": "Advanced Workspace Management", "content": "Rocket.Chat provides advanced workspace management features, offering a range of customizable functionalities to suit the unique needs of any workspace. From managing users and channels to integrating with third-party applications, the advanced workspace management features provide a robust framework for efficient team collaboration. The security offerings ensure that your communication remains safe, while platform enhancements improve the overall user experience. Google Cloud features: Implement various Google Cloud features in your workspace\u2014for example, Google Translate. Environment variables: Configure your workspace settings using environment variables. Notifications: Update your workspace notification preferences. Database migration: Configure the database migration collection. Restoring an admin user: Restore an admin user based on your workspace installation. CDN: Use a CDN to serve static assets such as JS, CSS, and images to your workspace. Troubleshooting: Common workspace management troubleshooting techniques. Client compatibility matrix: Mobile and desktop clients with their supported Rocket.Chat releases. To learn more about workspace management, please refer to workspace administration. If these guides don't meet your needs, you can contact us via support.", "tokens": 241}
{"title": "Google Translate Integration", "content": "In the era of cloud computing, the integration of cloud services into communication platforms is essential. Rocket.Chat has adopted this trend, particularly by incorporating Google Cloud features. This document will primarily focus on how Rocket.Chat leverages the Google Translate feature, a significant aspect of Google Cloud services. Google Translate: Rocket.Chat leverages the Google Cloud's translate feature to enhance communication within its platform. This feature allows every communication received on a channel to be translated using the Google translation engine. To use this feature, a Google Translate API key is required. The process of obtaining this key involves creating a project on the Google Cloud Console, enabling the Cloud Translation API, and creating the API key under credentials. The official Google API documentation explains how to get and use a Google Translate API key. Getting the key: To get the Google Translate API key, Go to Google Cloud console. Create a project and select it. On the navigation menu, go to APIs & Services > Dashboard. Click on ENABLE APIS AND SERVICES and search for Cloud Translation API. Go to Credentials. Click Create credentials. Select API key. Configuration: It's time to configure auto-translate in your workspace now that you have your API key. Go to Administration > Workspace > Settings > Message > Auto-Translate Enable Auto-Translate. Select Google as the Service Provider. Only users with auto-translate permission can use this feature. Enabling auto-translate on a channel: Auto-Translate can be enabled on a per-channel basis. When enabled, any messages sent in a language that Google Translate supports will be translated into the user's chosen language. The translated messages are only visible to the user who enabled auto translation, while the original, untranslated messages are displayed for users who have not enabled this feature. To activate auto-translate in a room, Click the kebab menu in the room header. Select Auto-Translate. Enable Automatic Translation and select your desired language. An auto-translate icon  is displayed beside the room name to indicate that the feature is active. To translate a message, Hover over the message and click the kebab menu. Select Translate. Rocket.Chat's integration with auto translate feature significantly enhances the platform's communication capabilities. By leveraging Google's powerful translation engine, Rocket.Chat ensures that language barriers do not hinder communication within its platform.", "tokens": 488}
{"title": "Database Migration", "content": "As software evolves and new features are added, the underlying database schema often needs to change to accommodate these updates. This process, known as database migration, is a critical aspect of maintaining and updating software systems. Rocket .Chat, a leading communication platform, handles database migrations seamlessly, ensuring that the transition between different versions of the platform is smooth and efficient. This document will provide a comprehensive overview of how Rocket.Chat manages database migrations. For more information on updating Rocket .Chat, see updating Rocket.Chat. Database migration means updating an older schema to a newer one (or vice versa). When you incrementally update your Rocket.Chat version, the database migration is automatic, and you do not have to take any explicit action . Rocket.Chat migrations and their versions can be found on GitHub. When you incrementally update your Rocket.Chat version, the database migration is automatic, and you do not have to take any explicit action. Rocket .Chat migrations and their versions can be found on GitHub. However, it's important to note that Rocket.Chat uses migrations to enforce an updatable version range. This means that direct upgrades from non-consecutive versions (e.g ., from version three to five) are not possible since the intermediate migrations have been removed. While Rocket.Chat does not officially support downgrades due to the changes made during database migrations, it is possible to manually roll back migrations separately if necessary . The versioning in Rocket.Chat looks like this: Rocket.Chat's migration collection contains a single document with a specific structure that controls migration actions . This document includes fields for the migration version, a lock to indicate whether a migration is currently in progress, and an ID field. If a particular migration needs to be skipped, the version field in the migration collection can be set to the next version . _id : The value is always control. It means the collection has only one document to control migration actions. locked : The value is boolean and can either be true or false. It identifies whether migration is currently happening or not . If a migration fails, it will be stuck at true. version - The migration version your server is currently at. Rocket.Chat's approach to database migration ensures a smooth and efficient transition between different versions of the platform . By automating the migration process and providing mechanisms for controlling migration actions, Rocket.Chat ensures that its database schema is always up-to-date and compatible with the current version of the platform.", "tokens": 532}
{"title": "Restoring an Admin User", "content": "In the management of any digital platform, there may be instances where access to an admin user is lost and needs to be restored. Rocket.Chat provides a comprehensive process for restoring an admin user without requiring another admin user . This document will provide a detailed overview of how to restore an admin user in Rocket.Chat by accessing the database. Access the database: Restoring an admin user in Rocket .Chat involves accessing the database, which can be done in various ways depending on how the Rocket.Chat server was installed . For Docker-based installations, the Mongo shell within the Mongo container can be accessed, and for Ubuntu Snaps installations, MongoDB can be connected directly . Docker-based installations: To open the Mongo shell within the Mongo container, Change into the docker-compose directory (where your docker-compose.yml is located) and run mongo bash. Alternatively, you can run the following command without navigating to the docker-compose .yml directory. Login into the Mongo shell. Make sure to replace mongo with the name of your MongoDB container if you use a different one. Open the database in the Mongo shell Make sure to replace rocketchat with the name of your Mongo database . If you're unsure of the name, you can either check your docker-compose.yml file or run the following command: Ubuntu Snaps installation: Connect to MongoDB using the following command: Select the Rocket.Chat database", "tokens": 321}
{"title": "Restoring an Admin User", "content": ". Updating the admin password: To update the admin password, you can either use a one-time access token or update the admin password to a random string. Using an access token will require the user to change their password . Then access http://{your server url}/login-token/some-token-id-that-you-will-use-to-login-once to log in. Alternatively, you can update the admin password to a random string . Using 12345 as an example of the password, use its hashed(bycrypt) value: Replace administrator with the appropriate username of the administrator on your server. Restart your application container in case the new password is not accepted yet . Generate a valid admin password: To generate a valid password and its hashed value with bcrypt-cli, Install bcrypt-cli with: Then, use this to generate your bcrypt password: Reset a user role to admin: In addition to updating the password, the user role can also be reset to admin using a specific database command . This ensures that the restored user has the necessary admin privileges. Run the following database command : Replace administrator with the appropriate username of the administrator on your server.", "tokens": 268}
{"title": "CDN", "content": "In the era of high-speed internet and global connectivity, Content Delivery Networks (CDNs) have become an essential tool for efficiently delivering static assets such as JavaScript, CSS, and images to users. Rocket.Chat supports the use of a CDN to serve static assets to its workspace. This guide will provide a detailed overview of how to set up a CDN in Rocket.Chat and troubleshoot any issues that may arise. It's important to note that if you provide a CDN prefix that is not live or incorrect, you may lose access to your Rocket.Chat instance as the required assets will not be found. To enable CDN in your workspace, Go to Administration > Workspace > Settings > General. Update the CDN prefix. You can enable Use CDN prefix for all assets or set a different This string will generate different outcomes depending on the value provided. Value Example Url for Asset cdn /cdn/example-asset.js http://cdn.domain.com http://cdn.domain.com/example-asset.js https://cdn.domain.com https://cdn.domain.com/example-asset.js Enable this for serving all assets from the same CDN. This option takes the same style input as CDN prefix. The value provided will be applied only to JS and CSS assets. In case the CDN stops working or the provided values are incorrect, there are a few workarounds to allow a fix to be implemented inside the administration settings. These include updating the backend Mongo database to remove the CDN or using a browser extension to rewrite URLs from the CDN address to the exact location where Rocket.Chat is running. As the front end of Rocket.Chat may be inaccessible, but the backend Mongo database can be updated to remove the CDN. The following Mongo commands should reset the value to the default state. A browser extension can be used to rewrite URLs from the CDN address to the exact location where Rocket.Chat is running. Take extra caution when selecting an appropriate extension for your browser.", "tokens": 449}
{"title": "TroubleshootingClient Compatibility Matrix", "content": "Occasionally, you may encounter some issues with your server. Common troubleshooting problems and solutions are outlined in this guide. If you receive an alert that you have an invalid site URL, this means your site URL and the URL you are accessing don't match. This can cause assets in Rocket.Chat not to load correctly. Most often, it happens when someone changes the setting. To resolve it, you will need to modify the site URL by setting the following environment variables: Rocket.Chat offers various options for you to monitor and analyze your workspace operations. The workspace Reports menu displays the workspace logs and analytics reports. The Logs settings allow you to update how the server logs are received. You can also set up Grafana and Prometheus applications and integrate them with Rocket.Chat to monitor your workspaces. Rocket.Chat maintains a client compatibility matrix to ensure its mobile and desktop applications function correctly across different server versions. This document will provide an overview of Rocket.Chat's approach to maintaining client compatibility. While all past releases are not officially supported and may cause problems, Rocket.Chat strives to ensure its applications function correctly with the most recent server versions. This approach ensures that users can leverage the latest features and improvements while maintaining a secure, stable, and reliable user experience. Electron version Supported releases 4.0+ 3.0+ 2.15 1.0+ 2.14 \u2a7d 0.70 2.13 \u2a7d 0.69 2.12 \u2a7d 0.68 2.11 \u2a7d 0.65 2.10 \u2a7d 0.59 2.9 \u2a7d 0.58 2.8 \u2a7d 0.56 2.7 \u2a7d 0.55 Rocket.Chat's mobile applications support a maximum of three major server versions on each release. This is due to the rapid evolution of the platform's APIs with each release, which can make maintaining compatibility with older versions challenging, especially when those versions lack support for specific features. App version Supported releases 4.0.0+ 0.70+", "tokens": 417}
{"title": "Rocket.Chat Air-Gapped Deployment with Docker", "content": "An air-gapped system is one that is physically isolated from external networks, such as the public internet, to ensure maximum security. This setup is commonly used by organizations with heightened security needs, like government agencies, defense sectors, and critical infrastructure operators . Rocket.Chat supports deployment in air-gapped environments but requires a premium (Starter, Pro, or Enterprise) license due to the following reasons: Commercial Code Inclusion: Rocket.Chat\u2019s codebase includes both open-source and commercial components . A premium license ensures access to advanced features and allows organizations to audit the code for compliance. Intellectual Property Protection: Without internet access, Rocket.Chat cannot verify license usage for commercial features. The premium license ensures compliance and protects Rocket.Chat\u2019s intellectual property . Compliance and Feature Unlock: A premium license unlocks enterprise-grade features, including advanced security tools, scalability options, and premium support . For organizations using Community workspaces, there are two options: Purchase a Premium License: Unlocks advanced features and ensures compliance in air-gapped environments. To upgrade to the free Starter plan, refer to Upgrade to Starter from Community workspace . Build and Maintain a FOSS Version: Users can build from the open-source repository without requiring a license, though premium features and support are excluded. A premium license ensures compliance, enhances scalability, and provides access to Rocket", "tokens": 281}
{"title": "Rocket.Chat Air-Gapped Deployment with Docker", "content": ".Chat\u2019s full feature set in secure, air-gapped deployments. This document covers the following options to deploy Rocket.Chat in an air-gapped environment: Copy Rocket.Chat Docker images from a server with internet access Deploy Rocket .Chat with a private Docker registry Given that an air-gapped environment has no internet access, simply download the required Docker images on a server with internet access and transfer them to the air-gapped server . One server that has internet access to download the Docker images. One air-gapped server to deploy Rocket.Chat. Ensure that Docker is installed and operational on the two servers . Ensure that you have a method for transferring files from the server with internet access to the air-gapped server, for example, USB drives. Transfer methods may vary depending on your company's policies and network configurations . Go to the server with internet access and download the Rocket.Chat and MongoDB images with the following commands: Download Rocket.Chat version 6.5 or higher . Instead of the latest MongoDB image, confirm that you're downloading the supported MongoDB version by checking our release notes. For example, 6.0. Run docker images to see the images you just downloaded. Save the images as .tar files with these commands: Next, download the Rocket.Chat sample compose.yml file by executing this command: Run ls to view the files. You should have the two .tar files and the compose.yml file. Editing the configurations in the compose", "tokens": 320}
{"title": "Rocket.Chat Air-Gapped Deployment with Docker", "content": ".yml file is not recommended. Instead, set environment variables using a .env file. Download the sample .env file using this command: Note the following points while modifying the .env file: Change the file name to .env . Uncomment the variables that you are updating. Set the RELEASE variable in the .env to your desired Rocket.Chat version. See our releases page and available docker images. Keeping the default release as latest is not recommended . Edit ROOT_URL from the default http://localhost:3000 to match your domain name or IP address if you're deploying a production workspace. Set the MONGODB_VERSION to the supported MongoDB version according to our releases . For example, the values in the .env file should look something like this: If you have a registration token to register the workspace automatically, you can add it like this: REG_TOKEN={your token here} Save the .env file after making the necessary changes and follow the next steps . If your server with internet access and the air-gapped server cannot communicate and are not on the same network, copy the downloaded files to a USB drive and transfer them to the air-gapped server using the USB drive . Then, follow Step 3", "tokens": 275}
{"title": "Rocket.Chat Air-Gapped Deployment with Docker", "content": ". Alternatively, if the two servers can communicate with each other, you can transfer the downloaded files to your air-gapped server with the following commands: Update the following with the appropriate values: key: The key to access the air-gapped server where the file should be sent . rocketchat_tar_file_path: The rocketchat.tar file path. mongodb_tar_file_path: The mongodb.tar file path. compose_file_path: The compose.yml file path. env_file_path: The .env file path . user_name@target_ip_address: The username and IP address of the air-gapped server where the file should be sent. destination_path: The directory path on the air-gapped server where you want to save the file . For example, scp -i firstServer.pem rocketchat.tar ubuntu@176.37.27.133:/home/ubuntu Go to the destination directory in the air-gapped server where you transferred the files", "tokens": 233}
{"title": "Rocket.Chat Air-Gapped Deployment with Docker", "content": ". Run ls to confirm that the files were transferred successfully. You should have two .tar files, a compose.yml file, and a .env file. Load the Rocket .Chat and MongoDB images to Docker with the following commands: Run docker images to view the images. If you have not edited the .env file in Step 1, you can do so here . It is not recommended to modify the compose file, but if you need to, you can also edit the ROOT_URL in the compose.yaml file from the default http://localhost:3000 to match your server URL or domain name . For example, To install Rocket.Chat, execute this command: Confirm that the RocketChat and Mongo DB containers are actively running by executing the command docker ps. To see the log/status of your Rocket .Chat container, execute this command: It also displays your site URL, which you can use to access your workspace. Great! You have successfully deployed Rocket.Chat in your air-gapped environment. Log into your workspace using your site URL . The first user to log in becomes the workspace administrator. The following section walks you through the second deployment method. A Docker registry is a system for storing and distributing Docker images with specific names . Considering that an air-gapped computer can't access the internet to download the required Docker images for deploying Rocket.Chat, this method will demonstrate how to use a private registry to store the necessary images and deploy Rocket.Chat . One server that has internet access to download the Docker images. Two air-gapped servers (one for hosting the private registry, one for installing Rocket.Chat). Ensure that Docker is installed and operational on the three servers", "tokens": 373}
{"title": "Rocket.Chat Air-Gapped Deployment with Docker", "content": ". Ensure that you have a method for transferring files from the server with internet access to the air-gapped server, for example, USB drives . The diagram below highlights an overview of the servers: Air-gapped deployment with private registry servers Transfer methods may vary depending on your company's policies and network configurations . Given that the server to host the registry doesn't have internet access, it is impossible to download images from Docker Hub or any public registry . As a result, you need to download the registry image on a server with internet access and transfer it to the air-gapped registry host server before proceeding with the installation . Follow these steps to complete the process: On the server that has internet access, pull the image that'll be used to create the registry with this command: Run docker images to see that the image has been downloaded. Create a .tar file of the registry image: If your server with internet access and the air-gapped server cannot communicate and are not on the same network, copy the downloaded .tar file to a USB drive and transfer it to the air-gapped server using the USB drive. Alternatively, if the two servers can communicate with each other, you can transfer the .tar file to the air-gapped registry host server using the following command: Update the following with the appropriate values: key: The key to access the registry host server where the file should be sent. registry_tar_file_path: The registry_image .tar file path. user_name@target_ip_address: The username and IP address of the registry host server where the file should be sent. destination_path: The directory path on the registry host server where the file should be located . For example, scp -i firstServer.pem registry_image.tar ubuntu@172.31.81.10:/home/ubuntu Transfer methods may vary depending on your company's policies and network configurations. Now, go to the air-gapped registry host server", "tokens": 421}
{"title": "Rocket.Chat Air-Gapped Deployment with Docker", "content": ". Run the following commands to confirm that you don't have the registry image or container yet: Go to the destination path where you sent the .tar file and run the ls command and verify that the transfer was successful . To load the tar file on the air-gapped registry host server, execute this command in your preferred directory: Now run docker images to see the registry image that you downloaded and transferred from the first server . To start the registry container for this image, execute this command: It's not mandatory to run the container on port 5000. The suggested port is an example and can be updated according to your specific requirements . Update private-registry with your preferred name for the registry container. For production environments, ensure the persistence of images by either specifying a local folder on the host for storage or by implementing other suitable persistence mechanisms . Run docker ps to see the new registry container running. Now, you have a functioning registry on an air-gapped server ready to store the Rocket.Chat and MongoDB images . Recall that the air-gapped server containing the registry has no internet access, so it's impossible to download the Rocket.Chat and MongoDB images from external registries . Download the images on the first server with internet access and push the images to the registry in the air-gapped server . Follow these steps to continue the process: Return to the first server with internet access and execute these docker-pull commands to download the Rocket.Chat and MongoDB images: Download Rocket.Chat version 6.5 or higher . Instead of the latest MongoDB image, confirm that you're downloading the appropriate MongoDB version by checking our release notes. For example, 6.0. Run docker images to confirm that the images have been successfully downloaded. Tag the Rocket .Chat and MongoDB images with these commands: Update <registry_ip_address:5000> with the IP address of your registry host server and the appropriate port number, if your registry container is not running on port 5000", "tokens": 421}
{"title": "Rocket.Chat Air-Gapped Deployment with Docker", "content": ". Execute the docker images command to see the newly tagged images in the list of images . If the air-gapped registry host server is HTTP, modify the docker daemon file to allow communication with insecure registries: Update the file with the following content and save it: Update <registry_ip_address:5000> with the IP address of your registry host server and the appropriate port number if your registry container is not running on port 5000 . Restart docker with this command: Push the tagged images to the registry on the air-gapped server with these commands: Update <registry_ip_address:5000> with the IP address of your registry host server and the appropriate port number if your registry container is not running on port 5000 . Now, go to the air-gapped registry host server to confirm that the images were successfully pushed . To do this, run this command to open an interactive shell inside the registry container: Update private-registry with the name of your registry container if it's different . Execute this command to see the docker images in the registry: Confirm that the MongoDB and Rocket.Chat images exist in the registry, and you're ready to install Rocket.Chat from the air-gapped server with the registry . You may only see the first name of the image path. For example, docker.io instead of /docker.io/bitnami/mongodb", "tokens": 294}
{"title": "Rocket.Chat Air-Gapped Deployment with Docker", "content": ". In this step, we will download the necessary files and transfer them to the air-gapped server in which you want to install Rocket.Chat. Follow these steps: Download the sample compose.yml and .env files using the following commands: Editing the configurations in the compose.yml file is not recommended. Instead, set environment variables in the .env file. Note the following points while modifying the .env file: Change the file name to .env . Uncomment the variables that you are updating. Set the RELEASE variable in the .env to your desired Rocket.Chat version. See our releases page and available docker images. Keeping the default release as latest is not recommended . Edit ROOT_URL from the default http://localhost:3000 to match your domain name or IP address if you're deploying a production workspace. Set the MONGODB_VERSION to the supported MongoDB version according to our releases . For example, the values in the .env file should look something like this: If you have a registration token to register the workspace automatically, you can add it like this: REG_TOKEN={your token here} Save the .env file after making the necessary changes and follow the next steps. If your server with internet access and the air-gapped server cannot communicate and are not on the same network, copy the downloaded files to a USB drive . Transfer them to the air-gapped server in which you will install Rocket.Chat using the USB drive. Then, follow Step 4 . Alternatively, if the two servers can communicate with each other, you can transfer the downloaded files to your air-gapped server with the following commands: Update the following with the appropriate values: key: The key to access the air-gapped server where the file should be sent . compose_file_path: The compose.yml file path. env_file_path: The .env file path. user_name@target_ip_address: The username and IP address of the air-gapped server where the file should be sent", "tokens": 443}
{"title": "Rocket.Chat Air-Gapped Deployment with Docker", "content": ". destination_path: The directory path on the air-gapped server where you want to save the file. For example, scp -i firstServer.pem rocketchat.tar ubuntu@176.37.27.133:/home/ubuntu Now that the Rocket .Chat and MongoDB images have been pushed to the air-gapped server containing the registry, the next step is to install Rocket.Chat on the second air-gapped server. You have to deploy Rocket .Chat using the images from the air-gapped server with the registry and the files that we transferred from the previous step. Follow these steps to do so: Run the following commands to confirm that no Rocket .Chat and MongoDB images are running on the air-gapped server: If you are using HTTP to communicate between your server and registry, modify the docker daemon file to allow communication with insecure registries: Update the file with the following content and save it: Update <registry_ip_address:5000> with the IP address of your registry host server and the appropriate port number, if your registry container is not running on port 5000 . Restart docker with this command: If you have not edited the .env file in Step 3, you can do so here . It is not recommended to modify the compose file, but if you need to, you can also edit the ROOT_URL in the compose.yaml file from the default http://localhost:3000 to match your server URL or domain name . For example, Update the image paths for Rocket.Chat and MongoDB to reference the images on the registry in the air-gapped server . For example, Update <registry_ip_address:5000> with the IP address of your registry host server and the appropriate port number, if your registry container is not running on port 5000. Install Rocket .Chat by executing this command: Run these commands to confirm that the RocketChat and MongoDB images are present with their containers actively running: To see the log/status of your Rocket", "tokens": 436}
{"title": "Rocket.Chat Air-Gapped Deployment with Docker", "content": ".Chat container, execute this command: It also displays your site URL, which you can use to access your workspace. Now, you have successfully deployed Rocket.Chat in your air-gapped environment . Log into your workspace using your site URL, and the first user to log in becomes the workspace administrator. Once your air-gapped workspace is deployed successfully, you must register your workspace. Follow the Air-Gapped Workspace Registration document . After this, you need to apply the workspace license. Then, you are ready to begin using your workspace! You can refer to the additional configurations and app installation details for air-gapped workspaces . To learn more about your workspace, you can refer to the following: User Guides: Learn the basics of your Rocket.Chat account, the types of rooms, and how to communicate with your workspace users . Workspace Administration: Administrators and owners can set and manage various configurations. From 7.0, air-gapped Community workspaces will be in read-only mode . Community workspaces must be subscribed to a premium plan to access the air-gapped features. Workspace admins can follow these steps to upgrade the workspaces: Log in to the Rocket.Chat Cloud portal and select the Workspaces tab . Click the kebab menu against the Community workspace that you want to upgrade. Select Upgrade to Starter. Your workspace will be subscribed to the Starter plan . Once your workspace is subscribed to the Starter plan, follow these steps to get the air-gapped license and activate the workspace: In the cloud portal, select the upgraded workspace. The workspace details page opens. Click the Get License button from the Rocket .Chat License section. An Apply Offline License pop-up opens. Copy the License Code. In your workspace, go to Workspace > Settings > Premium. Under the Premium section, in the Premium License field, paste the license code you copied from the cloud portal . Save the changes. You have successfully activated your air-gapped workspace! For other premium plans, you can refer to the Air-Gapped License document.", "tokens": 455}
{"title": "Air-Gapped Workspace Registration", "content": "After deploying your air-gapped workspace successfully, navigate to your workspace URL and continue with the following steps to register your workspace on Rocket.Chat Cloud: Complete the Admin and Organization Information steps in the Rocket.Chat setup wizard. Click the Register Offline button. It displays a token with some instructions to paste it in Rocket.Chat Cloud. Register Offline Go to your Rocket.Chat Cloud account. Navigate to Workspaces and click Register self-managed. Click the Continue Offline button and paste the token displayed earlier from your workspace setup wizard. Click Continue. Another code is generated on Rocket.Chat cloud to finalize your workspace registration. Copy that code and click Continue. Go back to the Register Offline screen on your workspace setup wizard where the initial token was generated, agree to the Terms & Privacy Policy., then click Next. Paste the code generated from Rocket.Chat Cloud and click Complete Registration. Once you've completed these steps, your workspace will be set up and ready to use. You can access it by logging in with your admin credentials. You can always update your setup information in workspace administration setup wizard. For workspaces that accessible through the internet, kindly visit setup wizard to set up your workspace. To register a workspace on a version below 6.5 without internet access, Navigate to Administration > Workspace > Settings > Setup Wizard > Cloud Info and enable Cloud Service Privacy Terms Agreement. Enabling it means you agree with the Terms & Privacy Policy. Navigate to Administration > Workspace > Registration and click Register Offline. Copy the code snippet that is displayed on the pop-up box. Create an account or login into your Rocket.Chat Cloud portal. Then, click on Register self-managed to register a new workspace. Click Continue Offline if you are running an air-gapped workspace or your server has no internet connection. Paste the code you copied earlier from Connectivity Services and click Continue. You are provided with another code from the cloud portal. Copy the code and go back to your local workspace. On your local workspace, paste the code you got from the cloud portal and click Finish Registration. With that done, you have successfully registered your workspace. Moving to the next section, we'll guide you on how to apply air-gapped license to your air-gapped workspace.", "tokens": 492}
{"title": "Air-Gapped License", "content": "To unlock additional features in your workspace, activate your workspace with a license for your subscribed plan. You can also apply trials on your workspace to explore these additional features. You require a premium workspace to get an air-gapped license . If you haven\u2019t purchased a plan for premium workspaces yet, contact the Rocket.Chat sales team for assistance in purchasing the subscriptions . Once your workspace is deployed and subscribed to a premium plan, follow the steps in this document to get an air-gapped workspace license . If your workspace is in an air-gapped environment where it cannot communicate with our licensing servers, you\u2019ll need to get an air-gapped license. To obtain a license for an air-gapped workspace, you can contact Rocket .Chat Sales to provide a license for you or retrieve an offline license from your Rocket.Chat cloud console. The Starter plan license can be obtained through the Rocket.Chat Cloud portal. For Enterprise and Pro licenses, contact the Sales team . When the license is provided to you, proceed to apply the license on your workspace. If the workspace detects that is not airgapped it will still force you to register . The assumption is that the workspace is truly unable to communicate with the outside world. If you cannot share the workspace URL with our Sales team for privacy and security reasons, Rocket.Chat\u2019s team can generate the license using a SHA256 hash of the URL . The hash-based address is not reversible, so Rocket.Chat won\u2019t have access to the original URL", "tokens": 339}
{"title": "Air-Gapped License", "content": ". To generate the hash value, follow these steps: If you are using a Linux or Mac terminal: Run the following command: Linux: echo -n \"your-workspace-URL\" | sha256sum Mac: echo -n \"your-workspace-url\" | shasum -a 256 Remove http:// or https:// from the workspace URL . For example, example.rocket.chat. It is recommended that you run the command more than once to ensure the same hash output . You should see an output like this: 176523d046360a9180a9a3ca0af17d30e1edebc0148440e921af184166ad4c8b . Share this hash value with the Sales team to get the license. If you are using other OS: Use an external tool to generate the hash value of the workspace URL, such as SHA256. Enter your workspace URL in the input section . Remove http:// or https:// from the workspace URL. For example, example.rocket.chat. The hash value is displayed in the output section . For example, 82671fa26911cdd7b6855ccdcbdf3392bbf1c554c9a0d5fffdb5ff7cde6e49b6 . It is recommended that you run this more than once to ensure the same output. Share the hash output with the \u00a0Sales team to get the license", "tokens": 329}
{"title": "Air-Gapped LicenseAir-Gapped Workspace Configuration", "content": ". Make sure that you have completed registering your workspace and continue with the following steps: On your Rocket.Chat Cloud account, click on the workspace. Click Get License. Copy the license code provided and apply the license on your workspace . After getting your air-gapped license, proceed with the following steps to apply it to your workspace: When the License key is provided, navigate to Administration > Settings > Premium on your workspace . Update the Premium License field with the License key, confirm the status of the applied license, and click Save Changes. You may need to refresh your workspace for the changes to reflect . If you encounter an \"Invalid key\" error, upgrade your workspace to version 6.5 or higher and try again. Now that you've upgraded your workspace plan, proceed to explore the additional benefits Rocket.Chat offers on your workspace . In the next section, we'll show you the extra configurations you can make on your air-gapped workspace. Let\u2019s look at the extra configurations that can be done on your air-gapped workspace. In an air-gapped workspace, sending push notifications through FCM/APNS isn't possible as they rely on internet connectivity. However, if the air-gapped server is considered a regular server with a strong firewall, outbound traffic can be configured to allow push notifications by opening specific ports as per FCM and APNS guidelines. Nevertheless, this approach may compromise the air-gapped environment's security and should be carefully considered. For fully air-gapped workspaces, you have to build a Rocket.Chat app for your desired mechanism. To learn more, visit Rocket.Chat Apps-Engine.", "tokens": 361}
{"title": "Air-Gapped App Installation", "content": "Rocket.Chat allows you to extend and bring new functionalities to your air-gapped workspace through Rocket.Chat apps. These apps can enhance collaboration, productivity, and workspace functionalities. To install a marketplace app in an air-gapped workspace, request the app from the support team via your registered contact. Requesting for apps is exclusively available to workspaces subscribed to any of Rocket.chat's Premium plans. Here is a list of the Rocket.Chat apps that are supported in an air-gapped workspace: Bamboo integration Bitbucket server Confluence server Data loss prevention Jenkins integration Jitsi Pexip Optionally, you can build a Rocket.Chat app for your workspace tailored to your custom needs. See Private App Development and Installation for details.", "tokens": 163}
{"title": "Rocket.Chat Marketplace", "content": "The Rocket.Chat Marketplace is a central hub where users can discover, install, and manage Rocket.Chat Apps to enhance their workspace's functionality. These apps range from integrations with third-party services to custom features designed to improve user experience . You can also develop your own apps using the Rocket.Chat Apps-Engine. Browse Rocket.Chat apps from the marketplace or access them via Administration > Apps > Marketplace . Here, you can: Explore: View, search, and filter apps based on categories, status, and price . The  tag next to an app on the marketplace means you need to upgrade your workspace to a higher version to use the app Install: Follow the steps to add apps to your workspace Manage installed apps: You can enable, disable, or uninstall apps, view details and logs, and configure user settings The\u00a0Requested\u00a0section of the\u00a0Marketplace\u00a0screen shows all the apps users have requested in the workspace Before installing apps from the Marketplace, ensure your workspace is registered (even if it is on the community plan) on Rocket .Chat Cloud, and is within the support window. Users with the Access marketplace permission can access the Rocket.Chat marketplace and request for any app they need in the workspace. If you are using a firewall, you need to whitelist the marketplace.rocket .chat URL to list and install marketplace apps. See Firewall Configuration for a complete list of URLs you may need to whitelist. Two types of apps are supported in Rocket .Chat: Public apps: These are a diverse range of apps developed in-house and by third parties. Private apps: These apps are custom solutions you develop for your workspaces. You can build apps using the Rocket.Chat Apps-Engine solution . Public apps created by us or third-party developers can be free, paid, or exclusive to premium plans. Most of our public apps are premium and require a license to use. These apps are available through the Rocket.Chat marketplace . You can submit your app to the Marketplace if you\u2019re a third-party publisher or developer. To do so, you\u2019ll need a Rocket.Chat Cloud account and a registered publisher account. For detailed guidance, please refer to the app submission guide . You must purchase the Rocket.Chat paid apps to use them in your workspace, regardless of your subscription plan. Rocket", "tokens": 490}
{"title": "Rocket.Chat Marketplace", "content": ".Chat's public apps availability across plans is as follows: Name Community Starter Pro Enterprise Air-Gapped Bamboo Integration x \u2713 \u2713 \u2713 Yes Bitbucket Cloud Integration x \u2713 \u2713 \u2713 No Confluence Cloud Integration x \u2713 \u2713 \u2713 No Data Loss Prevention x \u2713 \u2713 \u2713 Yes Facebook Messenger x \u2713 \u2713 \u2713 No GitHub \u2713 \u2713 \u2713 \u2713 No Google Calendar x \u2713 \u2713 \u2713 No Google Drive x \u2713 \u2713 \u2713 No Google Meet x \u2713 \u2713 \u2713 No Instagram Direct x \u2713 \u2713 \u2713 No JIRA Cloud Integration x \u2713 \u2713 \u2713 No MS Teams Bridge \u2713 \u2713 \u2713 \u2713 No Pexip x \u2713 \u2713 \u2713 Yes Telegram x \u2713 \u2713 \u2713 No Trello x \u2713 \u2713 \u2713 No Twitter x \u2713 \u2713 \u2713 No WhatsApp 360Dialog (on-premise API) x x x \u2713 No WhatsApp 360Dialog (Cloud API) x x x \u2713 No Whatsapp Cloud x \u2713 \u2713 \u2713 No Zapier x \u2713 \u2713 \u2713 No ClamAV \u2713 \u2713 \u2713 \u2713 No Whatsapp Sandbox x x x \u2713 No Rasa \u2713 \u2713 \u2713 \u2713 No Zoom x \u2713 \u2713 \u2713 No ChatGPT x \u2713 \u2713 \u2713 No ModAssist x \u2713 \u2713 \u2713 No Mod Perspective x \u2713 \u2713 \u2713 No", "tokens": 248}
{"title": "Integrations", "content": "Rocket.Chat supports webhooks to integrate tools and services into the platform to ease your everyday workflows. Webhooks are simple event notifications via HTTP POST. This way, any webhook application can post a message to a Rocket.Chat instance and much more . With scripts, you can point any webhook to Rocket.Chat and process the requests to print customized messages, define the username and avatar of the message user, and change the channel for sending messages. You can also cancel the request to prevent undesired messages . Incoming webhook: Let an external service send a request to Rocket.Chat to be processed. Outgoing webhook: Let Rocket.Chat trigger and optionally send a request to an external service and process the response . By default, a webhook is designed to post messages only. The message is part of a JSON structure, which has the same format as that of a Rocket.Chat message. If you would like more power and control over various features of Rocket .Chat, aside from sending and receiving messages, take a look at Rocket.Chat Apps. ES2015 / ECMAScript 6 scripts can handle Webhooks to process the request, print customized messages, or cancel the request to prevent undesired messages . To create a new incoming webhook: Navigate to Administration > Workspace > Integrations. Click New at the top right corner. Switch to the Incoming tab. Turn on the Enabled toggle. Name: Enter a name for your webhook . The name is optional; however, providing a name to manage your integrations easily is advisable. Post to Channel: Select the channel (or user) where you prefer to receive the alerts. It is possible to override messages . Post as: Choose the username that this integration posts as. The user must already exist. Alias: Optionally enter a nickname that appears before the username in messages. Avatar URL: Enter a link to an image as the avatar URL if you have one . The avatar URL overrides the default avatar. Emoji: Enter an emoji optionally to use the emoji as the avatar. Check the emoji cheat sheet here. Turn on the Script Enabled toggle. Paste your script inside the Script field. Save the integration . Use the generated Webhook URL to post messages to Rocket.Chat. The Rocket.Chat integration script should be written in ES2015 / ECMAScript 6", "tokens": 516}
{"title": "Integrations", "content": ". The script requires a global class named Script, which is instantiated only once during the first execution and kept in memory. This class contains a method called process_incoming_request, which is called by your server each time it receives a new request . The process_incoming_request method takes an object as a parameter with the request property and returns an object with a content property containing a valid Rocket .Chat message, or an object with an error property, which is returned as the response to the request in JSON format with a Code 400 status. A valid Rocket.Chat message must contain a text field that serves as the body of the message . If you redirect the message to a channel other than the one indicated by the webhook token, yyou can specify a channel field that accepts room id or, if prefixed with \"#\" or \" @\", channel name or user, respectively . You can use the console methods to log information to help debug your script. More information about the console can be found here. To view the logs, navigate to Administration > Workspace > View Logs", "tokens": 232}
{"title": "Integrations", "content": ". To test if your integration works, use curl to make a POST request to the generated webhook URL. You can utilize scripts to process all messages from a channel and modify how Rocket.Chat creates or cancels the request . You can either cancel the request and return a message or take no action. Additionally, you can create another request within the script using the HTTP global helper . When a response is received from the request, it executes the script, calling another method that allows you to process the response, similar to incoming webhooks. To create a new outgoing webhook, follow these steps . To create a new outgoing webhook: Navigate to Administration > Workspace > Integrations. Click + New in the top right corner. Switch to the Outgoing tab . Event Trigger: Select the type of event that triggers this outgoing webhook integration . Turn on the Enabled toggle. Name: Enter a name for your webhook. Channel: Enter the channel to listen to. Trigger Words: If your event trigger is Message Sent, enter the words that should trigger this webhook separated by commas . In the URLs field, enter the URL called for each request. You can modify this URL inside the script. Post as: Enter the username that this integration posts as. This field is optional . Alias: Enter a nickname that appears before the username in messages. Avatar URL: Optionally enter an image URL as the avatar for each message the webhook posts. Emoji: Optionally enter an emoji to use as an avatar . Token: Enter a token to verify authorized webhook calls. The token is optional but essential to avoid cross-site request forgery (CSRF) or replay attacks. Turn on Script Enabled . Select the Script Sandbox of your choice Paste your script inside the Script field. Save your integration. The script should be in ES2015 / ECMAScript 6. The script expects a global class called Script . This class is instantiated once, only on the first execution, and kept in memory", "tokens": 432}
{"title": "Integrations", "content": ". The class has a method called prepare_outgoing_request, called in the configured channel for the event triggers: Message Sent: Called in the configured channel when the message starts with any Trigger Words . File Uploaded: Called when any file is uploaded in the configured channel. Room Archived: Called when a room is archived. Room Created: Called when a room is created. User Joined Room: Called when a user joins the channel . The prepare_outgoing_request method returns an object with at least url and method properties. You can also change the request object and replace it. It is possible to return nothing and cancel the request or return a message . The Script class includes another method called process_outgoing_response, which is invoked for every request response. This method accepts an object as a parameter containing two properties: request (the object returned by the previous method) and response . The process_outgoing_response method can return: nothing to continue with the default processing false to stop the process an object with the content property that contains a valid Rocket.Chat message . The example script sends commands such as issues, comments, and pull requests to GitHub. Pattern for Incoming Webhooks Pattern for Outgoing Webhooks", "tokens": 253}
{"title": "AppVeyor", "content": "AppVeyor is a CI/CD service for Windows, Linux, and macOS. AppVeyor supports most source control platforms. You can link AppVeyor to Rocket.Chat through webhooks and get notified in a Rocket.Chat channel each time a build runs. Sign up for an Appveyor account and link it to your source control platform. The demonstration here uses GitHub as the source control platform. To create an AppVeyor project: Create a new GitHub repository or clone this NodeJs project. Sign in to AppVeyor. Go to the Projects page. Click +NEW PROJECT. Select GitHub on the left pane. Select either public repositories only or both public and private repositories. Click Authorize GitHub. Sign in to GitHub in the newly opened tab. Select the above-created webhook project in the list of projects shown as the repository to use. Follow the necessary steps to create a Rocket.Chat incoming webhook. See Create a new incoming webhook. Take note of the generated webhook URL. Paste the following script into the Script field for the incoming webhook created. Each time you push to your configured GitHub repository, AppVeyor posts a payload to our webhook. The structure of the payload is similar to that of sample.json found in the example repository. You retrieve the content object and use the details to create a message object which becomes the text portion of the Rocket.Chat message returned in the method. process_incoming_request. To configure your build: Create a file in the root directory of your configured GitHub project called appveyor.yml and paste the following content. The install block in the configuration tells the build to install the latest version of NodeJS and the deploy block tells AppVeyor to make use of webhooks. Replace the url variable with the webhook URL generated during the creation of your incoming webhook. Check provider settings to understand better. Commit and push the code to your GitHub repository. The build process starts immediately after the push is successful. A notification is sent in the channel you configured to be used for your incoming webhook. The current build can be verified by navigating to Projects > Your-Project > Current build on AppVeyor.", "tokens": 493}
{"title": "Azure Alerts", "content": "Add Azure Alert notifications via a new WebHook in Rocket.Chat In Rocket.Chat go to Administration > Integrations. Click New Integration. Select Incoming WebHook. Follow all instructions like Enable, give it a name, link to channel, etc. Set Enable Script to true and enter the javascript in the Script box. Click Save changes and copy the Webhook URL (added just below the script box). Go to the Azure portal, and on the specific resource you want to enable Alerts for, follow the steps for enabling alerts and set the previously copied URL as the webhook URL for the Azure Alert. You can follow the steps shown here: https://docs.microsoft.com/en-us/azure/azure-monitor/alerts/alerts-log-webhook Paste the following JavaScript code in the Script textarea on Rocket.Chat webhook settings: This example shows basic processing of Azure alerts that will give you the necessary information as to what happened and what is the current status, along with a status color to get an idea at a quick glimpse of the message. For newer created alerts the Azure webhooks can be processed by the following script: The schema of the incoming message as of the official Azure Alert Webhook Docs is:", "tokens": 279}
{"title": "BitRocketDead Simple Screen Sharing", "content": "Follow the install instructions here: https://github.com/FinndropStudios/BitRocket Thanks to Finndrop Studios Manuel Bachl (m.bachl@finndrop.de) Thies Schneider (t.schneider@finndrop.de) The endpoint for this integration is no longer available, and the access to API is paid only. To know more about the service: https://deadsimplescreensharing.com/", "tokens": 101}
{"title": "EasyRedmine", "content": "EasyRedmine is a fork of Redmine, a project management tool, which brings together different additional plugins, such as Help Desk, Finance, CRM, and many more. Full documentation/installation instructions are available at https://github.com/wirdgroup/rocketchat-easyredmine Thanks to WIRDGroup!", "tokens": 74}
{"title": "Giphy Integrations", "content": "Install the Giphy app from the Marketplace under Administration > Apps > Giphy. Giphy Preview Thanks to RocketBooster https://apps.rocketbooster.net/giphy", "tokens": 42}
{"title": "GitLab", "content": "Setting up GitLab webhook integration allows you to receive event notifications from GitLab directly in your desired Rocket.Chat room. These events include and are not limited to: Comments Issues events Merge requests Deployment events In configuring this integration, make sure your Rocket.Chat is publicly available on a URL. To configure the webhook integration between GitLab and Rocket.Chat, you need to: Create a new webhook integration on Rocket.Chat Link to the GitLab repository webhook setting Follow the steps below to do that. On your Rocket.Chat workspace, go to Administration -> Workspace -> Integrations Switch to the Incoming tab and create a New Integration Fill in the details of your webhook including the name of the webhook, the room to post into, the user to post as and enable it Enable Scripts and paste the following code into the Script box Save the settings The Webhook URL and Token are generated after saving Copy these credentials, they will be used later After creating the new incoming webhook integration on Rocket.Chat, it is time to link it up with the GitLab repository. Go to your GitLab project page, then go to Settings > Webhooks Fill in the URL and token you copied from the Rocket.Chat setting Select the type of events you want to be notified on and Add webhook After successful configuration, you can test the Webhook with any event trigger and see the notification in your specified Rocket.Chat room. More material GitLab-Rocket.Chat webhook example: https://github.com/malko/rocketchat-gitlab-hook GitLab webhook help: https://docs.gitlab.com/ee/user/project/integrations/webhooks.html", "tokens": 394}
{"title": "GitHub", "content": "Setting up GitHub webhook integration with Rocket.Chat gives you the ability to Receive event notifications from GitHub directly in your specified Rocket.Chat room (Incoming WebHook) Send commands to GitHub and optionally receive a response (Outgoing WebHook) . These events include and are not limited to: Comments Issues events Pull Requests Merge requests Deployment events Comments and discussions Tags, label, and branch actions, etc. In configuring this integration, make sure your Rocket.Chat is publicly available on a URL . We are going to see how to create both incoming and outgoing webhook integration between Rocket.Chat and GitHub. To configure an incoming webhook integration between GitHub and Rocket.Chat, you need to: Create a new webhook integration on Rocket .Chat Link the GitHub repository through webhook settings The following steps explain how to do this Go to the Administration -> Workspace -> Integrations settings on your Rocket .Chat workspace Switch to the Incoming tab and create a New Integration Fill in the details of your webhook including the name of the webhook, the room to post into, the user to post as and enable it Enable Scripts and paste any of the following example code into the Scripts box . You can customize your webhook integration script to suit your desire as explained here . GitHub Example Script 1 GitHub Example Script 2 Save the settings The Webhook URL and Token are generated after saving Copy these credentials, they will be used later After creating the new incoming webhook integration on Rocket .Chat, it is time to link it up with the GitHub repository. Go to the GitHub project repository then navigate to Settings > Webhooks Add webhook and fill in the URL and token you copied from the Rocket .Chat setting Select the list of events you want to be notified on and Add webhook After successful configuration, you can test the Webhook with any event trigger and see the notification in your specified Rocket.Chat room . Sending outgoing webhooks only works on public repositories Create a new Outgoing WebHook Select the channel where you will use the commands and receive the responses Set URLs as https://api.github", "tokens": 481}
{"title": "GitHubGraylogJFrog Xray", "content": ".com/repos/User-Or-Org-Name/Repo-Name like https://api.github.com/repos/RocketChat/Rocket .Chat Enable Scripts Use this Script to listen for commands pr ls, pr list and help Save your integration The purpose of the integration script is to transform data in one format (the format provided by your incoming service, such as GitHub) into another format (the format expected by Rocket .Chat). Therefore, should you wish to customize either of the scripts presented above, you will need two resources: GitHub API specifications Specifications for Rocket.Chat integration message objects Note that data comes into your script from GitHub as the request.content object. Graylog is a powerful open-source log management platform. It aggregates and extracts important data from server logs, which are often sent using the Syslog protocol. It also allows you to search and visualize the logs in a web interface. Follow the install instructions here: https://github.com/jeanmorais/rocketchat-graylog-hook Add JFrog Xray notifications via a new WebHook in Rocket.Chat. See the project's documentation for integration instructions.", "tokens": 273}
{"title": "MicroBadgerMicrosoft Teams", "content": "Add MicroBadger Docker image changes notifications via a new WebHook in Rocket.Chat. See the project's documentation for integration instructions. With the Microsoft Teams integration, you can: Receive messages from Microsoft Teams (Incoming WebHook) Send messages to Microsoft Teams Channel (Outgoing WebHook) Note: It is recommended to create a New Team so that not all members in your organization have access to this integration . Create Incoming Webhook with Default parameters: Go to Integrations --> Create New integration --> Select Incoming WebHook Assign Name Assign Post to Channel (This will be the Channel where you want to receive msg from Teams) Assign Post as (Create Bot user and add bot the above mentioned Channel) Copy and paste below script in Script section The number 16 in the following script (request .content.text.slice(16)) should be updated to 9 + MS Teams bot username length. This command is used to remove the bot tag from the text received from MS Team so that only the message is displayed in Rocket.Chat (e.g", "tokens": 228}
{"title": "Microsoft Teams", "content": ". if the bot username in MS Teams is rocket.bot, which is 10 characters long, then 16 should be updated to 19 = 9 + 10). Save and then open your Incoming Webhook . You should be able to see Webhook URL just copy that, we will need that during creating Outgoing Webhook in MS Teams. Select the appropriate team and select Manage team from the (\u2022\u2022\u2022) drop-down menu . Choose the Apps tab from the navigation bar. From the window's lower right corner select Create an outgoing webhook. In the resulting popup window complete the required fields: Name - The webhook title and @mention tap . (This will be your bot name in MS Teams) Callback URL - Paste the URL here we copied from Rocket.Chat. Description - A detailed string that will appear in the profile card and the team-level App dashboard . Profile Picture (optional) an app icon for your webhook. Select the Create button from lower right corner of the pop-up window and the outgoing webhook will be added to the current team's channels . Note : The Name we mentioned above will be the bot name, so when you send messages to Rocket.Chat, mention the bot. For example, @namebot . Navigate to the Team where you want to add the webhook and select (\u2022\u2022\u2022) More Options from the top navigation bar and Select Apps and select More apps. Choose Connectors from the drop-down menu and search for Incoming Webhook . Select the Configure button, provide a name, and, optionally, upload an image avatar for your webhook. Select appropriate Teams and Channel. The dialog window will present a unique URL that will map to the channel . Make sure that you copy and save the URL\u2014you will need to provide it to Rocket.Chat Outgoing WebHook. Select the Done button. The webhook will be available in the team channel . Create Outgoing Webhook from Integration: Select Message Sent as Event Trigger Select the Channel (same as mentioned in Incoming Webhook) Paste the URL we copied from Microsoft Teams Select Bot Post as (same as in Incoming Webhook) Paste Below Script:", "tokens": 470}
{"title": "NewRelic", "content": "NewRelic offers a performance management solution that enables developers to diagnose and fix application performance problems in real-time. It also provides a notification/alerting facet to their offerings. Full documentation/installation instructions are available at https://github.com/kajisaap/rocketchat-newrelic Thanks to CloudFactory!", "tokens": 76}
{"title": "Nextcloud and WebDAV integrations", "content": "You can integrate Nextcloud with any application that uses the WebDAV protocol. Rocket.Chat offers seamless integration between Nextcloud and the Rocket.Chat workspace. With this integration, you can access, browse, navigate your Nextcloud directories, and share files from your Nextcloud server all within Rocket.Chat. For the following integration to work on your Rocket.Chat workspace, contact your administrator, or follow the Webdav Integration administrator guide to enable Webdav. Once the integration has been enabled by the admin, any user will be able to link their servers to Rocket.Chat. To add a new Nextcloud server, you require the following: WebDAV URL: The WebDAV URL used for the connection Username: Your Nextcloud username Password: Your Nextcloud password To get your Nextcloud WebDAV URL: Go to the Files section of your Nextcloud server. Click Settings at the bottom left, and you will see a WebDAV field with the URL that looks like this https://EXAMPLE.COM/remote.php/dav/files/USERNAME/ Copy the URL and proceed. Back on your Rocket.Chat workspace, navigate to the \u2795 button on the right side of your message composer inside any chat or room. Click \u2795 Add Server. Fill in the information on the dialogue that appears, including the Nextcloud WebDAV URL you copied earlier, Nextcloud username, and Nextcloud password. Click Add new WebDAV Account. Refresh your server. Click the \u2795 button on the right side of your message composer inside any chat or room again, and this time, you will see the server you just added. From here, you have the ability to access and share your Nextcloud files on Rocket.Chat", "tokens": 376}
{"title": "Nextcloud Rocket.Chat App", "content": "The Nextcloud Rocket.Chat app integration offers a very powerful open-source collaboration platform with a very high level of security and ownership. The flexibility to enjoy features from both solutions combined gives you a step further to use the ultimate open-source alternative to MS 365 . This integration is compatible only with Nextcloud versions 23 and earlier. To use the Nextcloud Rocket.Chat app, you are expected to have the following running: Rocket .Chat workspace following our deployment guide Nextcloud deployed using the all-in-one installation guide Connecting Nextcloud with Rocket.Chat requires your Rocket.Chat workspace to be on an SSL-protected domain. This is strictly for security reasons . You need to make the following changes to your Rocket.Chat settings Have two-factor Authentication disabled on your Rocket .Chat settings Administration > Workspace > Settings > Accounts > Two Factor Authentication Disable Restrict access inside any Iframe Administration > Workspace > Settings > General > Restrict access inside any Iframe Enable to send and receive data inside an iframe Administration > Workspace > Settings > General > Iframe Integration When that is all done, follow these steps for the setup: Go to your Nextcloud Dashboard and open the Apps section Navigate down to the Social & Communication category and locate the Rocket .Chat App, then Download and enable Go to your\u00a0Administrative settings,\u00a0and you will find a\u00a0Rocket.Chat\u00a0menu. Open it to link your Rocket .Chat workspace Do not use a locally hosted workspace like http://localhost:3000 Fill in the Rocket .Chat URL, admin username, and password to authenticate, click on Connect and Save After connecting, the Admin User ID and Admin Token will be automatically generated and filled . Your app is now ready for use Now, along with other existing Nextcloud apps, you should have Rocket.Chat showing, like so: Clicking on the Rocket.Chat icon will open up the Rocket", "tokens": 408}
{"title": "Nextcloud Rocket.Chat App", "content": ".Chat chat interface within Nextcloud Using this integration enables you to: Extend and streamline communication with external parties using Rocket.Chat\u2019s federation and bridges into Slack and Microsoft Teams Easily collaborate on projects and documents using Rocket .Chat\u2019s chat right in Nextcloud Use a single productivity platform that integrates with other tools, including Nextcloud, and keeps all communications and notifications in one place Leverage more advanced user governance features, access levels, and role-based permissions Easily map even the most complex organizational structure into groups, teams, and discussions Securely collaborate and communicate with anyone via the world\u2019s leading social media channels such as Whatsapp, Messenger, Twitter, Instagram, Telegram, and others Turn their chats into productivity tools using integrations with various HR tools, CRM solutions, ticketing systems, project management solutions, and developer tools to build powerful workflows Make digital workplaces and communities more engaging and collaborative using Rocket .Chat\u2019s marketplace of apps Ensure full governance of all their communications using message audits, flexible retention policies, powerful engagement analytics and dashboards, and more Send advanced message formatting like code snippets, formula syntax, message threads, and more", "tokens": 247}
{"title": "Nixstats notification", "content": "Add Nixstats notifications via a new WebHook in Rocket.Chat In Rocket.Chat go to Administration > Workspace > Integrations and create New Integration. Choose Incoming WebHook. Follow all instructions like Enable, give it a name, link to channel, etc. Set Enable Script to true and enter the JavaScript in the \"Script\" box. Hit Save changes and copy the Webhook URL (added just below the script box). Go to https://nixstats.com -> Settings -> Notification Contacts -> Add (or Edit a contact) contact. Paste the Rocket.Chat URL you've copied in step 4. Paste this JavaScript code in the \"Script\" textarea on Rocket.Chat webhook settings: Add Nixstats notifications via a new WebHook in Rocket.Chat In Rocket.Chat go to \"Administration\"->\"Integrations\" and create \"New Integration\". Choose Outgoing WebHook. Select Message Sent as Event trigger. Enter ns as trigger word. Enter <https://api.eu.nixstats.com/v1/> as URLs. Avatar URL <https://nixstats.com/images/favicon.png>. Token, this is your nixstats API token, create an API key. Script Enabled set to True. Paste this JavaScript in the Script text area on Rocket.Chat webhook settings: After saving the data, you can use the following commands to retrieve data: ns servers list to list your servers with their IDs and load average. ns graphs [serverid] to retrieve a graph of Memory, Network, Load average, and Disk usage of the specified server.", "tokens": 363}
{"title": "PagerDuty", "content": "PagerDuty is an alarm aggregation and dispatching service for system administrators and support teams. It collects the alerts from your monitoring tools, gives you an overall view of all of your monitoring alarms, and alerts an on-duty engineer if there's a problem. Log in as an administrator and go to Administration > Workspace > Integrations > New Integration > Incoming Webhook and configure the following settings: Enabled: Enable this option to integrate the PagerDuty with Rocket.Chat. Name (Optional): Enter the preferred name for your PagerDuty connection. Post to Channel: Messages that are sent to the Incoming Webhook will be posted here. Start with @ for the user or # for the channel. Eg: @john or #general Post as: Choose the username that this integration will post as. The user must already exist. Alias (optional): Choose the alias that will appear before the username in messages. Avatar URL (optional): An option to override the avatar used to post from this integration. Should be a URL of an image. Emoji (optional): Use an emoji as an avatar. Example: :ghost: Script Enabled: Enable this option to add the script. Script: Paste contents of rocketchat_pagerduty_incoming.js into the Script field. Webhook URL: Copy the Webhook URL as soon as you save the integration and proceed to the configuration of generic webhook integration in PagerDuty. Token: An auto-generated token. Example Payload: Customize the payload template. Click Save. To configure your webhook: In PagerDuty, navigate to the Service Extensions > New Extension. For Extension Type select Generic Webhooks(v3). Enter a unique Extension Name e.g. rocketchatpage and choose the service. Select the Service you wish to add. Add the Webhook URL. See PagerDuty WebHook Docs for more details.", "tokens": 430}
{"title": "Prometheus", "content": "Prometheus is an open-source application used for event monitoring and alerting. It records metrics in a time series database (allowing for high dimensionality) built using an HTTP pull model with flexible queries and real-time alerting. The project is written in Go and licensed under the Apache 2 License, with source code available on GitHub. Rocket.Chat.Metrics repository contains a basic monitoring setup of Rocket.Chat, based on Grafana and Prometheus. It currently shows and visualizes the following application metrics/information: General totals: Users online/away, DDP users, diffs based on time range. Metrics: Requests and total size per instance. NodeJS: Active handles, requests, event loop lag, heap used, per instance heap, garbage collector. DDP rate limiter: By method, by type, by userId, by connection ID. Rocket.Chat Data: Messages sent, total sent, user presence, users & sessions, Oplog, push queue, Meteor facts, total users, total rooms, notification per minute per notification type. Meteor: Methods total time, methods time, method calls per minute. Subscriptions: Subscription total time, subscription time, subscription calls per minute. Callbacks & Hooks: Callbacks total time, callbacks time, callback calls per minute, hooks total time, hooks time, hook calls per minute. REST API: REST total time, REST time, REST calls per minute. GitHub - RocketChat/Rocket.Chat.Metrics: Monitoring setup for Rocket.Chat servers", "tokens": 325}
{"title": "Grafana", "content": "Grafana is a multi-platform open-source analytics and interactive visualization web application. It provides charts, graphs, and alerts for the web when connected to supported data sources. It can be easily installed using Docker or Docker Compose. Rocket.Chat.Metrics repository contains a basic monitoring setup of Rocket.Chat, based on Grafana and Prometheus. It currently shows and visualizes the following application metrics/information: General totals: Users online/away, DDP users, diffs based on time range. Metrics: Requests and total size per instance. NodeJS: Active handles, requests, event loop lag, heap used, per instance heap, garbage collector. DDP rate limiter: By method, by type, by userId, by connection ID. Rocket.Chat Data: Messages sent, total sent, user presence, users & sessions, Oplog, push queue, Meteor facts, total users, total rooms, notification per minute per notification type. Meteor: Methods total time, methods time, method calls per minute. Subscriptions: Subscription total time, subscription time, subscription calls per minute. Callbacks & Hooks: Callbacks total time, callbacks time, callback calls per minute, hooks total time, hooks time, hook calls per minute. REST API: REST total time, REST time, REST calls per minute. GitHub - RocketChat/Rocket.Chat.Metrics: Monitoring setup for Rocket.Chat servers", "tokens": 302}
{"title": "Review BoardRunDeck Job NotificationsSentry", "content": "Add ReviewBoard notifications via a new WebHook in Rocket.Chat In Rocket.Chat go to Administration > Workspace > Integrations and create New Integration. Select Incoming WebHook. Follow all instructions like Enable, give it a name, link to channel etc. Set Enable Script to true and enter the contents of this script. Click Save changes and copy the WebHook URL (added just below the script box). In ReviewBoard, configure a new WebHook per these instructions. Rundeck is an open orchestration and scheduling platform used for operations support tasks, enterprise job scheduling, deployment, and more. This plugin can be set to notify a channel when a job starts, fails, or has succeeded. It's commonly found in the ChatOps space due to its flexible API. Download the rundeck-rocketchat-notifier from GitHub. Set up an Incoming Integration and take note of the URL. Install the plugin on your RunDeck machine as per the instructions in the git repo linked above. Once configured, you'll have notifications like the example below: Add Sentry notifications via a new WebHook in Rocket.Chat This script works for the sentry.com and self-hosted versions. Follow all instructions for creating an incoming webhook. Login to your project on Sentry and go to Settings > Developer Settings > Create New Integration > Internal Integration > Next. Give your integration a name, copy the webhook URL generated, and paste it into the Webhook URL field. Turn on Alert Action Rule. This is important so that your incoming webhook URL is notified when there is an event on Sentry. Enter appropriate values for the Permissions section and select the types of events to notify your incoming webhook. Click Save Changes. Clone Sentry's example project and follow the instructions in the repository to run the backend and frontend to test and trigger different event types. The script below gets different attributes of a Sentry event and sends it as a message to your configured channel when creating the webhook. Use the console.log(request.content) line to debug the JSON content posted by Sentry.", "tokens": 470}
{"title": "Simple Telegram Bot", "content": "A simple relay communication between Rocket.Chat and Telegram is possible by configuring a basic bot. The guide below shows a community example of how this can be achieved with webhooks. This gives you the possibility of relaying messages between Telegram and Rocket .Chat in a specified room of your choice. This integration is not suitable for Omnichannel Conversations. Consult the Telegram App for managing your Omnichannel conversations with Telegram. Workspaces subscribed to any of Rocket .Chat's premium plans can install the Telegram app, which comes with additional functionalities and Omnichannel features. Make sure Your Rocket.Chat workspace URL is publicly available. Log in to your Telegram account on your mobile or using a browser . Add and open a conversation with the user BotFather. Click start. Send /newbot to start creating a new bot. Follow the instructions to continue. Set the bot's username. Telegram successfully creates the bot and shows how to access it . Copy the token provided, it is needed for the configuration. Before configuring the Telegram integration, make sure you: Create a channel on Rocket.Chat for incoming and outgoing conversations. Create a user with the bot role to be used for the relay . The incoming webhook is responsible for relaying messages from Telegram into Rocket.Chat into a specific channel. To create an incoming webhook: Go to Administration > Workspace > Integrations in Rocket.Chat . Create a new incoming webhook following the guide Create a new incoming webhook. Enable the integration Set the webhook integration name. Set the Post to Channel as the channel created above. Set Post as, as the user created above . Enable the script and paste the following code. Save the integration. This creates a new incoming integration with a webhook URL and token provided. Copy the incoming webhook URL provided by Rocket.Chat after saving . Change the following URL with yourTelegramBotToken and Incoming webhookURL and open it on your browser. A response indicating success is sent which looks like this: Test your incoming Webhook by sending a telegram message to the Telegram bot . The message sent gets posted in channel by the useryou specified in the incoming webhook configuration page. A Telegram group can be configured to send and receive messages to and from Rocket.Chat. Create a Telegram group and grant bot access", "tokens": 499}
{"title": "Simple Telegram BotTravisCI", "content": ". Create a new Telegram group. Get the group chat id . This can be gotten by: Adding the user RawDataBotto the group On joining, a response like below is seen with the chat id Change the bot group privacy settings so it can listen to all messages by: Sending the message /setprivacy to BotFather . Choosing the bot you want to edit. Setting the status to Disable. The outgoing integration is used to relay messages back from Rocket.Chat to Telegram. Go to Administration > Workspace > Integrations in Rocket.Chat . Create an outgoing webhook following this guide Create a new outgoing webhook. Select the Message sent as the Event Trigger. Enable the integration. Set any Trigger Words which messages must have before they get relayed if needed. Specify the channel to listen to . Set the URL following this format: Enable Script and paste the following code Save the integration. Add your bot to the telegram group and enjoy cross-platform communication between Rocket.Chat and Telegram. Multiple outgoing triggers can be configured to cover all use cases . The scripts can be customized as needed. Learn more here Script details. Add TravisCI notifications via a new webhook in Rocket.Chat Create a new Incoming WebHook. Select the channel where you will receive the alerts. You may wish to create a dedicated channel for your notifications. Select an account from which the alerts will be posted. You may wish to create a dedicated account just for notifications. Set the \"Enable Scripts\" option to True. Copy scripts below and paste it in Script field. Save the integration. This will generate a webhook URL and secret for you. In your .travis.yml file add WebHooks parameter with webhook URL generated. This script will generate notifications for the following build events: Build finished status for any pushed code Build finished status for new Pull Request Note: If the status is passed, the message color is green; otherwise, it is red. For more customizations, see the TravisCI documentation.", "tokens": 434}
{"title": "Uptime Robot", "content": "Add Uptime Robot notifications via a new webhook in Rocket.Chat. See the project's documentation for integration instructions.", "tokens": 29}
{"title": "Zapier", "content": "Zapier integration has been deprecated from Rocket.Chat 6.0. You can install the Zapier app from Marketplace to avoid disruptions. Zapier lets you connect Rocket.Chat to hundreds of other web services. Automated connections called Zaps, set up in minutes with no coding, can automate your day-to-day tasks and build workflows between apps that otherwise wouldn't be possible. Before you get started, there are a few things that you have to check. You are required to have a Rocket.Chat server accessible publicly A user with the impersonate user permission to be used for authentication. Zapier OAuth is configured by default at Admin -> oAuth Apps -> Zapier Log in or create a new Zapier account From your Zapier dashboard, click on My Apps then click on Add Connection. Search for Rocket.Chat and choose it in the popup that shows. A new window will open. Fill in your workspace URL (keep the trailing slash) and continue. You are then redirected to your workspace to authenticate. Authenticate with any user having the impersonate user permission. Accept all the privileges needed and Authorize. Your new connection is ready to be used with other Zapier apps. You can test the connection by clicking on the 3 dots by the side as seen below. Once that is done you can start creating an automation! Use a pre-made Zap or create your own with the Zap Editor. Creating a Zap requires no coding knowledge and you'll be walked step-by-step through the setup. Each Zap has one app as the Trigger, where your information comes from and which causes one or more Actions in other apps, where your data gets sent automatically.", "tokens": 373}
{"title": "django-rocketchat-auth 1.2", "content": "Authenticate the users with Django Web Framework. This application implements the API used by Rocket.Chat IFrame authentication. Also, it handles logout by wiring up a method on Django signals. Tested with Django 2.0.4 and Rocket.Chat 0.62.2. If you have any problems, please open an issue. Install this app in your project: Add rocketchat_auth to your INSTALLED_APPS setting like this: Get a Rocket.Chat authentication token, so we can use the API. Update the settings.py file: Include the rocketchat_auth URLconf in your project urls.py file like this: Since we will put your Django app into an iframe, we have to set up some security measures that would prevent it from happening. Install django-cors-headers and set your Rocket.Chat domain in CORS_ORIGIN_WHITELIST. Configure Django's XFrameOptionsMiddleware to exempt your login page for Rocket.Chat requests or disable it (dangerous). Configure Django's CsrfViewMiddleware to exempt your login page for Rocket.Chat requests or disable it (dangerous). To access this settings, go to: Administration > Workspace > Settings > Accounts Enabled: Enable this option to authenticate users using your own login page in place of the Rocket. Chat's login page via the iframe integration. Please check the Iframe integration page for more information. Iframe URL: Enter **** the URL (http://localhost:8000/login/?next=/rocketchat/redirect)of the page you want to show as the login page of your Rocket.Chat instance. API URL: Enter the URL (http://localhost:8000/rocketchat/api), which refers to the endpoint on the third-party system. This will check if the user is already logged in to that system. API Method: Specify the API (POST) method that Rocket.Chat will use to submit information to the API URL.", "tokens": 465}
{"title": "Add Jira Notifications via WebhookReports", "content": "Notify on issue creation, deletion, status, resolution, comment, or priority changes. In Rocket.Chat go to Administration > Workspace > Integrations and create New Integration. Select Incoming Webhook. Follow all instructions like Enable, give it a name, link to channel etc. Set Enable Script to true and enter the content of this script in the Script box. Hit Save changes and copy the Webhook URL (added just below the script box). Go to your jira as administrator and follow instructions on adding an outgoing webhook here. You can tweak the content of the script to suit your needs better. Integration for Rocket.Chat that summarizes any JIRA issues mentioned. Go to https://github.com/gustavkarlsson/rocketchat-jira-trigger and follow the instructions. Example of Jira integration: This menu shows you your workspace logs and analytics reports. The Logs section in your Rocket.Chat workspace allows you to access and review detailed information configured for logging purposes. It is particularly useful for troubleshooting issues or monitoring your server's ongoing activity and status. To access this menu, go to Administration > Workspace > Reports > Logs. For additional configurations to the log, see Logs. Rocket.Chat collects anonymous usage data, such as feature usage and session lengths, to improve the product for everyone. We ensure that the data we gather doesn\u2019t identify you personally or involve any sensitive information. The Analytics Report section explains exactly what data we collect and shows that we're committed to being open and trustworthy. To access this menu, go to Administration > Workspace > Reports > Analytic reports.", "tokens": 351}
{"title": "Reports", "content": "Reports offer a robust tool tailored for workspace administrators and managers to effectively monitor and assess customer service metrics across various categories and specific time intervals. They grant an in-depth view into conversation data and the performance of agents within your workspace. You can use filters to select time ranges like Today, This Week, Last 15 days, This Month, Last 6 Months, and Last year. You can also export the data to a CSV file. By selecting specific time ranges on the Reports dashboard, you can easily identify patterns and trends that were previously difficult to discern among random data points. To access the Omnichannel Reports dashboard, Go to Administration > Omnichannel > Reports. It displays different categories of omnichannel reports based on Status, Channels, Departments, Tags, and Agents. You can view the metrics of omnichannel conversations in your workspace during a selected time range based on the conversation status: Open, Queued, On Hold, or Closed. Select a time range and click the download icon to export the metrics to a CSV file. You can view the metrics of omnichannel conversations in your workspace during a selected time range based on the enabled channels in your workspace. This gives you an overview of conversations handled by Facebook, WhatsApp, and LiveChat. Select a time range and click the download icon to export the metrics to a CSV file. You can view department-specific metrics of omnichannel conversations within a selected time range. Select a time range and click the download icon to export the metrics to a CSV file. You can track the performance of omnichannel conversations by tags within a selected period in your workspace. Select a time range and click the download icon to export the metrics to a CSV file. You can view omnichannel conversation metrics based on agent activity within a selected time range. This is beneficial for administrators and managers to understand the performance of agents in the workspace. It displays the top five agents in a graph based on the number of conversations they have assisted during the selected time range. It also gives a tabular overview of agents and the number of conversations they have handled during the specified period. Click the download icon to export the metrics to a CSV file.", "tokens": 475}
{"title": "SoundsEmoji", "content": "Rocket.Chat allows you to add sound files that can be used within your workspace. You can assign a chat activity to a particular sound. For example, select a sound to be played whenever you are added to a new room. This feature is a great personalization tool for your workspace. To add a new sound, Navigate to Administration > Workspace > Sounds. Click the New button at the top right. Enter a name for your sound. Upload a sound file in mp3 format. Click Save. After it is saved successfully, it is added to the list of sounds. After adding a sound, you can select a chat activity in your workspace to be associated with that sound. See Account - Sound to know more about choosing sounds for chat activities in your workspace. You can also personalize the sound of notifications in a channel. See Room Actions - Notification preferences to learn how to use your sound for channel notifications. From the list of sounds, select the sound you want to edit or delete. Update the sound details and click Save. Click the Delete button to delete the sound. Rocket.Chat allows you to add emoji files that can be used within Rocket.Chat. Emojis are a great way of filling emotional cues. We recommend using no more than 100 emojis. A number higher than that can compromise performance. To access this menu: Go to Administration > Workspace > Emoji. Click the New on the top right. Enter a name for your emoji. Enter an alias for your emoji. Browse and choose an image file in PNG or JPEG format. Hit Save. To use an emoji that you've added, either click the emoji icon on the message input and search for your emoji by its name or enter :emoji_name: or :emoji_alias: in the message box to directly add the emoji. Search and click on the emoji you want to delete in the Emoji section under the Administration tab. Click Delete or Edit to delete or update the selected emoji, respectively.", "tokens": 446}
{"title": "Device Manager", "content": "As a workspace administrator, you can manage the devices linked to your workspace. To access this menu, navigate to Administration > Workspace > Device Management. If you have two-factor authentication enabled, You are prompted for your two-factor authentication code. This security measure ensures that only authorized users can access this setting. Enter the six-digit authentication code and click Verify. After the successful verification, the devices linked to your workspace are displayed. To view the linked device information: Click on the device name. The following device information is displayed: Client Version OS Last Login Device ID IP Address In the search bar, enter the user, client, or OS for which you want information. Select the device that you want to disconnect and then click Logout device. If the device is logged out, the user will be notified that the workspace admin has ended the session on the device. Users can sign in again with the same devices when they want. See the next topic to learn about the device management settings.", "tokens": 210}
{"title": "Authentication", "content": "The Rocket.Chat authentication documentation provides a comprehensive overview of the various authentication methods supported by Rocket.Chat. Basic Authentication: Users can create accounts using email and password, which is the basic authentication method in Rocket.Chat. Advanced Authentication Protocols: Lightweight Directory Access Protocol (LDAP): Acts as a digital phonebook, storing user information and access levels. Rocket.Chat supports LDAP configuration, user search, data sync, etc. Security Assertion Markup Language (SAML): An open standard allowing single sign-on (SSO) for multiple web applications with one set of credentials. Rocket.Chat offers user interface configuration, behavior settings, and data mapping for SAML integration. Open Authorization (OAuth): An open protocol using tokens to grant access to third-party services without exposing user credentials. Rocket.Chat supports various OAuth setups, including Google, Apple, GitHub, and custom OAuth services. OpenID Connect: An identity layer on top of OAuth 2.0, enabling SSO for various web applications. Rocket.Chat is compatible with providers like Keycloak and Okta Identity Cloud Service. External authentication: For direct sign-in from a website or third-party application, Rocket.Chat offers iframe-based sign-on integration. Central Authentication Service (CAS): An open single sign-on protocol for user authentication and authorization. Rocket.Chat's authentication framework is adaptable and provides robust access control to meet diverse business needs. Users can choose any option or a combination that suits their requirements.", "tokens": 323}
{"title": "Authentication Across Plans", "content": "Rocket.Chat offers robust identity management features across various plans. This guide outlines the identity management features available across different Rocket.Chat plans. Leverage advanced settings such as background sync, roles mapping from groups, auto-logout, and advanced user data sync with LDAP in your workspace. Feature Community Starter Pro Enterprise Login Fallback \u2713 \u2713 \u2713 \u2713 Merge with existing Rocket.Chat users \u2713 \u2713 \u2713 \u2713 Filter what LDAP users can log in (Search Filter and Group Filter) \u2713 \u2713 \u2713 \u2713 Encryptions \u2713 \u2713 \u2713 \u2713 Basic User Data and Avatar Sync \u2713 \u2713 \u2713 \u2713 Load Custom User Data from LDAP x \u2713 \u2713 \u2713 Roles Mapping from Groups x \u2713 \u2713 \u2713 Sync LDAP Groups to Channels x \u2713 \u2713 \u2713 Sync Teams with LDAP x \u2713 \u2713 \u2713 Sync User Active State x \u2713 \u2713 \u2713 Auto logout deactivated users x \u2713 \u2713 \u2713 Periodic Background Sync x \u2713 \u2713 \u2713 Create role mapping from user groups by selecting the field you want to sync with Rocket.Chat. Feature Community Starter Pro Enterprise Basic Synchronization \u2713 \u2713 \u2713 \u2713 Customizable User Interface \u2713 \u2713 \u2713 \u2713 Roles mapping x \u2713 \u2713 \u2713 Fields mapping x \u2713 \u2713 \u2713 Advanced SAML Settings x \u2713 \u2713 \u2713 Allow your users to log in via Facebook, Google, LinkedIn, GitHub, and other third-party applications. Feature Community Starter Pro Enterprise Basic Social Logins \u2713 \u2713 \u2713 \u2713 Login via Custom OAuth protocol using a unique identifier \u2713 \u2713 \u2713 \u2713 Load Name, Username and Email from Custom OAuth \u2713 \u2713 \u2713 \u2713 Import Avatar from Custom OAuth \u2713 \u2713 \u2713 \u2713 Assign Rocket.Chat roles based on Custom OAuth roles x \u2713 \u2713 \u2713 Join channels automatically based on Custom OAuth roles x \u2713 \u2713 \u2713 Explore the Identity Management FAQ to address common queries and gain a better understanding of identity management in Rocket.Chat. In the following sections, we will delve into each of these features in detail.", "tokens": 399}
{"title": "LDAP", "content": "Lightweight Directory Access Protocol (LDAP) is a protocol that enables easy access to and management of user information. It's commonly used in organizations where there is a need for centralized information, authentication, and authorization. Rocket", "tokens": 46}
{"title": "LDAP", "content": ".Chat supports LDAP integration, allowing seamless connection with your organization's Active Directory or Identity Management System, ensuring secure transmission of sensitive information. This section guides you through the configuration details and examples to help you set up your own LDAP integration for user authentication and authorization . Data Accessibility: LDAP serves as a gateway to access vital data about your server or company, ensuring that user information is seamlessly integrated and consistently updated across platforms. Advanced Settings: The Rocket.Chat integration goes beyond basic connectivity . It includes features like: Background Sync: Keeps user data synchronized without manual intervention, ensuring that changes in the LDAP directory are automatically reflected in Rocket.Chat. Roles Mapping from Groups: This feature allows for the automatic assignment of roles in Rocket .Chat based on group memberships in your LDAP directory, facilitating permission management. Auto-Logout: Enhances security by automatically logging out users from Rocket.Chat when certain conditions in the LDAP directory are met . Advanced User Data Sync: Provides a comprehensive synchronization of user data, ensuring that all relevant attributes and settings are consistently mirrored in Rocket.Chat. For an overview of the LDAP features available across our various plans, refer to Authentication Across Plans . Go to Administration > Workspace > Settings > LDAP Enable LDAP and add configurations to connect with your LDAP server. The following actions can be located at the top section of the LDAP settings interface . Test Connection: This will use your provided values and test for a connection. It will test the authentication and encryption but not the syncing settings. Test LDAP Search: Searches and notify if a user is found as configured in the user search page . Sync Now: Syncs your LDAP data based on the Data Sync configurations. These actions are exclusively available to workspaces subscribed to any of Rocket.Chat's premium plans . If you do not receive an alert confirming these actions, always consult the log under Reports to check for their success or to identify any errors. Integrating LDAP with Rocket .Chat not only simplifies user management but also strengthens security and ensures data consistency across your digital ecosystem. As we move to the next sections, we will delve deeper into the configuration process, guiding you through the steps to seamlessly integrate LDAP with your Rocket .Chat workspace.", "tokens": 475}
{"title": "Configure LDAP Connection", "content": "Configuring the LDAP connection process is the first step for establishing a secure and efficient link between your Rocket.Chat instance and the LDAP directory . To set up the Authentication, Timeouts, and Encryption settings for your LDAP connection, navigate to the Connection tab of the LDAP menu and set the following parameters: Enable: Turns LDAP Authentication on or off . Server Type: Allows you to select the type of server you are connecting to. For example, Active Directory. Host: The LDAP connection host or domain. For example, ldap.example.com, 10.0.0.30, adfs .support.rocket.chat Port: The LDAP connection Port, usually 389 or 636. Reconnect: Try reconnecting automatically when the connection is interrupted for some reason while executing operations. Login Fallback: Allow regular password users to log in to Rocket .Chat. It will also let LDAP users continue using Rocket.Chat if the LDAP server is down. You can refer to LDAP Setup for sample values of various settings . Configure the following authentication settings to sign in your users to the workspace: Enable: Enable or disable authentication to skip binding the user DN and password. User DN: The administrative account login details or LDAP user with access to the active directory . This user can perform user lookups to authenticate other users when they sign in. This is typically a service account explicitly created for third-party integrations . Use a fully qualified name, such as CN=Administrator,CN=Users,DC=support,DC=rocket,DC=chat. Password: The password for the User DN . You can set the following encryption details for the workspace to communicate with the LDAP server: Encryption: The encryption method used to secure communications to the LDAP server . Examples include: No encryption SSL/LDAPS (if the LDAP server is encrypted from the start) StartTLS (if you upgrade to encrypted communication once connected) CA Cert: The CA certificate to use in signing . Reject Unauthorized: Disable this option to allow certificates that can not be verified. Usually, Self Signed Certificates will require this option disabled to work", "tokens": 473}
{"title": "Configure LDAP Connection", "content": ". The following fields are used to define the connection timeout settings to the LDAP server: Timeout (ms): Waiting time in milliseconds after a search is initiated before returning an error. Connection Timeout (ms): Maximum time in milliseconds before connection timeout . Idle Timeout (ms): Waiting time in milliseconds after the latest LDAP operation until closing the connection. Each operation opens a new connection. After completing the settings, click Save changes. To check whether your LDAP connection is correctly configured, click Test Connection . A successful connection displays the LDAP Connection Successful message. Your Rocket.Chat workspace is now primed for efficient user authentication and management via LDAP. Further, customize your LDAP settings by configuring user search and user group options in the next topic.", "tokens": 174}
{"title": "LDAP User Search", "content": "Building upon the LDAP connection settings, the next crucial aspect in LDAP integration with Rocket.Chat is the LDAP user search. LDAP has built-in search capabilities to find users and groups from the directory that are permitted access . To configure LDAP user search settings on your Rocket.Chat workspace, go to the User Search tab in LDAP menu and configure the following settings . When enabled, it performs a search of the user's DN after binding to ensure that the bind was successful, preventing login with empty passwords when allowed by the active directory configuration . Enter the following search search filter fields to specify the context and scope of the search: Base DN: The fully qualified DN of an LDAP subtree you want to search for users and groups . There is no limit to the number of groups you can add, but they must be defined in the same domain base as the users who belong to them . For example, ou=Users+ou=Projects,DC=support,DC=rocket,DC=chat. If you specify restricted user groups, only users that belong to those groups will be in scope . We recommend setting the top level of your LDAP directory tree as your domain base and using a search filter to control access. Filter: If specified, only users that match this filter will be allowed to log in . If no filter is selected, all users within the scope of the defined domain base can sign in. For example, for Active Directory: For example, for OpenLDAP (extensible match search): Scope: The search scope . Provide the specific portion of the subtree that you want to search. For example, sub. Search Field: The LDAP attribute that identifies the LDAP user who attempts authentication . This field should be sAMAccountName for most Active Directory installations, but it may be uid for other LDAP solutions, such as OpenLDAP. You can use mail to identify users by email or whatever attribute you want", "tokens": 416}
{"title": "LDAP User Search", "content": ". You can use multiple values separated by a comma to allow users to log in using multiple identifiers like username or email. Search Page Size: The maximum number of entries each result page will return to be processed . Search Size Limit: The maximum number of entries to return. It must be greater than the Search Page Size. Search users by the groups defined in your LDAP directory. Enable LDAP User Group Filter: Restrict user access in an LDAP group . It is useful for allowing OpenLDAP servers without a memberOf filter to limit group access. Group ObjectClass: The objectclass that identifies the groups. For example, OpenLDAP:groupOfUniqueNames . Group ID Attribute: For example, *OpenLDAP:*cn. Group Member Attribute: For example, *OpenLDAP:*uniqueMember . Group Member Format: For example, *OpenLDAP:*uid=#{username},ou=users,o=Company,c=com. Group name: Group name to which the user should belong. Click Save changes . Click Test LDAP Search to test the user search configuration. With the LDAP User Search properly configured, Rocket.Chat is now equipped to locate and authenticate users from the LDAP directory. Next, configure your LDAP data sync and user mapping settings in the next topic .", "tokens": 290}
{"title": "LDAP Data Sync Settings", "content": "After configuring the LDAP User Search, the next integral component in LDAP integration with Rocket.Chat is the LDAP Data Sync Settings. This feature ensures that user data in Rocket.Chat remains up-to-date with the information in your LDAP directory. Rocket .Chat provides the following configuration options for LDAP data sync: Unique Identifier Field: The field that links the LDAP user and the Rocket.Chat user. You can include multiple values separated by a comma to get the value from the LDAP record . The default value is objectGUID,ibm-entryUUID,GUID,dominoUNID,nsuniqueId,uidNumber. Merge Existing Users: Whether or not to merge existing users . When importing a user from LDAP and a user with the same username already exists, the new user data (including info and password) will merge into the existing data. Update User Data on Login: Enable to update user data on login . Update User Data on Login with OAuth services: Enable to update user data on login with OAuth services. Default Domain: If provided, the default domain generates a unique email for users whose emails were not imported from LDAP . The mounting of the email will be username@default domain or unique id@default domain. Sync User Avatar: Enable syncing the user's avatar. User Avatar Field: The field used as an avatar for users . Leave blank to use thumbnailPhoto first and jpegPhoto as a fallback. Map the following fields from the LDAP directory to your workspace: Username Field: The field that will be used as a username for new users . Leave empty to use the username informed on the login page. By default, the value is sAMAccountName. You can use template tags too, for example: Email Field: The LDAP field for binding the user's email . Name Field: LDAP field for binding the user's name. Extension Field: The LDAP field for binding the user's VoIP extension if your workspace uses VoIP . Now you have successfully configured your LDAP integration! With these LDAP Data Sync Settings in place, Rocket.Chat ensures a high level of data integrity and consistency, reflecting real-time changes from the LDAP directory in the user's Rocket.Chat profile . For workspaces on any of the premium plans, there are additional settings for you to customize your data sync behavior described in the next topic.", "tokens": 528}
{"title": "LDAP Premium Settings", "content": "This document describes LDAP premium settings, which are available exclusively to workspaces subscribed to Rocket.Chat's premium plans. These settings offer advanced capabilities for syncing and managing user data and roles . Set the following advanced sync settings: Sync User Active State: Determine if users should be enabled or disabled on Rocket.Chat based on the LDAP status. The options are as follows: Do nothing: No changes are made to the user status . Disable Users: Disable users not found on sync. Enable Users: Re-enable users found on LDAP background sync. Enable and Disable Users: Enable and disable users according to the LDAP user status . To verify the user status, search for the user from Administration > Workspace > Users. The status will be displayed accordingly. The pwdAccountLockedTime attribute will be used to determine if the user is disabled . This setting is not yet compatible with all LDAP Servers, so if you don't use the pwdAccountLockedTime attribute, you may want to disable it completely . The pwdAccountLockedTime attribute is only available on OpenLDAP but not on Windows Server AD. For Windows Server AD, the userAccountControl attribute will be used to determine if the user is disabled or not . Attributes to Query: Specify which attributes should be returned on LDAP queries, separating them with commas. Defaults to everything. * represents all regular attributes and + represents all operational attributes. Make sure to include every attribute that is used by every Rocket .Chat sync option. Set the user logout behavior with the following fields: Enable Auto Logout: Set true to log out users automatically. Auto Logout Interval: This allows you to set the interval for auto-logout. For example, every five minutes . Configure the background sync behavior: Background Sync: Enable periodic background sync. Background Sync interval: Select the interval between synchronizations, using the Cron Text format. For example, once every six hours", "tokens": 431}
{"title": "LDAP Premium Settings", "content": ". Background Sync Import New Users: Import all users (based on your filter criteria) that exist in LDAP and that do not exist in Rocket.Chat . Background Sync Update Existing Users: This will sync the avatar, fields, username, etc (based on your configuration) of all users already imported from LDAP on every Sync Interval . Background Sync Merge Existing Users: Merge all users (based on your filter criteria) that exist in LDAP and also exist in Rocket.Chat. To enable this, activate the Merge Existing Users setting in the Data Sync tab . Automatically disable users that are no longer found on LDAP: This option will deactivate users on Rocket.Chat when their data is not found on LDAP . Any rooms owned by those users will be automatically assigned to new owners, or removed if no other user has access to them. You can verify this by searching for the user from Administration > Workspace > Users. The status will be displayed as Disabled . Avatar Background Sync: Enable a separate background process to sync user avatars. Avatar Background Sync Interval: The interval between avatar sync, using the Cron Text format . You can sync your LDAP groups with the channels in your workspace using the following fields: Auto Sync LDAP Groups to Channels: Enable this feature to automatically add users to a channel based on their LDAP group . Channel Admin: When channels that do not exist during a sync are auto-created, this user automatically becomes the channel admin. LDAP Group BaseDN: The LDAP group base DN", "tokens": 317}
{"title": "LDAP Premium Settings", "content": ". Group membership validation strategy: This field determines how users' memberships to LDAP groups should be validated . The options are: Apply filter for each group: Select this option to apply the User Group Filter for each group (key) defined in the LDAP Group Channel Map field . This is slower but can be useful if you need to use the #{groupName} replacement tag to define membership in the User Group Filter field (such as when using the memberOf field from the Active Directory to define membership) . The following screenshot shows an example of this option: Apply filter once to get all memberships: Select this option to apply the User Group Filter once for each user. A given user will be considered a member of all groups returned by the LDAP search . This is a faster option that can be applied if you are not using the #{groupName} replacement tag in the User Group Filter filter (for example, when filtering by the member field in groups) . The following screenshot shows an example of this option: Switching to the faster Apply filter once to get all memberships search strategy may not work with the currently configured LDAP search filter . When switching to this option, make sure to update the User Group Filter field to get all groups at once in a single query (don\u2019t use the #{groupName} replacement tag since it is not supported by this strategy) . User Group Filter: The LDAP search filter checks if a user is in a group. If the search returns any results, the user is considered to be in the group . When performing the search, the following strings, if present in the filter, will be substituted with data from the user and group whose membership status is being checked: #{username} - Replaced with the username of the user in Rocket.Chat", "tokens": 371}
{"title": "LDAP Premium Settings", "content": ". #{groupName} - Replaced with the name of the group in LDAP. #{userdn} - Replaced with the LDAP DN of the user. LDAP Group Channel Map: Map LDAP groups to Rocket.Chat channels in JSON format . For example, the following objectives will add any user in the LDAP group employee to the general channel on Rocket.Chat. Auto Remove Users from Channels: Enabling this will remove any user in a channel that does not have the corresponding LDAP group . This will happen in every login and background sync, so removing a group on LDAP will not instantly remove access to channels on Rocket.Chat. Sync Custom Fields: Enable to activate custom field sync. Custom Fields Mapping: Map the custom fields to sync . You can sync the user roles from your LDAP groups to your workspace. Sync LDAP Groups: Enable this setting to activate role mapping from user groups on your workspace . Auto Remove User Roles: Enable this setting to automatically remove roles from LDAP users that don't have the corresponding group. This will only automatically remove roles set under the User Data Group Map", "tokens": 234}
{"title": "LDAP Premium Settings", "content": ". LDAP Group BaseDN: The LDAP BaseDN determines if users are in a group. Group membership validation strategy: This field determines how users' memberships to LDAP groups should be validated . The options are: Apply filter for each group: Select this option to apply the User Group Filter for each group (key) defined in the LDAP Group Channel Map field . This is slower but can be useful if you need to use the #{groupName} replacement tag to define membership in the User Group Filter field (such as when using the memberOf field from the Active Directory to define membership) . Apply filter once to get all memberships: Select this option to apply the User Group Filter once for each user. A given user will be considered a member of all groups returned by the LDAP search . This is a faster option that can be applied if you are not using the #{groupName} replacement tag in the User Group Filter filter (for example, when filtering by the member field in groups) . Switching to the faster Apply filter once to get all memberships search strategy may not work with the currently configured LDAP search filter . When switching to this option, make sure to update the User Group Filter field to get all groups at once in a single query (don\u2019t use the #{groupName} replacement tag since it is not supported by this strategy) . User Group Filter: The LDAP search filter checks if a user is in a group. If the search returns any results, the user is considered to be in the group", "tokens": 317}
{"title": "LDAP Premium Settings", "content": ". When performing the search, the following strings, if present in the filter, will be substituted with data from the user and group whose membership status is being checked: #{username} - Replaced with the username of the user in Rocket.Chat . #{groupName} - Replaced with the name of the group in LDAP. #{userdn} - Replaced with the LDAP Distinguished Name of the user. User Data Group Map: The mapping of LDAP groups to Rocket.Chat roles in JSON format . For example, the following object will map the \"rocket-admin\" LDAP group to Rocket.Chat's \"admin\" role and the \"tech-support\" group to the \"support\" role . It's also possible to map one group to multiple roles (\"manager\" group to \"leader\" and \"moderator\" roles). Here you can map and sync LDAP teams to the workspace. Enable team mapping from LDAP to Rocket .Chat: Enables team mapping from LDAP to Rocket.Chat. Team mapping from LDAP to Rocket.Chat: Team mapping from LDAP to Rocket.Chat. Validate mapping for each login: Determine if users' teams should be updated every time they log in to Rocket.Chat . If this is turned off, the team will be loaded only on their first login. LDAP Teams BaseDN: The LDAP BaseDN is used to look up user teams. LDAP Team Name Attribute: The LDAP attribute that Rocket .Chat should be used to load the team's name. You can specify multiple attribute names by separating them with a comma. LDAP query to get user groups: LDAP query to get the LDAP groups that the user is part of The LDAP premium settings in Rocket .Chat provide a robust framework for advanced user data synchronization and role management, enhancing the administrative capabilities and user experience in premium workspaces. These settings ensure that Rocket.Chat remains in sync with the LDAP directory, reflecting real-time changes and maintaining data integrity . Next, take a look at some examples of the LDAP settings that you can configure based on your requirements.", "tokens": 454}
{"title": "LDAP Setup Example", "content": "After exploring the comprehensive LDAP settings in Rocket.Chat, it's beneficial to examine practical examples of these configurations . This requires an up-and-running LDAP server, which we'll guide you through how to set up (using Osixia OpenLDAP) in order to build a clearer understanding of how Rocket.Chat's LDAP settings can be applied in real-world scenarios . You must have the following installed on your machine: Docker \u00a0- This will be used to locally deploy an Osixia OpenLDAP server. For this example, we are using Apache Directory Studio (ADS) . You can also use any other LDAP data management tool (such as phpLDAPadmin) of your choice. Local deployment of a Rocket.Chat workspace for testing purposes. Rocket .Chat allows workspace owners to connect to OpenLDAP or Active Directory LDAP servers to authenticate or retrieve information . In this first step, we'll guide you through how to setup a LDAP server using Docker and OpenLDAP, which is an open-source implementation of the LDAP protocol. For starters, navigate to your preferred directory and create a docker-compose .yml file with the following content: Then, use docker compose up to start the container. This will locally deploy an Osixia OpenLDAP server running on port 389 (or 636 if the default one is unavailable) . Now open your LDAP management tool and create a new connection (in ADS, this can be achieved through the Connections section) using the following information: Host name: localhost Port: 389 Authentication method: Simple authentication Admin user's Bind DN: cn=admin,dc=rcldap,dc=com,dc=br Bind password: admin Apache Directory Studio's authentication model should look as follows (click Finish to complete the connection's setup): After successfully connecting to the LDAP server through ADS, an LDAP", "tokens": 407}
{"title": "LDAP Setup Example", "content": "tree structure containing an admin and the standard domain (dc=rcldap,dc=com,dc=br) should be displayed: ADS is now ready to populate the LDAP server with groups and users that can connect to Rocket .Chat. For this example's use case, all users and organizational units will be added under the default domain already provided after setting up the LDAP server . You can refer to Oracle LDAP Security Fundamentals Docs for more info about Users, Groups and Organizational Units in LDAP servers . After setting up all organizational units, groups, and users as described in the next steps, your LDAP tree structure should look as follows: To add new organizational units within the default domain, right-click on its element (dc=rcldap,dc=com,dc=br) in the tree structure, then select New > New Entry and follow the steps provided below Create two organizational units with the organizationalUnit object class: Users and Groups . For this example, users must be added under the Users organizational unit. Right-click on the ou=Users element in the tree structure, then select New > New Entry and follow the steps provided below (use the inetOrgPerson object class) . For this example, we'll only allow users who are members of a given LDAP group to log in to Rocket.Chat . To do that, add a new RCUsers group under the Groups organizational unit with a right-click on the ou=Groups element in the tree structure, then select New > New Entry and follow the steps provided in the screenshot below . Use the groupOfNames object class and browse to the user you just created in order to assign it to a member property of the group in the last step . More members can be added to the group later by adding new member attributes to the existing RCUsers group", "tokens": 385}
{"title": "LDAP Setup Example", "content": ". Access Workspace > Settings > LDAP > Connection, enable LDAP and configure the settings as follows: Server Type: Other Host: localhost Port: 389 Save the changes and click Test Connection on the upper-right side of the screen . A \"LDAP Connection Succesful\" toast message should be displayed . Access Workspace > Settings > LDAP > Connection > Authentication and configure the settings as follows: User DN: cn=admin,dc=rcldap,dc=com,dc=br Password: admin Access Workspace > Settings > LDAP > User Search > Search Filter and configure the settings as follows: Base DN: dc=rcldap,dc=com,dc=br Filter: (objectclass=inetOrgPerson) Scope: sub Search Field: uid Search Page Size: 250 Search Size Limit: 1000 After this step, you should be able to successfully search LDAP users in your workspace using the connection that has been set up . Try it with the Test LDAP Search button on the upper-right side of the screen. Specify an LDAP user's uid field and a successful toast message should be displayed. Configuring this section will restrict access to Rocket .Chat to members of the RCUsers group built in the previous steps . Access Workspace > Settings > LDAP > User Search > Group Filter, enable it (switch on \"Enable LDAP User Group Filter\") and configure the settings as follows: Group ObjectClass: groupOfNames Group ID Attribute: cn Group Member Attribute: member Group Member Format: #{userdn} Group name: RCUsers After this step, LDAP users should already be able to log in to Rocket .Chat using their uid/mail and password set in the LDAP server! To sync new users that exist in your LDAP directory but not in Rocket.Chat, you must enable the Background Sync Import New Users option in LDAP > Premium > Background Sync . Click Sync Now and your new users are imported to your workspace. Rocket.Chat allows workspace owners to pick which LDAP fields will be used to identify users on authentication", "tokens": 463}
{"title": "LDAP Setup Example", "content": ". By default, the uid field is set so that users can log in using username and password . However, this can be customized in Workspace > Settings > LDAP > User Search > Search Filter > Search Field to allow distinct login formats: Log in with either e-mail address or username: uid,mail Log in with e-mail address: mail When you enable LDAP, the login form will log in users via LDAP instead of the internal account system . Here, we are using Stunnel to create a secure connection to the LDAP server. Create a new configuration file /etc/stunnel/ldaps .conf with the following content: To enable Stunnel automatic startup, change the ENABLED variable in /etc/default/stunnel4 to 1: Finally, on the Rocket .Chat server under /admin/LDAP set these values: LDAP host = localhost LDAP port = 389 By tailoring these settings to your specific environment, you can ensure a secure, efficient, and user-friendly experience . As we conclude this section, remember that these examples serve as a guide, and it's crucial to adapt them to the unique requirements of your workspace. This concludes the LDAP configuration section, which provides the various connection and user management settings in Rocket.Chat .", "tokens": 286}
{"title": "SAML", "content": "SAML (Security Assertion Markup Language) is an XML-based protocol for exchanging authentication and authorization data between parties. With SAML, users can log in once and gain access to multiple web applications. Rocket.Chat supports this standardized user authentication and authorization protocol, enabling organizations to establish secure login processes. This section guides you through the configuration details and examples to show how you can set up your SAML integration. Centralized authentication: Rocket.Chat relies on SAML identity providers to centralize your organization's user information and manage user access to resources in Rocket.Chat Map user data: Mapping your user data from the SAML identity provider to Rocket.Chat ensures that the relevant user information, such as usernames, roles, and email addresses, is correctly associated with Rocket.Chat. Customization and flexible configuration: Rocket.Chat provides the settings to customize the login and logout behavior, and the user interface. Premium workspace settings: Additional settings include advanced user and data sync options for workspaces on any of the premium plans. The next sub-sections give you the details about the SAML configuration options in Rocket.Chat and some examples of SAML integrations that you can implement. By integrating any of these methods, organizations can ensure industry-standard security and extend their user roles and permissions to their Rocket.Chat workspaces.", "tokens": 278}
{"title": "SAML Configuration", "content": "This page guides you through the various available settings you can configure for your SAML integration. This enables you to customize the user sign-in experience and behavior, map user data, and additional premium settings. In your Rocket .Chat workspace, go to Administration > Workspace > Settings > SAML. On the SAML page, you will find the configuration tabs where you can provide the details according to your requirements. Make sure that you have an identity provider and the necessary credentials . You can refer to Active Directory Federation Services and Keycloak for specific configuration options and sample values. Enable: Enables the SAML connection. Custom Provider: The SAML provider's name. Custom Entry Point: The custom entry point . IDP SLO Redirect URL: This is the URL provided by your identity provider for logging out . In SAML terminology, it refers to the location (URL) of the SingleLogoutService with the redirect binding (urn:oasis:names:tc:SAML:2 .0:bindings: HTTP-Redirect) Custom Issuer: The URI is the unique identifier of your service. By convention, this is also the URL of your (unedited) metadata . Again, where you set Custom Provider to your provider app name, this will be: https://my-rocketchat-domain.tld/_saml/metadata/my-app Enable Debug: Set to true to enable debugging", "tokens": 320}
{"title": "SAML Configuration", "content": ". Custom Certificate: This is the public certificate for the identity providers used to verify SAML requests . The format for this is the PEM without -----BEGIN CERTIFICATE----- and -- Public Cert Contents: The public part of the self-signed certificate you created for encrypting your SAML transactions . Example of self-signed certificate on the SimpleSAMLphp website here. Format for this is the PEM with -----BEGIN CERTIFICATE----- and -----END CERTIFICATE----- Signature Validation Type: Select the type of signature validation . This setting will be ignored if no Custom Certificate is provided. Private Key Contents: The private key matches the self-signed certificate you created as PKCS#1 PEM . The format for this is PEM with -----BEGIN PRIVATE KEY----- and -----END PRIVATE KEY-----. The following settings -\u00a0Roles, Advanced, and Mapping on the Premium tab are only available to workspaces on any of the Rocket.Chat premium plans . Sync User Roles: Enable to sync user roles on login (overwrites local user roles). Role Attribute Name: If this attribute is found on the SAML response, its values will be used as role names for new users", "tokens": 283}
{"title": "SAML Configuration", "content": ". Identifier Format: Format of the identifier. Leave this empty to omit the NameID Policy from the request NameID Policy Template: The NameID policy template. You can use any variable from the Authorize Request Template here . Custom Authn Context: Leave this empty to omit the authorization context from the request. To add multiple authorization contexts, add the additional ones directly to the AuthnContext Template setting . Authn Context Comparison: Select the authorization context comparison method AuthnContext Template: You can use any variable from the AuthnRequest Template here . To add additional authorization contexts, duplicate the AuthnContextClassRef tag and replace the __authnContext__ variable with the new context . AuthnRequest Template: The following variables are available: __newId__: Randomly generated id string __instant__: Current timestamp __callbackUrl__: The Rocket.Chat callback URL. __entryPoint__: The value of the Custom Entry Point setting . __issuer__: The value of the Custom Issuer setting. __identifierFormatTag__: The contents of the NameID Policy Template if a valid Identifier Format is configured. __identifierFormat__: The value of the Identifier Format setting . __authnContextTag__: The contents of the AuthnContext Template if a valid Custom Authn Context is configured. __authnContextComparison__: The value of the Authn Context Comparison setting . __authnContext__: The value of the Custom Authn Context setting", "tokens": 370}
{"title": "SAML Configuration", "content": ". Logout Response Template: The following variables are available: __newId__: Randomly generated id string __inResponseToId__: The ID of the Logout Request received from the IdP __instant__: Current timestamp __idpSLORedirectURL__: The IDP Single LogOut URL to redirect to . __issuer__: The value of the Custom Issuer setting. __identifierFormat__: The value of the Identifier Format setting. __nameID__: The NameID received from the IdP Logout Request . __sessionIndex__: The sessionIndex received from the IdP Logout Request . Logout Request Template: The following variables are available: __newId__: Randomly generated id string __instant__: Current timestamp __idpSLORedirectURL__: The IDP Single LogOut URL to redirect to . __issuer__: The value of the Custom Issuer setting. __identifierFormat__: The value of the Identifier Format setting. __nameID__: The NameID received from the IdP when the user logged in . __sessionIndex__: The sessionIndex received from the IdP when the user logged in. Metadata Certificate Template: The following variables are available: __certificate__: The private certificate for assertion encryption . Metadata Template: The following variables are available: __sloLocation__: The Rocket.Chat Single LogOut URL. __issuer__: The value of the Custom Issuer setting. __identifierFormat__: The value of the Identifier Format setting . __certificateTag__: If a private certificate is configured, this will include the Metadata Certificate Template, otherwise it will be ignored. __callbackUrl__: The Rocket.Chat callback URL", "tokens": 430}
{"title": "SAML Configuration", "content": ". User Data Custom Field Map: Configure how user custom fields are populated from a record in SAML (once found). Button Text: Text to display on the button. Generate Username: Enable to generate usernames . Normalize username: Set the type of normalization to perform on a username. Immutable field name: Select the field name to be immutable. Overwrite user fullname (use idp attribute): Enable to overwrite user full name . Overwrite user mail (use idp attribute): Enable to overwrite user mail. Logout Behaviour: Set the behavior to happen on logout. Update Room Subscriptions on Each Login: When enabled, room subscriptions are updated on each login . Ensures the user is a member of all channels in SAML assertion on every login. Include Private Rooms in Room Subscription: Adds a user to any private rooms that exist in the SAML assertion. Default User Role: Set the default user role . You can specify multiple roles, separating them with commas. Allowed clock drift from Identity Provider: The clock of the Identity Provider may drift slightly ahead of your system clocks. You can allow for a small amount of clock drift . Its value must be given in a number of milliseconds (ms). The value given is added to the current time at which the response is validated . User Data Field Map: Configure how user account fields (like email) are populated from a record in SAML (once found) . As an example, {\"name\":\"cn\", \"email\":\"mail\"} chooses a person's human-readable name from the cn attribute, and their email from the mail attribute. Available fields in Rocket.Chat: name, email and username . Everything else is discarded. This concludes the configuration options that you can enter for the SAML integration. In the upcoming sections, we look at some SAML identity providers and how you can integrate them with Rocket.Chat.", "tokens": 425}
{"title": "Active Directory Federation Services", "content": "Microsoft's Active Directory Federation Services (ADFS) provides users with single sign-on access to systems and applications. It's used to securely share digital identity and permissions across applications. This simplifies user experience while implementing robust security policies . ADFS provides an identity provider service that can be consumed by Rocket.Chat for authentication. This example walks you through the steps to configure your ADFS environment with your Rocket.Chat workspace . If you are using Active Directory without Federation Services, you should perform the user synchronization via LDAP only. A Windows Server with the ADFS environment. See Deploy and Configure AD FS to learn about this. A Rocket .Chat workspace and permission to modify the SAML settings. For this example, the Rocket.Chat configuration is done as follows: Navigate to Administration > Workspace > Settings > SAML. Enable SAML and provide a name for the Custom Provider field . For example, test-adfs. Enter the endpoints for the Custom Entry Point and IDP SLO Redirect URL fields . For example, The Custom Issuer field is the federation metadata URL of your workspace appended with the Custom Provider value that you entered previously. Open this URL in a new tab to view the file contents . For example, the URL can look like this: Add the private key certificate related to the ADFS server. Note that ADFS uses .pfx certificate extensions (widely used on Windows landscapes) and Rocket.Chat uses .pem files . So, before setting the certificate here, it must be converted. Set the Custom Authn Context and User Data Field Map according to the configuration you have on your ADFS system. Save your changes . In this section, we will configure the following: Add relying party trust in the ADFS server. Edit claims issuance policy in the ADFS server User data mapping in the Rocket.Chat workspace . In the ADFS server, we will add a relying party trust to establish the trust between the server and the workspace. This will allow users from the organization to access Rocket.Chat without using separate credentials . Here, we will import the federation metadata file and configure the settings as follows: On the ADFS management screen, under Actions, click Add Relying Party Trust. On the Welcome page, select Claims aware and click Start", "tokens": 496}
{"title": "Active Directory Federation Services", "content": ". To select the data source, click Import data about the relying party published online or on a local network. In the Federation metadata address (host name or URL) field, enter the metadata URL you got from the Custom Issuer field in your workspace . Click Next. Enter a Display name and click Next. Choose an access control policy as per your requirements. For this example, we will select Permit everyone. Click Next. Now, you can review your settings and click Next . Finish adding the relying party trust. Next, we will configure the claim issuance policy for the server. This determines what information is provided to the workspace after the user is authenticated . For this example, we will add four rules by following these steps: In the ADFS management tool, under Actions, click Edit Claim Issuance Policy. Click Add rule . Select the Claim rule template as Send LDAP Attributes as Claims and click Next. Enter a Claim rule name, for example, LDAP. Select the Attribute store as Active Directory . In the Mapping of LDAP attributes to outgoing claim types table, select the options as shown in the following screenshot and then click Finish: Observe that the three Outgoing Claim Type values \u2014 Name, E-Mail Address, and samAccountName are used for Incoming claim type fields in the remaining three rules . Let's add a second rule. Click Add rule and select the Rule template as Transform an Incoming Claim . Give it any name, provide the settings as shown in the following screenshot, and click Finish: Again, click Add rule and select the Rule template as Transform an Incoming Claim . Give it any name, provide the settings as shown in the following screenshot, and click Finish: For the fourth and final rule, add a rule as shown in the following screenshot: Now that you have completed configuring the claim issuance policy, go to", "tokens": 391}
{"title": "Active Directory Federation Services", "content": "the SAML settings in your Rocket .Chat workspace. In General > Mapping > User Data Field Map, enter the following mapping: This mapping reflects the claims issuance policy that we just defined. The Custom Authn Context field must match the authentication methods selected on ADFS . Microsoft Federation Services provides two authentication methods: Forms Authentication and Windows Authentication (Intranet) . Forms authentication: If this option is set as 'primary', a login form provided by ADFS will be called by the SAML assertion to perform the login operation. For this method, the recommended Custom Authn Context in Rocket .Chat is urn:oasis:names:tc:SAML:2 .0:ac:classes:PasswordProtectedTransport Windows authentication: If this option is set as 'primary', ADFS will expect the login assertions on the Windows Domain level (Intranet). To set a full SSO scenario between Rocket .Chat and ADFS, the recommended Custom Authn Context is urn:federation:authentication:windows. Make sure that the Identifer Format field value is urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified . Great \u2014 All your settings are now complete! You can use Rocket.Chat with your ADFS integration to maintain security, troubleshoot issues, and monitor authentication events.", "tokens": 287}
{"title": "Keycloak", "content": "Keycloak is an open-source identity and access management solution supporting user federation, OAuth, SAML, and OpenID Connect protocols. Rocket.Chat integrates with Keycloak using SAML, enabling secure management of users and resources . This guide explains how to configure Keycloak with Rocket.Chat using SAML for users to log in with their Keycloak credentials. A Rocket.Chat workspace (e.g., https://test-rocket.chat). A Keycloak server (e.g ., https://keycloak.test.com). A Keycloak realm set up for use (e.g., master). This guide references the realm using the placeholder <realm> . Your Keycloak realm must have the SAML identity provider and the RS256 algorithm configured as the keystore provider. To begin, configure Keycloak in your Rocket.Chat workspace. Follow these steps in the SAML configuration section of Rocket .Chat settings: Go to Administration > Workspace > Settings > SAML Enable the SAML connection in Rocket.Chat. Set the Custom Provider to keycloak . Configure the Custom Entry Point and IDP SLO Redirect URL: In your Keycloak server, go to Realm Settings. Under the General tab, select SAML 2.0 Identity Provider Metadata from the Endpoints section . This will open an XML file containing the necessary URLs . Copy the appropriate URL, such as https://<your-keycloak-server>/realms/<realm>/protocol/saml, and paste it into both the Custom Entry Point and IDP SLO Redirect URL fields in Rocket.Chat . Set the Custom Issuer to https://<your-workspace>/_saml/metadata/keycloak. To ensure secure communication between Keycloak and Rocket.Chat, configure the required certificates under Rocket .Chat SAML settings: Obtain the RS256 certificate: In Keycloak, navigate to Realm Settings and open the Keys tab. Copy the RS256 certificate and paste it into the Custom Certificate field in Rocket.Chat. Generate a certificate pair for Rocket", "tokens": 488}
{"title": "Keycloak", "content": ".Chat: Run the following OpenSSL command to generate a public certificate and a private key: This command creates two files: saml.crt: The public certificate. saml.pem: The private key . Copy the contents of these files and update the respective fields in Rocket.Chat: Public Cert Contents: Paste the contents of saml.crt. Private Key Contents: Paste the contents of saml.pem. Set the Signature Validation Type to Validate Either Signature", "tokens": 102}
{"title": "Keycloak", "content": ". Click Save Changes. After setting up SAML in Rocket.Chat, the next step is to configure a Keycloak client that will handle authentication between users on your Keycloak server and Rocket.Chat workspace . This client will manage the exchange of user information, allowing users to authenticate securely on Rocket.Chat using their Keycloak credentials . Follow the steps below to configure the Keycloak client: Download the SAML metadata XML file Go to https://<workspace-url>/_saml/metadata/keycloak. You\u2019ll get an XML file. Ensure SAML is enabled in your Rocket .Chat workspace to access this file. Save the raw XML file to your device. Import the client in keycloak Navigate to the Clients section in your Keycloak server. Click Import Client and upload the XML file you saved as the Resource file . The client Type will be set to saml, and the ClientID will be populated based on the metadata URL. Enable Client Signature Required. Click Save to create the new client. You will be redirected to a partially pre-filled client settings page . Configure the client settings Ensure the Client ID matches the metadata URL. Verify the Valid Redirect URIs field is set to https://<workspace-url>/_saml/validate/keycloak. Set the Name ID Format to email . Set SAML Signature Key to KEY_ID. Click Save. Verify the public key (certificate) Go to the Keys tab in the client and verify that the public key matches the Public Cert Contents you set in Rocket.Chat SAML settings . The -----BEGIN/END CERTIFICATE----- header/footer is not displayed in Keycloak, but the rest of the certificate should match. If the certificates do not match, click Import Key. Select Certificate PEM as the archive format and upload the saml .crt certificate file generated earlier. Then, click Import. Configure client scopes and attribute mappers Navigate to the Client Scopes tab for the client . Select the dedicated scope and mappers for the client (https://<workspace-url>/_saml/metadata/keycloak-dedicated). Go to the Mappers tab to create mappers for the required data that your Rocket.Chat workspace expects", "tokens": 519}
{"title": "Keycloak", "content": ". Typically, email or username mappers aren't needed, but cn (common name) may be required. Click Configure a new mapper and select User Property as the Mapper Type. Set the SAML Attribute NameFormat to basic . For the first name: Set Name and Property to firstName. Set SAML Attribute Name to cn. Click Save. After completing the configuration, users can click the SAML button on the workspace login page . This action will redirect them to Keycloak\u2019s authentication page, where they can log in with their credentials. Upon successful login, users are redirected back to their account on the workspace. You can monitor active sessions of your Keycloak users on Rocket .Chat by checking the Sessions tab in Keycloak. If you don\u2019t have users set up in Keycloak yet, follow these basic steps to create a new user: Navigate to the Users section in Keycloak and click Create User . Fill in the required fields, then click Create. Go to the user's Credentials\u00a0tab\u00a0and set a password. You can also configure the user interface, behavior, and mapping settings according to your requirements . You may run into some problems for various reasons: Q: I keep getting the Unable to validate response url: Error: Status is: urn:oasis:names:tc:SAML:2.0:status:Responder error . A: Make sure that the respective Keycloak user has an e-mail address. This may not be the case. For example, for the Keycloak admin.", "tokens": 354}
{"title": "Keycloak", "content": "Keycloak is an open-source identity and access management software. It supports user federation, OAuth, SAML, and OpenID Connect protocols. Along with role-based authorization, you can also connect to existing LDAP user directories. Rocket .Chat supports Keycloak configuration to securely manage your users and resources. This guide walks you through a basic Keycloak OpenID Connect setup in Rocket.Chat to log in with Keycloak credentials. A Rocket.Chat workspace (e.g., https://test-rocket .chat). A Keycloak server (e.g., https://keycloak.test.com). A Keycloak realm set up for use (e.g., master). This guide references the realm using the placeholder <realm> . A Keycloak client manages authentication between users on your Keycloak server and the Rocket.Chat workspace. This client securely handles the exchange of user information, allowing users to log in to Rocket.Chat using their Keycloak credentials . To configure the client in Keycloak: Navigate to the Clients section in your Keycloak server. Click Create Client. Set OpenID Connect as the client type. Enter a Client ID (e.g., rocket-chat-client) . Click Next to proceed to Compatibility Config and enable Client Authentication, which sets the client to the confidential access type. Click Next to go to Login Settings and enter the Valid Redirect URIs (e.g., https://<workspace-url>/*) . Click Save to create the new client. After saving, you can access the\u00a0Credentials\u00a0tab where you\u2019ll find the client secret required for configuring Rocket.Chat. Log in to Rocket.Chat as an administrator and navigate \u00a0Administration > Settings > OAuth . Click Add Custom OAuth and assign a unique name. Refresh the OAuth settings page and select the newly created custom OAuth. Enable the new custom OAuth and enter the following details: Field Description Example URL The OpenID Connect issuer URL for the Keycloak realm . Navigate to Realm Settings > General > Endpoints in your Keycloak server, and click OpenID Endpoint Configuration", "tokens": 493}
{"title": "Keycloak", "content": ". The URL is required in the following format: https://<keycloak-server>/realms/{realm-name}/protocol https://https://keycloak.test.com/realms/master/protocol Token Path The token endpoint is used to obtain access tokens . Enter the path from the token endpoint. /openid-connect/token Token sent via Select whether the token is sent via Header or Payload . Header Identity Token Sent Via Select whether the identity token is sent via Header, Payload, or the same method as the Token sent via field. Token sent via Identity Path The user information endpoint is used to retrieve user data . Enter the path from the user endpoint. /openid-connect/userinfo Authorize Path Enter the path from the authorization endpoint. /openid-connect/auth Scope The scope defines the user access level and permissions that you have configured in Keycloak . openid Param Name for access token The name of the access token. access_token Id The client ID that you created in Keycloak. rocket-chat-client Secret Enter the client secret from your Keycloak client's Credentials tab . QTrbVadjfjhurUzsJHRbteQPHHm8Od6w Button Text Enter the text to be displayed on the login screen . Login with Keycloak Leave the remaining configurations as default, then click Save Changes and Refresh OAuth Services. In test environments without an SMTP server, disable two-factor authentication under Administration > Settings > General . Your workspace's login page now displays a\u00a0Login with Keycloak\u00a0button. Users can\u00a0log in with their Keycloak credentials! For more information on Keycloak server setup and roles, see Server Administration Guide . In this section, we talk about some advanced configuration options to map and sync your user data. Let's say that you want to add users from a Keycloak group to Rocket.Chat rooms", "tokens": 439}
{"title": "Keycloak", "content": ". For this, keep the following points in mind: The Map Roles/Groups to channels field must be enabled. Provide the Keycloak groups in the Roles/Groups field for channel mapping in the OAuth settings . In the OAuth Group Channel Map field, enter the group to rooms mapping data in the JSON format. From this mapping, users that belong to the specific Keycloak groups are inserted into all the associated Rocket.Chat rooms . For example, the mapping can look like this: If any of the rooms don't exist, Rocket.Chat creates the rooms as public rooms when a user from the Keycloak group logs in . Note that user groups would not be returned from the Keycloak OAuth response by default. So let's look at an example of how to get the groups from Keycloak. In Keycloak, create a group. For example, Managers . Let some users be added to this group. We will map this group to Rocket.Chat rooms. Add a client scope for the group for Rocket.Chat to retrieve, and enter the required information. For example, create a client scope called groups . Now go to Mappers > Add Mapper > By Configuration > Group Membership. Fill in the details of the group membership called groups . The following screenshot shows an example: After saving this, go to Clients and select the client you are using for the Rocket.Chat workspace. Go to the Client scopes tab and click Add client scope . Select the client scope for the group that you just created; in this example, groups. Our Keycloak group is ready to be mapped to Rocket.Chat . In your workspace OAuth settings, enter the following details: Roles/Groups field for channel mapping: groups Enable the Map Roles/Groups to channels setting . Enter the following in the OAuth Group Channel Map field: The following screenshot shows the example: Save your changes. In this way, all users from the Managers group are mapped to the managers-channel room", "tokens": 425}
{"title": "Keycloak", "content": ". Keep the following points in mind: You must set the Roles/Groups field name field as groups. The Merge Roles from SSO option merges and mirrors the Keycloak user roles in the Rocket.Chat workspace . If you add or remove roles in Keycloak, this is replicated in Rocket.Chat. In the Roles to Sync field, you can specify a list of role names to be mirrored on every new user login and sync . Make sure that you create roles in Rocket.Chat with the same names as in Keycloak for this to work successfully.", "tokens": 123}
{"title": "OAuth", "content": "Open Authorization (OAuth) is an authorization protocol that acts as an intermediary and facilitates secure access to third-party applications without sharing user credentials, thereby protecting specific resources. Instead of usernames and passwords, OAuth uses tokens, serving as temporary access keys. Rocket .Chat offers integrations with various providers such as Google, Apple, and GitHub. This provides flexibility and security so users can log in with any of these credentials. You can also configure custom OAuth methods . This section guides you through the required configuration details of each supported method. Controlled access: With the authentication methods, you can decide the user data that the workspace can access . Single Sign-On (SSO): Users can sign in to the workspace without creating new usernames and passwords. Flexibility: You can choose the authentication methods you want to implement in your workspace from the list of available options . Furthermore, you can also set up your own custom OAuth methods in your Rocket.Chat workspace. Go to Administration > Workspace > Settings> OAuth. You can view a list of some OAuth methods that are supported by Rocket .Chat, including Google, Github, LinkedIn, etc. Select the method that meets your needs and provide the configuration parameters. Refer to the sub-sections where we go into the details of each method . To update the options shown on your workspace login page based on your saved settings, click Refresh OAuth Services. OAuth apps will have full access to user accounts, including the ability to perform any action on behalf of the user . You must proceed carefully while logging in and refuse access if you don\u2019t trust the OAuth app. To add a custom OAuth: Click Add custom OAuth. Give a unique name for your custom OAuth. Click Add . When configuring your OAuth Provider, you must include a Rocket.Chat callback URL. You will find this URL once you add a custom OAuth method. For example, https://yourcompany.rocket .chat/_oauth/customoauth You can enable this method now or after you have configured the settings: Field Description Example value URL The URL that is issued from the identity provider. Okta: https://dev-9879999.okta", "tokens": 504}
{"title": "OAuth", "content": ".com/oauth2/v1 Token Path The token endpoint from the identity provider is used to obtain access tokens. /token Token Sent Via Select whether the token is sent via Header or Payload . Header Identity Token Sent Via Select whether the identity token is sent via Header, Payload, or the same method as the Token sent via field. Token sent via Identity Path The user information endpoint is used to retrieve user data . Enter the path from the user endpoint. Okta: /userinfo Authorize Path Enter the path from the authorization endpoint . Okta: /authorize Microsoft: /oauth2/authorize Scope The scope defines the user access level and permissions that you have configured in the identity provider . Okta: openid email profile groups offline_access Microsoft: openid profile email Param Name for access token The name of the access token. access_token Id The client ID value from your identity provider . 0oafgyq3qdYPHa55555 Secret The client secret value from your identity provider . QTrbVadjfjhurUzsJHRbteQPHHm8Od6w Login Style Select the type of the login screen . The options are: Redirect Popup Default Popup Button Text Enter the text that will be displayed on the login button. Login with Microsoft Button Text Color Enter the color of the login text . Changing the colors may result in non-compliance with WCAG (Web Content Accessibility Guidelines) requirements. Ensure that the new colors meet the recommended contrast and readability standards to maintain accessibility for all users . #FFFFFF Button Color Enter the color of the login button. #1d74f5 Key Field Select the field with which users can log in and which will maintain unique user IDs", "tokens": 381}
{"title": "OAuth", "content": ". The options are: Username Email Email Username field With this field, you can prevent users from selecting their own usernames while signing in for the first time. Thus, users will retain the usernames from the identity provider, maintaining consistency . Okta: In the Okta profiles of your users, enter values in the Nickname field. In your Rocket.Chat custom OAuth method, enter nickname value for this field. Microsoft: You can refer to the userinfo endpoint for details . Email field Enter the supported email claim key. Microsoft: email Name field Enter the supported name claim key. Mircosoft: given_name, family_name, or name Avatar field Enter the user avatar field from your identity provider", "tokens": 152}
{"title": "OAuth", "content": ". Okta: picture Show Button on Login Page Enable this option to show the login button on the workspace login screen. Sync configurations Roles/Groups field name Enter the roles or groups field from the identity provider . This will be used to identify which roles or groups need to be merged when the Merge Roles from SSO field is enabled. roles Roles/Groups field for channel mapping Enter the roles or groups field from the identity provider . This will be used to identify the field that should be used to map roles/groups to Rocket.Chat channels. Okta: If you have groups for the users, Okta can return the groups claim . See the Okta OpenID Connect and OAuth 2.0 guide for details. Keycloak: For an example of how the mapping works in Keycloak, see the Advanced Configuration example . User Data Group Map The admin user used to create rooms defined in the OAuth Group Channel Map field. rocket.cat Map Roles/Groups to channels Enable this option to add users to Rocket.Chat channels . Merge Roles from SSO Enable this option to merge user roles from the identity provider to the Rocket.Chat users. Roles to Sync List the roles (comma-separated values) that should be synced when the Merge Roles from SSO option is enabled . Merge users Enable this option to allow users from OAuth to be merged with existing users on the Rocket.Chat database. Merge users from distinct services Enable this option to allow users from OAuth to be merged with existing users regardless of their origin service . OAuth Group Channel Map From this mapping, users that belong to the specific groups are inserted into all the associated Rocket.Chat rooms. Note the following points: For this, the Map Roles/Groups to channels field must be enabled . You must also provide the groups in the Roles/Groups field for channel mapping field. Rooms will be created in Rocket.Chat if they don\u2019t exist. The User Data Group Map value will be set as the room owner . Here, Managers is the group in the identity provider and managers-channel is the channel in Rocket.Chat. Users in the Managers group will be automatically added to managers-channel upon user login or user account creation . Save the changes once you\u2019ve configured the custom OAuth method. Next, let's delve into the configuration details of each of the supported OAuth options in the following sections.", "tokens": 505}
{"title": "Facebook OAuth Setup", "content": "You can use your Facebook credentials to access your Rocket.Chat workspace. A Facebook developer account. A Facebook app that uses Facebook Login. In the app settings, for the Valid OAuth Redirect URIs field, enter the Facebook Callback URL that you will find in your Rocket.Chat workspace (go to Administration > Workspace > Settings> OAuth). To view the OAuth credentials of your Facebook app, select App Settings > Basic. Copy your App ID and App Secret. You will need these to enable Facebook login in your workspace. Navigate to OAuth settings (Administration > Workspace > Settings> OAuth). In the Facebook tab, enable Facebook Login and fill in the Facebook App ID and Facebook Secret you copied earlier. Click Save changes. A Sign in with Facebook button appears on your workspace's login page. Users can now Sign in with Facebook by clicking that button!", "tokens": 197}
{"title": "Google OAuth Setup", "content": "Signing in with Google is a hassle-free and secure way to access a large number of web applications today. Learn how you can set up Google sign-in for your users on this page. A project on the Google Cloud console. A consent screen. You can create one from API & Services > OAuth consent screen and fill in the required fields. Credentials \u2014 the client ID and secret. You can create the credentials by clicking New Credentials and then selecting OAuth client ID. Select Web application as the application type, then fill in the required details. The authorized redirect URIs that you need to enter are as follows: It is necessary to register with ?close to avoid receiving a Erro 400: redirect_uri_mismatch \u00a0(reference) After creating the OAuth client, copy the client ID and secret displayed or download the JSON file. On your Rocket.Chat workspace, navigate to Administration > Workspace > Settings > OAuth > Google. Enable Google Login and fill in the OAuth credentials you copied earlier. Click Save changes. A Sign in with Google button appears on your workspace's login page. Users can now Sign in with Google!", "tokens": 251}
{"title": "GitLab OAuth Setup", "content": "Use the GitLab OAuth option to enable your users to log in with the GitLab credentials. A GitLab application. The application ID and secret. If you don't have a GitLab app, go to GitLab Applications. Fill in the details, select the scopes, and save your app. After the application is created successfully, the OAuth credentials are displayed. Copy the Application ID and Secret. Navigate to OAuth settings (Administration > Workspace > Settings > OAuth) in your workspace. In the GitLab tab, enable OAuth. Fill in the GitLab Id and Client Secret you get from your GitLab app. If you are self-hosting a GitLab instance, enter your GitLab URL. By default, the value is https://gitlab.com. The Identity Path value is appended to the GitLab URL to complete the URL which is used to get the user's information during login. Click Save Changes. A Sign in with GitLab button appears on your workspace's login page. Users can now Sign in with GitLab by clicking that button!", "tokens": 253}
{"title": "GitHub OAuth Setup", "content": "You can sign in to your Rocket.Chat workspace by enabling GitHub or GitHub Enterprise OAuth. A GitHub or GitHub Enterprise account. A GitHub OAuth app and the client ID and secret. If you don't have an app, go to your GitHub Developers Settings, navigate to OAuth Apps, and click New OAuth App. Fill in the required information, including the Authorization callback URL, and save your app. Your Client ID and a button to Generate a new client secret are now displayed. Click the button to generate a new client secret for your OAuth credentials. Copy both the client ID and the secret. Retrieve the Authorization Callback URL from the GitHub tab in your Rocket.Chat workspace. You can find it in the GitHub Callback URL section. If your callback URL is wrong, GitHub does not display any error. Instead of logging in, you receive an error message saying, No matching login attempt found. Navigate to OAuth settings (Administration > Workspace > Settings > OAuth) in your workspace. In the GitHub tab, enable OAuth and fill in the Client Id and Client Secret you copied earlier. For GitHub Enterprise, add your Server URL also. Click Save changes. A Sign in with GitHub button appears on your workspace's login page. Users can now Sign in with GitHub by clicking that button!", "tokens": 316}
{"title": "LinkedIn OAuth SetupNextcloud OAuth Setup", "content": "Rocket.Chat provides you the option to sign in your users with the LinkedIn social media platform credentials. A LinkedIn app with OAuth sign-in. The client ID and secret. If you don't have an app, go to LinkedIn Developers Portal. Click Create app. Fill in the required information and save your app. In the Authentication section, select the OAuth 2.0 sign-in option. Make sure to enter the callback URL and copy the client ID and secret. Navigate to OAuth settings (Administration > Workspace > Settings > OAuth) in your workspace. In the LinkedIn tab, enable LinkedIn Login. Fill in the LinkedIn and Linked Secret you copied earlier. Click Save changes. A Sign in with LinkedIn button appears on your workspace's login page. Users can now Sign in with LinkedIn by clicking that button! Nextcloud is an open-source storage, collaboration, and communication tool. Rocket.Chat provides you the option to sign your users into your workspace with the Nextcloud credentials. This enhances your control over your data, giving you a high level of security and privacy. Administrator access to Nextcloud. An OAuth-enabled app on Nextcloud with the callback URL defined. The app client ID and secret. Login to your Nextcloud server as admin Navigate to OAuth settings (Administration > Workspace > Settings > OAuth) in your workspace. In the Nextcloud tab, enable OAuth. Fill in your Nextcloud Server URL, Nextcloud Id, and Client secret. You can also modify how the sign-in button looks. Enter the value for the Button Text setting. Click Save Changes. A Sign in with Nextcloud button appears on your workspace's login page. Users can now Sign in with Nextcloud by clicking that button!", "tokens": 403}
{"title": "WordPress OAuth Setup", "content": "Rocket.Chat provides you with the option to log your users into your workspace with WordPress. Along with the benefits of unified user authentication and management, you can also control access to any data or APIs associated with your WordPress site . Furthermore, you can take advantage of the customization options and modify the OAuth functionality based on your needs. A WordPress account. An OAuth Server plugin that will add OAuth functionalities to your site or a custom OAuth server implementation . Copy the values of the client ID and secret. In your Rocket.Chat workspace, Navigate to OAuth settings (Administration > Workspace > Settings > OAuth). Scroll down to the WordPress tab and enable WordPress Login . Enter the values for the following fields: WordPress URL: The URL of your WordPress site. WordPress Id and WordPress Secret: Get the values from the OAuth server plugin associated with your site. Select a Server Type from the drop-down menu . You have three options as per your requirements: WordPress.com: Select this option if you are using your WordPress account to log in with the help of an OAuth Server plugin . WP OAuth Server Plugin: Select this option if you are using the WP OAuth Server plugin provided by miniOrange to use your site as an OAuth Server. Custom: Select this option if you are implementing a custom OAuth Server . If you select the Server Type as WordPress.com or WP OAuth Server Plugin, the rest of the fields are non-editable . If you select the Server Type as Custom, enter the values for the following fields provided by the OAuth Server plugin that you are using: Identity Path, Token Path, Authorize Path: These three path fields refer to the requests that Rocket .Chat makes to WordPress during the login process. Identity Token Sent Via: This field refers to how the user identification token is sent with the requests. The options to send it are in the request header or in the request parameters . The plugin may support one or both of these options. Scope: Refers to the list of user information that Rocket.Chat needs to access. You must select the valid values in the plugin settings. Click Save changes", "tokens": 485}
{"title": "WordPress OAuth Setup", "content": ". A Sign in with WordPress button appears on your workspace's login page. Users can now Sign in with WordPress by clicking that button! For button customization, your inputted button text won't be displayed . However, the app will display your custom OAuth name at the top. Whenever you have an issue with OAuth in WordPress, enable Level 2 Logging to view your logs. Go to Administration > Logs > Log Level > View Logs . While monitoring the log, open the login screen in an incognito browser and attempt a login. The log displays the OAuth response in real-time, which provides helpful troubleshooting information . Visit this forum for more information on troubleshooting for the error \"The redirect URI provided is missing or does not match.\"", "tokens": 177}
{"title": "MS Office 365 Custom OAuth Setup", "content": "In addition to the OAuth methods that Rocket.Chat provides for user authentication, you can also choose to set up a custom OAuth method. This guide shows how to set up a custom OAuth integration between Microsoft accounts and Rocket.Chat . This is achieved with Microsoft Entra ID (formerly called Azure Active Directory), which is an identity service by Microsoft that provides single sign-on and other authentication methods. You can also define conditional access policies and role-based permissions . An account on the Azure portal. An Azure Active Directory web application (Microsoft identity platform). An application ID and client secret. If you don't have an app, log in to the Azure Portal and go to the Microsoft Entra ID section . Create a new App Registration. Fill in the details. You will get the redirect URI from your Rocket.Chat workspace when you Create Custom O365 OAuth . After registering your new app, note the\u00a0Application (client) ID and the Directory (tenant) ID. You will need these values to configure the integration in Rocket.Chat . On your new app's page, go to the Certificates and Secret tab to create a New client secret. Make sure you note the secret value. To create a custom authentication method in your Rocket .Chat workspace, follow these steps: Go to Administration > Workspace > Settings > OAuth. Click on Custom OAuth and enter a name for the new OAuth integration. After creating the new integration, you are given the Callback URL", "tokens": 322}
{"title": "MS Office 365 Custom OAuth Setup", "content": ". For example, https://<your-domain>/_oauth/ms365. Enter this as the redirect URI when you are creating your Azure app. You will also need to fill in other configuration fields . In your workspace, enable the custom OAuth and set the following fields as per your requirements: Field Description URL Enter the URL in the format https://login.microsoftonline.com/{tenant ID}. You can get the tenant ID from your Azure application overview . For details, refer to Microsoft\u2019s access tokens guide. Token Path Enter the token endpoint path /oauth2/token. If you are using v2, the path looks like this: /oauth2/v2.0/token . Token Sent Via For this example, select the Payload option. Identity Token Sent Via For this example, select the Header option. Identity Path Enter the userinfo endpoint path /openid/userinfo . If you are using v2, the path looks like this: https://graph.microsoft.com/oidc/userinfo. Authorize Path Enter the authorization endpoint path /oauth2/authorize . If you are using v2, the path looks like this: /oauth2/v2.0/authorize. For details, see the Microsoft ID tokens guide. Scope For this example, enter the scope value as openid profile email . For details, see the userinfo endpoint. Param Name for access token For this example, enter the value access_token. Id Enter the Azure application\u2019s Application (client) ID value . For example, 9ddab834-xxxx-xxxx-xxxx-818915f043db. Secret Enter the Azure application\u2019s client secret value", "tokens": 394}
{"title": "MS Office 365 Custom OAuth Setup", "content": ". For example, 7Cz8Q~EphyoaSjmxxxxxxxxxxxxxxxdTqu3KEaaB. Login Style Select the type of the login screen . The options are: Redirect Popup Default Button Text Enter the text that will be displayed on the login button. For example, Login with Microsoft. Button Text Color Enter the color of the login text. For example, #FFFFFF . Changing the colors may result in non-compliance with WCAG (Web Content Accessibility Guidelines) requirements. Ensure that the new colors meet the recommended contrast and readability standards to maintain accessibility for all users. Button Color Enter the color of the login button . For example, #1d74f5. Key Field Select the field with which users can log in and which will maintain unique user IDs. The options are: Username Email In this example, select the Email option . Username field Enter the supported username claim key. Note that the supported claims may differ for v1 and v2. Refer to the userinfo endpoint for details. Email field Enter the supported email claim key. For example, email . Name field Enter the supported name claim key. For example, given_name, family_name, or name. After saving, you will find the O365 OAuth button on the login and signup page . Simply sign in to your Microsoft account to authenticate! Rocket.Chat uses the identity path (userinfo) endpoint to get the information on roles. Since the MS Office 365 identity path endpoint does not return this information, the roles cannot be synced with Rocket .Chat currently.", "tokens": 353}
{"title": "Additional OAuth Methods", "content": "Rocket.Chat supports several other OAuth methods. On this page, we cover the configuration parameters of the remaining methods. You can find the values of the required fields such as the client ID and secret from your OAuth provider . To enable Apple OAuth on your workspace, Navigate to OAuth settings (Administration > Workspace > Settings > OAuth). In the Apple tab, enable Sign in with Apple . Enter the values for the following fields: Accounts_OAuth_Apple_id Accounts_OAuth_Apple_secretKey Accounts_OAuth_Apple_iss Accounts_OAuth_Apple_kid If you want Apple login enabled only on mobile, you can leave all fields empty . Use the Twitter social media platform as an authentication provider to sign your users into your Rocket.Chat workspace. On the Twitter Developer Portal, navigate to the Apps page to create or view your existing apps . To enable Twitter OAuth on your workspace, Navigate to OAuth settings (Administration > Workspace > Settings > OAuth). In the Twitter tab, enable Twitter Login . Enter the values for the following fields: Twitter Id: The OAuth ID of your Twitter OAuth app. Twitter Secret: Your Twitter OAuth app secret. Tokenpass provides token management and authentication services, specifically for blockchain and cryptocurrencies . To use it as an OAuth provider, create an application on the Tokenpass developers portal for OAuth integration. To enable Tokenpass OAuth in your workspace, Navigate to OAuth settings (Administration > Workspace > Settings > OAuth) . In the Tokenpass tab, enable Tokenpass Login. Enter the values for the following fields: Tokenpass Server URL: Your server URL. Example https://domain.com (excluding trailing slash). Tokenpass Id: Tokenpass app ID . Tokenpass Secret: Your Tokenpass app secret. Drupal is a free and open-source content management system used to build websites and web apps. It provides a user authentication system that supports accounts, roles, and permissions. Rocket", "tokens": 455}
{"title": "Additional OAuth Methods", "content": ".Chat offers you the option to authenticate your users with Drupal as an OAuth provider. Drupal OAuth is made possible with the OAuth2 Client module. Follow this guide to create client credentials . To enable Drupal OAuth in your workspace, Navigate to OAuth settings (Administration > Workspace > Settings > OAuth). In the Drupal tab, enable the Drupal Login Enabled option. Enter the values for the following fields: Drupal Server URL: Your server URL . Example https://domain.com (excluding trailing slash) Drupal oAuth2 Client ID: The OAuth ID from the Drupal configuration. Drupal oAuth2 Client Secret: Your Drupal OAuth secret. Dolphine 7.x will no longer be supported . Refer to the new Dolphin solution for more information. Visit this configuration page to see how to see how you can link your workspace to Dolphin . To enable Dolphin OAuth in your workspace, Navigate to OAuth settings (Administration > Workspace > Settings > OAuth) in your workspace. In the Dolphin tab, click Enable to enable Dolphin OAuth . Enter the values for the following fields: URL: Enter the URL from the information section of the OAuth2 module. Id: Dolphin connect ID. Secret: Dolphin connect secret. Login Style: A dropdown to select the login style . You can choose Redirect, Popup, or the Default option. Button Text: Text to be displayed on the OAuth button. Okta is a widely used identity management platform that provides secure authentication and user management . You can use Okta as your OAuth method by creating a custom method in Rocket.Chat. Go to your Okta developers panel and create a new OAuth app for a web application. Fill in all the required information and save . Your new app is created with all the credentials needed for configuration. To use Okta OAuth, you need to go to the OAuth section of your Rocket.Chat settings and create a custom OAuth . Navigate to OAuth settings (Administration > Workspace > Settings > OAuth). Create a custom OAuth. Fill in all the required details and save . A proxy server in the context of OAuth refers to an intermediary server that acts as an OAuth provider on behalf of an application. With this option, you can set up a proxy service as an OAuth method. Proxy Host: The OAuth proxy host . Proxy Services: The OAuth proxy service.", "tokens": 561}
{"title": "OpenID Connect", "content": "OpenID Connect is a simple identity layer on top of the OAuth 2.0 protocol. While OAuth is used to protect access to specific resources, OpenID Connect is used to create a secure sign-in process. Rocket.Chat's implementation of OpenID Connect is compatible with several providers, including Keycloak and Okta Identity Cloud Service. This compatibility ensures that users can authenticate with their existing OpenID provider, enhancing the flexibility and convenience of the Rocket.Chat platform. You can set up the following by creating custom OAuth methods: Keycloak Okta Identity Cloud Service", "tokens": 127}
{"title": "Okta Identity Cloud Service", "content": "Using Okta as an OpenID Connect identity provider is similar to using it as an OAuth provider, but OpenConnect ID has additional features specific to identity and access management. You can find more information on the OAuth 2 .0 and OpenID Connect overview page. Okta Identity Cloud Service can be integrated with Rocket.Chat via its OpenID Connect support. This guide walks you through a basic example setup. In your Rocket .Chat workspace, follow these steps: Go to Administration > Settings > OAuth. Click Add Custom OAuth. Provide a unique name for the custom OAuth. For example, Okta. Click Add. Make note of the callback URL . You will need this to configure the Okta app. For example, https://dev.rocket.cat/_oauth/okta Now, in your Okta developer account, follow these steps: Create a new app integration on your Okta application dashboard . Select the Sign-in method as OIDC - OpenID Connect. Select the Application type as Web Application. Click Next. Provide a name for the new web app integration . For the Sign-in redirect URIs field value, enter the callback URL you got from the Rocket.Chat workspace. For this example, we will select the Assignments value as Allow everyone in your organization to access . Alternatively, you can assign users or groups to the app. Click Save. The application is created. Copy the client ID and the client secret values. You will need these values to configure Okta as the identity provider in Rocket.Chat In your Rocket .Chat workspace and follow these steps: Login to Rocket.Chat with an administrator account and go to Administration > Settings > OAuth. Select the custom OAuth method that you created and enable it . Enter values for the following details: To view the endpoints, you can access the discovery document from https://<your-okta-domain>/.well-known/openid-configuration Refer to the OpenID Connect & OAuth 2 .0 API documentation for the endpoints\u2019 details. Field Description Example URL The URL to your Okta domain with a suffix of /oauth2/v1 https://dev-9879999.okta", "tokens": 491}
{"title": "Okta Identity Cloud Service", "content": ".com/oauth2/v1 Token Path The token endpoint is used to obtain access tokens. /token Token sent via Select whether the token is sent via Header or Payload . Header Identity Token Sent Via Select whether the identity token is sent via Header, Payload, or the same method as the Token sent via field. Token sent via Identity Path The user information endpoint is used to retrieve user data . Enter the path from the user endpoint. /userinfo Authorize Path Enter the path from the authorization endpoint. /authorize Scope The scope defines the user access level and permissions . openid email profile groups offline_access Param Name for access token The name of the access token. access_token Id The client ID from the Okta web app . 0oafgyq3qdYPHa55555 Secret The client secret from the Okta web app . QTrbVadjfjhurUzsJHRbteQPHHm8Od6w Key Field The field that will be used to maintain unique user IDs. You can use the Email or Username . Email Username field: With this field, you can avoid the possibility of users selecting their own usernames while signing in for the first time. Thus, users will retain the usernames from Okta, maintaining consistency . To do this, follow these steps: In your Okta account, go to the People tab. Select the Profile of a user. Provide a value for the Nickname field. Now in your Rocket.Chat workspace, enter nickname for the Username field . Avatar field: Enter picture to use the Okta user avatars. Click Save changes. You are now all set! Your users from Okta can now log in to the Rocket.Chat workspace . You can also set the values of other fields according to your requirements.", "tokens": 391}
{"title": "Iframe-based Single Sign-On", "content": "With an iframe-based single sign-on, you can implement authentication within an iframe (inline frame) embedded in a webpage. You can authenticate users inside Rocket.Chat automatically from a third-party application . It can be useful when embedding the chat inside another application to make the users' lives easier. You can use the iframe integration in combination with deeplinking and resumeToken. There are two ways to use the iframe integration for this purpose", "tokens": 104}
{"title": "Iframe-based Single Sign-On", "content": ". It's important to note that both options require you to handle the user creation from your own application server using our APIs and make the login to retrieve the user's session token to pass it to the Rocket .Chat client via one of these ways: If you already have Rocket.Chat inside an iframe, you can use call commands inside that iframe. There is a command to log in the user passing a token . Retrieve the token from your APIs and then pass it to the iframe. Call your API to retrieve the token, for example /api/rocketchat/token Your API will validate your session, probably via cookies. Your API will then call the Rocket .Chat APIs to check if the user exists. If it doesn't exist, call the Rocket.Chat APIs to create the user. If the user exists, call the Rocket.Chat APIs to make the login and receive the token . Return the token in your API response. In your client, with the token, call the iframe methods to execute the login. This flow requires a page to be rendered in place of the normal Rocket.Chat's login page . It can be a basic loading screen since it's just for information. The other setting you configure here is the API URL and Method to be called once an unauthenticated user opens the Rocket.Chat. Then Rocket .Chat will make an HTTP call to your endpoint, expecting a JSON response containing the authToken. You should use cookies to identify if the user calling your API is authenticated and make the process to generate the Rocket.Chat's token and return it: Rocket .Chat will call the configured API and Method to retrieve the token. The API should validate your session via cookies. The API will then call the Rocket.Chat APIs to check if the user exists. If it doesn't exist, call the Rocket .Chat APIs to create the user. If the user exists, call the Rocket.Chat APIs to make the login and receive the token. Return the token in your API response in JSON format as described here. Rocket", "tokens": 454}
{"title": "Iframe-based Single Sign-On", "content": ".Chat will use the token automatically to make the authentication. For this implementation, configure CORS and X-FRAME: Your server should not block the page you want to load inside the iframe . See X-FRAME for more information on how to prevent this. Your server should not block the calls from Rocket.Chat's domain to your configured API endpoint. Calls between domains are often blocked by default . See CORS for more information on how to prevent this. Along with the authentication options highlighted in this section, iframe-based sign-on also helps you integrate multiple web applications and create a seamless user experience.", "tokens": 134}
{"title": "CAS", "content": "Central Authentication Service (CAS) allows users to use one set of credentials to sign in to many sites over many protocols. Rocket.Chat includes a CAS plugin that allows you to use your existing CAS server for user authentication . For more information on CAS, see the CAS github repo. To access this setting, navigate to Administration > Workspace > Settings > CAS. Your Rocket.Chat workspace is the CAS client. You must provide a compatible CAS Server . Once you know your CAS server's URL, proceed with the settings below Enabled: Enable CAS on your workspace SSO Base URL: The base URL of your external SSO service, e.g https://sso.example .undef/sso/ SSO Login URL: The login URL of your external SSO service, e.g https://<<CAS_server_url>>/cas/login CAS Version: Only use a supported CAS version supported by your CAS SSO service, e .g (1.0|2.0) The /cas and /cas/login URLs are defaults but not mandatory. Check with your CAS server provider if the defaults do not work. Trust CAS username: When enabled, Rocket .Chat trusts that any username from CAS belongs to the same user on Rocket.Chat. This may be needed if a user is renamed on CAS, but may also allow people to take over Rocket.Chat accounts by renaming their own CAS users . Allow user creation: Allows CAS user creation from data provided by the CAS ticket when enabled. Always Sync User Data: When set to true, external CAS user data is synchronized into available attributes upon login . Note that attributes are always synced upon account creation anyway. Attribute Map: Use this JSON input to build internal attributes (key) from external attributes (value). External attribute names enclosed with '%' are interpolated in value strings . Example, {\"email\":\"%email%\", \"name\":\"%firstname%, %lastname%\"} The attribute map is always interpolated. In CAS 1.0, only the username attribute is available . Available internal attributes are username, name, email, and rooms; rooms are a comma-separated list of rooms to join upon user creation, e.g", "tokens": 495}
{"title": "CASUser Management", "content": ".: {\"rooms\": \"%team%,%department%\"} would join CAS users on creation to their team and department channel. Login Popup Width: Lets you set the width in px of the popup screen during login . Login Popup Height: This lets you set the popup height in px. Login Button Label: Set the button's label . Login Button Text Color: Sets the button text color Login Button Background Color: Sets the button background color Autoclose Login Popup: When enabled, the popups automatically close after authenticating. Click Save changes once you are done . After successful configuration, your registration and login screens have the CAS button available. It is recommended that you use a Trusted CA Signed SSL Certificate. Any Drupal 7 or 8 sites can serve as a compatible CAS Server . To learn more, see the Drupal project guide. Rocket.Chat provides the following advanced communication management features for Enterprise workspaces. Create custom roles: Create new user roles apart from the default ones in your workspace and assign specific permissions to them. Manage user devices: Get information about the devices logged into your workspace and manage access. Audit messages: Ensure security standards compliance with message auditing for all channels, direct messages, and omnichannel rooms. Rocket.Chat also provides access control features to assign auditing permissions to specific users. In the following sections, you can find further information about each feature.", "tokens": 313}
{"title": "Custom RolesDevice Management Settings", "content": "As a workspace administrator, you can create new roles and assign specific permissions to them in your workspace. For Rocket.Chat workspaces on version 6.x.x and above, creating new roles and editing custom role permissions are exclusively accessible to workspaces subscribed to the Enterprise plan. To create a new role, Navigate to Administration > Workspace > Permissions. Click on New role. A side panel opens. Provide the details required: Role: Name of the role. Description: Set a description of the role. Scope: Select the scope of the role. Users must use Two Factor Authentication: Users assigned to this role are prompted for a 2FA code. Click Save. To assign permissions to a role, select the corresponding permission checkbox under the role. For more information, see Roles and Permissions. Configure security and access control policies for device management To access this setting, navigate to Administration > Workspace > Settings > Device management. Enable login detection emails: When enabled, emails are sent to workspace members each time new logins are detected on their accounts. Allow workspace members to turn off login detection emails: When enabled, individual members can set their preferences. It is useful when frequent login expirations are set, causing members to log in frequently.", "tokens": 273}
{"title": "Message Auditor", "content": "Rocket.Chat allows authorized users to audit messages and read conversations in a workspace. The user must have an auditor role and Can Audit permission to access the Audit Messages Panel . As an organization, you may also want to inspect the omnichannel conversations and watch out for agents who use improper language with customers. An auditor can do the following: Review messages in private rooms. Review messages by users . Review direct messages between users. Review omnichannel messages. Check the audit history of individuals using the Message Audit Logs. To access the Audit Messages Panel, Navigate to Administration > Audit > Messages . If you can't find the audit options, you can get in touch with your workspace administrator to assign message auditing permissions to you. You can sort messages with various filters in your workspace", "tokens": 164}
{"title": "Message Auditor", "content": ". To search for a specific message in a room: Update the Message field with the key phrase of the message you are searching. To retrieve all messages, leave the Message field empty . Select the start and end date to limit the search results to a specific time frame. Thethree-dots icon also provides other time range options like Today, Last Week, etc . Select the room you want to search from the Channel drop-down menu. Click Apply to reveal the messages between the periods. To search for a specific message by users: Update the Message field with the key phrase of the message you are searching . To retrieve all messages, leave the Message field empty. Select the start and end date to limit the search results to a specific time frame. Thethree-dots icon also provides other time range options like Today, Last Week, etc . Type the username and select the users for which you want to search messages in the Users field. Click Apply. The selected users' conversations between those periods that match the search phrase are displayed . To search for a specific message by a direct message (DM): Update the Message field with the key phrase of the message you are searching. To retrieve all messages, leave the Message field empty . Select the start and end date to limit the search results to a specific time frame. Thethree-dots icon also provides other time range options like Today, Last Week, etc . Select at least two users whose direct messages you want to check in the Users field. Click Apply. The conversations between the users selected in that time frame that matches the search phrase are displayed . To search for a specific Omnichannel conversation: Update the Message field with the key phrase of the message you are searching. To retrieve all messages, leave the Message field empty . Select the start and end date to limit the search results to a specific time frame. The  three-dots icon also provides other time range options like Today, Last Week, etc. Enter the visitor or contact\u2019s name in the Visitor field", "tokens": 413}
{"title": "Message AuditorAudit Edits, Deletions, and Encrypted Communications", "content": ". Enter the agent's name who served the conversation you want in the Agent field. Click Apply. The conversations between the agent and the visitor are displayed. The Auditor permission grants users access to the Audit Messages feature . As a workspace administrator, you can assign this permission to any role you want to give audit access to. To assign message audit permissions: Navigate to Administration > Workspace > Permissions . To access the Audit Messages Panel, select the Can Audit checkbox under the role you want to assign. In the following sub-sections, you can find more information about modifying your search results and checking the audit logs. According to your requirements, you can audit encrypted, edited, and deleted messages. Learn how you can modify the workspace settings to audit such messages. The Audit Messages Panel returns all messages that match the search values defined in the mandatory fields for each option. However, the auditor cannot read the encrypted messages of other users. If you want to audit these messages, Rocket.Chat recommends that you disable message encryption. To disable message encryption: Navigate to Administration > Workspace > Settings > E2E Encryption. Toggle off the Enabled option to disable E2E Encryption. Click Save Changes. Rocket.Chat lets you view any message history, including modified or removed messages. You need to update the message history settings as follows: Navigate to Administration > Workspace > Settings > Message. Enable Allow Message Editing and Keep Per Message Editing History to see a history of all messages and not only the last edit made. Disable Allow Message Deleting. Otherwise, messages show only the deleted status, and you cannot see the complete message history.", "tokens": 347}
{"title": "Audit Logs", "content": "The Audit Logs Panel allows you to verify who runs audits and when a conversation was inspected. The user must have an auditor-log role and Can Audit Log permission to access the Audit Logs. To access the Audit Logs Panel, Navigate to Administration > Audit > Logs. If you are interested in the entire log history, clear the start and end date fields in the date picker. The full log history results are returned, from the oldest to the most recent audits. If you want to see who audited the messages within a specific time frame, select the start and end dates from the date picker. The kebab menu also provides other time range options like Today, This Week, etc. The Audit Logs page returns the following information: User: The name, username, and avatar of the auditors. Looked for: The search term entered for each audit. When: The date and time when each audit was made. Results: The number of search results returned by each audit. Filters applied: Filters that were applied for each audit depending on the type of audit, such as the dates and the channels.", "tokens": 228}
{"title": "Omnichannel Admin's Guide", "content": "Configure the Omnichannel settings to streamline conversations from various communication channels into Rocket.Chat. Omnichannel provides the ability to set up and receive conversations from pop-up Livechat widgets on your website or channels like Facebook to your Rocket.Chat workspace . To access the Omnichannel menu, go to Administration > Workspace > Settings > Omnichannel. The settings are as follows: Remember to click Save changes to apply any changes made here . Omnichannel enabled: When set to true, it enables the Omnichannel feature on your Rocket.Chat workspace . Workspace administrators and omnichannel managers can now see the Omnichannel section to manage, while Omnichannel Agents have access to their respective Omnichannel features. Allow visitors to finish conversations: Disable this option to prevent visitors from closing ongoing conversations . This hides the Finish this Chat button on the widget and blocks the Close Livechat Room API for visitors, allowing only agents to close conversations. Request comment when closing conversation: If enabled, the agents must add a comment before closing a chat . Accept new omnichannel requests when the agent is idle: Enable the option to let Omnichannel agents receive new chat requests when they are idle . Continuous sound notifications for new omnichannel room: Set notification sound for a new omnichannel room. File Uploads Enabled: Enable this option to allow file uploads on Omnichannel communication channels . Ask visitors if they would like a transcript after chat closed: When enabled, Omnichannel visitors are asked if they require a transcript of their conversation after closing the chat . Always send conversation transcript to visitors via email: Enable this option to automatically send the conversation transcript to visitors via email after the conversation is finished, regardless of the agent's preferences . Include system messages in transcripts: Enable this option to include system messages in the conversation transcripts, such as, when the chat starts, when someone joins the conversation, and when the chat is closed", "tokens": 426}
{"title": "Omnichannel Admin's Guide", "content": ". Message to Show When Asking About Transcript: This allows you to set a message that is displayed to the visitor when asking if they require a transcript. Custom email subject for transcript: Enter an email subject for the transcripts sent via email . If you don\u2019t enter a custom email subject in this setting, the default subject is used - Transcript of your omnichannel conversation. Agents can override this value by passing a subject property when closing a room . Enable department removal: Once departments are removed, there is no option to restore them. We recommend archiving the department instead", "tokens": 121}
{"title": "Omnichannel Admin's Guide", "content": ". Manage the following Omnichannel Livechat widget appearance settings: Livechat Title: Enter the title that is shown on your Livechat widget. Livechat title background color: The Livechat background color . Enable message character limit: Enable the option to set a message character limit. Livechat message character limit: Set a limit on message characters allowed on the visitor . Display Offline Form: When enabled, the offline form is displayed to visitors when there is no available agent. Clear guest session when chat ended: Enable the option to clear guest session when a chat ends . Validate Email Address: Enable the option to validate the visitor's email address. Offline Form Unavailable Message: A message to display when the online form is unavailable. Title: The offline form title. Color: The color of the Livechat widget . This also changes the color of the Livechat icon. Instructions: Instructions to your visitor to fill out the form to send a message. Email Address to Send Offline Messages: An email address to which you want all offline messages to be sent . Offline Success Message: The message seen by the visitor after successfully sending an offline message. Allow Visitor to Switch Departments: When enabled, Livechat visitors can switch departments . Show agent information: Enable this option to show information about the agent attending to a visitor in the Livechat widget. Show agent email: When this option is enabled, the Omnichannel agent's email is displayed to the visitor . Conversation Finished Message: Set a message to be sent to a visitor when the conversation is finished. Conversation Finished Text: Additional text to show after a conversation is finished . Show Pre-registration Form: This lets you set whether or not to show the pre-registration form. Show name field: Enable this to show the visitor name field. Show email field: Enable this to show the visitor email field . Monitor History for Changes on: This lets you monitor history changes on the Page URL or Page Title. Send Visitor Navigation History as a Message: When this option is enabled, you can send a visitor's navigation history to them as a message", "tokens": 447}
{"title": "Omnichannel Admin's Guide", "content": ". Registration Form Message: The message seen on the registration form. Livechat Allowed Domains: Comma-separated list of domains allowed to embed the Livechat widget. Leave blank to allow all domains . Send Livechat offline messages to a channel: Whether to send Livechat offline message to a channel. Channel Name: The channel to which Livechat offline messages should be sent . Livechat Widget Additional Scripts: Use this setting to add additional JavaScript scripts to the widget bundle. You can add a list of scripts by separating them with commas, for example: https://yourUrl/customScript1 .js,https://yourUrl/customScript2.js Livechat Widget Additional CSS: Use this setting to add additional CSS to the widget bundle . You can add a list of CSS files by separating them with commas, for example: https://yourUrl/customFile1.css,https://yourUrl/customFile2 .css Livechat widget position on the screen: \u00a0Select the position of the widget on your site - Left or Right. The widget is displayed at the bottom of the page . Livechat background:\u00a0 Enter the widget background color as hexadecimal (#F5455C), a color name (red), or an image using a URL (url('https://example.com/image.png')). This field follows CSS standards . See the background property documentation for details. Hide system messages: \u00a0Select the system messages that you want to hide in the livechat conversations in the widget . The options are as follows: Hide \"User Join\" messages Hide \"User Leave\" messages Hide \"Conversation finished\" messages Hide \"Conversation started\" messages Hide \"Conversation transfered\" messages Hide \"powered by Rocket .Chat\": \u00a0Enable this option to hide the watermark in the widget. Livechat widget logo (svg, png, jpg):\u00a0\u00a0Change the logo of the widget", "tokens": 448}
{"title": "Omnichannel Admin's Guide", "content": ". By default, the following widget logo is displayed: See how to install the Livechat widget and manage the Livechat appearance. Business hours Manage the following business hours settings: Business hours enabled: Enable business hours . Business Hour Type (Single or Multiple): Set the type of business hour. By default, workspaces on the community plan only support the single business hour mode. To learn more about how to optimize business hours in your workspace, see Business Hours . The multiple business hour feature is exclusively available to workspaces subscribed to any of Rocket.Chat's premium plans. See Email Settings and Email Inboxes for details on configurng emails. Integrate your Rocket .Chat Livechat events using webhooks to other external tools or CRMs. Manage the following settings: Webhook URL: The Webhook URL from the system you want to connect (destination) . Secret Token: Enter the secret token that can be used to verify the webhook. The field Secret Token is sent to a header X-RocketChat-Livechat-Token so you can validate if the request became from Livechat . If your endpoint returns a response status other than 200, Rocket.Chat will retry ten times, waiting ten seconds between retries. Send Request on Chat Start: Sends a post request to the webhook endpoint when an Omnichannel chat starts . Send Request on Chat Close: Sends a request when a chat gets closed. Send Request on Chat Taken: Sends a request when an agent joins a chat. Send request on Chat Queued: A request gets sent when a chat gets queued . Send Request on Forwarding: Triggers request to be sent when a chat gets forwarded to another Omnichannel department or agent. Send Request on Offline Messages: Sends a request when a visitor leaves an offline message . Send Request on Visitor Messages: A request is sent when a visitor sends a message. Send Request on Agent Messages: Sends a request when an agent sends a message or reply . Send Visitor Navigation History on Request: Sends a request about a visitor's navigation history. This feature depends on the Send Visitor Navigation History as a Message field to be enabled in the Livechat settings section", "tokens": 475}
{"title": "Omnichannel Admin's Guide", "content": ". Send request on lead capture: Sends a request when a lead is captured. Lead capture email regex: Specify the regex for lead captured email. For example, \\b[A-Z0-9 ._%+-]+@(?:[A-Z0-9-]+.)+[A-Z]{2,4}\\b Lead capture phone regex: Set the regex for lead-captured phone numbers . For example, ((?:([0-9]{1,3})|[0-9]{2})[ -]*?[0-9]{4,5}(?:[-\\s_]{1,2}) ?[0-9]{4}(?:(?=[^0-9])|$)|[0-9]{4,5}(?:[-\\s_]{1,2})?[0-9]{4}(?:( ?=[^0-9])|$)) Livechat_http_timeout: Enter the request timeout value . For additional settings, see Webhooks. Canned responses allow Omnichannel agents to use predefined message replies. You can enable or disable the use of canned responses in your workspace. Enable Canned Responses: Enable the option to use canned replies . For details, see Canned Responses. Configure GDPR data processing and consent . Allow to collect and store HTTP header information: This lets you determine whether Livechat is allowed to store information collected from HTTP header data, such as IP address, User-Agent, and so on . Force visitors to accept data processing consent: When enabled, visitors are not allowed to start chatting without consent. Data processing consent text: Set the consent text that visitors see about how you process their data", "tokens": 405}
{"title": "Omnichannel Admin's Guide", "content": ". Configure the Omnichannel queue and how simultaneous chats get managed. Queue processing delay timeout: Set time in seconds in which queue delay in processing timeouts. Waiting queue: Enable the Omnichannel queue . Waiting queue message: A message that is displayed to the visitor when they get in the queue. Max. number of simultaneous chats: Set the maximum number of simultaneous chats that agents can tend to . Calculate and dispatch Omnichannel waiting queue statistics: Processing and dispatching queue statistics such as position and estimated waiting time. If the Livechat channel is not in use, it is recommended to disable this setting and prevent the server from doing unnecessary processes . Number of recent chats to calculate estimate wait time: The number of served chats to be used when calculating queue time. Maximum waiting time in queue: The maximum time in minutes for which a chat can be kept in queue, -1 means unlimited . Sorting Mechanism: Select the mechanism for sorting chats. It can either be Timestamp, SLA Policies, or Priorities. To learn more about queuing, refer to Omnichannel Queue . Routing allows you to define the behavior of your Live Chat queues. Omnichannel Routing Method: Select your preferred routing method. Refer to Queue Types (Routing Algorithm) for details on the types of routing methods used in Rocket.Chat . Accept with No Online Agents: When enabled, Omnichannel conversations are accepted even when there are no agents online . Assign new conversations to bot agent: When enabled, the routing system attempts to find a bot agent before addressing new conversations to a human agent . Max number of items displayed in the queue: Set the maximum number of items displayed in the incoming Omnichannel queue. Show Queue List to All Agents: Enable this to display the Omnichannel Queue for all agents . External Queue Service URL: Set your External Queue Service URL if your Omnichannel Routing Method is External Service. Secret Token: Enter the secret token", "tokens": 416}
{"title": "Omnichannel Admin's Guide", "content": ". Last-Chatted Agent Preferred: \u00a0Enable to allow the allocation of chats to the agent who previously interacted with the same visitor if the agent is available when the chat starts . Assign new conversations to the contact manager: \u00a0This setting allocates a chat to the assigned Contact Manager as long as the Contact Manager is online when the chat starts. The session setting allows you to define how open chat sessions are to be handled . How to Handle Open Sessions When Agent Goes Offline: Select what happens to an open chat session when an Agent goes offline. None: Nothing happens. Forward: Gets forwarded to another agent. Close: The chat gets closed . How Long to Wait After Agent Goes Offline: Set the time in seconds before the action specified above happens. Comment to Leave on Closing Session: Set a comment to be displayed to the visitor on closing the chat . How Long to Wait to Consider Visitor Abandonment?: This lets you set how long in seconds to wait for before considering that the visitor abandoned the chat. How to handle Visitor Abandonment: Select what to do when visitors abandon chats . The options are: Do Nothing Close chat Place chat On-Hold Custom message when room is automatically closed by visitor inactivity: Set a message that is sent when a chat gets automatically closed due to the visitor's inactivity . How long to wait before closing a chat in On Hold Queue?: Define how long in seconds the chat remains in the On Hold queue until it's automatically closed by the system . Custom message for closed chats in On Hold queue: Custom Message to be sent when a room in the on hold queue gets automatically closed by the system . Allow agents to manually place chat On Hold: When enabled, the agents have the option to place a chat on hold . Chats on hold only after agent engagement: Allow chats to be put on hold only if the agent was the last to send a message in the conversation", "tokens": 395}
{"title": "Omnichannel Admin's Guide", "content": ". Timeout (in seconds) for automatic transfer of unanswered chats to another agent: Specify the time in seconds for unanswered chats to be transferred to other agents. Configure the provider responsible for your Video and Audio calls . Call Provider: Select the call provider to use for Omnichannel Calls. Set the default call provider in Conference Call Admin Guide . Extend the functionality of video and audio calling with any of the available apps like Jitsi, Pexip, BigBlueButton, and Google Meet.", "tokens": 117}
{"title": "Queue Types (Routing Algorithms)", "content": "Rocket.Chat offers diverse queue types with unique routing algorithms to efficiently manage and distribute incoming Omnichannel conversations in your workspace. The queues define the routing methods and direct conversations to the appropriate agents . You can manage omnichannel queues in the Routing settings of your workspace . Here are various types of queues you can set for routing in your Omnichannel workspace: This round-robin algorithm is designed to automatically distribute chats evenly among agents on the workspace . It is especially suited for operations focused on equal opportunity distribution, as it prioritizes agents based on the total number of chats they have handled since their initial login. If an agent goes offline, they won't get new chats until they return online . Their chat count stays the same during their offline period. Once they return, the algorithm prioritizes assigning new chats to them until they've caught up with their teammates regarding the total number of chats served . Each agent has a Queued Chats section where new incoming chats are displayed when manual selection is enabled. Agents can click on a chat to preview it, view the messages sent, and decide whether or not to take the chat . Once an agent takes a chat, it is removed from the Queued Chats section for all agents. With manual selection active, agents can see all conversations in the queues associated with their department(s) . This visibility allows them to preview chats and gather the necessary context for providing efficient and satisfactory service. Department-specific chats are only displayed in the Queued Chats section for agents within that department . To integrate your custom agent routing rule into Livechat, use an External Service. Once it's configured as the Livechat routing method, update the External Queue Service URL and Secret Token\u00a0in the Routing settings. Rocket .Chat sends a GET request to the External Queue Service URL and the Secret Token is sent as a header X-RocketChat-Secret-Token for you to validate if the request came from the Rocket.Chat. If Rocket .Chat receives a response status other than 200, it will retry up to 10 times until a valid response is received", "tokens": 457}
{"title": "Queue Types (Routing Algorithms)", "content": ". After submitting the GET request, Livechat expects a JSON response in the following format: Once the valid response is received in the above format, Livechat verifies that the provided username represents a valid Livechat agent and proceeds with the standard process flow . The load-balancing algorithm distributes chat workloads based on the number of ongoing chats per agent. It aims to balance the workload by considering each agent's current chat volume . Unlike auto selection, which distributes chats based on the total number of chats served, load balancing focuses on the current workload to maintain an even distribution of active chats among agents . The load rotation algorithm assigns chats based on when an available agent last received a chat, focusing on the time of the last assignment rather than the current workload . It ensures that chats are distributed in a rotating sequence among all available agents, promoting a fair and balanced distribution for everyone . Workspace administrators can leverage the various types of queues outlined to achieve dynamic load balancing, strategic auto-selection, and effective chat handling, tailoring the Omnichannel experience to their specific organizational needs to enhance productivity.", "tokens": 243}
{"title": "Estimated Wait Time (EWT) Algorithm", "content": "The Estimated Wait Time (EWT) algorithm predicts the time a visitor in the live chat queue will wait before being attended to. This document outlines the mechanics of the algorithm, its current limitations, proposed improvements, and troubleshooting steps . The EWT algorithm calculates wait times based on the average duration of recently closed chats and the visitor's position in the queue. The formula is as follows: : Maximum number of simultaneous chats an agent can handle (configurable by the admin) . : spot Average Chat Time: The mean duration of the  \u00a0(default 100) most recently closed chats. The EWT updates dynamically as chats close, and the sample evolves . If no department is assigned, EWT defaults to a global queue calculation . Assume: Maximum simultaneous chats per agent : 3 Average chat time: 15 minutes EWT for contacts in the queue would be: Person in 1st Spot: Person in 2nd Spot: Person in 3rd Spot: Person in 4th Spot: This demonstrates that EWT increases incrementally for each subsequent position in the queue while factoring in the system's ability to handle multiple chats simultaneously . The default sample size for EWT calculation is 100 recently closed chats. However, this value is configurable, and you can adjust it in the system settings to better suit your operational needs . Consider increasing or decreasing the sample size based on your chat volume and activity patterns for more accurate estimates. Rocket.Chat provides flexibility to adapt the algorithm to your operational needs: Sample Size (X): While the default sample size is 100 chats, administrators can configure this value in settings. Increasing the sample size improves accuracy but may reduce responsiveness to real-time changes. Maximum Simultaneous Chats (N): Administrators can define the number of simultaneous chats agents can handle, which directly impacts the calculation. Time-Based Sample: Instead of relying on a static sample size, you can configure the algorithm to use a time-based sample. For example: Use chats from the last hour. Use chats from the last 30 minutes. Restrict to chats from the current day", "tokens": 446}
{"title": "Estimated Wait Time (EWT) Algorithm", "content": ". This ensures the algorithm reflects recent activity patterns rather than relying solely on a fixed number of past chats. Despite its flexibility, the EWT algorithm has some limitations: Impact of Outliers: Chats initiated outside operational hours (e.g., on weekends) can skew the average and inflate EWT values. Sampling Challenges: Fixed sample sizes may not always reflect real-time conditions, especially during sudden spikes in activity. Exclusion of Agent Activity: The algorithm does not factor in the number of active agents, which may lead to inaccurate predictions in cases where agents are idle or unavailable. EWT Remains High Despite Active Agents: Long-duration chats or small sample sizes may cause this issue. To resolve this, you can increase the sample size or use a time-based sample to make more accurate predictions. EWT Misleading During Non-Operational Hours: Chats initiated during weekends or outside working hours may inflate EWT. Configure the system to exclude such chats from the calculation. Department-Specific Discrepancies: If EWT varies significantly between departments, ensure chats are correctly assigned, and sampling settings are consistent. Version 7.1 brings significant enhancements to the EWT algorithm, addressing key issues to improve accuracy and reliability . Previously, chats that remained indefinitely in the queue distorted EWT calculations; this issue has now been resolved. Queue management has also been improved, with long-duration or inactive chats handled more effectively to ensure accurate estimates . Additionally, operational adjustments provide better queue management during non-operational hours, offering greater flexibility and precision in handling wait time predictions. The EWT algorithm is a powerful tool for predicting wait times in live chat queues . Administrators can optimize their system for accurate, real-time estimates by understanding its mechanics and leveraging the available settings.", "tokens": 376}
{"title": "Current Chats", "content": "Omnichannel Chats contains all the existing conversations that have not been deleted. To see the current chats, go to Omnichannel Contact Center > Chats You must have View Omnichannel Contact Center permission to access this section. Contact your workspace administrator to grant/revoke this permission. You can filter through the current chats with any of the following options: Served By: To sort the conversations served by an agent, select the agent from the drop-down field. Sort by Status: Sort the conversations by status. The options are: All Open Closed On Hold Queued From and To date: Enter the dates in the fields to sort the conversations as per\u00a0From\u00a0and\u00a0To\u00a0date. Department: Select a department name from the drop-down field to sort the conversations by department. Tags: Select the tags to filter the chat results. Additionally, you can sort the chat columns by clicking the up or down arrow next to the column name. This sorts the columns in ascending or descending order. To clear the filters, click on the three dots icon next to the To date field and select Clear filters. To delete closed chats, click on the three-dot icon next to the\u00a0To\u00a0date field and select\u00a0Delete all closed chats.\u00a0This will delete all the chats\u00a0marked closed by the agents.", "tokens": 272}
{"title": "Analytics", "content": "This is an in-built analytics dashboard that allows you to track your Livechat agents' performance (productivity) over any period of time. It gives managers the insight they need to make data-driven decisions that improve the customer experience. To access the Omnichannel analytics settings, Go to Administration > Omnichannel > Analytics. You can filter the analytics based on Type, Departments, Start date, End date, and Chart. To view conversation history analytics, Select Conversations from the Type drop-down menu. Select your desired department. Select your desired start date and end date. Total Conversations: It represents the total number of conversations during the selected period of time. Open Conversations: It represents the total number of open conversations for your selected department during the chosen period. On Hold Conversations: Shows the conversations on hold. Total Messages: It represents the total number of messages received in all the conversations during a selected period. Busiest Day: It shows the day during which you received the most chats for your selected time. Conversation Per Day: It shows the average count of conversations received per day. Busiest Time: It shows the hour during which you received the most chats for your selected period of time. The Chart field allows you to see the\u00a0percentage of conversations, the\u00a0average chat duration, and the\u00a0total messages handled\u00a0by each of your agents from your selected department. To view productivity history analytics, Select Productivity from the Type dropdown menu. Select your desired department Select your desired start date and end date Average of Response Time: This represents the average response time for all conversations assigned to your team during the selected time. Average of First Response Time:\u00a0This shows the average first response time for conversations assigned to agents on your team. Average of Reaction Time: This represents the average of the team\u2019s reaction to the assigned chats. Best First Response Time: This shows your team's best first response time based on the fastest initial replies to assigned chats. You can also see the Average of First Response Time, Best First Response Time, Average of Response Time, and Average of Reaction Time for each of your agents from your selected department.", "tokens": 432}
{"title": "Analytics", "content": "Setting up analytics allows you to see how users interact with your workspace, helps measure metrics, and monitors different user experience measures. To access analytics, navigate to Administration > Workspace > Settings > Analytics. Remember to hit Save changes to apply any changes made. Lets you set up Google Analytics. Enable: When enabled, Google Analytics is active, and you are prompted to set a Tracking ID. Tracking ID: Takes in your Google Analytics tracking ID. Lets you set various properties to analyze and track. Messages: When set to true, actions users perform on messages are tracked. Rooms: When enabled, actions like; create, leave, delete on channels or groups are tracked Users: This Lets you track events related to actions on users like; password reset times, profile picture change, etc. Gives you the ability to set up Matomo, formerly Piwik, for analytics. Enable: When set to true, Piwik analytics is enabled on your server. URL: The URL where the Piwik resides; include the trailing slash. Example: https://piwik.rocket.chat/ Client ID: The site ID for identifying your site. Example: 17 Additional Piwik Sites: Takes additional Piwik website URLs and site IDs to track the same data into different websites. Example: Prepend Domain: This option lets you set whether or not to prepend the site domain to the page title when tracking. All Subdomains: This lets you track visitors across all subdomains. Hide Outgoing Links: Takes in URLs, one domain per line, without any separator to hide their clicks in the outlinks report.", "tokens": 343}
{"title": "Real-time Monitoring", "content": "Real-time monitoring allows you to monitor your incoming and ongoing Livechat conversations in real-time. To access the Omnichannel real-time monitoring dashboard, go to Administration > Omnichannel > Real-time Monitoring. These monitoring metrics can be filtered by the department and set to be updated in a specified amount of time by changing the Update every field. When a Livechat conversation is initiated, it is reflected immediately on the monitoring dashboard in real-time. This section shows matrices about all Livechat conversations. Total Conversations: It represents the total number of conversations at the current time. Open Conversations: This shows the number of open conversations for your selected department at the current moment. On Hold Conversations: This shows the number of conversations on hold at the moment. Total Messages: It represents the total number of messages received in all the current-day conversations. Total Visitors: It represents the total number of Livechat users for your selected department for the current day. Total Abandoned Chats: It represents the total number of conversations abandoned by the visitor for your selected department's current day. Average of Abandoned Chats: Shows in percentage the number of abandoned chats. Average of Chat Duration Time: It represents the average duration of all the conversations of your selected department for the current day. Busiest Time: It represents the hour(s) during the current day when you received the largest number of incoming chats. Average of Service Available Time: It represents how many hours the Omnichannel service was available during the day. It means that at least one agent is available to serve Omnichannel conversations. Average of Service Time: It represents the average time the agents spend serving chats in the current day. Average of Response Time: If the selected chat pickup method is auto-selection, the chat is automatically assigned to an agent. This metric represents the average of agents' responses to all the conversations automatically assigned to them. Average of First Response Time: This matrix represents the average of the agent's first response to all the chats he picks up. Average of Reaction Time: This metric represents the average of the agent's reaction to the assigned chats. Average of Waiting Time: It represents the average time your visitor spent in the waiting queue.", "tokens": 463}
{"title": "Managers", "content": "Omnichannel managers are responsible for managing Omnichannel conversations, they can monitor and see analytics of Omnichannel activities. To access this menu, go to Administration > Omnichannel > Managers. Here, you can view, add or remove managers. On the Managers screen, a list of all the existing managers is displayed with the details and can be paginated if you have many managers. To add a user as an Omnichannel manager, Search or select the user from the Username field. Click Add manager. This will automatically assign the Livechat Manager role to that user, who can now monitor and see analytics of Omnichannel activities. To remove or revoke Omnichannel manager access from a user, click the delete icon by the right of the user on the Omnichannel Managers list. This will remove the Livechat Manager role from that user, and they won't be able to monitor, view analytics, or see the Omnichannel menu.", "tokens": 211}
{"title": "Agents", "content": "Omnichannel Agents are responsible for handling Omnichannel conversations. An agent can belong to a particular department and gets notified when a new conversation gets initiated if they are available. To access this menu, go to Administration > Omnichannel > Agents. Here, you can view, add, or remove agents. To add a user as an Omnichannel agent, Search or select the user from the Username field. Click Add agent. This will automatically assign the Omnichannel Agent role to that user. On the Omnichannel agent menu, a list of all the existing agents is available with their details and can be paginated if you have many agents. An agent's status can be seen on the Livechat Status tab showing whether they are available or not. From the Omnichannel agent list, click on the agent and click Edit from the sidebar. You can edit the following details of an agent: Select the Departments from the drop-down menu to assign to the agent. Change the Status of the agent. Enter the Max. number of simultaneous chats that the agent can attend. Click Save. To remove a user from the agents' list, click on the delete icon on the right against the agent. This will also remove the Omnichannel Agent role from that user.", "tokens": 274}
{"title": "Departments", "content": "An Omnichannel department is a collection of rooms that can be tailored to represent diverse units in your organization. This feature is essential when there are incoming chats originating from various communication channels, requiring expertise from diverse departments or specialized knowledge experts . Directing conversations to a department: Visitors can choose the specific department they want to forward their inquiries to . Assigning agents to a department: You can assign agents to specific departments, ensuring that conversations for that department are routed to the most appropriate knowledge experts. To access the Department menu, go to Administration > Omnichannel > Departments . You can View, Create New, Edit, or Delete a department. To create a new Omnichannel department, follow these steps: Click the Create Department button at the top of the Departments page . Fill in the following details: Enabled: Enable the new department. Name: Name of the new department. Description: An optional description of the department", "tokens": 189}
{"title": "Departments", "content": ". Show on the registration page: Enable this to allow your visitors to choose the department they want to chat with. The department is displayed to the visitor in the Livechat widget. Email: Set an email address to forward conversations to during offline hours . Show on offline page: Enable this to display the department during offline hours. Send this department's Livechat offline messages to a channel: Set the channel where offline messages should be directed. Max . number of simultaneous chats: Set the maximum number of simultaneous chats that agents in this department can attend to. How long to wait to consider visitor abandonment?: Set the time in seconds to wait before considering visitor abandonment . Custom message when the room is automatically closed by visitor inactivity: Set the custom message to be displayed when a room is automatically closed due to visitor abandonment. Waiting queue message: Enter the waiting queue message . List of departments allowed for forwarding (Optional): Set a list of departments that can receive chats from this department. This list appears to the users if the Show on the registration page option is enabled for those departments . Note that agents must be assigned to the departments. Fallback department for forwarding: Select a fallback department for forwarding messages. Request tag(s) before closing the conversation: Request your agent to set tags for the conversation for later searching purposes . Conversation closing tags: As an administrator, you can add some default conversation tags for this department . Allow department to receive forwarded inquiries even when there's no available agents: Enable this setting to ensure that inquiries are forwarded to a department even when no agents are available within that department . This feature is specifically effective with automatic assignment routing methods and does not apply to manual selection. Business Hour: The field is automatically populated according to the departments assigned to the business hours. Agents: Assign agents to the department. Click Save", "tokens": 387}
{"title": "Departments", "content": ". Workspaces on the community plan from version 6.0 and above can only create one department. The multiple department feature is exclusively available to workspaces subscribed to any of Rocket.chat's premium plans . Workspaces with multiple departments on versions less than 6.0 can continue using their departments but can't create a new one until they're subscribed to any of Rocket.chat's premium plans . The Omnichannel chat behavior varies based on how many departments are created in the workspace: No departments: All Livechat agents receive incoming chats using a round-robin rule . One department: All incoming chats are only assigned to agents in that department using a round-robin rule. Multiple departments: The visitor must select the department to handle their chat during registration . When a department is no longer needed, but you don't want to delete it, you can archive it and unarchive it later if a need arises. For community workspaces below version 6 .0 with multiple departments, archiving departments can be instrumental if you want to avoid upgrading your workspace plan. Instead of deleting a department when you no longer need it, you can archive it . When the need for that department arises, you can unarchive it. This gives community workspaces below version 6.0 the ability to retain the same number of departments they had before the upgrade . To archive an Omnichannel department, Click the kebab menu across the department you want to archive. Then, select Archive. Navigate to the Archived tab, and you'll see the archived departments . To unarchive an Omnichannel department, From the list of archived departments, Click the kebab menu across the department you want to unarchive. Then, select Unarchive. The department is added back to the list of active departments . To edit an Omnichannel department, Click the kebab menu across the department. Then, select Edit. A panel is displayed with all the current omnichannel department information you can modify. Update the department details and click Save . To delete an Omnichannel department, Click the kebab menu across the department. Then, select Delete. As a workspace administrator, navigate to Administration > Settings > Omnichannel and Enable department removal to allow deleting departments. Rocket .Chat offers omnichannel departments to categorize conversations, enhancing collaboration and timely responses for improved customer satisfaction, loyalty, and retention.", "tokens": 527}
{"title": "Custom Fields", "content": "Custom fields can be added to receive additional information from visitors during registration before initiating a Livechat conversation or used to set other properties of a visitor/room. They can be set upon a Visitor or Room. To access this menu, go to Administration > Omnichannel > Custom Fields. You can View, Create New, Edit, or Delete an existing field here. The Livechat registration form has the Name, Email, and I need Help With\u2026(Department) fields by default. To create a new custom field, click Create custom field, and enter the following information: Field: Enter the desired field that you want to add to your Livechat registration form. For example, last name. Label: The label of the field. Scope: A dropdown for you to set the scope of the custom field. Visitor: If the visitor option is selected, the field will be available as an Omnichannel visitor's property Room: When selected, the field will be available against an Omnichannel room. Visible: Whether or not to make it visible. Searchable: This lets you set if searching in the Omnichannel Contact Center can be done with the custom field. Validation: Validate the values entered for the custom field by using regular expressions. For example, [a-z]. This means that the custom field only accepts lowercase letters. Any other characters will display an error message. Required: When enabled, the field will be set as required. Type: Choose the input type (Input/Select) of the field. Default value: Set the default value of the field. Options: Comma-separated list used to select a pre-configured value. Spaces between elements are not accepted. Public: Set it Public this will be displayed in external applications, such as Livechat. When a custom field is created and made public, any value supplied in that field is available on the Livechat agent's side. To edit an Omnichannel Custom Field: Click on the field you want to update. A section is opened with all the current details of that field, which can be modified. Update the field and click Save. To delete an Omnichannel Custom Field, click on the delete icon on the right of the field from the Custom Field list.", "tokens": 475}
{"title": "Livechat Triggers", "content": "Omnichannel Livechat triggers are events you can set up. When these events occur, they make the Livechat widget take action or open automatically. To access this menu, go to Administration > Omnichannel > Livechat Triggers . Here, you can View, Create New, Edit, or Delete existing Livechat Triggers. To create a new Omnichannel Livechat trigger, click Create trigger and enter the following details: Enable: Enables the Livechat trigger . Run only once for each visitor: Select to have the trigger run once for each visitor. If false, you get a recurring pop-open . (For example, If your user goes to a different website and comes back to the same website, it pops open.) Name: Name your new trigger. Description: Set the description of the trigger . Condition: Select the condition for which the action will be triggered. Depending on what condition to track, you can set additional properties for validation . Visitor Page URL: This setting lets you specify a regular expression (regex) describing the website page where you want the live chat widget trigger to occur. For instance, if your website is xyz .com and you wish for the trigger to occur only on a specific page (xyz.com/contact) and not on any other pages, select \"Visitor Page URL\" and enter the regex. In this scenario, the regex should be .*/contact . Alternatively, if you want the trigger action to occur on all your website pages, the regex should be .*. Visitor Time on Site: The action occurs after the specified time in seconds once the customer visits your website . Chat Open by Visitor: The action occurs when the customer/visitor opens a new chat. After Guest Registration: The action occurs after a guest submits the Livechat registration form. Action: Define the action you want the Livechat widget to perform", "tokens": 402}
{"title": "Livechat Triggers", "content": ". See Livechat Trigger Actions for more details. Sender: Select the sender of the trigger action: Impersonate next agent from queue: The next agent from the queue is impersonated as the sender . Custom agent: Select the custom agent as the sender of the trigger action and message. Message: Enter a message for the trigger. In the Livechat widget, trigger actions are carried out when the specified conditions are met . There are two primary trigger actions available: Send a Message When the trigger condition is satisfied, this action sends a predefined static message from the widget to the visitor. This setting prompts you to enter the sender and message . You can select if the sender should impersonate the next available agent in the queue or be a custom agent . Send a Message (External Service) This option allows you to send personalized messages to visitors from the widget using external services like CRMs, bots and custom-built solutions to deliver a more engaging and relevant experience for each visitor . You can send relevant metadata data of the visitor to the external service. The external service then uses this data to dynamically generate a personalized message, like a targeted offer, custom welcome greeting, or support based on past interactions . It prompts you for the following details: You must set a Secret Token in Webhooks before using external service triggers. Sender: You can also select if you want to impersonate the next available agent in the queue or use a custom agent . External service URL: The endpoint URL of the external service. Rocket.Chat sends a request to this endpoint with a payload of the visitor metadata in this format: To learn how to set the visitor metadata sent by Rocket .Chat, please refer to the Livechat Widget API guide. Rocket.Chat expects the response returned from the external service to include the trigger message in this JSON format: The msg denotes the trigger message, while order represents the order in which the messages are displayed . The response must include at least one msg. Send Test: Click this button to send a test request to the external service URL and confirm its success . Timeout (in miliseconds): The time in milliseconds to wait for an external service to respond before canceling the request. Fallback message: Message to send after timeout ends . To edit an Omnichannel Livechat trigger: Select the trigger from the list of triggers. A section is opened with all the current details of that trigger, which can be modified and saved . To delete a trigger, click on the delete icon on the right-hand side of the trigger.", "tokens": 561}
{"title": "Livechat Widget Installation", "content": "The Livechat widget is a chat interface that can be embedded into a webpage. Visitors on your website can click the widget to initiate a conversation. It can serve as an excellent tool for use cases like the following: Offering live and real-time support to customers/users. Embedded to get information from people interacting with your website. To install the Livechat widget, Configure the following settings on your Rocket.Chat workspace: Add the domain where Livechat will be used to the allowed list: Go to Administration > Workspace > Settings > Omnichannel > Livechat > Livechat Allowed Domain. Make sure to excludehttps:// or any trailing slashes from the domain entry. By configuring this setting correctly, you allow access to the Livechat widget on your specified domain. Go to Administration > Omnichannel > Livechat Installation. Copy the code snippet and paste it above the last </body> tag on your website. The Livechat widget appears at the bottom right of your webpage. Learn more about Livechat settings and Livechat appearance. \u00a0Visit the Livechat Widget API for further configuration options. To run the Livechat widget on a domain different from your Rocket.Chat server, After installing the widget, navigate to Administration > Workspace > Settings > General. Disable Restrict access inside any iframe on your Rocket.Chat server. If you have issues displaying the Livechat widget, check your browser developer console to examine the details of any errors you might be experiencing. Failed to read 'localStorage' properly from Window An error like this is related to your browser settings for third-party cookies. Try with another browser or review your browser settings to confirm it's not blocking third-party cookies. Trying to access localhost:3000 Review the Site URL setting under Administration > Workspace > Settings > General and the server name setting on your reverse proxy (if you have one) to guarantee they are all aligned and correspond to the same URL used in your Livechat widget installed script. Livechat doesn't show OR Content Security Policy directive violation Add the domain where the iframe is been used in the list of allowed domains under Administration > Workspace > Settings > Omnichannel > Livechat > Livechat Allowed Domain.", "tokens": 500}
{"title": "Livechat Widget Appearance", "content": "The Livechat Widget's appearance can be customized to fit your branding style. Whether agents are online or not, you can customize the widget appearance for offline and online hours. The fields on the registration form and the messages displayed after a conversation are both customizable . To access Livechat Appearance, go to Administration > Omnichannel > Livechat Appearance. Hide \"powered by Rocket.Chat\":\u00a0 Enable this option to hide the watermark in the widget . Livechat background:  Enter the widget background color as hexadecimal (#F5455C), a color name (red), or an image using a URL (url('https://example.com/image.png')). This field follows CSS standards . See the background property documentation for details. Livechat widget position on the screen:  Select the position of the widget on your site - Left or Right. The widget is displayed at the bottom of the page . Hide system messages:  Select the system messages that you want to hide in the livechat conversations in the widget . The options are as follows: Hide \"User Join\" messages Hide \"User Leave\" messages Hide \"Conversation finished\" messages Hide \"Conversation started\" messages Hide \"Conversation transfered\" messages Title: Set the title of your widget", "tokens": 288}
{"title": "Livechat Widget Appearance", "content": ". Title bar color: Set the color of the title bar of your widget. Message Character Limit: Enable to set the maximum amount of characters per message. Show agent information: Enable to show agent\u2019s name . Show agent email: Enable to show agent\u2019s email. Display Offline Form: Turn on to display offline form. Offline Form Unavailable Message: The message visitors will see when Livechat form is unavailable. Offline message: Set Offline Message . Title offline: The Live Chat Widget title Title bar color offline: Set title bar color for when offline. Email Address to Send Offline Messages: Set the email address to which offline messages will be sent . Offline Success Message: Set up the message you want to send to the visitor after successfully sending an offline message. Enabled: Enables the registration form. Show name field: Enable to show Name field. Show email field: Enable to show the Email field . Registration Form Message: Show any message on the registration form if you want. It appears right under the widget title. Conversation Finished Message: Set up the message title you want to send to the visitor when the conversation is finished . Conversation Finished Text: Set up the message text you want to display to the visitor when the conversation is finished. For additional configuration options, see Omnichannel Admin's Guide. Kindly refer to the Livechat Widget API for further customization options.", "tokens": 297}
{"title": "Webhooks", "content": "Omnichannel webhooks allow you to integrate the Rocket.Chat Omnichannel to any third-party system, e.g., CRM, Zoho, etc. To create a new Omnichannel webhook, go to Administration > Omnichannel > Webhooks. Webhook URL: Enter the destination webhook URL where the data will be sent. Secret Token: Enter a secret token that can be used to verify the webhook. The field Secret Token is sent to a header X-RocketChat-Livechat-Token so you can validate if the request became from Livechat. If your endpoint returns a response status other than 200, Rocket.Chat will retry ten times, waiting ten seconds between retries. Send Request on: Select the action(s) or event(s) that will trigger this integration and send data to the webhook, such as when a chat is taken or when a visitor sends a message. The available options are: Chat Start Chat Close Chat Taken Chat Queued Forwarding Offline Messages Visitor Messages Agent Messages HTTP timeout (in milliseconds): Enter the request timeout value. Click Save. Click Send Test to verify the webhook setup. If successful, a message saying 'It works' will be displayed. You can also Reset the values for the Webhook setup. The Webhook URL and Secret Token configured here are automatically populated in the Webhooks settings under Administration > Workspace > Settings > Omnichannel > CRM Integration.. Below is an example of the JSON data sent to the webhook URL for some events: Livechat session Message sent", "tokens": 362}
{"title": "Business Hours", "content": "The Omnichannel Business Hour allows companies to define their operating hours, which is displayed on the Livechat widget, guiding customers to reach out only during those hours . This system helps manage agent workloads by alerting them of inquiries strictly within these hours, ensuring timely customer assistance. Single Mode: Every agent and department adheres to one uniform business hour . It is ideal for teams sharing the same shift and time zone. Multiple Mode: Allows distinct working hours for different departments, especially useful for teams in varied time zones . In this mode, the workspace has a default business hour, but custom hours can be set for specific departments. Agents in those departments primarily handle chats during those custom hours. Outside of that, their Livechat status ideally goes offline . In the Multiple Mode, agents without a department or agents with departments that are not connected to any business hour rule, follow the default business hour . It's important to note that due to system nuances, while agents are assigned to specific department hours, they may still receive chats from other departments they're associated with, even outside the set hours . For instance, if Mike is in Support (9 AM-3 PM) and Sales (default business hour: 4 PM-5 PM), he'll mainly handle Support chats from 9 AM until 3 PM . However, he might occasionally receive chats from Sales during the Support hours. From 3 PM-4 PM, he will be unavailable for new chats. Thereafter, he'll be primarily available for Sales from 4 PM-5 PM . We recommend businesses be aware of this operational nuance and plan their staffing and training accordingly to ensure consistent customer experience. Multiple business hour mode is exclusively available to workspaces subscribed to any of Rocket.Chat's premium plans", "tokens": 376}
{"title": "Business Hours", "content": ". To enable the business hour mode settings for your workspace, Navigate to Administration > Workspace > Settings > Omnichannel > Business Hours. Toggle on Business hours enabled. Set the Business Hour Type to Single or Multiple, specifying the business hour mode . Click Save Changes. To create a new business hour, Go to Administration > Omnichannel > Business Hour. Click +New. Fill in the following details: Enabled: Enables the working hour. Name: Name of the working hour . Departments: Select the departments the working hours apply to. Timezone: Select the timezone. Timezones observe daylight savings time, and the agent's availability is updated automatically. Open Days of the Week: Pick open days of the week . Each selected day lets you set an open and close time. Click Save. The Business Hours page shows a list of all the created business hours. To edit a business hour, Navigate to Administration > Omnichannel > Business Hour . Click on the business hour from the list. Update the business hours and click Save. If your agent's live chat status shows available or is still turned on when business hours are closed, navigate to business hour admin settings . Then, disable and enable business hours again.", "tokens": 257}
{"title": "MonitorsUnits", "content": "Monitors in Omnichannel are users who can monitor Omnichannel activities and have access to Current Chats, Analytics, Real-time Monitoring, Agents, Departments, Business Hours, and Canned Responses. A monitor is only able to view analytics or activities of a department if they are assigned to a unit. To access Omnichannel Monitors, go to Administration > Omnichannel > Monitors. On the Monitors page, a list of all the users with livechat-monitor role is displayed. From here, you can add new monitors or delete existing monitors. To add a new monitor(s), enter the person's username in the username field and click Add monitor. This will automatically assign that user the livechat-monitor role. To delete an Omnichannel monitor, click the Delete icon on the right across the user. This will remove the livechat-monitor role from that user. Using Omnichannel units, you can group a set of departments for management purposes. As an Omnichannel manager, you can make a unit of multiple departments and assign a monitor to oversee them. To access Units settings, go to Administration > Omnichannel > Units. On the Units page, you see a list of all the existing units and a button to initiate the creation of a new unit. Clicking on an existing unit opens up a page where you can edit it. To create a new unit, Click Create unit. Enter the following information: Name: The name of the new unit. Visibility: Set its visibility as private or public. A private unit will be available only for you. Departments: Add the desired departments to your unit. Monitors: Assign users who will be monitors to the unit. Click Save. To delete a unit, click the Delete icon on the right of the unit.", "tokens": 383}
{"title": "Canned Responses", "content": "Canned responses, also known as predefined responses or templated responses, are pre-written messages that can be quickly used to respond to common questions, issues, or inquiries in Omnichannel conversations or general messaging within your Rocket.Chat workspace. To use a canned response, type the shortcut (preceded with !) in the message box. As a Rocket.Chat workspace admin, you can enable and disable canned responses on your workspace. To enable canned responses in your workspace, Go to Administration > Workspace > Settings > Omnichannel > Canned Responses. Enable canned responses and save the change. When Canned Responses is enabled, it'll be available to users with the corresponding canned-responses permission. To enable Canned Responses for the first time, Omnichannel needs to be enabled first. Canned Responses can be used only in the normal workspace when Omnichannel is disabled. Go to Administration > Workspace > Permissions and search for canned-response. You can now define which user roles should be able to view, create, and delete canned responses in your workspace. Each canned response has a scope, and there are three scope permissions for creating canned responses: save-canned-responses: Users with this permission alone can solely create private canned responses. It is assigned to agents by default, who can create or access one from any Omnichannel room. save-canned-responses is the basic permission required for every user to create any type of canned response. save-department-canned-responses: Users with this permission can create canned responses for departments. save-all-canned-responses: Users with this permission can create public, private, and departmental canned responses. It's assigned to managers and workspace administrators by default. To create a new canned response for your workspace, see Canned Responses Omnichannel Managers Guide.", "tokens": 388}
{"title": "Canned Responses Omnichannel Manager's Guide", "content": "If you are using canned responses for the first time, see the admin's guide for canned responses or contact your workspace administrator to enable canned responses on your workspace. To create a canned response, Go to Administration > Omnichannel > Canned Responses. A list of canned responses in the workspace is displayed. Click Create canned response. Enter the following information: Shortcut: The shortcut of your new canned response. Message: Enter your message snippet. You can use any available placeholders to personalize your message. You can also preview the message anytime by switching between the Editor and Preview tab. The available placeholders include: {{contact.name}}, {{contact.email}}, {{contact.phone}}, {{agent.name}}, {{agent.email}}. Tags: Set the tags for your canned response. This helps agents find canned responses specific to a particular topic Sharing: Set the usage scope of your Canned Response. Public: Anyone across your workspace can access your canned response. Department: Anyone in the selected department can access your canned response. Private: Only you and Omnichannel managers can access your canned response. Click Save. A new canned response is ready to be used by typing ! in the message box. See the Canned Response Permission guide to learn about the permissions required to create canned responses. Hi {{contact.name}}, My name is {{agent.name}} from the special service team. How can I help you today? Our products are back in stock and eagerly waiting to be part of your collection. You can claim your treasure on our website or at your nearest store. Got any more questions? I am here to guide you on this shopping journey. You can create a canned response on the go from within a conversation. To create a canned response in a conversation, Click on the  Canned Responses icon. Click Create and fill in the required details as specified above. You can filter canned responses from the main page by: Search: Searching the Canned Message shortcut or message text. Sharing: You can filter by sharing. Created By: You can filter by the name of the user who created the canned responses. To learn more about how agents can use canned responses, see the agent guide.", "tokens": 471}
{"title": "Tags", "content": "As a Livechat Manager, you can set tags to be assigned to the Livechat conversations by the agents. Tags can be used to sort Livechat conversations easily. Omnichannel Tags are used for marking and classifying Omnichannel conversations. A practical use case is using tags to mark the progress made on a Livechat query. You can have tags like new, blocked, in progress, completed etc. To access Tags settings, go to Administration > Omnichannel > Tags. On the Tags page, you see a list of tags if they exist. Clicking on one opens up a page where it can be edited. To create a new tag: Click Create tag. Enter the following information: Name: Enter the name you wish for the Tag Description: A description of what the Tag is Departments: Select a list of departments in which the tag is available. Leave it empty to make it available for all departments. When created, Omnichannel agents can use the tag on conversations. To delete an existing Tag, click on the Delete icon across the Tag from the main settings screen.", "tokens": 230}
{"title": "SLA Policies", "content": "Omnichannel SLA Policies allow you to change the order of Omnichannel queues based on Estimated Wait Time. It means chats with a shorter wait time will appear in the queue before others with longer or no due time set. SLA Policies are not mandatory for each chat. Thus, the Omnichannel queue has conversations with and without SLA policies. Estimated Wait Time is the time defined for a customer to be served. For example, if the estimated wait time is 10 minutes, the customer is supposed to wait in queue for up to 10 minutes until an agent takes the chat. To configure SLA Policies in your workspace, Go to Administration > Workspace > Settings > Omnichannel > Queue Management. For the Sorting Mechanism field, select SLA Policies. Click Save Changes. To create an Omnichannel SLA Policy, Go to Administration > Omnichannel > SLA Policies. Click Create SLA policy. Enter the following information: Name: The name of the SLA Policy. Description: The description of the SLA Policy Estimated due time: The time in minutes for the SLA Policy. Click Save. An SLA policy name and estimated due time are unique and can not be duplicated. Two SLA policies can not have the same name and estimated due time. To delete an existing SLA Policy, Go to Administration > Omnichannel > SLA Policies. From the SLA Policies list, click the Delete icon across the SLA Policy you want to delete. To change the SLA policy of a conversation, Go to Room Information > Edit. Select the SLA policy and click Save. After updating the SLA policy, the chat is moved to reflect its priority position to determine the queue order.", "tokens": 368}
{"title": "Priorities", "content": "OmniChannel Priorities helps you streamline conversations coming through multiple queues to prioritize them and enhance productivity. It is helpful for agents to determine the conversations they should prioritize when responding to customers. The omnichannel queue contains chats with and without priorities because they are not assigned by default. To configure Priorities in your workspace, Go to Administration > Workspace > Settings > Omnichannel > Queue Management. For the Sorting Mechanism field, select Priorities. Click Save Changes. Go to Administration > Omnichannel > Priorities. It lists the default priorities: Highest, High, Medium, Low, and Lowest. Select a priority to edit it and customize the name. Click Reset to return the name of all the priorities back to default. To manually change the priority of a conversation, Hover over the chat and click the kebab menu. Select the priority option you want to assign to that chat. After the priority is updated, the chat is moved to reflect its priority position in the queue. For example, a chat with the priority 'highest\" is transferred to the top of the chat queue. You can also change the priority of a chat from the Edit room tab of the chat by navigating to Room Information > Edit. Organizations can benefit from automation using chatbots to determine the priority of each conversation based on the nature of its contents. As an Omnichannel manager, you can filter the chats based on their priorities. You can join or forward a high-priority chat to follow up and ensure they are resolved on time. To filter chats based on priorities, Go to Administration > Omnichannel > Current Chats. You can preview the priority of each chat from this table.", "tokens": 358}
{"title": "Omnichannel Agent's Guides", "content": "As an Omnichannel agent, you can log in to your workspace using your username or email, and password. You can handle omnichannel or Livechat conversations. To be an Omnichannel agent, you must have the Omnichannel Agent role. Contact your administrator if you need the role. As an Omnichannel agent, your home screen has an Omnichannel navigation tab that has features for: Opening Omnichannel Queue Setting Omnichannel Agent's Availability Opening up Omnichannel Contact Center To make yourself available to take up conversations: Click  icon to set your status to Available Click  to set your status to Unavailable.", "tokens": 142}
{"title": "Omnichannel Conversations", "content": "Once you log in to your workspace as an agent and set your status to \"Available,\" you can manage incoming and existing Omnichannel conversations . When a new message from a contact is received in the workspace, it is processed according to the routing algorithm in use: Auto-assignment: The message is directly assigned to an agent and appears in the Chats in Progress section . Queued chat: The message is placed in the Queued Chat section, where it awaits an available agent to claim it . Managing auto-assigned chats If a chat is automatically assigned to you: The conversation appears under Chats in Progress in the sidebar. Click on the conversation to start replying to the contact . Handling queued chats If a chat appears in the Queued Chat section: The chat is available for any agent to take. Click on the conversation to view its details . When ready, click Take it to move the conversation from the queue to Chats in Progress. Send a reply to the contact to begin the interaction. If a message is sent to a department you don't belong to, you won't receive it . When the contacts are typing messages, the typing indicator is displayed next to their icon. For example, As an agent, you can manage omnichannel conversations using the quick actions on the menu bar . These actions are represented by icons at the top of the chat screen. If an omnichannel conversation in progress needs to be made available for other agents to handle: Click Move to the queue  \u00a0from the menu bar . The conversation is moved back to Queued Chats for other agents to view and take it. This option is only available when the routing algorithm is set to manual selection . If a conversation needs to be handled by another department or agent: Click on the Forward  icon from the menu bar. Enter the department or the agent to whom the conversation should be forwarded. Leave a comment if necessary and click Forward . A notification will briefly appear at the top to indicate whether the operation was successful or failed. If successful, the selected agent or available agent in the chosen department will receive the chat and can continue the conversation with the contact", "tokens": 445}
{"title": "Omnichannel Conversations", "content": ". It requires the Transfer Livechat Guests permission. You cannot forward conversations to offline agents or disabled departments. You can email the chat transcript to a contact or export it as a PDF . Sending chat transcripts via email is only available for contacts with a registered email address. To send the transcript via email: Click the Send transcript  icon from the menu bar Select Send via email. The contact email address is already prefilled . Enter a subject for the email. Click Request. The transcript is sent to the contact via email. Sending transcripts via email requires the Send Omnichannel Conversation Transcript permission . To export the transcript as a PDF: Click the Send transcript  icon from the menu bar Select Export chat transcript as PDF. You will receive a new direct message from rocket.cat with the transcript attached in PDF format . Exporting PDF transcripts requires the \u00a0Request PDF Transcript permission. Exporting the chat transcript as a PDF is only available after closing the Omnichannel conversation. You cannot export PDF transcripts from ongoing conversations . To automatically export conversation transcripts: Click your avatar and select My Account. Navigate to Omnichannel and enable the transcript options you want to automate: Export chat transcript as PDF: Automatically export the transcript as a PDF at the end of conversations . Send chat transcript via email: Automatically send the transcript to contacts via email at the end of conversations. Click Save Changes. As an agent, there are times when Omnichannel contacts may leave the conversation unexpectedly", "tokens": 303}
{"title": "Omnichannel Conversations", "content": ". The conversation remains in your queue until it is closed, which can affect your ability to handle new chats if you\u2019re at your conversation limit. The \"Place Chat On-Hold\" feature allows you to temporarily pause such conversations . To place a conversation on hold: Click the Place Chat On-Hold icon from the menu bar. Click Place Chat On-Hold to confirm the action. If the contact engages again, the routing algorithm will first attempt to assign the conversation to you . If you are at maximum capacity, it will be routed to the next available agent. You can also manually resume the conversation by clicking the Resume button from the chat room . To enable this feature, the workspace administrator must activate Allow agents to manually place chat On Hold under Administration > Settings > Omnichannel > Sessions. You can only place a conversation on hold if you sent the last message to the contact . To end a conversation: Click the End conversation  icon from the menu bar Add a comment to close the conversation Update tags for the conversation if needed. Select Export chat transcript as PDF to get a PDF transcript for the conversation. Click Confirm . The conversation will be removed from the Chats in Progress queue. If you choose to export the chat transcript, you will receive the PDF as a direct message from rocket.cat . Canned responses allow you to communicate quickly by using pre-saved message snippets. You can use these in both Omnichannel conversations and regular chats within your Rocket.Chat workspace . To send a canned response: Start your message with ! followed by the canned response shortcut. Alternatively, after typing !, you can select the desired response from the drop-down list that appears above your text field . To access available canned responses in your workspace: Click the Canned Responses icon  from the menu bar. Click Create to add a new canned response. From the list, select the canned response you want to use . Click Use to insert the response into your chat. Click Edit to update the response, if you have the appropriate permissions. To learn more about how to create and manage canned responses, visit the Canned Responses documentation", "tokens": 437}
{"title": "Omnichannel Conversations", "content": ". To view the details of your current conversation: Click the Room Information icon from the menu bar. The following details are displayed on the right side of the conversation: Channel: The platform used for the conversation (e.g ., Livechat, WhatsApp Cloud API, Instagram). Contact: The name or identifier of the contact being served. Agent: The name of the agent serving the contact . Queue Time: The duration the conversation spent in the queue before being taken by an agent. Created at: The date and time the conversation was initiated. Taken at: The date and time the conversation was assigned to an agent . Average Response Time: The average time taken by the agent to respond during the chat. Inactivity Time: The duration the conversation was inactive while waiting for the contact to reply to the last message from the agent . Click Edit to add details such as the topic, tags, or priority of the conversation. Then, click Save to confirm your changes. To view the details of the contact in the conversation: Click the Contact Information  icon from the menu bar . The following details will be displayed: Name or username of the contact Email address or phone number of the contact Date the conversation was created Date of the last message sent in the chat Contact manager details Click Chat History to view the history of previous conversations with the contact . Click\u00a0Edit\u00a0to update contact details. You can update the name, email, and phone number, and assign a contact manager. Then, click\u00a0Save Changes . If the assigned contact manager is online when the contact starts a chat, the routing system will assign the chat to the contact manager instead of a random agent. To search for messages in a conversation: Click the Search  icon from the menu bar . Enter your search query. The search results will be displayed as you type. You can also use Regular Expressions. To search for files that have been attached to a conversation: Click the Files  icon from the menu bar . All attached files will be displayed. Enter your search query. Optionally, filter by file type: Images, Video, Audio, Text, or Files. By default, all file types are displayed", "tokens": 442}
{"title": "Omnichannel Conversations", "content": ". To access the chat history of a contact: Click the Contact Chat History icon  from the menu bar. All previous conversations with the contact in the workspace will be displayed. Click the  icon to see the chat history of a selected conversation . You can search for messages in the selected chat history. Invite other agents or managers to an ongoing chat when you need additional help or collaboration with a contact. To invite: In the chat, send the slash command /invite @<username> . If the user is not an agent or manager or doesn't have permission to join a chat, the message \"User is not an Omnichannel Agent\" is displayed. Otherwise, the user is added to the chat . This process triggers the Join Livechat Room API in the backend to invite users to the live chat room. Communication with omnichannel contacts on Rocket.Chat can also be done using audio/video calls . Your workspace must have at least one call app installed to make these calls. To enable Rocket.Chat video call feature, contact your administrator or follow the instructions . To make a call, Click  icon from quick actions on the right side Click Join Call button in the conversation. Enter your name in the new browser window and hit Join meeting", "tokens": 257}
{"title": "Omnichannel Queue", "content": "When you log in to your workspace as an agent and set your status to Available, to handle new conversations,  icon appears on your screen. Queues follow the routing algorithm specified by the workspace administrator. As an administrator or omnichannel manager, Click the to see all the current Omnichannel chats in the queue. As soon as you close them, they will disappear from the queue. Sorting this data can be done by: Served By: The agent serving the conversation. Status: Status of the agents to filter by. Department: The department to show queued conversations. As an agent, click the to see all the conversations you are currently serving appear.", "tokens": 139}
{"title": "Omnichannel Contact Center", "content": "The Omnichannel Contact Center is a centralized directory for managing contacts, chats, and calls across various communication channels within your omnichannel workspace. Rocket .Chat provides the contact center to enable workspace administrators, managers, and agents to effectively oversee, interact with, and manage all omnichannel communications to ensure a cohesive and streamlined approach to customer engagement . This document will teach you how to manage omnichannel contacts using the Omnichannel Contact Center . Unified contact profiles: Combines data from multiple interactions into a single profile for each contact, providing a complete view of their communication history and preferences Integrated identity management: Includes built-in tools for secure identity verification to support trusted and compliant communications To access the Omnichannel Contact Center, Click the  icon on the Omnichannel navigation sidebar . As a Livechat\u00a0agent, you can access all contacts in the contact center and view the chats and calls they have handled . As a workspace administrator and/or Livechat manager, you can view all the contacts, chats, and calls served on the workspace in the contact center . The Chats tab displays open and closed omnichannel conversations, allowing agents and managers to view, manage, and update chat interactions . Explore the Chats interface for the following: Search, filter, or select a Chat: Locate a chat using the search or filter bar or by selecting it from the list. The chat thread is displayed in the Conversation interface . Learn more about the available filters for using Chats Open chat: Click Open Chat to view the full conversation . You can then perform actions such as adding or blocking the contact Update room details: Within the opened chat, click Room Information to update details such as the room's topic, tags, or priority of the room Channel information: This displays the medium (e", "tokens": 382}
{"title": "Omnichannel Contact Center", "content": ".g., call, email, social media) through which the contact reached out . This provides context for the interaction and ensures personalized responses Chat verification: This indicates if the contact has been verified using multi-factor authentication Quick actions: You can perform all the quick actions applicable to closed conversations The Contacts tab displays a list of known contacts . These contacts appear only after the live chat manager adds them to the contact list using identifiable information, such as an email address, phone number, or other personal identification information (PII) . You can search for Omnichannel contacts by username, name, email, or phone . To search for a contact, Click the Contacts tab Enter your search query in the Search box From the search results, click the desired contact to open their details in the Contact interface Enable the Searchable option when creating a custom field to allow search by custom field values . To view or edit a contact, Click the contact in the Contacts tab The Contact interface will display the following tabs: Details: Displays key information, such as the contact's name, email, or phone number Channels: The communication channels (e.g ., live chat, email, social media) through which the contact has interacted History: Provides the conversation history of all closed chats since the contact's first interaction with the live chat agent or manager Click the pencil icon to begin editing the contact's details Update the necessary fields Click Save to store the changes There are two ways to create a new Omnichannel contact: Navigate to omnichannel contact center > Contacts Click New Contact Fill in the new contact's details, including their name, email, and phone number Assign a manager to the contact Click Save to finalize Open the chat with an unknown contact Click Add contact to open the Edit Contact Profile Enter the required information and any additional details Click Save to add the contact to the list The Contact Manager option is exclusively available to workspaces subscribed to any of Rocket", "tokens": 407}
{"title": "Omnichannel Contact Center", "content": ".Chat's premium plans. Blocking a contact channel prevents the contact from reaching you through that specific channel. For example, if you block a contact who reached out via Livechat, they will be blocked on Livechat . However, if available, they can still contact you through other Omnichannel platforms (e.g., social media) . Here are the available ways to block a contact channel: Open the chat with the unknown contact In the information box, click the Block option A confirmation prompt will appear, asking if you want to block the contact on this channel Select Block to confirm or Cancel to decline If you confirm, the contact will be blocked from this channel Navigate to omnichannel contact center > Contacts Select the contact you want to block to open their profile Go to the Channels section to view all the channels the contact has used to reach out Select the channel to block . Click the options menu next to it Select Block to restrict the contact on that channel The Calls tab displays all Omnichannel calls. You can search for calls by name or phone number. To search for a call, Click the Calls tab . Enter the search query in the Search box. From the search results, click the call you're searching for. The call details are displayed, including the wrap-up notes and the last time you had a call with the contact . The Omnichannel Contact Center is essential for accessing and updating your workspace's omnichannel chats, contacts, and call details. The next section will examine assigning omnichannel contacts to a dedicated manager . Ensure safer communication by verifying contact identities using 2FA. Assign contacts to a contact manager through the UI or an API endpoint. What is the difference between unknown and unverified contact?", "tokens": 373}
{"title": "Single Contact Identity", "content": "Single Contact Identity is designed to ensure secure, verified communication by integrating identity verification into the communication process . The Contact-ID-Verification add-on, part of the Single Contact ID suite, unifies contact management across multiple channels\u2014such as email, chat, and social media\u2014by recognizing and authenticating contacts as the same individual . This system enhances security, protects sensitive information, and improves data management. Contacts are automatically classified into two categories based on their verification status: Unverified contacts, who fail the identity verification process (e.g ., via two-factor authentication), are marked as unverified. Verified contacts, who successfully complete the verification process, are marked with a blue tick to indicate their verified status . The system includes tools like one-time passwords (OTP), two-factor authentication (2FA), and a zero-trust security model to ensure secure interactions. These tools help protect sensitive data, maintain privacy, and enable secure cross-channel communication . Notably, identity verification applies separately to each channel; for example, a contact might be verified on WhatsApp but not on LiveChat. Single Contact ID allows for enhanced chat management by introducing customizable settings that determine whether identity verification is required before routing conversations . It also includes visual indicators for unverified chats, which are placed in a dedicated queue to help agents prioritize verified contacts and streamline their workflow. When a contact initiates interaction through a configured communication channel, Single Contact ID prompts them to verify their identity . Once verified, the system unifies the contact\u2019s profile across all channels. This ensures that future interactions are always linked to the same authenticated identity, simplifying management and increasing security . To use Single Contact ID, follow these steps: Purchase the contact-ID-verification add-On This feature is available exclusively to Enterprise users and can be purchased either through the unverified contact prompt in the system or by contacting the sales team directly Provision the add-On After purchase, the add-on must be activated to enable its features. Install a verification app", "tokens": 431}
{"title": "Single Contact IdentityOmnichannel Contact Manager Assignment", "content": "Choose your preferred identity verification solution or use the Verify Chat app available on the Rocket.Chat marketplace. Single Contact ID is app-agnostic, so it supports a variety of verification apps . Single Contact ID is app-agnostic, giving you the flexibility to use any identity verification solution of your choice. However, you can also choose to use the Verify Chat app, which is available on the Rocket.Chat marketplace. Read more about using Rocket .Chat Verify Chat app for identity verification. In the Omnichannel > Security and privacy section, configure the contact verification preferences: Block unknown contacts: Block conversations from users not in the contact list . Block unverified contacts: Prevent conversations with users who fail identity verification . Require verification on contacts: Specify when verification is required: Never: Verification is not required for any contacts Once: Verification is only required once per contact communication channel On all contacts: Verification is mandatory for every interaction with all contacts Adjust the options based on your organization's security requirements . \u200bThis feature lets you assign an omnichannel contact to a dedicated Omnichannel agent. If this contact initiates a conversation and the dedicated agent is available, the chat is routed directly to them. Otherwise, it will be routed to any other agent based on the routing algorithm selected. To enable this feature, you need to enable Assign new conversations to the contact manager by changing the setting under Administration -> Workspace -> Settings -> Omnichannel -> Routing or contact your workspace administrator. You can set a contact manager for a contact using the contact center while creating or editing a contact. Click the icon on the Omnichannel navigation tab. Click New contact. Enter Contact Manager. Click Save. You can set a contact manager for a visitor/contact using Register Omnichannel Contact", "tokens": 377}
{"title": "Rocket.Chat CloudCreate Your New Cloud Account", "content": "Rocket.Chat Cloud is a centralized portal for managing your workspaces by connecting them to Rocket.Chat Cloud services. You can create a cloud account and then deploy a workspace or directly deploy and register your workspace with Rocket.Chat cloud. All workspaces must be registered on Rocket.Chat cloud and within our support window to access cloud services. If you are using a firewall, you need to whitelist the cloud.rocket.chat URL for workspace registration and syncing the license. See Firewall Configuration for a complete list of URLs you may need to whitelist. Once you have deployed and registered your workspaces, you can manage them and access the following services on the cloud portal: Set a custom domain for your workspace. Update your profile and organization\u2019s settings. Manage your workspace subscriptions and add-ons. Access invoices and update payment methods. Enable 2FA for your cloud account. You can also refer to the Cloud FAQs for further information. If you need to export large datasets from Rocket.Chat Cloud, follow our step-by-step guide on extracting multi-part data exports. After deploying a new workspace, a registration wizard is prompted during setup to connect your workspace to either an existing Rocket.Chat cloud account or a new cloud account. Alternatively, you can navigate to Rocket.Chat Cloud and follow these steps to create a new account: Click Create Account to register your new Rocket.Chat cloud account. Fill in the required information. Accept Rocket.Chat's Terms and Conditions and Privacy Policy. Click Next and check your email for the confirmation link. Confirm your email by clicking the link to activate your cloud account. Your cloud account is now ready, and all your connected workspaces are displayed on the Workspaces screen. For cloud-hosted workspaces, a cloud account is automatically created for the customer when initiating your workspace with us for the first time. Now that your Rocket.Chat cloud account is ready, we'll proceed to managing your Rocket.Chat cloud account and services.", "tokens": 432}
{"title": "Manage Your Cloud AccountCustom Domain for Your Cloud-Hosted Workspace", "content": "With your Rocket.Chat account, you can manage different type of workspaces, subscribe to any of Rocket.Chat premium plans, review payment methods and invoices. To access your Rocket.Chat cloud account, log in to your cloud account with your email and password or via a login link sent to your email. To access your cloud account via a login link, Go to Rocket.Chat Cloud. Enter your Email Address and then click Send Login Link. You'll receive an email with the link to sign in to your cloud console. From the email, click Sign In or copy and paste the URL into your web browser to access your cloud account. To reset your password, Go to Rocket.Chat Cloud. Navigate to Enter password instead > Reset password. Enter the email address associated with your account. Click Reset Password. You'll receive an email to finish the password reset process. Congratulations! - you can now access your cloud account. Moving on, this guide will walk you through optimizing your Rocket.Chat cloud account, reviewing payment methods, and managing your workspace and their subscriptions. Rocket.Chat Cloud allows you to set custom domains for registered cloud-hosted workspaces. However, it's important to note that if a custom domain encounters issues, there is currently no built-in redirect option. To set a custom domain, Login to your cloud account. Click Edit next to your default URL Select Use custom domain, set your new domain, and click Save. You're informed to await DNS verification, and your domain URL is currently showing a pending status. Typically, registrars finalize nameserver updates within 24 hours. Once this process is complete, expect an email from Rocket.Chat Cloud. In the next guide, you'll learn how to optimize your Rocket.Chat cloud profile.", "tokens": 387}
{"title": "ProfileOrganization Settings", "content": "To update your Rocket.Chat cloud account profile, Click your Avatar icon. Select My Profile. Update the required information. You can update your avatar, name, and phone number. Click Save Changes. Congratulations - you just updated your Rocket.Chat cloud profile. In the next section, we'll discuss the various organization settings update you can make in your Rocket.Chat cloud account. As a workspace administrator, you can modify your organization information in Rocket.Chat cloud. To update your organization's information, From the sidebar menu, click Organization. Update your organization details in the Organization Settings screen. Then, click Save Changes. Now that your organization information is up-to-date, we'll delve deeper into managing your various workspaces and their subscriptions on Rocket.Chat cloud.", "tokens": 167}
{"title": "Workspaces", "content": "As a workspace administrator, you can view and manage all the workspaces linked to your cloud account. Log into your cloud account. Click Workspaces from the sidebar menu. The list of workspaces is displayed . The following information is displayed: The names and domains of the workspaces. The region and deployment of the workspaces . Self-hosted/self-managed workspaces: These refer to workspaces that you deploy and host on your choice of \u00a0server. It supports all plans. SaaS cloud workspaces: These refer to workspaces hosted by Rocket .Chat on our cloud. It supports the Pro and Enterprise plans. The status of the workspace. Click the kebab menu to see the actions that can be taken for the workspace . For self-managed workspaces, you can remove the workspace and cancel the subscription. See Workspace actions for details. Click any workspace to view its plan, push notification limit, total usage, and push notification usage . If you want multiple cloud-hosted workspaces under the same cloud account, contact us at support@rocket.chat. When you deploy a new workspace, here are some important details to note: The new workspace is automatically subscribed to the Starter plan . As you exceed the scale limits of the Starter plan, your workspace is granted a 30-day Pro plan trial to explore the Rocket.Chat features that are accessible on the Pro plan . If your workspace is already subscribed to the Pro plan and exceeds the scale limits, you are granted a 30-day Enterprise trial to experience the Rocket.Chat features that are available on the Enterprise plan . Cloud-hosted workspaces start off with a Pro trial, not the Starter plan. You can modify your workspace plan on Rocket.Chat Cloud, with the option to upgrade, downgrade, or switch to monthly or yearly plans. Log in to your Rocket .Chat Cloud account. Navigate to Workspaces and select the workspace. Click Subscribe or Manage subscription (if you already have a subscription). A Manage Subscription panel is displayed, providing options for the add-on or plan subscriptions to select from", "tokens": 454}
{"title": "Workspaces", "content": ". Add plan or add-on: Select the plan or add-on you want to subscribe to. Select your billing plan cycle as Monthly or Yearly. Update the units of Seats (workspace users) or MAC packs you want to purchase for the selected plan . A minimum of 51 seats is required. Click Save to continue. Validate the checkout, add your card details, and click Subscribe to complete the purchase. You can only manage your subscription for the Pro plan on Rocket.Chat Cloud . To subscribe to our Enterprise plan, contact our sales team. You can purchase MAC packs only for the plan that you are on. For example, if you are on the Starter plan, to purchase Pro Mac packs, you must also purchase Pro seats . Upon successful checkout, your subscription is activated and you receive an invoice via email. If you decrease the number of already purchased seats, the cost is refunded as a credit to your Rocket.Chat Cloud account", "tokens": 201}
{"title": "Workspaces", "content": ". Once your subscription is successful, navigate to Administration > Subscription on your workspace and click Sync license updates to sync these changes. To cancel your subscription, see Cancel Workspace Subscription . You can take the following actions on a workspace: Restart a workspace Cancel a workspace Update a workspace Restarting and updating workspaces from Rocket.Chat cloud is only available for cloud-hosted workspaces . If you encounter any problems with your workspace, you can try restarting it to resolve the issue. This disconnects you from the workspace, which is then shut down and restarted. A server restart is recommended for minor performance issues like slow messages . Once you restart your workspace, it may take anywhere from 1 to 5 minutes (depending on the number of users) for it to become available again. To restart your workspace, From the sidebar menu, click Workspaces . Click the kebab menu icon beside the workspace and select Restart. You have the option to cancel your subscription and hibernate your workspace. To cancel a workspace, From the sidebar menu, click Workspaces . Click the kebab menu icon beside the workspace and select Cancel. Only workspace administrators can terminate subscriptions from Rocket.Chat cloud. When canceling a workspace, the status shows as \"canceling\" until the end of your billing cycle . Once the billing cycle is over, the status changes to \"canceled\". Should you reconsider your decision within 30 days of canceling your workspace, contact us at support@rocket.chat to restore your workspace . However, if more than 30 days have elapsed, you need to create a new workspace. You can update your workspace to the latest Rocket.Chat version from your cloud account. To update your workspace, From the sidebar menu, click Workspaces . Click the kebab menu icon beside the workspace and select Update. If you are using a Community workspace, you can upgrade to the Starter plan from the cloud portal. Log in to your Rocket.Chat cloud account . Go to the Workspaces tab and locate the Community workspace that you want to upgrade. Click the kebab menu against the workspace and select Upgrade to Starter. Your workspace will be subscribed to the Starter plan. With your Rocket .Chat cloud account, you can manage both self-hosted and cloud-hosted workspaces. This includes subscribing to plans and add-ons for the workspace. In the next section, we'll highlight handling invoices for your subscriptions.", "tokens": 543}
{"title": "InvoicesPayment Methods", "content": "From your Rocket.Chat cloud account, you can view the list of invoices for your subscriptions and filter them by product or workspace. You can download these invoices either as PDF or CSV. You can also multi-select invoices to download specific invoices. To view and download your invoices, From the sidebar menu, click Invoices. You can see the list of your invoices and other associated details like workspace, product status, and date. Select the invoices and click Download CSV. In the next section, we'll discuss setting up payment methods in your Rocket.Chat cloud account. On your Rocket.Chat cloud account, you have the option to set up multiple payment methods for subscriptions using your credit or debit card. You can also set a default payment method for your convenience. From the sidebar menu, click Payment Methods. Then, click Add Payment Method. Add your credit/debit card details. Click Add Card. Click the kebab menu against the card to display dropdown options. Click Delete to delete a payment method. Click Make Default to set it as the default payment method for your cloud account. If you have only one credit card added, you can't delete it yourself. Contact support@rocket.chat to get it deleted. For sales-enabled customers, wire transfer is the supported payment method. Organizations managing their subscriptions themselves can use credit cards or their US bank account details (ACH debit transfer). In the next section, we'll discuss the various measures you can take to secure your cloud account.", "tokens": 340}
{"title": "Security", "content": "Rocket.Chat prioritizes data security in all of our services and offers robust security measures to protect your data in your Rocket.Chat cloud account. In this section, learn how to manage the security settings of your account. Sign out from your cloud account and click Reset password on the login page. A password reset link is sent to your email if it matches an account. Click Reset My Password from the email to update your new passwords for your cloud accounts. Enabling Two Factor Authentication (2FA) adds an extra layer of security to your Rocket.Chat Cloud account. To set up 2FA (two-factor authentication) for your cloud account, you must first have a password set up. To set up 2FA for your cloud account, From the sidebar menu, navigate to Security > Two-factor authentication. Click Enable. A modal is displayed, prompting you to enter your TOTP (time-based one-time password) or to set up one if you don't have one. Download any Authenticator app of your choice to proceed. Some popular Authenticators include Google Authenticator, Authy, and Duo. Scan the QR Code with your Authenticator app or set up the Authentication keys manually. Enter the TOTP code from your authenticator app and click Next. A list of backup codes is displayed. Save them securely in case you lose access to your Authenticator app. When you enable 2FA on your account, you're prompted to provide an Authenticator code when resetting your password or logging in using passwords and passwordless methods. Congratulations\u2014your 2FA setup is complete. The number of backup codes left is displayed, and a button to disable 2FA or generate new codes is available. To delete your account, go to Security and click Delete account. Keep the following points in mind: If you have an ongoing paid subscription or an active contract, you cannot delete your account. Once the duration of the subscription or contract is complete, you can delete your account. If you are the owner of any workspaces and organizations associated with your account, they are all deleted with account deletion. If you are not the owner of workspaces and organizations, you are removed from the organization with the account deletion. Refer to the Privacy Policy topic to learn about Rocket.Chat's policies regarding the collection, use, and disclosure of personal data.", "tokens": 493}
{"title": "Support Center", "content": "Welcome to the Rocket.Chat Support Center! We are dedicated to providing exceptional service and ensuring the smooth operation of your workspaces. Rocket.Chat offers a variety of support options for premium plans and community workspaces. As a paying customer, you are entitled to direct support from our support team. Rocket.Chat offers three distinct support options, each designed to meet our customers' diverse requirements. The following table shows the details of the support plans: Support Standard: This plan is available for self-service (customers who deploy and subscribe to Rocket.Chat plans themselves) and sales-enabled customers. Support Plus and Mission Critical: These plans are only available for Enterprise and Chat Engine customers. A dedicated Customer Success Manager (CSM) oversees a comprehensive onboarding process and designs a strategy roadmap for product adoption aligned with your desired business outcomes. The CSM's role extends to serving as a trusted advisor and advocate for the customer within our organization. Service Level Agreement (SLA) timelines represent the window within which customers can anticipate an initial response. These should not be misconstrued as the expected resolution time. Our SLAs are meticulously structured, considering the ticket priority, the specific paid plan or product involved, and the status of the customer's account. 12x5 support: Our support agents are available to respond to tickets from Monday to Friday, 8 AM to 8 PM BRT. 24x7 support: For high-severity tickets, we offer round-the-clock support through our hotline, available 24 hours a day, 7 days a week. Refer to the following documents for further details: Support Ticket Classification System: Learn about our ticketing system. Support Prerequisites: Understand the workspace requirements to receive optimal support. Contact Support: Find the various contact channels we provide. At Rocket.Chat, we are steadfast in our commitment to providing you with the support you need to ensure uninterrupted business operations and the best possible experience with our services. Opting for the Starter and Community workspaces grants you access to our vibrant peer-to-peer community assistance. The community members often provide insights and solutions to common challenges. Additionally, our extensive documentation serves as a comprehensive guide, ensuring that most of your questions are addressed without needing external assistance.", "tokens": 474}
{"title": "Trust Center", "content": "Rocket.Chat meets your high-security requirements with robust privacy and legal compliance. Explore the Trust Center to learn how we commit to providing modern collaboration while protecting sensitive data.", "tokens": 36}
{"title": "Security Center", "content": "Welcome to the comprehensive guide on Rocket.Chat's security and compliance features. This documentation serves as a centralized resource for all security-related information about Rocket.Chat, offering detailed insights into the various security aspects of our product. Whether you're looking to understand specific features or seeking compliance-related information, this guide is designed to navigate you through Rocket.Chat\u2019s security landscape efficiently. Rocket.Chat integrates security into numerous platform features. For detailed information on each security feature, utilize the search function in our Docs section with relevant keywords like OAuth, LDAP, and Encryption. Explore summaries of critical security aspects in the following sections: Compliance resources: Information on certifications like ISO 27001, aiding organizations in assessing Rocket.Chat's suitability. Security fixes and updates: An overview of recently addressed vulnerabilities and the versions they affect. End-to-end encryption specifications: Details on our encryption algorithms and functionalities. Security features overview: A comprehensive look at Rocket.Chat's security solutions, including features, testimonials, and use cases. Privacy policy: Information on how personal data is processed. Terms of use: Legal documentation outlining the provision of use, like push notifications. GDPR compliance: Documentation on the GDPR requirements implemented in 2018. Vulnerability Reporting: Guidelines on reporting security vulnerabilities. Code of Conduct: Rules governing behavior on our servers. White hat hall of fame: Recognizing contributors who have enhanced Rocket.Chat's security. Company security policy: An insight into how Rocket.Chat manages security internally. This documentation is continually updated to reflect the latest in security and compliance standards. For any additional queries or clarifications, please reach out to security@rocket.chat. Your security is our priority, and we are committed to providing a secure and compliant communication platform.", "tokens": 381}
{"title": "Security Guidelines", "content": "Rocket.Chat is a communications platform designed with a deep understanding of its users' need for strong security, data protection, and privacy controls. It provides a comprehensive set of security features and customizable configurations to safeguard workspaces against potential threats . These security controls allow administrators to fine-tune the platform to meet specific organizational requirements, ensuring that sensitive information remains protected. The following guidelines help administrators understand and configure the main security features of Rocket.Chat. Rocket .Chat allows administrators to decide whether users\u2019 avatars will be available for unauthenticated users or not under the accounts settings . If administrators believe that there\u2019s no reason for them to allow access to users\u2019 avatars to unauthenticated users, they should block it. In the latest versions of Rocket.Chat, avatar access to unauthenticated users is disabled by default", "tokens": 176}
{"title": "Security Guidelines", "content": ". A Content Security Policy (CSP) is a security feature that helps prevent cross-site scripting (XSS) attacks by controlling which resources can be loaded by the Rocket.Chat web client . By defining a strict CSP, administrators can limit the execution of malicious scripts or the loading of resources from untrusted domains. It's important to configure CSP headers to only allow trusted sources for scripts, styles, and other resources . Workspace administrators can configure the Content Security Policy (CSP) to allow scripts from external domains when necessary. However, caution is required to avoid introducing security risks. For instance, allowing scripts from domains like github .com can be dangerous, as anyone can upload potentially malicious code to GitHub repositories, making it easy to circumvent CSP protections. To mitigate this, administrators should carefully select and limit the domains they trust to minimize vulnerabilities. Lastly, disabling CSP entirely exposes Rocket .Chat to significant security risks and is strongly advised against. CORS (Cross-Origin Resource Sharing) enables websites to communicate with Rocket.Chat workspaces by allowing them to send requests and access the responses . For workspaces that don't require interaction from external websites, CORS should remain disabled for security reasons. If enabling CORS is necessary, it should be configured to permit only specific, trusted domains . Using wildcards (*) or null values in CORS settings is especially risky and should be avoided. Rocket.Chat is designed to be a robust middle-tier application server", "tokens": 331}
{"title": "Security Guidelines", "content": ". While it doesn't handle SSL directly, it seamlessly integrates with trusted and high-performance reverse proxy servers like Nginx. By configuring one of these servers, you can effectively manage SSL for your Rocket.Chat instance, ensuring secure and reliable communication . When setting up a reverse proxy in front of your Rocket.Chat server, you must configure Rocket.Chat to use the correct clientAddress. The rate limiter and other features may not function properly if this is not done . Set HTTP_FORWARDED_COUNT environment variable to the correct number of proxies in front of Rocket.Chat - by default, it is set to 1 . Additionally, ensure that your proxies and load balancers ignore the X-Real-Ip header when making requests from end users. Rocket.Chat prioritizes the X-Real-Ip header when determining the clientAddress . Misconfigured proxies could allow users to bypass rate limiting and other security measures. Data Loss Prevention (DLP) is a security mechanism designed to ensure that sensitive data is not improperly shared, misused, lost, or accessed by unauthorized individuals. Rocket .Chat\u2019s DLP app provides several features to prevent data loss, including restricting access to sensitive information, monitoring data transfers, and detecting or blocking potentially harmful activities . For example, if sensitive information like credit card numbers, phone numbers, or IP addresses is shared in a Rocket.Chat room, the DLP app can help prevent or limit such exchanges . To enable DLP in your workspace, the administrator must install and configure the DLP app from the Rocket.Chat marketplace. Pictures and images may contain sensitive information in the metadata format - such as geolocation and information about the device that took the picture", "tokens": 376}
{"title": "Security Guidelines", "content": ". If administrators believe there are no use cases for images and pictures being uploaded with metadata, EXIF metadata removal should be enabled. In the latest versions of Rocket.Chat, metadata removal is enabled by default . File uploads are critical for many organizations, but they also introduce potential security risks that must be carefully managed. If an administrator determines that file uploads are unnecessary for their workspace, it\u2019s best practice to disable the feature entirely to reduce exposure to these risks . For workspaces where file uploads are needed, the following settings are recommended to enhance security: Set File Size Limits: Prevent users from uploading excessively large files that could consume valuable storage space or slow down system performance . Restrict File Types: Only allow necessary file formats to be uploaded. Block potentially dangerous file types such as .exe, .sh, .js, and others that could contain malicious code . Limit File Access: If unauthenticated users don\u2019t need access to file uploads, configure Rocket.Chat to block their file access, ensuring that only authorized users can view or download shared files. Detailed instructions for configuring file uploads are available here . Implementing a password policy sufficiently complex prevents your users from setting easy-to-guess passwords that attackers can leverage. Rocket.Chat allows administrators to configure password policies as they see fit . We recommend the following settings: At least 12 characters Lowercase letters Uppercase letters Numbers Symbols Rocket.Chat has a large list of permissions that can be configured . However, providing users with more privileges than they need to do their jobs or granting them dangerous permissions that could lead to admin access must be a concern. Administrators should follow the Principle of Least Privilege (POLP) to minimize potential security risks . This means that users should only be granted the minimum level of access necessary to perform their tasks. Administrators should regularly audit user roles and permissions to ensure no user has more access than required . Some recommendations include: Assigning roles based on job responsibilities Limiting administrative access to only trusted personnel Regularly review and update user access rights, especially when roles change or users leave the organization. The retention policy in Rocket", "tokens": 452}
{"title": "Security Guidelines", "content": ".Chat allows you to automatically delete old messages and files in your workspace based on custom rules. If you prefer not to keep messages or files indefinitely, you can enable the retention policy to remove them automatically after a specified period . Retention policies can be applied globally across all rooms or customized room-by-room. For example, you might choose to delete messages older than 30 days in casual chat rooms while keeping project discussions for six months . 2FA is a powerful security measure that adds an extra layer of protection to user accounts in Rocket.Chat. By requiring a password and a second verification method, 2FA helps prevent unauthorized access, even if a user's password is compromised . This additional step significantly enhances the security of your Rocket.Chat workspace, making it much more difficult for attackers to gain access to sensitive data or conversations. 2FA in Rocket .Chat can either be: Email 2FA TOTP (Authenticator) 2FA. As a security best practice, workspace administrators should ensure that 2FA is enabled on their workspaces . Disabling it may expose your workspace to significant security risks.", "tokens": 235}
{"title": "Security Policy", "content": "Refer to the security policy in our handbook.", "tokens": 11}
{"title": "Security Compliance Program", "content": "A security compliance program is a structured approach implemented by organizations to ensure adherence to relevant laws, regulations, standards, and best practices related to information security and privacy. Rocket .Chat is committed to maintaining the highest standards of information security and regulatory compliance and understands that such programs are essential for safeguarding sensitive data, protecting systems and networks from cyber threats, and maintaining the trust of customers, partners, and stakeholders . The security compliance program is primarily the responsibility of our Governance, Risk, and Compliance (GRC) team. They oversee the development, implementation, and monitoring of policies and procedures to ensure compliance with relevant regulations and standards . They also work closely with executive leadership to align security initiatives with business goals and priorities. Additionally, successful adherence to the security compliance program requires collaboration and assistance from various departments: The security team contributes expertise in implementing technical controls and addressing specific security threats . The engineering and SRE teams ensure that security measures are integrated into the development and maintenance of our systems and infrastructure . The executive team provides strategic direction, resources, and support for security initiatives, ensuring that security is integrated into the organization's overall business strategy and objectives. Legal provides guidance on regulatory requirements, privacy laws, and contractual obligations . The people team plays a vital role in promoting a culture of security awareness and accountability among employees through training, communication, and policy enforcement . All employees are responsible for adhering to security policies and procedures, reporting potential risks or incidents, and actively participating in training and awareness programs. The key components taken into consideration by Rocket .Chat are the following: The company has adopted the ISO 27001 framework, which is an internationally recognized standard for information security management systems (ISMS). This framework provides a systematic approach for managing and protecting sensitive information assets . A comprehensive security policy is in place, complemented by sub-policies that address specific security topics such as access control, vulnerability management, data protection, incident response, business continuity, and more . These sub-policies provide detailed guidance on implementing best practices in various areas of information security. In addition to our security policies, Rocket.Chat maintains operational procedures documentation for its main processes . This includes procedures, runbooks, and playbooks to provide clear guidance and instructions for our teams, ensuring consistency and effectiveness in our operations", "tokens": 460}
{"title": "Security Compliance Program", "content": ". The company has established an internal controls policy to establish and maintain effective information security controls that safeguard the confidentiality, integrity, and availability of Rocket.Chat\u2019s assets and operations . It also describes the mechanisms for implementing and monitoring controls to ensure the effectiveness of the information security management system. This policy covers areas such as access controls, data protection, incident response, and business continuity planning . The company conducts regular risk assessments to identify potential threats and vulnerabilities to its information assets. Based on the results of these assessments, appropriate risk mitigation measures are implemented to minimize the likelihood and impact of security incidents. Rocket .Chat conducts annual internal audits to assess the effectiveness of its security controls, policies, and procedures in accordance with the ISO 27001 standard . These audits are performed to evaluate the company's compliance with established security requirements, identify areas for improvement, and recommend corrective actions as needed . Thorough assessments of our vendors and service providers are conducted to ensure they meet our security standards and adhere to applicable regulations, mitigating risks associated with third-party relationships. The company is committed to continuous improvement of its information security practices and processes . Findings from internal audits are used to identify opportunities for enhancement, and corrective actions are implemented to address any deficiencies or non-conformities identified during the audit process. Rocket .Chat provides regular training and awareness programs to educate employees about security policies, procedures, and best practices. Employees are encouraged to promptly report any security incidents or concerns, fostering a culture of security awareness throughout the organization . The company maintains thorough documentation of its security policies, internal controls, audit findings, and corrective actions taken. This documentation serves as evidence of compliance with ISO 27001 requirements and facilitates transparency and accountability in security governance. Rocket .Chat actively strategizes and pursues certifications that align with our business objectives and provide tangible benefits and the utmost credibility and assurance regarding the security and quality of our products and services . We remain vigilant in assessing the evolving landscape of certifications and their relevance to our industry and customer needs. Rocket.Chat certifications are available on the Compliance Resources page. To communicate with our compliance team, please email compliance@rocket.chat.", "tokens": 451}
{"title": "Rocket.Chat Security Fixes, Updates, and Advisories", "content": "This document provides comprehensive information on security updates, advisories, and patched vulnerabilities in Rocket.Chat products. Rocket.Chat regularly updates and addresses recently patched security issues. To report security issues, please refer to our Responsible Disclosure Policy. We value and appreciate your contributions to keeping Rocket.Chat secure. New Issues: Security issues are initially listed without detailed descriptions to allow administrators and users time to update. Detailed information is provided with the next version release. For example, fixes introduced in the version x.1 will be elaborated upon in the version x.2. Legacy Versions: Due to significant code differences, providing fixes for legacy versions is increasingly challenging. Therefore, we focus on maintaining and updating the most recent versions. For details on supported versions, refer to our support center. Staying Informed: Stay up to date on new version updates by subscribing to our newsletters or enabling announcements in Rocket.Chat server administration settings. We recommend promptly updating to the latest version to ensure you have the newest security fixes. All identified vulnerabilities in our product are addressed by assigning a Common Vulnerabilities and Exposures (CVE) identifier. For more details, refer to our CVEs list. The Security Advisories section provides information on security vulnerabilities reported and fixed in Rocket.Chat products. Disclosure Timeline: To enhance user safety, advisories are disclosed 30 days after the release of a fix. For detailed information on Rocket.Chat\u2019s vulnerabilities and assigned CVEs, see the Rocket.Chat CVE list. Security Advisories 2024 Security Advisories 2023 Security Advisories 2022", "tokens": 341}
{"title": "Compliance Resources", "content": "Rocket.Chat is committed to maintaining the highest information security and regulatory compliance standards. This document outlines our adherence to industry standards and regulations, detailing our certifications and compliance measures. Our commitment to these standards ensures that Rocket.Chat remains a trusted and secure platform for all users. Scope: Hosted Offering, App Store, Software Development Details: Rocket.Chat is certified under ISO 27001, an internationally recognized standard for information security management systems. Our adherence to this standard is validated annually by an independent third-party auditor. Certification period: Valid from June 2020 to June 2026 Applicability: This certification is crucial for due diligence, security reviews, regulatory compliance, internal audits, and supply chain audits. Statement of Applicability document includes a comprehensive list of controls, specifying their relevance and applicability. First certification date: June 2020 Certifying body: QMS Certification Services Certificate 2023.pdf Certificate 2020.pdf Scope: Hosted Offering Details: Rocket.Chat has obtained a SOC 2 Type I attestation report, confirming that our controls are suitably designed and provide reasonable assurance of meeting service commitments and system requirements. Report type: Type I, covering Security, Confidentiality, and Availability Issued by: Prescient Assurance LLC Date: 29 October 2024 Validity: Valid until October 2025 Letter of Attestation: Your browser does not support PDF. Click here to download. Prospects: Are required to sign our Non-Disclosure Agreement (NDA) to have access to SOC 2 Type I report. Active customers: For active customer with signed customer terms, kindly contact our compliance team or your CSM and furnish them with the email address to which the report should be dispatched. If you are a rocketeer providing the report: Check if the prospect or customer has an NDA in place and allign with compliance team the provisioning of the report. Requesting the report: Please send your request to compliance@rocket.chat Contact information: For more details and/or questions, compliance@rocket.chat Rocket.Chat's commitment to compliance and security is an integral part of our service offering. By adhering to these rigorous standards, we ensure our platform remains secure, reliable, and trustworthy for all stakeholders. For any further inquiries or specific compliance-related questions, please reach out to our compliance specialists.", "tokens": 475}
{"title": "End-to-End Encryption Specifications", "content": "Rocket.Chat provides end-to-end encryption (E2EE) for secure communication. In an E2EE session, only the participants can decrypt and view messages, ensuring that no third party (including the server) can access the content . This document explains the technical implementation of E2EE in Rocket.Chat, including key generation and encryption processes, and supplements the user guide. IMPORTANT: E2E encryption functionality includes notable restrictions that workspace owners should carefully consider before activating this feature . Here are what to keep in mind: Encrypted messages of encrypted rooms will not be found by search operations. Bots may not be able to see encrypted messages until they implement support for it . Spotted a bug? Help us improve by reporting it directly to Rocket.Chat! When a user logs in, the client auto-generates an encryption password and prompts the user to save it . This password generates a secure 256-bit AES-CBC encryption key called the \u201cMaster Key.\u201d The Master Key is central to encrypting and decrypting the user\u2019s private key . Each user has a public-private key pair (Ku, Kr) generated by the client upon first login . The public key (Ku) is stored on the server, while the private key (Kr) is first encrypted using the Master key and then also sent to the server for storage in the User model database . If a public-private key pair already exists in the database for the user, instead of being generated again, it is downloaded from the server. The downloaded public key is used as-is, and the encrypted private key is first decrypted using the master key", "tokens": 362}
{"title": "End-to-End Encryption Specifications", "content": ". If the master key has not been decrypted on the client side already, the user is prompted to enter the master key again. The public key encrypts a persistent session key (Ks), which is then used to encrypt messages and files . This encrypted session key is stored in the database in the Subscription model for every user in a room (including the user who initiates the E2EE session) . This method works for direct messages and groups since direct messaging is just a room with only two people in it . When starting a new E2EE session, if an existing session key exists in the current user's room subscription, it is downloaded and decrypted using the user\u2019s private key and then used to encrypt future messages . If an existing session key is not found in the database, the current user generates a new one, which is then encrypted for every user in the room and stored in the database . Once a session key has been obtained above, we enter E2EE mode, and all messages sent henceforth are encrypted using this session key . Because keys are stored in the database and are persistent, the other users in the room do not need to be online to participate in an E2EE conversation. The relevant code for Rocket .Chat\u2019s E2EE implementation is located in the following locations: E2EE client code Helper functions Client key pair: RSA-OAEP, 2048-bit Master key: AES-CBC, 256-bit, with 1000 iterations (PBKDF) Session key: AES-CBC, 128-bit User login and key generation: Users are prompted for their E2EE password when they log in . This password generates the Master Key using a Password-Based Key Derivation Function (PBKDF). The server checks if the user already has a public-private key pair stored. If found, the private key is downloaded and decrypted using the Master Key", "tokens": 421}
{"title": "End-to-End Encryption Specifications", "content": ". If not, a new key pair is generated. Client startup: Using startClient() in rocketchat.e2e.js, the client\u2019s local storage is checked to determine whether this is a new client or not . If the local storage does not have the public-private key pair for this client, then this is treated as a new client, and a new RSA-OAEP key pair is generated using a function call to: This key pair is finally stored in the client\u2019s local storage in a serialized form (JSON-stringified) . This serial form of the public key and encrypted private key is also sent over to the server database using a server-method call to addKeyToChain(). Starting an E2EE session: The handshake() function in rocketchat.e2e .room.js is executed when a client starts a session in a room. The process begins by attempting to retrieve an encrypted session key from the database for the given user-room pair", "tokens": 223}
{"title": "End-to-End Encryption Specifications", "content": ". If this key is found, it is decrypted using the client\u2019s private key, and the E2EE session is initiated with the decrypted key . A new AES-CBC session key is generated if no session key is found for the user\u2019s subscription to the room . This is accomplished by calling the function: Once the new key is generated, it must be encrypted and stored in all users' subscriptions in the current room . To do this: Fetch the public keys for all users in the room using server-method calls to getUsersOfRoomWithoutKeys(), which returns the userId plus the public key from this user . This is done in batches, so some users are expected to receive keys before others. Encrypt the newly generated session key with each user\u2019s public key. Call provideUsersSuggestedGroupKeys() . This will add the newly encrypted Session Key as a suggestedKey, on the user\u2019s subscription. This process doesn\u2019t require all users to be online simultaneously . As long as a user with the Session Key is online, the exchange of keys will continue to work until all users in the room (with valid public keys) have a suggested key . Upon login, users will receive the suggested keys that have been shared with them via their subscription. Users will then evaluate the keys, attempt to import them into the E2E worker, and either\u00a0accept\u00a0or\u00a0reject\u00a0them . If a user accepts the key, the Suggested Key is moved into the E2EKey property on their subscription, meaning that the user now has a valid Session Key and can share this key with others . If a user rejects the key, the Suggested Key is removed from the subscription, and the user is put on the virtual queue of users waiting for keys, allowing other users to provide them with keys", "tokens": 391}
{"title": "End-to-End Encryption Specifications", "content": ". With these steps completed, the E2EE session is successfully started using the newly generated session key. Client sends a message: The onClientBeforeSendMessage event is triggered when a user sends a message . The message object is encrypted using the session key obtained in the previous step when E2EE is in session. The encrypted message is then placed inside a new object. This object contains two parameters: msg: the encrypted message . t: a type parameter set to \u201ce2e\u201d to identify it as an encrypted message rather than a regular one. The structure of the new message object now looks like this: This new object is then sent to the recipient . As a result, the original message remains invisible to anyone except the intended recipient, and only the encrypted message is transmitted . The client receives a message: When a message object is received, using the onClientMessageReceived event, we intercept the message and check whether the t type parameter of the message object is \u201ce2e\u201d, like we set when sending the message . If it is not, we don't need to decrypt it as it is a plain text message, and E2EE was not used . If it is an encrypted message, we take the \u201cmsg\u201d parameter\u2019s value and decrypt it using the session key . Note that if the receiving client does not have the session key in its local storage, it will have to download the encrypted session key from the server using the fetchGroupE2EKey method and then decrypt it using its own private key . Then, use this key to decrypt the incoming message. Saves a user\u2019s public key and encrypted private key to the server. Request: Response: { success: true } Fetches current user\u2019s public and encrypted private keys from the server database", "tokens": 412}
{"title": "End-to-End Encryption Specifications", "content": ". Request: {} Response: Fetches a list of public keys plus userIds of users on the selected room that are waiting for E2E keys . Request: Response: { success: true, users: [{ userId: \u2018xxx\u2019, public_key: \u2018xxxx\u2019 \u00a0}] } Defines the keyID for the room . KeyID is derived from the encryption key and is used to identify the right encryption key in rooms with multiple room keys. Request: Response: { success: true } Updates a user\u2019s Group (Session) Key . When a user creates a new conversation, after generating the Session Keys, the user defines this Session key on their own Subscription. After this, the user may start sharing the key with other users . When the uid parameter is different from the user who\u2019s calling the endpoint, the sent encrypted key will be defined as uid\u2019s Suggested Key . Request: Response: { success: true } Upon validating a suggested key, mark the key as valid and define it as the proper Session Key for the user. If there\u2019s a suggested oldKeys, they\u2019re also accepted . Request: {} Response: { success: true } Upon validating a suggested key, remove it from the user\u2019s subscription and put the user back into the waiting queue . Request: {} Response: { success: true } Provides a list of users waiting for keys on the room with a suggested key for the room . This key will be stored in the E2ESuggestedKey property on each user\u2019s subscription so they can validate the next time they\u2019re online . Request: Response: { success: true } Allows an authorized user to reset the Session Key of a room for all users", "tokens": 366}
{"title": "End-to-End Encryption Specifications", "content": ". Response: { success: true } Push Notifications for messages in an E2EE room just contain the encrypted payload of a message. The job of decrypting this content before it is shown is done locally by the mobile clients (iOS/Android) . The server sends push notifications. However, it doesn't store the unencrypted content of any message from an E2EE room because only the encrypted string is stored on the server . These encrypted strings can only be decrypted using a user's private key, which is stored locally on clients. When a new push notification from an E2EE message arrives, it has a \u201cmessageType: 'e2e'\u201c . The mobile client then starts decrypting the message within the push payload, checking for a user's locally stored private key and the E2EE key of the room where the message came from . If both are found, the message is decrypted locally on the device and then shows the plaintext message. Only the encrypted message content is passed via the push notification gateways in this process. This feature is available in our community edition . To add an additional layer of security, there exists another feature for push notifications: Fetch full message content from the server on receipt This means to request the push message content from the server to display it, and it does not pass any message content - encrypted or not - via Google/Apple/other push gateways . Instead, the message content itself is fetched by and within the Rocket.Chat client itself. What passes via the gateways is only the information that a new message should be fetched and then shown as a push notification . Once the client receives this, the client will fetch the content. This way, you can prevent the message content (even in encrypted form) passes via a separate gateway. This feature is enterprise edition only", "tokens": 407}
{"title": "End-to-End Encryption Specifications", "content": ". OTR is closely related to end-to-end encryption. It uses the same ciphers but instead uses only the participant\u00b4s local session storage to store the keys . Keys are exchanged when the counterpart accepts the OTR invitation, so all participants need to be online. Messages from an OTR session are removed when the session storage is cleared . Given the nature of E2EE, when all users lose their Session Keys for a conversation, the contents of previously encrypted messages cannot be recovered without an attempt to break the encryption, which may not be possible. On Rocket .Chat, the same holds true. If all participants in a conversation lose access to their Session keys, the conversation is gone forever . However, this presents a problem: even when the messages cannot be decrypted anymore, you may still need to continue the conversation in the same room instance without creating a new room or disabling the E2EE status of the room . To prevent this from happening, the possibility of resetting the encryption keys for a conversation has been added . After a user resets the Session keys for a room, all users\u2019 previous keys will be removed from their subscription, allowing them to receive a new key . The process goes as follows: E2EE room key reset flow User A resets the Session Key in room Z User A creates a new Session Key and derives a new KeyID The server then removes the E2EKey property from all users in the room", "tokens": 303}
{"title": "End-to-End Encryption Specifications", "content": ". A new room key is distributed to the other users, and the conversation may continue. The terms session key and room key are used interchangeably in this document . However, what happens if some users still have an E2EKey on their subscription ? The server doesn\u2019t know if this key continues to be valid, so to prevent unwanted data loss, it will move the user\u2019s E2EKey to a new property called oldRoomKeys . This array contains keys that were on the user subscription when a room key reset happened. Clients will then use this information to try to decrypt old messages . The decryption process is as follows: Message is: keyID + encrypted content The client will attempt to match the keyID prepended on message with the keyID stored on the room object (current session key) If keyIDs match, the Client will use the current Session Key to decrypt the message . If this fails, a message will be presented on the UI with the legend \u201cMessage cannot be decrypted due to a key error\u201d If keyIDs don\u2019t match, the Client will try to find a key with the given keyID on the list of oldRoomKeys If a key is found, the message will be decrypted using that key If a key is not found, the Client will try to decrypt using the latest key If any of these attempts fail, the message is deemed to be indecipherable . The same decryption process is followed by the file encryption. If a user has old room keys, the key suggestion process has been accommodated to allow these users to share their old keys in the same fashion as the current encryption key . The list of oldRoomKeys is limited to 10 elements. After this limit is reached for a user, the oldest key will be removed, rendering old messages indecipherable . When this happens, the Client will present the legend \u201cThis message cannot be decrypted due to multiple room key resets .\u201d If there are still users with an E2EKey for the room, why not wait for this user to return online to share the key ? If I have to lose my keys to see the reset room key button, doesn\u2019t that mean I won't ever have old room keys?", "tokens": 483}
{"title": "Privacy Center", "content": "Effective date: October 20th, 2023 We have made some updates to our privacy policy which will come into effect on the effective date specified. These changes include modifications related to workspace tracking and statistics data, which have been implemented from Rocket .Chat v6.5. You can access the earlier version of this Privacy Policy here. Rocket.Chat Technologies Corp. ('us', 'we', or 'our') operates the Rocket.Chat website (), Rocket.Chat Services, including the Marketplace and associated Rocket .Chat Apps, Rocket.Chat\u00b4s Cloud Hosting Services, the Rocket.Chat open server, and the Rocket.Chat mobile applications (the 'Services'). Please note that additional privacy policies may apply to Rocket.Chat's specific services. These policies can be visited here . The following paragraph is intended to provide clarity on data processing in Rocket.Chat workspaces. Please note that there are differences in the data processing that occurs between self-hosted workspaces and workspaces hosted by us . Our Cloud Hosting service processes all data input into the workspace on our infrastructure. The table below explains the general distinction between the data processed in each case . It's important to remember that individual circumstances, such as apps installed on unregistered workspaces via workarounds, may vary. Data Type Self-Hosted Cloud Hosted at Rocket.Chat Account Data Yes . To register your workspace via an account, Yes. To register your workspace via an account Usage Data Yes. As per the service you are consuming via your registration, e.g., push notifications via our gateway, Yes . As part of using the hosted workspace on our infrastructure App Data Yes. If you install apps from the marketplace, and based on the app's use case, third-party apps have their own privacy policies . Yes, if you install apps from the marketplace based on their use case. Third-party apps have their own privacy policies. User Generated Content No. Content is not processed unless it falls under the aforementioned (e.g . the content of a push notification sent via our gateway). Yes. As part of using the hosted workspace on our infrastructure. End-to-end encrypted content is only stored in encrypted form. Tracking and Cookies Yes", "tokens": 476}
{"title": "Privacy Center", "content": ". We track your usage of services (usage data) on our end. We do not track inside the workspace. Tracking occurs to monitor the consumption of the services used. There are two classifications for Rocket .Chat self-hosted workspaces: registered and non-registered. Registered workspaces have access to a wide range of features and services and are eligible for our \"starter\" or paid plans (dependent on user counts and functionality requirements) . Note that non-registered workspaces operate independently without formal registration and no data collection by Rocket.Chat. Non-registered workspaces are only available via the Free and Open Source Software (FOSS) self-build deployment path . If you have any questions about this Privacy Policy, please contact us: Rocket.Chat\u00b4s Data Protection Officer by email: privacy@rocket.chat\u200b By visiting this page on our website: https://rocket .chat/contact\u200b To communicate with our Data Protection Officer, please email privacy@rocket.chat. Rocket.Chat is committed to transparency as part of its values. As such, we provide previous versions of our Agreements and Policies in our agreements and policies history.", "tokens": 239}
{"title": "Subprocessors", "content": "Effective Date: May 29th, 2023 We have updated this policy. For the previous version of this policy, please visit the agreements and policies history. The list below identifies subcontractors (subprocessors) that Rocket .Chat may be used to process personal data while provisioning our services . What is a Subprocessor? Due diligence Entity name Purpose Data hosting location Amazon Web Services, OVH We use OVH to underlying the infrastructure of our hosted offering, marketplace, open community server, and other services such as push notifications . We use a hybrid deployment. Generally speaking, after June 2020, all workspaces run on OVH. United States. The customer determines the location where an instance of our hosted offering is deployed during onboarding . Please reach out to support if you want to know the concrete subprocessor for your case. AWS Infrastructure that runs the cloud deployments and supports Rocket .Chat's internal processes United States MongoDB Cloud Analytics and Backup Management United States Entity name Purpose Data processing location Stripe Billing platform United States Xero Accounting United States Zoho Corporation Business operations such as email marketing, newsletter, CRM, customer support (Zoho Desk); electronic document signing: Apple Push Notification Service, Firebase Push notification service for iOS devices Google Email, file storage, collaboration tool United States Atlassian Task management software (Jira), internal documentation (Confluence) United States Document360 Public documentation, terms and policies", "tokens": 310}
{"title": "Subprocessors", "content": ". United States Oracle Financial transactions, procurement, supply chain operations United States Entity name Purpose Data processing location Clearbit Account Enrichment United States Appollo.io Marketing and Sales Intelligence. United States Rocket .Chat affiliates involved in processing personal data will depend on the location of our users and their customers and the nature of the services we provide to you . By agreeing to the DPA, you agree that all of these Sub-Processors may have access to Customer Data. The following entities are members of the Rocket.Chat Group. Accordingly, they function as sub-processors to provide the Services . Entity name Data processing location Rocket.Chat Technologies Corp. United States Rocketchat Tecnologia LTDA Brazil Entity name Purpose Data processing location Fabulor.eu Fabulor is a Rocket.Chat Official Partner . When we receive a lead from the EMEA and APAC region that qualifies under some contractual conditions, we may share this lead information with Fabulor for Sales, Marketing, and Professional services purposes . For this purpose, Fabulor may access the following Lead/Customer data: email, Contact Name, country, and phone. Belgium; Netherlands CCNet CCNet is a Rocket.Chat Official Partner . We may share the Lead/Customer's information with CCNet to reach out to them. When we receive a lead from Germany, Austria, and Switzerland, we may share this lead information for Sales, Marketing, and Professional services purposes . CCNet may access the following Lead's/Customer data for this purpose: Email, Contact Name, Country, Phone. Gie\u00dfen, Germany Sanwa Sanwa Comtec is a Rocket.Chat Official Partner . We may share the Lead/Customer's information with Sanwa to reach out to them. When we receive a Community Lead from Japan, we may share this lead information with Sanwa for Sales, Marketing, and Professional services purposes . Sanwa may access the following Lead's/Customer data for this purpose: Email, Country, workspace ID. Japan You may object to a subprocessor by submitting your objection by email to privacy@rocket", "tokens": 433}
{"title": "SubprocessorsPrivacy Policy Facebook Messenger", "content": ".chat with the subject line \u201cSubprocessor Objection,\" along with your name, company name, and name of the Rocket.Chat service, name of the subprocessor, and objectively justifiable grounds for objection unless otherwise provided for in your service agreement with Rocket .Chat which terms control. Due to the nature of our business, we are consistently updating the list and controls of our subprocessors. For more information on Rocket.Chat's privacy practices, please visit our privacy policy . If you have questions regarding this page, please get in touch with us at privacy@rocket.chat. Rocket.Chat is committed to transparency as part of its values . As such, we provide previous versions of our agreements and policies in our agreements and policies history. Please read the following Customer Terms: For Cloud Hosting deployments: Rocket.Chat Terms of Service For Self-managed deployments: Master Services Agreement We use your data to provide and improve the Service. By using the Service, you agree to the collection and use of information in accordance with this policy. Unless otherwise defined in this privacy policy, the terms used in this privacy policy have the same meanings as in our terms and conditions. Please check the facebook privacy policies here.", "tokens": 260}
{"title": "Privacy Notice for Air-Gapped Workspaces", "content": "Effective Date: December 9th, 2023 This document serves as a privacy notice for users of air-gapped workspaces. These workspaces are isolated from external networks, including the internet, and therefore do not register with Rocket.Chat's cloud services. In this document, we aim to clarify the data handling practices within these environments. An air-gapped environment is a secure workspace or system, deliberately disconnected from external networks to protect sensitive data from unauthorized access. In air-gapped environments, Rocket.Chat adheres to strict data privacy standards by not collecting: Account data: Information such as usernames, email addresses, or passwords. Usage data: Details on how users interact with the software. App data: Information about applications or services operating within the air-gapped environment. User content: Any content created or uploaded by users. Tracking of cookies: No tracking technologies or cookies are employed to gather user information Users should be aware of certain limitations inherent to air-gapped licenses: Absence of cloud services: Features like the marketplace, OmniGateway, push notifications, and other cloud-dependent add-ons are unavailable. Should an air-gapped environment opt to register with Rocket.Chat, the data collection practices outlined here will become applicable. For inquiries or concerns regarding this Privacy Notice, contact our Data Protection Officer at privacy@rocket.chat. Notice Amendments We reserve the right to update this Privacy Notice in response to changes in data practices or legal requirements. Please review this document periodically for updates, noting the effective date for the latest version. Further information on air-gapped environments can be found in our documentation on air-gapped deployment. Add-ons enhance the software's capabilities through additional features, functionalities, or integrations, such as extensions, plugins, or modules.", "tokens": 375}
{"title": "Privacy Notice for the Cloud Hosting Services", "content": "Effective date: October 20th, 2023 This document is a supplementary guide to our main privacy policy. It provides additional details and insights into how we manage your personal information under our Cloud Hosting Services. While the Privacy Policy outlines our basic principles and practices, this Privacy Notice delves into specific Cloud Hosting services aspects. It aims to give you a better understanding of our data processing activities. For our Cloud Hosting Services, we act as a Data Processor for our Customers, who are the Data Controllers of the instances they have licensed and administer. As a User, you will be bound by the Data Controller\u00b4s policies. Please direct your data privacy questions to the Data Controller for these instances. Regarding some of our Cloud Products, Customers have certain options to select the processing location of data and configure the instance's privacy-relevant settings. If you are the Customer of one of these instances, you can contact us and get more information on where your instance is running. We generally offer two regions: hosting in the United States hosting in the European Union Other regions may be added over time. The amount of Personal Data we process with our Cloud Hosting Services is limited to what the Customer and his users enter into the Service. We will not process the personalized cookie or analytics data described above in the Cloud hosting services. The purposes of processing the data are strictly limited to providing and improving the Service in accordance with the Data Controller\u00b4s instructions. We never access workspace data (i.e. the actual content the customer is entering in his instance) unless the customer asks us to in the form of a support request, we are bound by a valid law enforcement request or to protect our own interests, such as investigating potential abuse of the service. Once your usage of our cloud hosting services ceases, we will remove all your data, including backups, after a short grace period - or immediately if you tell us to.", "tokens": 385}
{"title": "Privacy Notice for the Open Server", "content": "Effective date: October 20th, 2023 This document is a supplementary guide to our main privacy policy. It provides additional details and insights into how we manage your personal information under our Open server. While the Privacy Policy outlines our basic principles and practices, this Privacy Notice delves into specific service aspects. It aims to give you a better understanding of our data processing activities. Rocket.Chat Open server is a dedicated workspace for Rocket.Chat admins, users, contributors, partners, and employees to collaborate and improve the experience of running a Rocket.Chat workspace. Open server is for testing purposes. Open server is a testing ground for our Users, and we use it to test and analyze new features. We track user activity there with the trackers described in the Privacy Policy - including Google Analytics - to learn how our service is used and to improve our product. Data collected on the Open server In addition to the data collected mentioned in the privacy policy, please note that any content uploaded by Users to the Rocket.Chat Open server will also be stored. This includes images, files, documents, and other user-generated data. Rest assured that we securely store all uploaded content in our cloud-hosted infrastructure. Data retention on the Open server Rocket.Chat reserves the right to delete inactive accounts, channels, discussions, and associated content on the Open Server. Rocket.Chat may deem an account, channel, or discussion inactive based on various criteria, including, but not limited to, the account creation date, the last time there was a valid log in and the date of the last contribution. If we plan to delete your account, we will provide advance notice by sending a message to the email address registered to your account. Rocket.Chat encourages you to occasionally utilize your account to avoid the risk of being deemed inactive. Account Deletion on the Open server If you wish to delete your account at Rocket.Chat Open server, you can log in to your account, go to Account > Profile > Excluding my account. Please note that this action cannot be undone once you delete your account.", "tokens": 424}
{"title": "Privacy Notice for Omnichannel", "content": "Effective Date: July 31st, 2024 This privacy policy applies to the Omnichannel Services provided by Rocket.Chat . While we offer detailed information in the Privacy Notice to help Customers implement these terms into their privacy policy, it is ultimately the Customer's responsibility to adjust their privacy policy in the workspace admin panel to comply with applicable regulations. Rocket .Chat is not responsible for any failures in implementation, and we recommend consulting privacy experts to ensure full compliance. Definition of Omnichannel Services Omnichannel is a Rocket .Chat service that integrates various sync and async channels to create a unified user experience and ensure consistency across all touchpoints . What data is collected through Omnichannel? Specific administrative settings determine the product's behavior, from data processing consent to the ability to be forgotten . These settings determine whether Livechat is authorized to store information collected from HTTP header data, such as IP address, User-Agent, etc . How long are Omnichannel data stored? The retention periods for messages are determined by the Customer (workspace administrator). Currently, they are unable to set a specific period for automatic deletion of Livechat . However, it is recommended that the workspace administrator removes personal data from conversations according to the applicable regulation . They can do this by accessing the configuration page and following the instructions below: Is consent required for the end-user to share data ? By enabling the \"force visitor to accept data processing consent\" field in product settings, you can customize the data processing consent according to the applicable privacy regulations in your country/industry Where is Livechat data stored", "tokens": 337}
{"title": "Privacy Notice for Omnichannel", "content": "? The location where user-generated data is stored depends on the type of contract between Rocket .Chat and the Customer. If the Omnichannel service is self-managed by the Customer, managing the storage lies with the Customer. However, if the customer opts for our cloud services, then the data will be stored in a database contracted by Rocket .Chat, which is compliant with our privacy policy. The choice of storage location is based on the Cloud Services plan contracted by the Customer and its ability to choose a specific region for data storage. Data in transit queue handling by Rocket .Chat We store the data from a message in a queue for up to 24 hours \u00a0(or less if it can be sent earlier) . This ensures message queuing and resend attempts in case of failures, making the process more robust and reliable for Customers. Where will the data be stored for that period?: The data will be stored on a secured server in the United States . For more information on our subprocessors, please refer to our Privacy Policy - Subprocessors . Is this data stored regardless of the type of Customer deployment (Self-Managed or Cloud)?: Yes, the data is stored regardless of the deployment type, as it utilizes our cloud services infrastructure . Contact Us If you have any questions or concerns about this Privacy Notice or how we handle data in air-gapped environments, please get in touch with our Data Protection Officer (DPO) at privacy@rocket .chat Additional Resources For more information about Omnichannel services, please refer to the following documentation links: Omnichannel Admin\u2019s Guide Cloud API Changes to this Notice We may update this Privacy Notice to reflect changes in our data practices or legal requirements . Please check this notice periodically for updates. The effective date will be revised accordingly.", "tokens": 380}
{"title": "GDPR", "content": "GDPR Implementation at Rocket.Chat The above will allow our community members to build and deploy GDPR-compliant systems and services. We know and understand that all of you have custom installation, configuration, and deployment environments and that you are working to ensure your own deployment of Rocket.Chat is compliant with GDPR if necessary. Meanwhile, we would welcome any advice, input, or questions you may have regarding Rocket. Chat\u2019s GDPR. Please help us by emailing your thoughts to privacy@rocket.chat. Thank you! The Rocket.Chat Team", "tokens": 114}
{"title": "LGDP", "content": "Lei Geral de Prote\u00e7\u00e3o de Dados Bem-vindo ao Privacy Center da Rocket.Chat. Aqui, voc\u00ea encontrar\u00e1 informa\u00e7\u00f5es importantes relacionadas \u00e0 nossa conformidade com a Lei Geral de Prote\u00e7\u00e3o de Dados (LGPD) . Nossa pol\u00edtica de privacidade \u00e9 Global e em conformidade com a LGPD. Disponibilizamos aqui uma vers\u00e3o da nossa Pol\u00edtica de Privacidade em portugu\u00eas para facilitar sua compreens\u00e3o . Privacy Policy - PT- 2023.pdf A LGPD estabelece diversos requisitos para garantir que as empresas cumpram as leis de prote\u00e7\u00e3o de dados. Na Rocket .Chat, estamos empenhados em aprimorar continuamente nossos processos para oferecer maior privacidade aos nossos clientes e usu\u00e1rios . Aqui, voc\u00ea encontrar\u00e1 informa\u00e7\u00f5es sobre como garantimos a conformidade com a LGPD, al\u00e9m de acessar nossa Pol\u00edtica de Privacidade . Nossa oficial encarregada de prote\u00e7\u00e3o de dados (DPO) \u00e9 a Mayra Lima Cust\u00f3dio, e voc\u00ea pode contat\u00e1-la atrav\u00e9s do seguinte email: privacy@rocket.chat . Al\u00e9m disso, voc\u00ea pode encontrar a carta oficial de nomea\u00e7\u00e3o do nosso DPO da Rocket.Chat neste link. Estamos firmemente comprometidos em proteger sua privacidade e seus direitos sob a LGPD . Se voc\u00ea tiver perguntas ou precisar de assist\u00eancia adicional, n\u00e3o hesite em nos contatar. Como a Rocket", "tokens": 433}
{"title": "LGDP", "content": ".Chat garante a conformidade com a LGPD? Onde posso encontrar detalhes sobre a coleta e o uso de dados pessoais pela Rocket.Chat? A Rocket .Chat realiza auditorias de conformidade com a LGPD? Quais s\u00e3o os meus direitos em rela\u00e7\u00e3o \u00e0 prote\u00e7\u00e3o de dados pessoais de acordo com a LGPD ? Como posso exercer meus direitos de acordo com a LGPD, como o direito de acesso ou exclus\u00e3o de meus dados? A Rocket .Chat possui plano de resposta a incidentes em conformidade com a LGPD? Como a Rocket.Chat protege os dados pessoais de menores de idade? Como a Rocket .Chat garante conformidade com a LGPD em rela\u00e7\u00e3o aos seus fornecedores, prestadores de servi\u00e7os, e parceiros? Estamos comprometidos em proteger sua privacidade . Se tiver perguntas ou precisar de assist\u00eancia, entre em contato conosco atrav\u00e9s do email: privacy@rocket.chat", "tokens": 280}
{"title": "Legal Center", "content": "The Rocket.Chat Legal Center is a comprehensive resource for all legal and compliance documentation. Privacy policy: Details Rocket.Chat's approach to user privacy. GDPR compliance: Information on Rocket.Chat's adherence to the General Data Protection Regulation (GDPR). LGDP compliance: Covers Rocket.Chat's compliance with the Lei Geral de Prote\u00e7\u00e3o de Dados (LGDP), Brazil's data protection law. DMCA policy: Learn about our DMCA Policy, outlining our approach to copyright infringement and the procedures for reporting and addressing such issues. Accessibility statement: Explore Rocket.Chat's commitment to digital accessibility and compliance with BITV 2.0 and WCAG 2.1 guidelines. Code of conduct: Discover the guiding principles of respectful and responsible behavior within Rocket.Chat's community spaces. Law enforcement: Navigate Rocket.Chat's legal framework for law enforcement. Historical agreements and policy archive: Access the archive of our agreements and policies, reflecting their commitment to transparency and informed user engagement. If you still have questions, feel free to reach out to our compliance team at privacy@rocket.chat", "tokens": 235}
{"title": "DMCA Policy", "content": "Effective date: December 18, 2017 In accordance with the DMCA, we\u2019ve adopted the policy below toward copyright infringement . We reserve the right to (1) block access to or remove material that we believe in good faith to be copyrighted material that has been illegally copied and distributed by any of our advertisers, affiliates, content providers, members or users and (2) remove and discontinue service to repeat offenders . (1) Procedure for reporting copyright infringements If you believe that material or content residing on or accessible through the services infringes your copyright (or the copyright of someone whom you are authorized to act on behalf of), please send a notice of copyright infringement containing the following information to Rocket .Chat\u2019s Designated Agent to Receive Notification of Claimed Infringement (our \u201cDesignated Agent,\u201d whose contact details are listed below): (a) A physical or electronic signature of a person authorized to act on behalf of the owner of the copyright that has been allegedly infringed; (b) Identification of works or materials being infringed; (c) Identification of the material that is claimed to be infringing including information regarding the location of the infringing materials that the copyright owner seeks to have removed, with sufficient detail so that Rocket .Chat is capable of finding and verifying its existence; (d) Contact information about the notifier including address, telephone number and, if available, email address; (e) A statement that the notifier has a good faith belief that the material identified in (1)(c) is not authorized by the copyright owner, its agent, or the law; and (f) A statement made under penalty of perjury that the information provided is accurate and the notifying party is authorized to make the complaint on behalf of the copyright owner", "tokens": 384}
{"title": "DMCA Policy", "content": ". (2) Once proper bona fide infringement notification is received by the designated agent Upon receipt of a proper notice of copyright infringement, we reserve the right to: (a) remove or disable access to the infringing material; (b) notify the content provider who is accused of infringement that we have removed or disabled access to the applicable material; and (c) terminate such content provider's access to the services if he or she is a repeat offender . (3) Procedure to supply a counter-notice to the designated agent If the content provider believes that the material that was removed (or to which access was disabled) is not infringing, or the content provider believes that it has the right to post and use such material from the copyright owner, the copyright owner's agent, or, pursuant to the law, the content provider may send us a counter-notice containing the following information to the Designated Agent: (a) A physical or electronic signature of the content provider; (b) Identification of the material that has been removed or to which access has been disabled and the location at which the material appeared before it was removed or disabled; (c) A statement that the content provider has a good faith belief that the material was removed or disabled as a result of mistake or misidentification of the material; and (d) Content provider's name, address, telephone number, and, if available, email address, and a statement that such person or entity consents to the jurisdiction of the Federal Court for the judicial district in which the content provider\u2019s address is located, or, if the content provider's address is located outside the United States, for any judicial district in which Rocket .Chat is located, and that such person or entity will accept service of process from the person who provided notification of the alleged infringement. If a counter-notice is received by the Designated Agent, Rocket .Chat may, in its discretion, send a copy of the counter-notice to the original complaining party informing that person that Rocket.Chat may replace the removed material or cease disabling it in 10 business days . Unless the copyright owner files an action seeking a court order against the content provider accused of committing infringement, the removed material may be replaced or access to it restored in 10 to 14 business days or more after receipt of the counter-notice at Rocket .Chat's discretion. Please contact Rocket.Chat's designated agent at the following address Marcelo Schmidt marcelo.schmidt@rocket.chat Rua Jorge Fayet 757 Porto Alegre \u2013 RS \u2013 Brazil 91330-330", "tokens": 533}
{"title": "Accessibility Statement", "content": "Last Updated: August 6, 2024 Rocket.Chat is committed to ensuring digital accessibility for people with disabilities. We aim to continually improve the user experience for everyone and strive to make our digital services as accessible as possible under the BITV 2 .0 (Barrierefreie-Informationstechnik-Verordnung 2.0) guidelines. Our digital services partially conform to Level AA of the Web Content Accessibility Guidelines (WCAG) 2.1 . These guidelines outline how to make web content more accessible to people with disabilities, including those with visual, auditory, cognitive, and motor impairments . We have an accessibility program in place to address and fix known barriers, ensuring continuous improvement in our efforts to provide an inclusive digital experience for all users. The platform offers light, dark, and high-contrast themes. Rocket .Chat complies with the minimum contrast ratio required by BITV 2.0 and WCAG 2.1. We ensure that each page has descriptive and meaningful titles. Adjustable font size . Input fields are designed to clearly convey their purpose, making it easier for users to understand how to interact with them. The platform ensures that information and functionality aren't reliant on color alone . For situations where color is the sole design tool, we provide tooltips or other mechanisms to clarify the intended meaning. Activation of accessibility features is accessible via a screen reader. Focus states meet BITV 2.0 and WCAG 2 .1 criteria. The time format can be chosen to meet your preference. Information such as usernames and user roles can be hidden so screen readers skip unnecessary content . We are continually working to improve the accessibility of our digital services, and we regularly review our communication platform to identify and address any potential accessibility issues. Our ongoing efforts include: Conducting regular accessibility assessments and audits. Training our staff on accessibility best practices . Reviewing the work done to ensure the accessibility practices are met. Monitoring compliance with BITV 2.0 standards and making necessary adjustments. If you encounter any accessibility barriers or have suggestions for improvement, please let us know . We value your feedback and are committed to providing accessible digital services. Community \u2192 Github issues with the accessibility tag Customer \u2192 support@rocket.chat Rocket.Chat aims to provide a consistent and accessible experience across various web browsers", "tokens": 470}
{"title": "Accessibility Statement", "content": ". However, occasional variations may occur due to factors beyond our control. Our commitment to accessibility applies specifically to the features and functionalities within the team collaboration product . While our commitment is to ensure accessibility within the team collaboration product, we acknowledge that users may interact with third-party integrations, plugins, or content. These components are beyond our direct control, and their accessibility may vary . We encourage users to refer to the accessibility statements and resources provided by the respective third-party providers when using integrated features. Rocket.Chat is committed to complying with legal requirements and standards related to digital accessibility, including those outlined in BITV 2 .0 (Barrierefreie-Informationstechnik-Verordnung 2.0). We recognize the importance of adhering to these regulations to ensure equitable access to our digital services for all individuals, regardless of disability. Rocket .Chat is designed to conform to the requirements of BITV 2.0, which implements the European Union Web Accessibility Directive (EUWAD) and Web Content Accessibility Guidelines (WCAG) 2.1. Our commitment to BITV 2 .0 compliance reflects our dedication to providing accessible digital services. Any known barriers to accessibility will be listed in this document. We continually monitor and assess our digital services to maintain compliance with relevant legal requirements and accessibility standards . Our accessibility team conducts regular audits and evaluations to identify and address any areas where our product may fall short of legal standards . If you believe that our product does not meet the legal requirements or if you have encountered accessibility barriers, please contact us using the provided contact information. Your feedback is instrumental in our efforts to ensure compliance and improve accessibility . While compliance with legal requirements is a priority, our commitment to accessibility goes beyond mere adherence to the law. We strive to create an inclusive and welcoming digital environment that accommodates all users, regardless of their abilities . As part of our commitment to accessibility, we engaged CCNET to conduct an independent audit of our platform. CCNET is legally recognized in the field of digital accessibility auditing and conducted a thorough evaluation of our product to ensure compliance with BITV 2", "tokens": 430}
{"title": "Accessibility Statement", "content": ".0 (Barrierefreie-Informationstechnik-Verordnung 2.0). The barrier, its description, and the target date for resolution. Please note that the dates mentioned here indicate when Rocket .Chat intends to complete the required implementation, and these improvements will be rolled out according to the regular release schedule. Rocket.Chat holds a BITV 2 .0 certification which is granted by the auditor when it's determined that the accessibility program meets their evaluation criteria, as established by a legally authorized body. Identified barriers are addressed through Rocket.Chat's accessibility program in accordance with this certification process . Screen reader users frequently encounter challenges at some points within Rocket.Chat because the platform continually adjusts its content to enhance accessibility for JAWS/NVDA and VoiceOver users. Mar 31, 2024 Included in Rocket.Chat 6 .9+ Not all functionalities of team collaboration are accessible via keyboard. Our accessibility team will review and improve error identification, label instructions, and error suggestions. Mar 31, 2024 Included in Rocket.Chat 6 .9+ Not all areas of the product were originally designed to help users to avoid and correct mistakes. Error identification, label instructions, and error suggestions will be reviewed and improved by our accessibility team. Mar 31, 2024 Included in Rocket .Chat 6.9+ Rocket.Chat uses its unique terminology within the product and is in the process of creating a glossary to assist individuals in understanding any specific terminology or concepts. Mar 31, 2024 Included in Rocket.Chat 6 .9+ Our accessibility features are not comprehensively documented. Dec 31, 2023 Included in accessibility features section Rocket.Chat is in the process of transitioning to a documentation platform that aligns with accessibility standards . Aug 31, 2024 Delivered: Rocket.Chat has migrated to a new and accessible documentation tool. Once we have accessibility features documented and accessible to everyone, we will train our support team . Aug 31, 2024 Delivered: Rocket.Chat has been receiving escalated tickets from support regarding accessibility. Rocket.Chat will identify the relationship for row and column headers. This helps users who rely on screen readers understand the table's structure and content . Mar 31, 2025 Ensure that data cells are properly associated with their corresponding headers in complex tables", "tokens": 468}
{"title": "Accessibility Statement", "content": ". June 30, 2025 If no satisfactory solution is found following your feedback to the aforementioned contact, you may reach out to the Barrier-Free Information Technology Oversight and Monitoring Agency . After a six-week period, you have the right to contact the oversight and monitoring agency directly. With the involvement of all parties concerned, the ombudsman endeavors to investigate the circumstances of the accessibility issue, allowing the service provider to address it . Hessian Ministry for Social Affairs and Integration Location: Regional Council Gie\u00dfen Prof. Dr . Erdmuthe Meyer zu Bexten State Commissioner for Accessible IT Head of the Enforcement and Oversight Office Landgraf-Philipp-Platz 1-7 35390 Gie\u00dfen Phone: 0641-303-2901 Email: Durchsetzungsstelle-LBIT@rpgi .hessen.de Rocket.Chat has opted for a BITV 2.0 certification, which is awarded by an authorized auditor from the German government. This certification encompasses all WCAG requirements . There isn't a specific WCAG certification offered by an official certification body", "tokens": 233}
{"title": "Accessibility Statement", "content": ". The Web Content Accessibility Guidelines (WCAG) themselves are a set of standards developed by the World Wide Web Consortium (W3C) to ensure that web content is accessible to people with disabilities. We chose the BITV 2 .0 certification, which is awarded by an authorized body from the German government, because it ensures comprehensive coverage of all WCAG requirements . This certification offers a recognized standard for accessibility that aligns with our commitment to meeting the needs of all users, including those with disabilities . Additionally, the authority and oversight provided by the German government offer credibility and assurance that our accessibility efforts adhere to rigorous standards and guidelines. WCAG stands for Web Content Accessibility Guidelines . It is a set of international standards developed by the World Wide Web Consortium (W3C) to ensure that digital content is accessible to all users, including those with disabilities . WCAG provides guidelines and success criteria for making web content perceivable, operable, understandable, and robust for all users, regardless of their abilities or limitations. These guidelines are essential for creating inclusive and accessible digital experiences for everyone . BITV 2.0 stands for Barrierefreie Informationstechnik-Verordnung 2.0, which translates to \"Accessible Information Technology Regulation 2.0\" in English . It is a set of accessibility standards established by the German government to ensure that digital information and services are accessible to people with disabilities. BITV 2 .0 covers a range of requirements similar to those outlined in the Web Content Accessibility Guidelines (WCAG), making it a recognized standard for accessibility compliance in Germany. Yes, BITV 2 .0 covers all requirements from the Web Content Accessibility Guidelines (WCAG). It is designed to align with WCAG standards and ensure that digital information and services are accessible to people with disabilities. Therefore, achieving compliance with BITV 2", "tokens": 375}
{"title": "Accessibility Statement", "content": ".0 effectively means meeting the accessibility requirements outlined in WCAG. Rocket is engineered and designed to meet the specific accessibility needs of highly regulated environments. Recognizing the stringent requirements in these settings, the platform ensures that accessibility features align with regulatory standards . Our commitment is underscored by the ongoing investment in a dedicated accessibility program. With a specialized team at the helm, we actively develop and implement features tailored to address the unique accessibility challenges of highly regulated industries . The platform's dedication to accessibility is further strengthened by our continuous investment in resources and expertise, ensuring organizations in highly regulated environments benefit from a secure, accessible, and regulatory-compliant communication solution . Yes, the chat platform offers customization options to meet diverse accessibility requirements . Users can adjust settings related to font size, regular contrast (AA) or high contrast (AAA), time format, and show/hide elements for a personalized experience that suits their needs.", "tokens": 188}
{"title": "Code of Conduct: Services", "content": "Effective date: September 06, 2019 Dear users, Rocket.Chat provides numerous spaces for our community to interact and experience our product. Among these are open.rocket.chat and an open chat community for bringing people together and showcasing Rocket .Chat\u00b4s community edition. In addition, new features are tested on the server on a regular basis. github.com/RocketChat, our source code repositories where we discuss issues and plan new features forums.rocket .chat, our web forum to announce new features and provide ways for direct interaction with our developers The main objective of the rocket.chat community spaces is bringing people together to discuss and experience Rocket.Chat - our awesome communication platform . This Code of Conduct is mainly written in mind for pen.rocket.chat, but in its spirit will be applied to other Rocket.Chat community spaces as well . When new visitors enter a channel, you should acknowledge their arrival, especially if you're engaged in social chit-chat / passing time. Failure to do so is likely to result in them leaving the channel feeling unwelcome . You should try to minimize the chances of conflict by being open-minded and accepting of others. Understand that we each have a unique set of values and are entitled to our own opinions", "tokens": 264}
{"title": "Code of Conduct: Services", "content": ". Feel free to share your views on someone else's problem as an outsider, but avoid using excessive force, and don't expect your thoughts and ideas to be always accepted. We're mainly an English speaking community but welcome all nationalities . If you find yourself speaking primarily in a different language in an open channel or discussion, please PM that person to continue the conversation in a separate channel. We do not want the following behavior on open.rocket .chat: Soliciting / advertising Offensive, rude, disruptive, and unwanted Posting of pornographic / gore / nude images Harassment, name-calling, racist or sexist remarks, profanity towards others and other forms of bullying Insensitive behavior - this will be judged by the reaction of others in the channel Flirting or adult content - take these conversations elsewhere Posting of links (URLs) to offensive material, sites hosting malware, initiating downloads or promoting illegal activities Flooding the chat, spamming, multiple repeats of the same or slightly modified messages Reregistering under another account after you have been banned and still under a ban period Users affected by unwanted behavior can mute other users or report them to the administrators of either the group, discussion, or the open .rocket.chat server", "tokens": 256}
{"title": "Code of Conduct: Services", "content": ". You can contact the server administrator by posting in the group report-abuse channel If you are asked to modify your behavior or given some other form of instruction but fail to comply, you are likely to be removed from the channel, the discussion, or the whole server for a discretionary or unlimited period of time, depending on the severity of the matter, depending on the administrator's decision . Depending on the severity of the misbehavior, users can get banned without warning or be issued a warning . Should administrators deem a subject matter to be inappropriate for the channel and/or the current audience, they may, at their discretion, make contact via Private Message, making clear any requirement to cease discussing the topic, or - as per their permission level - ban the user . A ban may be temporary (in the form of a ban period) or permanent. In addition, the server administrator has the right to remove your user account. When an administrator corrects you, please do not argue with them in the main chat . Instead, you should request a PM session to help avoid conflict and keep others' involvement to a minimum. Attacking administrators in a channel will likely result in a ban . Any genuine visitor should respect their decisions - they have nothing to gain from issuing bans/mutes and are doing so to the best of their ability on behalf of the community . Administrators may also choose to request users to leave if they're deemed to be a risk to the safety of the general users/guests within the channel . Not adhering to the request will result in manual removal; If you believe that an administrator has misused their authority and you have complied 100% with the rules documented on this page, please forward the following details to support@rocket .chat, including the following information: administrator's open.rocket.chat nickname; What you believe they have done that demonstrates an abuse of power; Associated dates and times - required to review log files etc . Note that it can take some time to review log files and liaise with the administrator team, so please don't expect an immediate response . In case a ban period is issued, you are welcome to return to the channel once your ban period expires, but please be mindful of the reason(s) you got banned, abide by the rules, and take into account any administrator feedback received.", "tokens": 486}
{"title": "Law Enforcement", "content": "Rocket.Chat is committed to maintaining a balance between user privacy, freedom of expression, and legal compliance. This section provides a comprehensive overview of our policies and practices related to law enforcement requests, content moderation, and server management. Rocket.Chat respects the legal processes and is committed to cooperating with law enforcement authorities within the framework of applicable laws: read the full guidelines for law enforcement. Our stance on harmful content and censorship is guided by a commitment to free speech and user autonomy, balanced with legal obligations: explore our approach to censorship and harmful content. To determine whether a Rocket.Chat server is hosted by us or a third party, use the server lookup form.", "tokens": 137}
{"title": "Guidelines for Law Enforcement", "content": "Last updated: February 24, 2022 These guidelines are intended for law enforcement authorities seeking information about Rocket.Chat accounts. Our privacy policy and terms of service provide more information \\ . Important Highlight from the page below All requests for user account information must specify the server URL (e.g. https://open.rocket.chat) where the user in question is registered. Requests without the server URL will be rejected. Rocket .Chat is a free and open-source team chat collaboration platform that allows users to communicate securely in real time on the web, desktop, or mobile and customize their interface with a range of plugins, themes, and integrations with other key software . Anyone in the world can download and run a Rocket.Chat server at any time. Rocket.Chat can be deployed in various ways as a platform. Users interact on the platform via user accounts. There are three relevant deployment options for Rocket .Chat, that affect the process for requesting information: servers hosted by us (Rocket.Chat Technologies Corp .) and managed by us directly (such as our community servers) servers hosted by us but managed by a customer (our hosted offering) servers hosted by a third party (private servers) The third option - private server - is the most common one . For clarification purposes: a server, on which Rocket.Chat is running, **** can contain various instances of Rocket.Chat, depending on the configuration. An instance of Rocket.Chat is each a unique community of users communicating with each other . In the following, we refer to servers, that run whichever number of Rocket.Chat instances (1 or more) . How can you find out which deployment is being used? We offer a lookup, which checks if the server is hosted by us (options 1 and 2) or not (option 3). Please check here for the lookup form", "tokens": 387}
{"title": "Guidelines for Law Enforcement", "content": ". For total transparency, Rocket.Chat Technologies Corp. owns and operates only one publicly available Rocket.Chat server in the world. The server that Rocket.Chat Technologies Corp. operates can only be accessed at: \u200bhttps://open.rocket .chat\u200b That server is subject to our Code of Conduct. Any other Rocket.Chat server you access is not operated by Rocket.Chat Technologies Corp. and is subjected to the usage warning above. That said, Rocket.Chat Technologies Corp . provides a cloud service for hosting Rocket.Chat servers. The user data, messages, and files on those servers are subject to our Terms of Use. To know if a server belongs to Rocket .Chat cloud, please contact us, and use the aforementioned server lookup or domain information systems. What account information does Rocket.Chat have? Community Server When someone registers an account at our community server, hosted at https://open.rocket .chat, we ask for a name, an e-mail, and a password, and they have to verify their e-mail address. Rocket .Chat does not monitor any public or private channel activities other than for the company's own use, such as the #general, #support, and #dev public channels. We do not keep a log of IPs. Rocket .Chat Cloud When someone signs up for a Rocket.Chat Cloud server, we ask for a name, e-mail, workspace name and domain they'd like to use. The e-mail is then verified before the server is deployed . Every message and file sent is stored within Rocket.Chat cloud servers and databases are hosted with a third-party hosting provider. Rocket.Chat does not actively scan the content activity in Cloud servers. You need to be aware of any private Rocket .Chat server may be operated by arbitrary businesses, groups or individuals with no relationship to Rocket.Chat Technologies Corp. In particular: Rocket.Chat Technologies Corp. does not have access to these servers. Rocket.Chat Technologies Corp . does not and cannot control or regulate how these servers are operated. Rocket.Chat Technologies Corp. cannot access, determine, or regulate any contents or information flow on these servers", "tokens": 442}
{"title": "Guidelines for Law Enforcement", "content": ". Administrators of private servers may opt-in to register their servers for additional connected services by Rocket.Chat (e.g. push notifications for mobile devices). The registration requires a working email address, a name or pseudonym, and the server URL . More information is generally not available. We do not store content that passes through our gateways to provide connectivity services. Rocket.Chat is a platform, and the interaction between individuals on the platform happens based on user accounts, e.g . in the format of: firstname.lastname These accounts are unique to Rocket.Chats's deployed server. So, if the information is requested for an individual platform user account, this information goes only as far as the scope of that specific individual server of Rocket .Chat. Therefore, the specific server must also be named (generally in the form of the URL) to identify the proper user account. The aforementioned restrictions regarding the deployment options apply to users as well . We cannot produce user information for user accounts of private Rocket.Chat servers. Requests for such information should be directed to the private server administrator . If the administrator is unknown, the request should be directed at the owner of the DNS record of the private server domain. Rocket.Chat retains data and backs up data for an undisclosed amount of time. Rocket .Chat makes backups of Cloud servers according to each customer's choice of plan (daily, twice daily, or hourly). Some information we store is automatically collected, while other information is provided at the user\u2019s discretion . Though we do store this information, we cannot guarantee its accuracy. For example, the server in use may not require real name use, email verification or identity authentication, hence the user may have created a fake or anonymous profile", "tokens": 360}
{"title": "Guidelines for Law Enforcement", "content": ". We accept requests from law enforcement to preserve records that constitute potentially relevant evidence in legal proceedings. We will preserve, but not disclose, a temporary snapshot of the relevant account records for 90 days pending service of valid legal process . Preservation requests, in accordance with applicable law, should: be signed by the requesting official; have a valid return official email address, and \u00a0be sent on law enforcement letterhead; include the server URL of the subject offense and any other information that may help us identify the offending server and/or user . We may honor requests for extensions of preservation requests but encourage law enforcement agencies to seek records through the appropriate channels in a timely manner, as we cannot guarantee that requested information will be available", "tokens": 146}
{"title": "Guidelines for Law Enforcement", "content": ". Law enforcement and government preservation requests for user information must be submitted to our legal team at legal@rocket.chat. You can find further instructions below. Law enforcement requests for user account information should be directed to Rocket.Chat Technologies Corp. in Wilmington, Delaware . Rocket.Chat responds to valid legal processes issued in compliance with applicable law. Non-public information about Rocket .Chat users will not be released to law enforcement except in response to an appropriate legal process such as a subpoena, court order, or other valid legal process \u2013 or in response to a valid emergency request, as described below . Requests for the contents of communications (e.g., messages, files) require a valid search warrant or equivalent from an agency with proper jurisdiction over Rocket.Chat. Yes. Rocket.Chat's policy is to notify users of requests for their Rocket .Chat account information, which includes a copy of the request, as soon as we are able (e.g., prior to or after disclosure of account information) unless we are prohibited from doing so (e.g., an order under 18 U.S.C . \u00a7 2705(b)). We ask that any non-disclosure provisions include a specified duration (e.g., 90 days) during which Rocket.Chat is prohibited from notifying the user . Exceptions to user notice may include exigent or counterproductive circumstances, such as emergencies regarding imminent threat to life, child sexual exploitation, or terrorism . Requests for user account information in accordance with applicable law, are required to include the following information: Include the Rocket.Chat server URL (!) and @username of the subject Rocket.Chat account in question; Provide details about what specific information is requested (e .g., messages, files, account information) and its relationship to your investigation; Include a valid official email address (e.g., name@agency .gov) so we may get back in touch with you upon receipt of your legal process; Be issued on law enforcement letterhead. Law enforcement and government requests for user information should be submitted through legal@rocket.chat. Further instructions are given below", "tokens": 442}
{"title": "Guidelines for Law Enforcement", "content": ". Unless otherwise agreed upon, we currently provide responsive records in electronic format (i.e., text files that can be opened with any word processing software such as Word or TextEdit). The records that we produce are self-authenticating . Additionally, the records are electronically signed to ensure their integrity at the time of production. If you require a declaration, please indicate it in your submission. Rocket .Chat may seek reimbursement for costs associated with information produced pursuant to legal process and as permitted by law (e.g. under 18 U.S.C. \u00a72706) . In line with our privacy policy, we may disclose account information to law enforcement in response to a valid emergency disclosure request. Rocket.Chat evaluates emergency disclosure requests on a case-by-case basis in compliance with relevant law (e.g., 18 U.S .C. \u00a7 2702(b)(8)) . If we receive information that provides us with a good faith belief that there is an exigent emergency involving the danger of death or serious physical injury to a person, we may provide information necessary to prevent that harm if we have it . If there is an exigent emergency that involves the danger of death or serious physical injury to a person that Rocket.Chat may have information necessary to prevent, law enforcement officers must submit an emergency disclosure request through legal@rocket.chat . Please include all of the following information: Indication on your cover sheet, which must be on law enforcement letterhead, that you're submitting an Emergency Disclosure Request; Identity of the person who is in danger of death or serious physical injury; The nature of the emergency (e .g., report of suicide, bomb threat); Rocket.Chat server URL and/or @username of the subject account(s) whose information is necessary to prevent the emergency; Any specific Rocket .Chat messages you would like us to review; The specific information requested and why that information is necessary to prevent the emergency; The signature of the submitting law enforcement officer and All other available details or context regarding the particular circumstances (e.g . names of channels, timeframe for which information is requested, etc.) Our address details are: Rocket.Chat Technologies Corp . 251 Little Falls Drive, Wilmington, DE, 19808 Receipt of correspondence is for convenience only and does not waive any objections, including the lack of jurisdiction or proper service. Electronic communication must go to: legal@rocket.chat", "tokens": 515}
{"title": "Censorship and Harmful Content", "content": "Last updated: September 24th, 2020 Rocket.Chat is built to be an open and free communication platform. We want everyone to be able to run it and use our platform freely, and to improve people's lives . Today, our platform is used for myriads of different purposes, according to how our users deem it fit for their purposes. We also do not want to be the judges on what constitutes the \u201cright\u201d way to use Rocket.Chat . Moral values differ from person to person, and laws often collide over highly debated issues such as free speech. We believe the users of Rocket.Chat know best how to use our platform to their and everyone else's benefit . Sometimes, our organization receives a request from a law enforcement body to produce a certain set of user data to aid in a criminal investigation. Or there might be a request to take down content that has been deemed illegal . We treat these requests very carefully and\u2014where we are able and obliged to help\u2014bring this to the attention of the instance's administrator. Often, though, we cannot do anything . That is because we have no way to access or control self-managed Rocket.Chat servers. Self-managed means that Rocket.Chat is installed on a server we do not own . Our platform is open source and has no backdoors or whatsoever to allow us to access your installations remotely. In the case of Rocket .Chat instances hosted by us for others, we forward reports to the respective administrator, and if we determine an obvious breach of terms of service, we can terminate the hosting", "tokens": 320}
{"title": "Censorship and Harmful Content", "content": ". Where the request is about content on a server directly under our control, such as our Open Server, you can contact us directly under legal@rocket.chat, and we will take action . On the same side, we also see that many organizations using our platform are subject to strict content moderation requirements. We are already providing various features for these organizations to administer their instances. For example, notifications for keywords can help to identify potential abuse quickly . Administrators who want to use these features can do so but are not forced by us to do so. Ultimately, the administrator is responsible for the content being processed within their Rocket.Chat instance . With this being the current situation, we wanted to share our stance on how we plan to deal with addressing harmful content soon. Our policy principles in this matter are: We do not endorse illegal or unethical usage of Rocket.Chat in any way . We understand these terms to be relative and to be interpreted in their local context. We want Rocket.Chat to be a platform that allows for free and unrestricted communication . We do not plan or want to build any kind of backdoor, censorship tool, or hidden remote control mechanism into Rocket.Chat. Administrators are the ones in control over their installation . Administrators are responsible for configuration and content moderation decisions within their instance. We comply with valid local or international law enforcement requests to remove content or produce user data and inform our users affected by these requests . On our Open Server, which we run, we want to provide users with a positive and fun environment to test our platform and get in touch with us. While none of these principles are absolute, they are guiding our actions . For users: On our Open Server, you can report harmful content per our code of conduct, and we will look into removing it. We want you to be able to use our open server hassle-free. If you encounter another Rocket .Chat instance that is not hosted by us and which you think contains illegal or otherwise harmful content, we recommend you contact the administrator of that instance to moderate the related content", "tokens": 423}
{"title": "Censorship and Harmful Content", "content": ". If you do not know who your administrator is, you can check the DNS records for contact information. For instances that are hosted by us, we can contact the administrator on your behalf . We have published a tool where you can find out if a Rocket.Chat instance is hosted by us (server lookup). This is not always clear because no one is obliged to use the Rocket.Chat logo or name . As an ultimate resort, you may want to contact the law enforcement body in charge of investigating the potential offense in question. They will tell you the legal remedies available and the potential next steps to take . For administrators: If you are an administrator, you might be interested in moderating the content that users create or put in your instance . Notable features that can help you with that are: Making use of the Moderator permission in channels to appoint individuals to purge or modify inappropriate messages Notification feature for the use of specified words or phrases Blacklisting certain words or phrases Notifying your users of applicable policies via e .g . pinning messages or adding an announcement to the room Requiring confirmation of user registration by an administrator to prevent unvetted users from posting messages Enabling or disabling end-to-end encryption: With end-to-end encryption enabled, only an encrypted string of the message is stored on the server . This, however, prevents content auditing via administrators and moves responsibility for content moderation to users . Turning on GoogleVision integration for image uploads, which has options to block images containing graphic or adult content All of these features are optional to choose, so you have the total flexibility in what to apply in your specific case", "tokens": 354}
{"title": "Censorship and Harmful Content", "content": ". Let us know which kind of features you are currently missing - but would find useful - by opening feature requests in our Github repository. For law enforcement: We sometimes receive requests from law enforcement to remove content from certain Rocket.Chat instances . We have published guidelines for law enforcement, how we deal with requests, and what to consider before submitting a request to us as the legal entity behind Rocket.Chat . In summary: In most cases, we cannot remove the majority of content because it is outside of our control on servers we do not have (and do not want) access to . If the content in question is on our Open Server, we remove it if it is a breach of our code of conduct or if we are compelled by a law enforcement request . For servers hosted by us and under the control of our customers, we remove content after notifying and in collaboration with the customer or directly as a violation of our terms of service. For questions or contact, please use legal@rocket .chat For reporters and media requests: Are you researching for an article about Rocket.Chat or where Rocket.Chat plays a role? We would love to explain our stance in detail or comment before you publish your article. Please reach out to contact@rocket .chat to get a comment from us on the topic in question.", "tokens": 270}
{"title": "Server LookupHistorical Agreements and Policy Archive", "content": "To determine whether a Rocket.Chat server is hosted by us or a third party; use this lookup form. This is essential for identifying the appropriate contact for server-specific issues, including law enforcement inquiries. Rocket.Chat is committed to transparency as part of its values. As such, we provide previous versions of our Agreements and Policies. Notices and Announcements Rocket.Chat Privacy Policy-05-01-23.pdf Rocket.Chat-Subprocessors-list-01-05-2023.pdf Subprocessors-list-10-23-20.pdf Rocket.Chat-MSA-Self-Managed-02-27-21.pdf Rocket.Chat-Professional Services Agreement-RC09232023.pdf Rocket.Chat-TermsofService.05-04-2021pdf.pdf", "tokens": 176}
{"title": "Rocket.Chat Cloud Hosting Service Level Agreement (SLA)", "content": "This document outlines the Service Level Agreement (SLA) for Rocket.Chat's Cloud Hosting Services. It is designed to provide comprehensive information on the hosting options, support, and service levels offered to our customers . This SLA is applicable to each account utilizing Rocket.Chat's Cloud Hosting Services. Terms not defined in this document are as per the meanings set forth in the Rocket.Chat Agreement. Rocket .Chat offers three distinct Cloud Hosting tiers: Standard cloud: This basic deployment is included with Rocket.Chat Cloud-hosted licenses. It features a single-tenant workspace within a shared resource cluster, dynamically partitioned based on resource needs . Standard Cloud includes self-service environment management tools and limited cloud support services. Cloud hosting comparison provides detailed information. Premium cloud: This tier is accessible through explicit purchase and contract and offers a single-tenant workspace with pre-allocated resources . Premium Cloud subscribers benefit from enhanced support services, as detailed in the Cloud hosting comparison . Dedicated private cloud: Also requiring explicit purchase and contract, this option provides a dedicated environment with customer-selected regional hosting, dedicated hardware, Kubernetes nodes, and MongoDB Atlas with a high-availability load balancer . It includes all services under Premium Hosting, with additional support/services available on a quoted basis . Services Standard cloud Premium cloud Dedicated private cloud Infrastructure Shared Infrastructure Shared Infrastructure Dedicated Infrastructure: Kubernetes EC2 instances Mongo Atlas Network Monitoring stack Supported regions Default region Available in select regions (rate adjustments apply) Customer selection of regions (rate adjustments apply) Version upgrades", "tokens": 318}
{"title": "Rocket.Chat Cloud Hosting Service Level Agreement (SLA)", "content": "Continuous version upgrades and patches Scheduled version upgrades with a 30-day postponement option for major releases . Continuous patch application with no opt-out. Workspace owners can freeze software versions within the supported version window. Continuous patch application with no opt-out. Availability Best efforts Availability: 99.9% (ex scheduled downtime) Availability: 99 .9% (ex scheduled downtime) Add-on deployments Matrix homeserver: None Asterisk server: None Matrix homeserver: Available Asterisk server: Available Matrix homeserver: Available Asterisk server: Available Workspace provisioning On-demand 3 business days Quoted delivery Usage limits Users: 500 API rate limit: Default rate limit File storage: 50 GB Custom integrations: None Omnichannel conversations: 5,000/month Users: 3000 API rate limit: Configurable File storage: 250 GB Custom integrations: None Omnichannel conversations: No limit Users: Quoted to size API rate limit: Configurable File storage: Quoted to size Custom integrations: Quoted to size Omnichannel conversations: Quoted to size Cloud support Scheduled backups 24x7 resource pool monitoring Exports on request Custom domains Scheduled backups 24x7 resource pool monitoring Exports on request Custom domains Automated scaling Custom network configuration Custom firewall rules Routing rules Static Outbound IPs Static Load balancer IPs IP isolation Scheduled backups 24x7 resource pool monitoring Exports on request Custom domains Automated scaling Custom network configuration Custom firewall rules Routing rules Dedicated Outbound IPs Dedicated Load balancer IPs IP isolation Custom SSL certificates Custom integrations support Custom SMTP configuration Support summary Outage notification: Status dashboard Support: 24x7 Response: See support matrix Outage notification: Status dashboard Support: 24x7 Response: See support matrix Outage notification: Status dashboard Support: 24x7 Response: See support matrix Support matrix Support coverage: 12x5 RTO: Best efforts Support coverage: 24x7 RTO: High severity Mid severity Low severity Support coverage: 24x7 RTO: High", "tokens": 423}
{"title": "Rocket.Chat Cloud Hosting Service Level Agreement (SLA)", "content": "severity Mid severity Low severity Data encryption (all cloud tiers) In transit: Data will always be encrypted in transit as we use protocols such as TLS . At rest: We encrypt data at rest by enabling S3 encryption and database encryption. Rocket.Chat's Cloud Support varies based on the chosen hosting tier. The cloud hosting comparison table above outlines the differences in support available for each tier . It's important to note that the SLA for Cloud Hosting is distinct from SLAs applicable to other Rocket.Chat Services . Uptime target SLA: Deviations from the reference architecture void the uptime target SLA unless an alternate solution is approved in writing to ensure that the uptime target SLA is still maintained . Please note that there is no SLA guarantee for Standard Cloud and any customer-requested deviations from the reference architecture. Deployment schedule: Premium and Dedicated Hosting deployments must be scheduled and documented in the Customer\u2019s Ordering Document . Service scope: Includes specific services provided, with limitations and restrictions detailed for each tier. Additional Services Microservices architecture: All workspaces deployed under Premium and Dedicated Private Cloud Services are built on the microservices architecture . Version updates and upgrades: Updates to our Cloud Services occur periodically, and the policies governing these updates vary based on the selected Cloud Hosting type. It is essential to understand that certain hosting options provide the flexibility for customers to reschedule updates . However, this is not the case for some services, such as the Standard Cloud or the traditional Rocket.Chat SaaS, where rescheduling updates is not an available option . Usage limits: As stated in the Hosting Comparison Table, usage limits in Cloud Hosting differ based on the tier you have contracted. You can view your current usage details by accessing the administrator control panel, and following the instructions . Please be aware that surpassing these established usage limits could impact the availability of the Cloud Services we offer. Shared infrastructure: Multiple users or tenants utilize the same computing resources in a shared environment . Dedicated infrastructure: A model where computing resources, such as servers, storage, and networking infrastructure, are exclusively allocated to a single customer or tenant . This approach provides increased security, performance, and flexibility for customers with high security or performance requirements or those who need to meet specific regulatory or compliance standards. Unlike shared infrastructure, dedicated infrastructure is not shared with other customers", "tokens": 487}
{"title": "Rocket.Chat Cloud Hosting Service Level Agreement (SLA)", "content": ". Kubernetes: An open-source platform for automating deployment, scaling, and management of containerized applications. EC2 instances: Virtual machines provided by AWS for running applications in the cloud. They provide scalable computing resources that can be customized to meet specific requirements . MongoDB atlas: A cloud database service by MongoDB that manages and scales MongoDB databases. Virtual Private Cloud (VPC): A virtual network infrastructure for creating and managing a private network in the cloud . Service scope: refers to the range of services included in Rocket.Chat Cloud Services offered to the customer. It encompasses the features, functionalities, and capabilities that come with the customer's subscription, along with any applicable limitations or restrictions . Updates: refer to small modifications made to the Rocket.Chat software primarily aimed at rectifying bugs, introducing minor features, or enhancing performance . \u00a0Generally offered at no extra cost, these updates do not majorly alter the software's version or its core functionalities. An example of such an update could be a web browser version upgrade that incorporates minor bug fixes and security enhancements . Upgrades refer to substantial changes to software that typically involve a significant overhaul of the software's functionality or architecture. Upgrades may require additional payment or subscription fees and introduce new features or capabilities. They may also require additional fees or a different subscription plan .", "tokens": 286}
{"title": "Support Prerequisites", "content": "This document is a vital resource for understanding the conditions and criteria required to maintain full support eligibility. It provides essential guidance for users and administrators to effectively manage and sustain their Rocket.Chat installations, ensuring they stay updated, secure, and fully operational", "tokens": 50}
{"title": "Support Prerequisites", "content": ". By following the guidelines outlined here, you can make informed decisions that enhance the security, efficiency, and longevity of your Rocket.Chat workspace. Ensure that your workspaces are updated to the latest stable versions. Each release of Rocket .Chat is supported for six months after its release date. Once this period expires, hosted services such as the Push Gateway and Marketplace will cease to function for that particular version. During the support window, Rocket .Chat focuses on delivering security patches and responding to support queries concerning configuration and usage for the versions specified. Any bugs that are not security-related will be addressed solely in future releases . Refer to the Version Durability document to verify the final support date of each release version. To obtain official support, your workspaces must meet certain requirements to ensure the support request pertains to the Rocket.Chat application and not external factors . The installation should run the Docker image provided by Rocket.Chat to isolate external factors. This approach ensures efficient support by avoiding issues like missing or outdated dependencies and using non-official versions. Refer to the Docker deployment guide for details . If you are not using the Docker deployment, the support team will do their best to assist and may use their acquired knowledge to provide resolutions whenever possible. Keep in mind that the assistance will mostly be limited to Rocket.Chat and not to the deployment errors . Additionally, installations must meet the system requirements for a stable Rocket.Chat environment. Before the Rocket .Chat mobile app version reaches its end-of-life (EOL), it's crucial to upgrade to ensure you continue to receive official support and have the latest security features. This is particularly important for white-label app users, which might not receive automatic updates . Ensure you follow the version support dates to maintain optimum app performance and security standards. Each Rocket.Chat release supports different MongoDB versions. Make sure that your workspaces are supporting the right versions . Following the official MongoDB documentation for upgrade guides is essential to ensure no versions are skipped during the upgrade process. The following table shows the Rocket.Chat releases and the corresponding MongoDB versions: Rocket.Chat release Supported MongoDB versions Deprecated MongoDB version 1.x 3", "tokens": 460}
{"title": "Support Prerequisites", "content": ".2, 3.4, 3.6, 4.0 3.2 2.x 3.4, 3.6, 4.0 3.4 3.x 3 .4, 3.6, 4.0 3.4 4.x 3.6, 4.0, 4.2, 4.4, 5.0 3.6, 4 .0 5.x 4.2, 4.4, 5.0 4.2 6.x 4.4, 5.0, 6.0 4.4 7.x 5 .0, 6.0, 7.0 5.0 It's possible to bypass the MongoDB version check by using the environment variable BYPASS_MONGO_VALIDATION=true . Bear in mind that this work around should be used only when extrictly necessary and may prevent some functionalities to work properly or even prevent the server to start. Due to the rapid evolution of the browser ecosystem, support is limited to recent browsers . Supported browsers include: The three latest versions of Google Chrome and Mozilla Firefox The two latest versions of Apple Safari and Microsoft Edge The latest version of Microsoft Internet Explorer Monitoring is required for all supported installations with Rocket.Chat supporting the Prometheus and Grafana monitoring stack . While Rocket.Chat doesn't require server or database access, we might request access to logs to identify issues. Potential logs include server logs, web browser logs, and mobile logs. Before the end of the deprecation period for a Rocket .Chat version, we strongly recommend all the workspaces on Rocket.Chat plans to upgrade to a supported version for continued access to cloud services, mobile, and desktop apps. If you do not wish to update, Rocket .Chat provides workspace owners with a variety of options for managing their workspaces in the manner of their choosing . You must implement the following alternatives to our cloud services and published apps: Mobile and desktop apps: You must compile each app from our open-source code and publish your own builds to relevant app stores . Push notifications: You will need to deploy your own push notification server. Apps: You must develop and sideload your own applications instead of installing them through our Marketplace . If you have any further questions or require additional clarification, we encourage you to contact our support team for expert assistance.", "tokens": 494}
{"title": "Premium Support Channels", "content": "To cater to diverse needs and ensure a seamless experience, we offer multiple channels for assistance. Whether you are facing a technical challenge, need guidance on features, or require emergency support, our dedicated team is ready to assist you. Access: Rocket.Chat desk portal Usage: This is the primary channel for all support queries. Only customer-assigned points of contact are authorized to open a support ticket at the Desk Portal, ensuring a streamlined and personalized support experience. This means that customers must assign contacts within their organizations responsible for creating support tickets on the desk portal. Contact: support@rocket.chat Process: Email support is verified through domain matching. Emails from domains corresponding to a company's registered domain are prioritized in the customer queue. Please note that emails from non-registered or free domains may not be recognized as client-associated requests. Make sure that you are sending emails from authorized IDs. Support tickets opened using emails are automatically assigned a low priority, which will be reassessed according to the ticket details. Contact: +1 (412) 725-2428 Scope: This line is reserved for high-severity emergency situations. It is an exclusive service for our premium customers, ensuring immediate attention and rapid resolution of critical issues. Refer to the Support Ticket Classification System for details on how priorities are assigned to tickets. Our commitment to providing exceptional support is unwavering. We encourage you to utilize these channels per your specific needs and plan provisions. Please do not hesitate to reach out for any further assistance or clarification on support channel usage. Rocket.Chat is dedicated to ensuring your experience with our platform is smooth, efficient, and continually evolving to meet your business needs.", "tokens": 344}
{"title": "Support Ticket Classification System and SLAs", "content": "Our ticketing system is designed to categorize and address issues based on their severity and impact on your business operations. Understanding ticket severity classification will help you effectively communicate the urgency of your concerns and enable our support team to prioritize and respond accordingly. High severity: This category is reserved for the most critical issues significantly disrupting your business operations. High-severity issues include system outages, major functional impairments, or scenarios where a large number of users are unable to access Rocket.Chat, resulting in severe performance degradation. Critical business impact: Situations under this category are those where business operations are halted or severely hindered. Examples include, but are not limited to, data loss or corruption, system crashes, and the unavailability of critical functionalities, affecting a substantial user base. Medium severity: This level addresses problems that considerably impact your system usage, affecting essential functions and leading to inconsistent performance. Normal business impact: These issues cause partial or non-critical loss of functionality in a production environment, impacting a limited number of users. Examples encompass scenarios where certain system functions are unavailable, minor performance issues, or when a moderate number of users are impacted. Low severity: This category includes issues that have a minimal impact on system functions, affect a small number of users, or pertain to minor bugs and simple queries. Minimal business impact: These are typically issues occurring in non-production systems or encompass questions, comments, feature requests, documentation issues, or other non-impacting concerns. An example could be general product-related queries. Tickets initiated via email are automatically designated as \"Medium\" priority. They are subject to the associated Service Level Agreements (SLAs) based on the account information until an agent reassesses the severity. We strongly recommend that customers with access to paid support use the Support Portal for ticket submission to ensure accurate severity assessment and prompt response. Our SLAs are meticulously structured, considering the ticket priority, the specific paid plan or product involved, and the status of the customer's account. It is important to note that the SLA timelines represent the window within which customers can anticipate an initial response. These should not be misconstrued as the expected resolution time. The Rocket.Chat Support team is committed to addressing and resolving your issues swiftly and efficiently.", "tokens": 472}
{"title": "Community Resources", "content": "Rocket.Chat isn't just a communication platform; it's a thriving ecosystem powered by a passionate global community. From developers and administrators to enthusiasts and end-users, the community is the backbone that has driven Rocket.Chat's innovation and growth. Whether you're troubleshooting an issue, exploring new features, or diving into custom integrations, the community resources provide a wealth of knowledge and expertise. With dedicated forums, specialized tags on platforms like Stack Overflow, and active channels on the Rocket.Chat community server, there's always someone ready to assist, share, or collaborate. Dive into the resources below to tap into this collective wisdom and contribute to the ongoing dialogue. Rocket.Chat offers various support channels: Rocket.Chat forums Stack Overflow Rocket.Chat Tag Server Fault Community server channels: #support channel for help with general Rocket.Chat #ubuntu-snap channel for help with snap installs #desktop channel for help with the desktop client #bots channel for help with chatbot scripting #dev channel for developers needing help developing new features Non-English support: #ug_german German Rocket.Chat User Group Community support is voluntary, so patience is the key. If you believe you've found a bug, follow the guidelines for Reporting Issues. Before seeking support, always test on the latest version of Rocket.Chat. Ensure you have all necessary server and client setup information. For effective bug reporting, use the provided bug template. If you're still facing issues: Consider Rocket.Chat's premium plans (pro or enterprise) for professional support. Seek community help with respect and patience. Avoid spamming or being rude. Lastly, always refer to the documentation and thoroughly review it before opening an issue. Interested in contributing further? Explore the various modes of contribution to become an active part of the Rocket.Chat community.", "tokens": 381}
{"title": "Contribute Through Bug Reporting", "content": "We're thrilled to have you here! To ensure a smooth and efficient bug-reporting process, we've put together this guide. Please take a moment to familiarize yourself with our practices and procedures . Before you proceed, it's crucial to ascertain whether what you're encountering is indeed a bug. If you're struggling to understand how to perform a task, experiencing problems accessing your server, unable to install the server or want a new widget in Rocket .Chat, these are not considered bugs. If your concern aligns with the non-bug category, kindly refer to the provided resources in our documentation. Suggestions for new features should be submitted in the forums . Before you report a new issue, please: Thoroughly read the documentation. Ensure you're running the latest version of Rocket.Chat. An update might resolve your issue. Try to identify reproducible steps . If we can reproduce it, we can fix it faster. Check all your logs for errors. See the #gathering-logs section for guidance. Search the forums using a few different search terms. Search the issues for your bug . If you find it, carefully check that it is identical and give it a thumbs up. If it differs, add some additional information to the ticket. This will help give us a fuller picture . Please proceed if you've done all of the above and still need to report a bug. Giving clear background information will help save a lot of time . When reporting a new bug, please include the following information to promote effective bug fixing: Operating system/ version / architecture (64-bit?) Browser type and version, including any add-ons. (e.g., AdBlocker, NoScript, etc .) Rocket.Chat version Expected behavior Actual behavior Steps to reproduce the bug consistently Relevant errors and other log output Screenshots, if applicable You can register your bug at the following places based on the platform you're using: Rocket.Chat server Rocket.Chat mobile apps Rocket", "tokens": 412}
{"title": "Contribute Through Bug Reporting", "content": ".Chat Electron desktop app Determining Rocket.Chat version You can find your Rocket.Chat version in two ways: As an Admin, log into you r Rocket.Chat. Navigate to Administration -> Workspace -> Info Append /api/info to your Rocket .Chat URL Gathering logs Browser logs: To collect logs from your browser, press Ctrl/Cmd + Shift + j. Errors will appear in red. Server logs: As an Admin, log into your Rocket.Chat . Navigate to Administration -> Workspace -> View Logs It's often helpful to open this in another browser, reproduce the issue, and observe any exceptions that pop up in the logs. Don't forget to check your web server logs and general system logs as well . We appreciate your effort in helping us improve our software. Thank you for your contribution!", "tokens": 178}
{"title": "Code of Conduct", "content": "We, as contributors and maintainers, commit to creating a welcoming and inclusive environment for everyone participating in our project and community, irrespective of their age, size, disability, ethnicity, gender, experience, nationality, appearance, race, religion, sexual identity, and orientation. Our Standards Positive behaviors include using inclusive language, respecting diverse perspectives, accepting constructive feedback, prioritizing community interests, and showing empathy. Unacceptable behaviors include using sexualized language or imagery, trolling, making derogatory comments or personal/political attacks, harassing others publicly or privately, disclosing others' private information without consent, and any other unprofessional conduct. Our Responsibility Project maintainers must clarify acceptable behavior standards and fairly address any unacceptable behavior. They have the authority to modify or remove comments, commits, code, wiki edits, issues, and other contributions not in line with the Code of Conduct. They can also temporarily or permanently ban contributors for any behavior deemed inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies to project spaces and public spaces where individuals represent the project or community, such as using an official email or social media account or acting as a representative at events. Project maintainers may further define what constitutes representation. Report abusive or unacceptable behavior to the project team at team@rocket.chat. The team will confidentially investigate all complaints and respond appropriately. Specific enforcement policies may be posted separately. Project maintainers failing to uphold the Code of Conduct may face repercussions as decided by the project's leadership. This Code of Conduct is adapted from the Contributor Covenant version 1.4.", "tokens": 332}
{"title": "Contribution Process", "content": "Contributing to an open-source project like Rocket.Chat can be an exciting and fulfilling experience. However, it's crucial to understand the process that your contribution will undergo before it can be integrated into the main codebase . This guide aims to help you comprehend the stages involved in the Rocket.Chat contribution process. Stage 1: Forking and cloning: The first step in contributing to Rocket.Chat is to fork the project on GitHub and clone it to your local development environment . This allows you to work on your changes in a controlled environment without impacting the main project. Stage 2: Create a branch: It's best to create a new branch for each new feature or bug fix . This helps to isolate your changes and makes it easier to track the work that has been done. Stage 3: Implementing changes: You write your code during this stage. Endeavor to follow Rocket .Chat's coding standards and guidelines to ensure consistency and maintainability. Your code should be clean, well-commented, and tested thoroughly. Stage 4: Committing changes: Once you've made your changes, you need to commit them . Each commit should be a single logical change, and the commit message should describe what the change does, why it's needed, and any potential implications it may have . Stage 5: Submitting a pull request: After you've committed your changes, it's time to submit a pull request (PR) . The PR should be detailed and include a description of the changes, the reasons behind them, a changeset if the PR is a fix or feat, and any issues that they address. It should also include any necessary documentation changes . Stage 6: Code review: Now, the Rocket.Chat team will review your PR. This involves checking the code for any potential issues, ensuring it aligns with the project's coding standards and that it accomplishes what it is intended to do . This stage might involve some back-and-forth discussions, so be prepared to answer questions and possibly make revisions based on the feedback you receive", "tokens": 421}
{"title": "Contribution Process", "content": ". Stage 7: Acceptance or rejection: Once the review process is completed, the team will decide whether or not to merge your PR into the main codebase. If your PR is accepted, it will be merged . If it's rejected, you'll be given feedback on why this decision was made. It's important to remember that the decision to merge a PR is at the sole discretion of the Rocket.Chat team . As an open-source project, we value and respect each community member. However, contributing code doesn't guarantee that it will be merged . Factors that influence this decision include but are not limited to the code's quality, alignment with the project's goals, impact on the codebase's stability, and the resources required to support it . We understand that putting time and effort into a contribution only for it to be rejected can be disheartening. However, the aim is always to ensure that the Rocket .Chat codebase remains high-quality, maintainable, and focused on meeting the project's and its users' needs. We hope this guide gives you a clear picture of our contribution process . We look forward to your contributions and to you being part of the Rocket.Chat community. Now that you understand the process let's explore the many different modes of contributing to Rocket.Chat.", "tokens": 275}
{"title": "Modes of Contribution", "content": "Rocket.Chat welcomes contributions from its community in various forms. Your participation can significantly enhance the platform's functionality, security, and accessibility. Here are several ways you can contribute: Develop: By contributing code, you can directly influence the improvement and expansion of Rocket.Chat's features. Whether it's fixing bugs, optimizing existing features, or introducing new ones, your development skills can make a significant impact. Test: Participate in the testing process of various Rocket.Chat applications. Your performance, usability, and overall experience feedback can help refine the platform and ensure a seamless user experience. Report bugs: If you encounter any bugs or broken functionalities, reporting them is a valuable contribution. Your reports help maintain the platform's reliability and efficiency. Document: Enhance the Rocket.Chat community's understanding by contributing to the platform's documentation. This could involve creating new guides, updating existing ones, or clarifying complex processes. Security: Help keep Rocket.Chat secure by improving security measures or reporting potential security issues. Your vigilance can protect the platform and its users from potential threats. Translating: Assist in making Rocket.Chat accessible to non-English speakers by improving existing translations or introducing new ones. Your linguistic skills can help break down language barriers and expand Rocket.Chat's global reach. Promoting: Spread the word about Rocket.Chat. By sharing your positive experiences, writing reviews, or recommending the platform to others, you can help grow the Rocket.Chat community. Regardless of its nature, each contribution plays a crucial role in enhancing Rocket.Chat and foster a vibrant, collaborative community. To join other contributors: Create an account on our Open Server Create an account on our Community forum And visit our GitHub repository", "tokens": 358}
{"title": "Participate in Rocket.Chat Development", "content": "We're thrilled that you're interested in contributing to Rocket.Chat! Your help is invaluable to us, whether you're a seasoned open-source contributor or just starting out. If you're new to the open-source world, we recommend starting with\u00a0GitHub's comprehensive guide\u00a0to familiarize yourself with the basics. And if it's your first time contributing to Rocket.Chat, please go through our Code of Conduct and contribution process. Getting started: Our projects are readily available for you to explore and contribute to. You can find them here. Once you've found a project that piques your interest, navigate to the Issues tab. If you come across an issue you'd like to work on, simply leave a comment. We'll mark you as Assignee to the issue and add an In Progress label. If you're already working on a pull request for a particular issue, you can link the issue to your pull request. Alternatively, you can write Closes #ISSUE_NUMBER in your comment, where the ISSUE_NUMBER is the number at the end of the issue's URL. Assigned issues: You may notice that some issues already have an assignee. These are trusted individuals, often core team members, who are responsible for resolving the issue. However, this doesn't mean you can't contribute! All issues are open for contribution, and any help is greatly appreciated. We encourage you to work on any issue that interests you and share your progress with the community in the comments. Remember, multiple people can work on the same issue, so don't be discouraged from tackling an issue you're passionate about. If you're looking for a simple task to get started, check out our easy tasks or search for issues tagged with contrib:easy. You can find a detailed guide on development environment setup here. Now that you're ready to contribute, it's time to understand our development process. Visit the development workflow guide to learn about issue prioritization, pull request approval, and more. This guide will help you navigate your journey as a contributor to Rocket.Chat. Happy coding!\"", "tokens": 447}
{"title": "Development Workflow", "content": "Building on from our participate in Rocket.Chat development mode of contribution guide, this guide delves into the specifics of Rocket.Chat's development workflow. It's designed to help you navigate through issue prioritization, the pull request process, and more . Let's dive into the details of contributing effectively to Rocket.Chat. We utilize milestones and labels to manage issues asynchronously . Most issues will have labels for at least one of the following: Feat ( feat: accessibility, feat: embed, feat: livechat, etc.) Subject ( subj: mobile, subj: security, subj: ui/ux, etc .) Type ( type: bug, type: new feature, type: discussion, etc .) Issues that are advantageous to our users and nice-to-haves, but for which we currently lack the resources or priority, are tagged as contrib:, indicating that contributions from the community are welcome to work on them . These issues are classified into easy, intermediate, and experts needed categories. This helps new contributors to select an issue to work on when they join the project, based on the perceived difficulty level of the task associated with the issue . Review our labels to identify issues you can address. Indicate your interest, and we'll assign you to the task so you can begin working on it . To filter very precisely, you could filter all issues for: Milestone: Whichever is the current version Assignee: Unassigned Label: Your label of choice . For instance feat: api, feat: integration / plugin, feat: webrtc, subj: ui/ux, subj: security Sort by priority You are responsible for the issue you're assigned . If you can't complete it, kindly inform us to have it reassigned or postponed. Create a branch for the feature or fix you are working on. You can create a pull request anytime during your development phase . Just make sure you add the label stat: in progress while the PR is not ready for merge and remember to remove the label when it is", "tokens": 435}
{"title": "Development Workflow", "content": ". When naming your pull request, start the name with one of the following tags for identifying changes: [NEW] for new features (eg. [NEW] WhiteBoard integration). [FIX] for bug fixes . You should include the issue number(s) in parentheses whenever possible. (eg. [FIX] OTR timeout problems (#629, #2535)). [BREAK] for giving proper attention to changes that will break previous versions of Rocket .Chat (eg. [BREAK] Change notification setting type from boolean to string) Refer to our official guidelines for pull request tags. A changeset is information about changes made in a branch or commit that will be present in the release's changelog . Structure of a Changeset Verb: Start with a verb in the third-person singular present tense. What: Describe what has been changed Why: Explain why the change was necessary. How: Briefly describe how the change was implemented . (Optional) Example: Verb + What + Why + How Adjusts (Verb) + the session timeout settings (What) + and updates the authentication middleware (How) + to correctly handle session durations . (Why) Best Practices Use Clear and Descriptive Language: Avoid jargon and be explicit about the changes . Instead of: Fixes bug Use: Fixes bug causing crash on user profile page load Reference Issues and Tickets: Link to related issues or tickets to provide context . Example: Closes #123 - Resolves authentication timeout issue Keep Commits Small and Focused: Each commit should represent a single logical change . Write Meaningful Commit Messages: Follow the same guidelines for writing changesets in your commit messages Review and Revise: Before submitting your PR, review your changeset for clarity and completeness . There are a few rules to get your pull request accepted: All checks have passed. Travis CI runs automatically when you push your pull request. If Travis fails, take a look at the reasons for failure . If it fails for no apparent reason, try running it again. You must sign the Contributor License Agreement (CLA). At least one team member must approve the pull request . Once your code has been deployed in the release-candidate environment, verify that your changes work as intended. We have seen issues where bugs did not appear in development but showed in production due to merge issues.", "tokens": 484}
{"title": "Code Style Guide", "content": "This guide aims to provide a clear understanding of the Rocket.Chat project's code style, enabling contributors to effectively participate in the project. Before diving into the code, it's important to understand the development workflows of Rocket.Chat . It covers aspects such as issue assignment, pull request process, and branching strategies. The Rocket.Chat code style guide provides further guidelines to maintain consistency and quality in the codebase", "tokens": 87}
{"title": "Code Style Guide", "content": ". Key points include: Language and UI engine: TypeScript is now the default language for projects. Component library: The Fuselage, a component library based on React, is used for Rocket.Chat UI. Check it out when contributing to the Rocket .Chat UI and feel free to contribute new components or fixes. Best practices: Most of the coding standards are covered by ESLint configured at .eslintrc, and most of them came from our own ESLint config package . Things not covered by eslint: Prefer longer/descriptive variable names, e.g. error vs err, unless dealing with common record properties already shortened, e.g. rid and uid Use return early pattern . Prefer Promise over callbacks Prefer await over then/catch (also valid for unit/e2e test callbacks) Queries should be created inside models, not outside. The query description should be inside the model class. Avoid hardcoding fields inside models . The same method can be used for different purposes, using different fields. Prefer creating and calling REST endpoints over Meteor methods. v1 REST endpoints should follow the following pattern: /api/v1/dashed-namespace .camelCaseAction Avoid \"internal\" Meteor.call . Server code should not use Meteor.call. Before submitting a PR you should get no errors on eslint. To check your files run: We provide a .editorconfig and an .eslintrc, file that will help you to keep some standards in place. Testing: Two types of tests are run on Rocket.Chat: unit tests and end-to-end tests. The major difference is that end-to-end tests require a Rocket .Chat instance running to execute the API and UI checks. End-to-end tests: First, you need to run a Rocket .Chat server on Test Mode and on an empty database: Now you can run the tests in the apps/meteor folder with: Unit tests: Unit tests are simpler to set up and run. They do not require a working Rocket.Chat instance . It's possible to run on watch mode as well in the apps/meteor folder with: Before pushing your code or submitting a pull request, it's crucial to run the lint and tests", "tokens": 474}
{"title": "Code Style Guide", "content": ". If these steps are skipped, your contribution might fail the Continuous Integration (CI) checks, causing delays in the review process. Reviewers will then need to request fixes, which further postpone the evaluation of your contribution Rocket .Chat uses husky to run the lint and unit tests before proceeding to the code push process, so you may notice a delay when pushing your code to your repository. PR titles: PR titles are used when creating the changelog . Keep them short, concise, and user-focused. Use appropriate tags to describe your PR (e.g., fix:, feat:, etc.) . For more information, please refer to these resources: branching pull requests, adding changeset to your pull request, and pull request's tags", "tokens": 157}
{"title": "Code Style Guide", "content": ". Security best practices: In the process of developing APIs, it's crucial to maintain a strong focus on data security and efficiency. This means you should avoid exposing any unnecessary data in the API responses . When it's required to expose sensitive data, always ensure that the appropriate permissions are checked or new ones are created. It's also important to remember that all new APIs must have rate limiters in place to prevent abuse and maintain service stability . User data handling is another critical aspect. When rendering data, user input should always be properly escaped to prevent potential security vulnerabilities such as injection attacks . On the server side, it's essential to impose restrictions on the size of the user input to prevent excessive data load . Furthermore, even if validations are being executed on the client side, they should always be mirrored and executed on the server side as well. This dual validation approach ensures data integrity and security, as client-side validations can be bypassed . Performance best practices: When interacting with the database, it's recommended to specify only the necessary fields in your queries rather than retrieving full documents. This approach enhances performance and reduces unnecessary data load . Additionally, it's important to limit the number of records returned by a query to a reasonable amount to prevent overwhelming the system with excessive data. Indexing is another crucial aspect of database management. Always ensure your queries are utilizing indexes for faster data retrieval . If they're not, it's advisable to create new indexes to improve query performance. In terms of task execution, favor the use of queues over long-running executions. This approach helps manage system resources more efficiently and improves overall performance . Monitoring is also key in maintaining a healthy system. Therefore, create new metrics whenever possible to measure various aspects of the system. This will provide valuable insights and help identify potential areas for improvement. Lastly, make use of caching whenever possible . Caching data and responses can significantly reduce load times and server demand, leading to a more responsive and efficient system. Contributor License Agreement: To have your contribution accepted, you must sign the Contributor License Agreement . In case you submit a pull request before signing the CLA GitHub will alert you with a new comment asking you to sign and will block the pull request from being merged by us. Please review and sign our CLA . For more details on the specific language conventions used in Rocket.Chat, please visit our Languages guide.", "tokens": 510}
{"title": "Pull Request's Tags", "content": "Rocket.Chat encourages contributions from developers worldwide. One of the primary ways to contribute is through pull requests (PRs). PRs are a critical part of maintaining and improving the software, and they can range from bug fixes to the addition of new features . However, it's essential to follow specific guidelines when submitting a PR to ensure clarity and ease of understanding for the reviewers. This guide provides a succinct overview of the best practices for creating PRs for Rocket.Chat. When contributing to Rocket .Chat, it's crucial to choose the right PR tag to describe your work accurately", "tokens": 127}
{"title": "Pull Request's Tags", "content": ". These tags can include: Here's a brief explanation of each: PR Tag Used when Method Bad example Good example feat: Use this tag when adding a new feature that is significant to the end-user . The title should describe what's being added, not how it was added. Should not repeat Add ... , New ... or Feature.. . fix: This tag is for fixing something not working or behaving incorrectly from the end-user perspective. The title should describe what's being fixed, not how it was fixed . chore: Use this for small tasks such as changing a function name or something very quick that doesn't fit in another category. The title should describe what's being changed, not how it was changed . docs: This tag is for documentation such as README.md files, and other markdown and instruction files that bring value to the community. The title should describe what's being changed, not how it was changed . refactor: Use this for a code refactor that doesn't change behavior (it doesn't add anything and doesn't fix anything) such as converting a JavaScript file to TypeScript. ci: This tag is for changes that update or add a CI configuration . test: This tag is for adding tests. i18n: Use this for updating or adding any translations . regression: This tag is for changes made during any release candidate cycle to add something missing fix something broken during the last development cycle and not published to a final release yet. Contributing to Rocket .Chat through pull requests is a valuable way to improve the platform and engage with the open-source community. By following these guidelines for PR tags, contributors can ensure their work is understood and appreciated by the Rocket.Chat team and the broader community . Remember, the key is to describe what's being changed, fixed, or added, not how it was done. Happy contributing!", "tokens": 400}
{"title": "Languages", "content": "To maintain consistency and readability across the project, Rocket.Chat has established specific coding conventions and formatting rules. This guide provides a brief overview of these guidelines, focusing on the use of different languages and formatting tools in the Rocket.Chat codebase. Rocket.Chat primarily uses Visual Studio Code (VSCode) as its text editor of choice due to its wide usage and versatility. To ensure uniformity in code formatting, Rocket.Chat employs the Prettier plugin. As long as you use it, the code style will be automatically adhered to Rocket.Chat standards. Specific language configurations are in the .editorconfig. We provide a prettier config and eslint config in our repos, so as long as those plugins are installed on your editor, code style will be automatically followed TypeScript: ESLint is responsible for formatting all JavaScript and TypeScript code. Rocket.Chat has transitioned to using only TypeScript (.ts) files in its codebase. Conventions for TypeScript, React, and Components are specified in the Fuselage conventions, ensuring that all contributors follow the same standards. Go: For code written in Go, the the gofmt formatter should be used to ensure proper formatting. Shell Script: For Shell-related code, the shfmt formatter should be used. These formatters help maintain a consistent style across different languages used in the Rocket.Chat codebase. Contributing to Rocket.Chat involves more than just writing code; it's about adhering to established conventions and maintaining a consistent style across the project. By using tools like VSCode, Prettier, ESLint, gofmt, and shfmt, developers can ensure their contributions align with the existing codebase. This consistency not only makes the code easier to read and understand but also facilitates collaboration among contributors from around the world. Happy coding! For a comprehensive understanding of Rocket.Chat's coding conventions and style, refer to the code style guide.", "tokens": 415}
{"title": "Internationalization", "content": "Internationalization, often abbreviated as i18n, is the process of designing and developing a product in a way that removes barriers to its use in different locales . It involves ensuring that the software can handle different languages, character sets, and cultural conventions (like date and time formats) without modification. Essentially, internationalization prepares the software for localization . This guide briefs you on how to implement internationalization in Rocket.Chat. When you're building for Rocket.Chat, you can add text to our files. Later, our community will translate this text into different languages. Tools used: In Rocket .Chat, internationalization is implemented using the TAP:i18n meteor package, and managing contributions from the translator's community is done using lingohub. Adding strings to the translation files: To translate a string in Rocket .Chat, you'll first need to create a key, which serves as the identifier for the string you wish to translate. For instance, the string This room is read-only should have the key room_is_read_only . It's important to remember that keys should replace spaces with underscores (_) and be written in English, as this is the language used for Rocket.Chat's code . The key/value pair would then look like this: \"room_is_read_only:\"This room is read-only\". You can also include placeholders in your strings, which allow for dynamic information changes when the i18n method is invoked . A placeholder is enclosed by two double underscores (__ __). For example,\"Conversation_closed\": \"Conversation closed: __comment__.\" where __comment__ can be substituted with any string provided in the parameters . Next, you'll need to add this key to the appropriate i18n.json file located in the i18n folder . Once your pull request is merged, our contributors at LingoHub will be alerted to the new string and will begin translating it", "tokens": 426}
{"title": "Internationalization", "content": ". Using Translated Strings on the code: Having added your strings to the translation files, it's now time to utilize them in your code! When working with a .js file, you can employ the global method TAPi18n.__() . The parameters for this method can vary based on where it's being called from. If invoked from Rocket.Chat's back-end, you'll need to specify a language, typically derived from a user's object . The method would then appear as follows: TAPi18n.__('YOUR_KEY_HERE', {}, user.language). You can also pass parameters in the second argument to substitute placeholders in the translated strings . However, if you're calling from the front-end, you can simply use TAPi18n.__('YOUR_KEY_HERE', {}), which will translate the selected string into the user's currently chosen language . If the selected key isn't found in the corresponding .i18n.json file, it defaults to English. If no key is found at all, the method displays the key inserted as a string. When working with a .html file, you can simply enclose the string with {{ \"{{_ \" }}}} like so: {{ \"{{_ YOUR_KEY_HERE\" }}}} . This works similarly to the method mentioned above, with the added convenience of being able to add it directly to the .html file. In some instances, you may encounter methods that require an object with an i18nLabel or i18nDescription . In these cases, you only need to provide the key of the string, and the method will handle the rest. Understanding and implementing internationalization in Rocket.Chat is essential for developers aiming to create a user-friendly and globally accessible application . By leveraging the TAPi18n.__() method, developers can ensure that their software communicates effectively with users in their preferred language, thereby enhancing the overall user experience.", "tokens": 435}
{"title": "Assist with Testing Rocket.Chat", "content": "One of the most effective ways to contribute is by helping to test the Rocket.Chat core server code, as well as its web, desktop, and mobile applications. This document provides a guide on how to get involved in testing Rocket.Chat, ensuring its robustness and reliability for users worldwide. Prerequisites Set up your development environment Google Chrome Browser Run Meteor with the command below: To run the tests, the server must be started with the environment variable TEST_MODE=true. This will set all animations' duration to 0 and create an extra admin user with the login values: Once the server is running in the test mode, you can proceed to run the tests. This process requires opening another terminal window and executing the command below: Contributing to Rocket.Chat by testing its core server code and applications is a valuable way to ensure the platform's stability and functionality. By following the steps outlined in this guide, you can play a crucial role in the ongoing development and improvement of Rocket.Chat. Your contribution will help maintain the platform's high standards, benefiting users around the globe.", "tokens": 226}
{"title": "Documentation Feedback Guidelines", "content": "Rocket.Chat values the accuracy and relevance of its documentation to ensure users and developers can effectively utilize the platform. Maintaining top-notch documentation is a collaborative effort involving the readers, users, and the documentation team. As a result, we welcome your feedback to help us improve. Here\u2019s how you can leave feedback on the Rocket.Chat documentation: Feedback prompt: At the end of each document, there is a prompt asking if the document was helpful, with options for \"Yes\" or \"No.\" Positive feedback: If you select \"Yes,\" you will be prompted to leave a comment. We urge you to provide your email address so our team can contact you for further clarification if needed and to keep you informed about the status of your feedback. Constructive criticism: If you select \"No,\" you will see prepared options from which you can choose. If these options don\u2019t fully capture your feedback, you can leave a comment and provide an optional email address to be notified of any updates. When you submit the feedback, the documentation team will be notified and make adjustments as needed. Your email address is secure with us. It will only be used to notify you about the changes you requested and will not be shared or used for any other purposes without your explicit approval. Follow the guide below to submit your feedback. What is the current behavior? Please provide detailed steps for reproducing the current behavior. What is the expected behavior? New documentation request. Please provide any relevant information, including links to hosted images or videos, explaining how we can best use your feedback. Keeping Rocket.Chat documentation up-to-date is a shared responsibility between our documentation team and readers. By following these guidelines, you can effectively communicate feedback and help ensure our documentation remains reliable so that you can make the best use of all Rocket.Chat has to offer. Our goal is to maintain clarity and accuracy in our documentation, making Rocket.Chat easy to use, and your feedback plays a vital role in achieving this.", "tokens": 409}
{"title": "Security Contribution Guidelines", "content": "Rocket.Chat is a platform that highly values the security of its users and their data. As such, it encourages the community to contribute by identifying and reporting any potential security issues . This document provides an overview of how you can contribute to enhancing the security of Rocket.Chat. If you find a security issue email the details to Rocket.Chat's security team at security@rocket.chat or report directly to our HackerOne Program . Our security team will respond to confirm receipt of your message, review and plan the mitigation of the issue appropriately, as well as set a timeline for a new release or patch . We follow Monsible disclosure and will credit researchers when a security issue has been identified and mitigated while adhering to the following specifics: You may not use automated tools in your research without our explicit consent . The use of automated tools may result in an investigative action or your IP(s) being blocked. You make a good faith effort to avoid privacy violations, destruction of data, and interruption or degradation of our service during your research . You give us reasonable time to respond to your report and carry out remediation. We credit the first researcher to report an issue. Additionally, we reserve the right to only acknowledge researchers who discover issues in Rocket .Chat projects or related services if we determine the issue to be of high or critical severity or if there has been continued research or contributions made by the reporter. We will credit you with your name and a \"no-follow\" link to your address (e .g. Twitter or personal website). As a token of our gratitude for your assistance, we also offer an original Rocket.Chat Shirt to every first reporter about a security problem that we have not yet known . We may limit this reward to one item per person, depending on the item's availability. Please refrain from requesting additional compensation for reporting vulnerabilities. If you follow these parameters, we will not bring any lawsuit or begin a law enforcement investigation . What details should you include when reporting a security issue? Please provide as many relevant details as you can . In particular: What versions of the software are involved What steps can someone follow to go from an initial installation of that software to a point will they see the vulnerability? Any patches or steps to mitigate the problem Rocket .Chat's approach to handling security issues reflects its commitment to maintaining a secure and reliable platform. By encouraging users to report vulnerabilities and rewarding them for their efforts, Rocket.Chat fosters a community that actively contributes to its security . This not only enhances the platform's integrity but also strengthens the trust between Rocket.Chat and its users. For more information, please visit our Responsible Disclosure Policy.", "tokens": 563}
{"title": "System Requirements", "content": "This document provides an overview of the system requirements for various Rocket.Chat deployment scenarios. The specifications guide system administrators in selecting appropriate hardware and storage capacities for a stable and efficient Rocket.Chat environment . It is essential to customize these requirements based on your specific needs and usage patterns. Regular reviews and adjustments to your system specifications are recommended to ensure optimal performance . For deployments with special requirements (such as Omnichannel, Chat Engine) or enterprise-grade setups, please consult with Rocket.Chat representatives for tailored advice. The hardware requirements for Rocket.Chat vary depending on the expected load and deployment scenario . Below are the specifications for different use cases: Scenario: Starter plan - No high availability - Concurrent users \u2264 25 Hardware resources vCPU Memory(GiB) Storage(40) Number of MongoDB replicas Rocket .Chat 1 2 40 N/A MongoDB 2 2 10 1 MongoDB Atlas equivalent(AWS):M10 Scenario: Pro plan - High availability - Concurrent users < 500 Hardware resources vCPU Memory(GiB) Storage(40) Number of MongoDB replicas Rocket .Chat 2 4 40 N/A MongoDB 2 4 20 3 MongoDB Atlas equivalent(AWS):M20 Scenario: Enterprise plan - High availability - Concurrent \u00a0users 500 to 5000 - Microservices Hardware resources v(CPU) Memory(GiB) Storage(40) Number of MongoDB replicas Rocket .Chat 4-16 4-12 40 N/A MongoDB 2-8 4-16 20-80 3 MongoDB Atlas equivalent(AWS):M20 - M40 Rocket", "tokens": 339}
{"title": "System Requirements", "content": ".Chat recommends using object storage services such as Amazon S3, GCS, or MinIO for file uploads. GridFS is not recommended for production environments, and therefore, the storage estimation is not considered . Depending on your use case, factor in the average MB/month/user to provide a realistic estimation of your storage size per year . Example calculation: If each user sends an average of 5 MB in attachments per month, and there are 100 concurrent users, the minimum yearly storage needed is: 100 users * 5 MB * 12 months = 6,000 MB or approximately 6 GB Custom consultations are recommended for deployments of over 5000 concurrent users . For more information, visit recommendations for file upload. A MongoDB replica set of 3 members is advised for high-availability scenarios to ensure sufficient space and resilience . Suggested MongoDB Atlas instance for HA: Consider the base storage offered in the tier and adjust it on a regular basis according to utilization . For use cases exceeding 5000 concurrent users, the specifications are: vCPU: 16 Memory: 12 GiB Storage: 40 GB MongoDB specifications per replica: vCPU: 4 Memory: 16 GiB Storage: 80 GB Number of MongoDB replicas needed: 3 File storage (S3, GCS): \u00a05000 users 2 MB 12 months = 120,000 MB or 120 GB/year (minimum) These are minimum requirements, and we recommend considering a buffer for growth .", "tokens": 302}
{"title": "Deploy with Docker & Docker Compose", "content": "As of December 15, 2023, Rocket.Chat has ceased support for connections from cloud services and official mobile/desktop apps to workspaces running legacy versions outside our support window. Users on unsupported legacy servers are advised to upgrade to the latest Rocket .Chat version to ensure continued access to cloud, mobile, and desktop applications. Each Rocket.Chat version is supported for six months post-release. Deploying Rocket.Chat with Docker and Docker-compose is a straightforward and highly recommended deployment method due to its simplicity and flexibility . This guide will walk you through the essential steps, whether you're a seasoned Docker expert or new to containerization, ensuring a smooth deployment for your Rocket.Chat workspace . In this guide, you'll learn how to: Install Docker and Docker Compose Enable HTTPs with Docker deployment Update Rocket .Chat on Docker Docker Mongo backup and restore Ensure you have Docker and Docker Compose (Docker Compose v2 is required) installed and operational . If you don't have them installed, you can conveniently set them up using Docker's official helper script: To run Docker commands without using sudo, add the current user to the Docker group . If you are unsure who the user is, check the current user by running: Now run the following command. Substitute $USER with the result you get from executing the above command . If you are using a firewall, you may need to whitelist some URLs to communicate with our cloud services. See Firewall Configuration for the complete list. Go to your preferred directory, create a compose.yml file, and copy the content from Rocket .Chat\u2019s Docker official image. Alternatively, you can use the curl command to download the compose.yml file by executing this command: Modifying the configurations in the compose file directly is strongly discouraged. Instead, use environment variables", "tokens": 396}
{"title": "Deploy with Docker & Docker Compose", "content": ". You can set environment variables using a .env file. Remember to uncomment the variables you are updating in the \u00a0.env \u00a0file. In your project directory, create a .env file with the following command and paste the contents of the official .env.example file. Set the RELEASE variable in the .env to your desired Rocket.Chat version. See our releases page and available docker images. Keeping the default release as latest is not recommended . If you're deploying a production workspace with a domain, update your .env file with the following details: ROOT_URL: Specify the intended URL for your workspace. For example, http://<your-domain> . HOST_PORT: Set this to 80. Confirm that no other services are running on port 80 and that your firewall permits traffic on this port. Skip this step if you are deploying a test workspace on localhost . If you plan to enable HTTPS for your workspace domain, skip setting the HOST_PORT \u00a0and \u00a0ROOT_URL here and proceed to Enable HTTPS for Docker after starting the Rocket.Chat container . If you\u2019ve received a registration token from our Sales team or Rocket.Chat Cloud, you can use it to register your workspace automatically. To do this, add the token to the .env file like this: Adding the registration token to the .env file is optional. You can also register your workspace during configuration after deployment. Once registration is complete (confirmed when server starts), the token is no longer needed. If stored in the .env file, it can be removed as the registration is stored in the database clould settings . If you\u2019re using an existing MongoDB installation, such as MongoDB Atlas as the database provider, edit the value of the MONGO_URL variable to your connection string in this format: Save the .env file and start up the container by executing this command: This command will: Start a MongoDB service named mongodb. Start a service rocketchat, which will also wait for mongodb to be ready . MongoDB ensures continuous 24 x 7 operations and live backup, reducing the need for frequent restarts. Refer to the MongoDB documentation for proper server operation and management", "tokens": 481}
{"title": "Deploy with Docker & Docker Compose", "content": ". Optionally, manage messages and configurations by uncommenting the volume mounts, and ensuring a data subdirectory is available for data storage and mounting. To access your workspace, visit http://localhost:3000 if you deployed a test workspace on localhost . However, if you deployed a production workspace with a domain, you can access your workspace through the specified ROOT_URL . Follow the configuration prompts to configure your workspace. During the configuration steps, your workspace and email are registered to the Rocket .Chat Cloud portal, from where you can manage your workspace and subscriptions. Great! You\u2019ve successfully created your Rocket.Chat workspace with Docker and logged in. Next, check out the following documents to get started: User Guides: Learn the basics of your Rocket .Chat account, the types of rooms, and how to communicate with your workspace users. Workspace Administration: Administrators and owners can set and manage various configurations. Marketplace: Explore the available apps to enhance your workspace", "tokens": 221}
{"title": "Deploy with Docker & Docker Compose", "content": ". Your domain should only be accessible via HTTPS to access your workspace securely. If your domain is not set up with HTTPS already, the following examples describe how to set it up using a reverse proxy, such as Traefik or Nginx . We recommend using Traefik as it\u2019s shipped with our official Docker image. You can secure your Rocket.Chat Docker instance with TLS/SSL certificates from Let's Encrypt . Using Traefik as a reverse proxy, the certificates are automatically generated, enabling safe access to your Rocket.Chat instance via HTTPS on your specified domain . Before you proceed, confirm that the correct A record (optionally CNAME) is set for your domain going to your server IP. Update the following variables in your .env file. If you don't have one, create a .env file following our example. LETSENCRYPT_EMAIL: Your required email for the TLS certificates. DOMAIN: Your domain or subdomain name only. Avoid adding https:// or any trailing slashes. Confirm that this domain resolves to the server IP address . RELEASE : Your preferred Rocket.Chat release. See the releases page to know more about our releases. ROOT_URL : Set the value to \" https://your-domain.com,\" replacing \"your-domain.com\" with the domain name you want to use . BIND_IP: Set to 127.0.0.1 Download the Traefik template by running the following command: Recreate the existing Rocket.Chat container: Start traefik: Wait for the TLS certificates to generate and Rocket .Chat to restart. Then, access your Rocket.Chat workspace securely at https://your-domain.com, using the actual domain name you configured. Great job! You have successfully enabled HTTPs on your Rocket.Chat workspace with Traefik . If you prefer using Nginx as your reverse proxy, you can secure your Rocket.Chat workspace by configuring Nginx with a TLS/SSL certificate from Let's Encrypt . Follow these steps to complete the configuration: Use Let's Encrypt to get a free & open-source SSL certificate by following these steps: Install certbot using using the relevant package manager for your version of Linux", "tokens": 496}
{"title": "Deploy with Docker & Docker Compose", "content": ". For Debian-based distributions such as Debian and Ubuntu use : For RPM-based distributions such as Redhat and Centos, use: The installation commands may vary based on your Linux distribution and version . Obtain a certificate from Let's Encrypt by running this command (a second or more domains are optional): Rocket.Chat is usually set to run on port 3000 by default . However, you can make it more accessible to your users by using Nginx as a reverse proxy. This will link your domain name to the Rocket.Chat server running on that port . By doing this, your users can access your workspace through your domain name instead of directly using the port in the URL . Follow these steps: Install Nginx web server: Backup the default config file for reference: Create a new site configuration for Rocket.Chat: Paste the following in the new file: Replace ABC.DOMAIN.COM with your domain name . Test the Nginx configuration to make sure there are no syntax errors: If the syntax test is successful, restart Nginx: If you have security group restrictions, allow TCP/22 from your current IP for SSH connections and TCP/443 from the IP you plan to use for access . Open a web browser and \u00a0access your Rocket.Chat workspace securely at https://your-domain.com, using the actual domain name you configured. Great job! You have successfully enabled HTTPs on your Rocket.Chat workspace with Nginx", "tokens": 317}
{"title": "Deploy with Docker & Docker Compose", "content": ". Before you proceed, see the general guidelines for updating Rocket.Chat. Updating the Rocket.Chat image doesn't affect your data since it exists in the Mongo image . Before proceeding with the update, ensure that the version of your MongoDB is compatible with the intended release. Using Docker & Docker compose, you can update your rocketchat docker image to the latest or preferred version of Rocket.Chat. To update your Rocket .Chat version, For a specific version, modify the RELEASE variable in the .env file to point to the Docker image tag of that version. Alternatively, you can edit the compose.yml file to point to the desired Rocket.Chat version. Changing version in .env Changing version in compose.yml Now, stop, remove, and restart the existing container with these commands: See the official documentation for more details on Rocket.Chat Docker images . You can use any of the following Docker images according to your needs: Official image (stable and tested): The official Docker images repository is responsible for maintaining and controlling Rocket.Chat's official stable image through Docker. It is also reviewed by the Docker committee . Latest release image: This image holds the latest Rocket.Chat updates on the Docker repository. The release may be from the develop or master branch. You can use this to test some of the latest updates . Using the latest image tag for production deployments is not recommended. Preview image: The Rocket.Chat preview image deploys a container with a database inside. It's useful for quickly trying or running tests and does not require a dedicated database installation . Docker Hub Specific release image: You can set up your Rocket.Chat workspace with a specific release image . Select the release you need from the Docker hub tags and use it to run the following command: Bleeding-edge untested develop build image: This is an image maintained at Rocket.Chat's Docker repository . This update comes from the develop (untested) branch, which contains the latest updates for those who want to work with the newest features. Effective logging helps you monitor the health and status of your Rocket.Chat deployment. This section covers logging for Rocket", "tokens": 458}
{"title": "Deploy with Docker & Docker Compose", "content": ".Chat, MongoDB, and reverse proxies like Traefik or Nginx. To check the status and logs of your Rocket .Chat container, follow these steps: Use any of the following commands to list containers running in your Docker environment: Once you identify your Rocket .Chat container, you can inspect its logs using any of these commands: Note: Replace <Container_Name> and <Service_Name> with the appropriate values such as docker compose logs -f rocketchat. Rocket .Chat logs to stdout, so there isn't a specific log file within the container. The Docker logging system captures these stdout logs, making them accessible through the docker logs command MongoDB is a crucial part of your Rocket.Chat deployment . Monitoring its logs can help identify database-related issues. View MongoDB logs by running any of these commands: To inspect MongoDB\u2019s health, run: This returns detailed server status information. Replace <Container_Name> with the appropriate values . If you use a reverse proxy, checking its logs can help diagnose connectivity and SSL issues . If Traefik is handling requests, check its logs with: If using Nginx as a reverse proxy, logs are stored inside the container at /var/log/nginx/ . To view logs, run: To continuously monitor logs in real-time, run: Run the following command on your terminal to list out all running containers: Take note of your mongo container name . Run this command to dump the database into a binary file db.dump When successful, you should see db.dump file in the current directory . Run the following command: You can export your database dump directly to MongoDB Atlas by simply running Congratulations on successfully deploying Rocket.Chat using Docker! You can now communicate effortlessly with your team members on your workspace . Visit the accessing your workspace guide to configure your workspace and onboard other team members.", "tokens": 419}
{"title": "Deploy with AWS", "content": "By leveraging Amazon Web Services (AWS) to deploy Rocket.Chat on an EC2 instance, organizations can unlock a host of benefits, from scalability and reliability to cost-effectiveness and simplified management. The minimum requirement to run Rocket .Chat successfully is 2Gb 2 cores. You need an active AWS account to proceed with the deployment. For deployments approaching 1000 concurrent users and above, deploy with Kubernetes is recommended . In this guide, you'll learn how to: Host Rocket.Chat on an EC2 instance with a domain name. Secure your Rocket.Chat server with a free SSL certificate from Let's Encrypt. Deploy the workspace using Docker on the EC2 instance . To create a new EC2 instance, follow these steps: Log into your AWS console, and open the EC2 Service. From the sidebar, click Instances. Then, click Launch Instances to set up a new EC2 instance . Set the instance name and select at least Ubuntu Server 18.04 LTS with 64-bit (x86) architecture as the OS image. Select an instance type of your choice according to the Cores recommendation above. For example, t3 .large. Choose an existing key pair or create a new one for SSH connections. Allow SSH, HTTP, and HTTPS traffic in the security group configuration. Adjust the instance details, storage size, and other configurations, or keep the defaults . Proceed to Summary to review your instance configurations. Then, click Launch Instance. Unlike instance addresses which can change upon restart, Elastic IPs are static . They remain consistent throughout the instance lifecycle and can be easily reattached to different instances, making them ideal for scenarios where you need to move your instance or change configurations", "tokens": 367}
{"title": "Deploy with AWS", "content": ". Follow these steps to allocate an elastic IP to an instance: From the EC2 service dashboard, click Elastic IPs. Click Allocate Elastic IP address. Select Amazon's pool of IPv4 addresses, and click Allocate . Click and open the newly created IP address and select Associate Elastic IP address. Select your instance and click Associate. In the details below, copy the Public DNS. You will need it to configure the DNS . The format looks like this: ec2-18-XXX-XXX-XXX.eu-central-1.compute.amazonaws.com Allocating an elastic IP address to your instance is optional . You can proceed with using the Public IPv4 address of your instance for configuring your DNS. Route 53 allows you to manage all domain names and DNS records in one place . This simplifies administration and allows you to create various record types (A records, CNAME records, etc.) to direct your domain names to resources. To configure, open the Route 53 service dashboard and navigate to Hosted Zones . If you already have a hosted zone, follow these steps: Select the hosted zone. Click Create Record. Add a subdomain in the form of the record name. Select the record type \u201cA,\u201d which points to an IP address . In this case, the IP address refers to the Public IPv4 address from the created instance in earlier steps. Click Create Records to create a new record within the hosted zone . Take note of the subdomain created here, as you will need it later. If you do not have a hosted zone, follow these steps instead: Click Create Hosted Zone. Enter your domain name and select Public Hosted Zone as the type . Click the Create hosted zone button. Select your newly created zone and click Create Record Set . Enter www as a subdomain (if desired), select Type CNAME, enter the Public DNS name you copied from the elastic IP to the value field, and click Create", "tokens": 424}
{"title": "Deploy with AWS", "content": ". Use Let's Encrypt to get a free & open-source SSL certificate by following these steps: Connect to your instance: If your DNS has resolved, you can replace the IP address with your domain name . Install certbot using apt: Obtain a certificate from Let's Encrypt by running this command (a second or more domains are optional): Alternatively, you can follow the Deploy with Docker Compose guide and enable HTTPS using Let's Encrypt and Traefik . Adjust the security groups again if you want to restrict traffic to your AWS instance. Make sure you allow TCP/22 from your current location for the SSH connection, as well as TCP/443 from the location you wish to use to access from . Rocket.Chat is usually set to run on port 3000 by default. However, you can make it more accessible to your users by using Nginx as a reverse proxy. This will link your domain name to the Rocket .Chat server running on that port. By doing this, your users can access your workspace through your domain name instead of directly using the port in the URL . Follow these steps: Install Nginx web server: Backup the default config file for reference: Create a new site configuration for Rocket.Chat: Paste the following in the new file: Ensure to update ABC.DOMAIN.COM with your domain name . Update it in the path to your key files as well . Test the Nginx configuration to make sure there are no syntax errors If the syntax test is successful, restart Nginx: Open a web browser and enter your domain name to confirm it is running correctly . A 502 Bad Gateway page is expected since the Rocket.Chat backend is not yet running. Ensure the SSL connection works appropriately by clicking the lock icon next to the address bar. Confirm the connection is valid and secure using HTTPS . Now that your EC2 instance and domain are ready, SSH into your instance and follow our deploy with Docker & Docker Compose guide to set up your Rocket.Chat workspace. Once your workspace is running, log in to your site at https://ABC .DOMAIN.COM.The first user to log in will be the workspace administrator.", "tokens": 477}
{"title": "Deploy with Kubernetes", "content": "This documentation guides you through deploying Rocket.Chat on Kubernetes using the Helm package manager. The official Rocket.Chat helm chart bootstraps the deployment process by provisioning a fully featured Rocket.Chat installation. It also provides strong support for scaling Rocket .Chat to accommodate growing server capacity needs and ensure high availability. This section details the prerequisites for deploying Rocket.Chat with Kubernetes, including recommendations and examples to guide you . Note that if you are using a firewall, you may need to whitelist some URLs to communicate with our cloud services. See Firewall Configuration for the complete list. Domain name: Confirm that your domain name points to your server's IP address . Kubernetes cluster: Ensure your Kubernetes cluster is up and running. Helm v3: Install Helm v3 if not already installed. Firewall configuration: Verify that your firewall rules allow HTTPS traffic . The following Kubernetes resources must be deployed on your server: The examples provided are intended as a guide. Your implementation may vary based on your specific requirements and Kubernetes configuration . Storage Class: Use an existing storage class in your Kubernetes cluster, or set up a new one depending on your cluster configuration. Ingress Controller: This deployment requires an ingress controller. In this guide, we\u2019ll use nginx as an example . Install Ingress-Nginx controller by running: Confirm that the ingress-nginx-controller service with a LoadBalancer type has an external IP address by running: Certificate manager and ClusterIssuer: If you\u2019re not using a domain with a valid TLS certificate, you may need to set up one to use HTTPS . Cert manager: To facilitate TLS certificate management, install cert-manager by running: Check the created resources in the cert-manager namespace with: ClusterIssuer: cert-manager requires a ClusterIssuer to automatically issue TLS certificates across the cluster . Below is an example configuration for setting up Let's Encrypt in a clusterissuer.yaml file: Create this resource by running the following command: Confirm that the ClusterIssuer was properly deployed and that the secret was successfully created by running: The Rocket", "tokens": 472}
{"title": "Deploy with Kubernetes", "content": ".Chat chart has an optional dependency on the MongoDB chart. By default, the MongoDB chart requires PV support on underlying infrastructure, which may be disabled. Once you've confirmed that all prerequisites are met, continue with the next steps to deploy a Rocket .Chat workspace using Kubernetes. Add the Rocket.Chat helm chart repository by running the following command: If successful, it returns a response that \"rocketchat\" has been added to your repositories. To install Rocket .Chat using the chart, define your configuration options in a values.yaml file. Below is an example configuration to use for your deployment: Replace <release> with the Rocket.Chat release tag you intend to deploy. Update domain.xyz with your actual domain name . Set the ingressClassName to the ingress controller you are using. If you\u2019ve configured a certificate manager and ClusterIssuer for TLS, specify your ClusterIssuer name and a secretName for TLS . If you already have a valid certificate or do not wish to use TLS, the annotations and tls values can be omitted. It\u2019s important to note that microservices is disabled in this deployment", "tokens": 257}
{"title": "Deploy with Kubernetes", "content": ". To use microservices, visit our microservices documentation for more details. Additionally, you can refer to this recording that explains how to deploy Rocket.Chat with microservices in a test environment. With your configurations defined in values.yaml, proceed with the Rocket .Chat installation by running: A successful deployment will return output confirming that Rocket.Chat has been installed. After a few minutes, you can now access your workspace at the domain where Rocket.Chat was deployed and complete the setup wizard . Congratulations! You have successfully deployed your Rocket.Chat workspace on Kubernetes. Your workspace is now live and ready to use. Enjoy your new Rocket .Chat workspace! To verify that the pods for your deployment are running, execute: To view the logs for a specific Rocket.Chat pod, use: To stream real-time logs from a running Rocket .Chat pod: This helps in tracking ongoing events and debugging issues as they occur. To view logs for all pods running Rocket.Chat: Check for MongoDB connection issues by running: You can also identify authentication failures by using: To update your Rocket .Chat workspace to a new version, update the tag field in your values.yaml file with the desired release tag. For details about available Rocket.Chat versions, refer to the Rocket.Chat releases . After updating the file, execute the following command: For more information on updating Rocket.Chat, refer to this issue. To uninstall and delete the Rocket .Chat deployment, use the command: To further explore and enhance your workspace on Kubernetes, consider the following next steps: Additional configurations for deploying Rocket.Chat with Kubernetes Database configuration Scale your workspace with microservices", "tokens": 368}
{"title": "Configuring Rocket.Chat with Kubernetes", "content": "The Rocket.Chat Helm chart provides various options for configuring your deployment. You can: Define your configuration options using a values.yaml file, as demonstrated in the deployment guide. This method is the recommended approach . Pass configuration parameters directly to the helm commands using the --set key=value syntax. \u00a0For example, The following table lists the configurable parameters of the Rocket.Chat chart and their default values. Parameter Description Default image.repository Image repository registry.rocket .chat/rocketchat/rocket.chat image.tag Image tag 3.18.3 image.pullPolicy Image pull policy IfNotPresent host Hostname for Rocket.Chat . Also used for ingress (if enabled) \"\" replicaCount Number of replicas to run 1 smtp.enabled Enable SMTP for sending mails false smtp.existingSecret Use existing secret for SMTP account \"\" smtp.username Username of the SMTP account \"\" smtp .password Password of the SMTP account \"\" smtp.host Hostname of the SMTP server \"\" smtp.port Port of the SMTP server 587 extraEnv Extra environment variables for Rocket.Chat", "tokens": 252}
{"title": "Configuring Rocket.Chat with Kubernetes", "content": ". Used with tpl function, so this needs to be a string \"\" extraVolumes Extra volumes allowing inclusion of certificates or any sort of file that might be required (see bellow) [] extraVolumeMounts Where the aforementioned extra volumes should be mounted inside the container [] podAntiAffinity Pod anti-affinity can prevent the scheduler from placing RocketChat replicas on the same node . The default value \"soft\" means that the scheduler should prefer to not schedule two replica pods onto the same node but no guarantee is provided. The value \"hard\" means that the scheduler is required to not schedule two replica pods onto the same node . The value \"\" will disable pod anti-affinity so that no anti-affinity rules will be configured. \"\" podAntiAffinityTopologyKey If anti-affinity is enabled sets the topologyKey to use for anti-affinity . This can be changed to, for example failure-domain.beta.kubernetes.io/zone kubernetes.io/hostname affinity Assign custom affinity rules to the RocketChat instance https://kubernetes .io/docs/concepts/configuration/assign-pod-node/ {} minAvailable Minimum number / percentage of pods that should remain scheduled 1 existingMongodbSecret An already existing secret containing MongoDB Connection URL \"\" externalMongodbUrl MongoDB URL if using an externally provisioned MongoDB \"\" externalMongodbOplogUrl MongoDB OpLog URL if using an externally provisioned MongoDB . Required if externalMongodbUrl is set \"\" mongodb.enabled Enable or disable MongoDB dependency. Refer to the stable/mongodb docs for more information true persistence.enabled Enable persistence using a PVC . This is not necessary if you're using the default GridFS file storage false persistence.storageClass Storage class of the PVC to use \"\" persistence.accessMode Access mode of the PVC ReadWriteOnce persistence.size Size of the PVC 8Gi persistence .existingClaim An existing PVC name for rocketchat volume \"\" resources Pod resource requests and limits {} securityContext.enabled Enable security context for the pod true securityContext.runAsUser User to run the pod as 999 securityContext", "tokens": 498}
{"title": "Configuring Rocket.Chat with Kubernetes", "content": ".fsGroup fs group to use for the pod 999 serviceAccount.create Specifies whether a ServiceAccount should be created true serviceAccount.name Name of the ServiceAccount to use . If not set and create is true, a name is generated using the fullname template \"\" ingress.enabled If true, an ingress is created false ingress.pathType Sets the value for pathType for the created Ingress resource Prefix ingress", "tokens": 100}
{"title": "Configuring Rocket.Chat with Kubernetes", "content": ".annotations Annotations for the ingress {} ingress.path Path of the ingress / ingress.tls A list of IngressTLS items [] license Contents of the license file, if applicable \"\" prometheusScraping .enabled Turn on and off /metrics endpoint for Prometheus scraping false prometheusScraping.port Port to use for the metrics for Prometheus to scrap on 9458 serviceMonitor .enabled Create ServiceMonitor resource(s) for scraping metrics using PrometheusOperator (prometheusScraping should be enabled) false serviceMonitor.interval The interval at which metrics should be scraped 30s serviceMonitor .port The port name at which container exposes Prometheus metrics metrics livenessProbe.enabled Turn on and off liveness probe true livenessProbe.initialDelaySeconds Delay before liveness probe is initiated 60 livenessProbe .periodSeconds How often to perform the probe 15 livenessProbe.timeoutSeconds When the probe times out 5 livenessProbe.failureThreshold Minimum consecutive failures for the probe 3 livenessProbe.successThreshold Minimum consecutive successes for the probe 1 microservices .enabled Use microservices architecture false microservices.presence.replicas Number of replicas to run for the given service 1 microservices.ddpStreamer.replicas Idem 1 microservices.streamHub.replicas Idem 1 microservices.accounts .replicas Idem 1 microservices.authorization.replicas Idem 1 microservices.nats.replicas Idem 1 readinessProbe.enabled Turn on and off readiness probe true readinessProbe.initialDelaySeconds Delay before readiness probe is initiated 10 readinessProbe .periodSeconds How often to perform the probe 15 readinessProbe.timeoutSeconds When the probe times out 5 readinessProbe.failureThreshold Minimum consecutive failures for the probe 3 readinessProbe .successThreshold Minimum consecutive successes for the probe 1 registrationToken Registration token for Rocket.Chat Cloud \"\" service.annotations Annotations for the Rocket.Chat service {} service.labels Additional labels for the Rocket.Chat service {} service.type The service type to use ClusterIP service .port The service port 80 service.nodePort The node port used if the service is of type NodePort \"\" podDisruptionBudget.enabled Enable or disable PDB for RC deployment true podLabels Additional pod labels for the Rocket", "tokens": 557}
{"title": "Configuring Rocket.Chat with Kubernetes", "content": ".Chat pods {} podAnnotations Additional pod annotations for the Rocket.Chat pods {} You can also refer to the GitHub repository to explore all the available configuration options. Rocket.Chat uses a MongoDB instance to persist its data . By default, the MongoDB chart is deployed and a single MongoDB instance is created as the primary in a replicaset. For additional configuration options, refer to the MongoDB chart documentation. If you are using the default chart settings, ensure you set the mongodb .auth.rootPassword and mongodb.auth.passwords values. The root credentials are used to connect to the MongoDB OpLog. This chart supports using an existing MongoDB instance. To disable the chart's MongoDB deployment, set the configuration option mongodb.enabled=false . You can add extra environment variables to your Rocket.Chat deployment. For example: Sometimes, it's necessary to include extra sets of files by exposing them to the container as a mount point. The most common use case is the inclusion of SSL CA certificates . To increase the server's capacity, you can increase the number of Rocket.Chat server instances across available computing resources in your cluster. For example, By default, the chart creates one MongoDB instance as a Primary in a replicaset . You can also scale up the capacity and availability of the MongoDB cluster independently. See MongoDB chart for configuration information. To learn more on running Rocket.Chat in scaled configurations, visit the configure MongoDB replicaset guide . The chart provides several ways to manage the connection for MongoDB apart from the primary mongodb.auth values . They include: Values passed to the chart (externalMongodbUrl, externalMongodbOplogUrl) An ExistingMongodbSecret containing the MongoURL and MongoOplogURL As a warning, this chart will not handle MongoDB upgrades and will depend", "tokens": 422}
{"title": "Configuring Rocket.Chat with Kubernetes", "content": "on the user to ensure the supprted version is runnning . The upgrade will fail if any of the following requirements are not met : Must not skip a MongoDB release. For example, 4.2.x to 5.0.x will fail . Current featureCompatibilityVersion must be compatible with the version the user is trying to upgrade to. For example\u2014if the current database version and feature compatibility is 4.4 and 4 .2, respectively, but the user is trying to upgrade to 5.0, it'll fail. The chart will not check if the mongodb version is supported by the Rocket.Chat version considering deployments that might occur in an airgapped environment . You can check the release notes to confirm that. To get the currently deployed MongoDB version, the easiest method is to get into the mongo shell and run db.version(). You are advised to pin your MongoDB dependency in the values file . To learn more about the Rocket.Chat helm chart, visit the GitHub repository. Run a shell inside a container (to check mongodb version) MongoDB upgrade official documentation MongoDB helm chart options", "tokens": 246}
{"title": "Deploy with Snaps", "content": "As of December 15, 2023, Rocket.Chat has ceased support for connections from cloud services and official mobile/desktop apps to workspaces running legacy versions outside our support window. Users on unsupported legacy servers are advised to upgrade to the latest Rocket .Chat version to ensure continued access to cloud, mobile, and desktop applications. Each Rocket.Chat version is supported for six months post-release. The recommended deployment methods are Docker, AWS, and Kubernetes . Snaps offer a quick and straightforward way to deploy a Rocket.Chat workspace, primarily suited for development purposes. We do not recommend using Snaps in a production environment . Snaps are self-contained packages that bundle all necessary files and dependencies, simplifying the installation and update processes on Linux systems. By using Snaps, you can deploy Rocket .Chat on any Linux distribution in a secure environment, with the added benefit of automatic updates whenever a new version of Rocket.Chat is released. Before getting started, ensure you have: A Linux-based system (e.g., Ubuntu, Debian, Fedora, etc .) A CPU supporting AVX/AVX2 to run the required MongoDB version for the Rocket.Chat release. Snap installed (It comes pre-installed on most modern Linux distributions. If not, refer to the Snaps installation guide) To install Rocket .Chat via Snap on your Linux system, run the following command: This installs a specific version of Rocket.Chat. When using the --channel=x.x/stable flag, the first x represents the major version of the release, while the second x remains unchanged . For example, use 6.x/stable to install the latest release on version 6. Visit Snap Channels for more details. The following command installs the latest available version of Rocket .Chat: Once the installation is complete, access your workspace by opening a web browser and navigating to the root URL (e.g., http://localhost:3000). It is recommended that you specify the version that you want to deploy . Once your workspace is deployed, the first user to log in using the setup wizard is set as the administrator. Next, to start using your workspace, check out the following documents: User Guides: Learn the basics of your Rocket", "tokens": 481}
{"title": "Deploy with Snaps", "content": ".Chat account, the types of rooms, and how to communicate with your workspace users. Workspace Administration: Administrators and owners can set and manage various configurations. Marketplace: Explore the available apps to enhance your workspace. Starting from release 0 .73, Snaps include\u00a0Caddy, a web server that integrates with Let's Encrypt for automatic SSL/TLS encryption. Snap hooks simplify the configuration process by ensuring proper DNS setup before enabling Let's Encrypt. To enable SSL for your Rocket .Chat workspace using Snap, follow these steps: Ensure that your domain resolves to the IP address of your server. Set the siteurl to your domain, prefixed with HTTPS: Start Caddy and restart Rocket.Chat services: Access your Rocket .Chat workspace by navigating to https://<your-domain>. For further configuration, check out the following steps you can take to customize your deployment: To view the available configuration options for your Rocket .Chat Snap installation, run: This command will display a list of configurable variables, such as: To set or update any of these variables, use the following command: Starting from release 0.73, you can override any Rocket .Chat environment variable using .env files \u00a0in the $SNAP_COMMON directory (/var/snap/rocketchat-server/common/). You can create multiple .env files and each file can define multiple environment variables . For example, to change SMTP host setting: Navigate to the $SNAP_COMMON directory: Create a file named overwrite-smtp.env and add the snippet below: Restart the Rocket .Chat service to apply the changes: Similarly, to add certificates, create a .env in the /var/snap/rocketchat-server/common or the /var/snap/rocketchat-server/current directory . The file must contain simple key=value pairs. Once this is done, restart the Rocket.Chat service. Starting from track 4.x, you can configure MongoDB for your Rocket.Chat instance . The configuration file is located in /var/snap/rocketchat-server/current/mongod.conf. For all the configuration options, see MongoDB's official documentation. Snap tracks let you control which major version of Rocket", "tokens": 496}
{"title": "Deploy with Snaps", "content": ".Chat you're running, ensuring that your workspace receives updates specific to that track. This means your server will continue to get the latest patches and minor updates for the current track without automatically upgrading to a new major release . For example, if your workspace is on the 5.x track, it will ignore updates for 6.x until you choose to switch tracks . This approach gives you flexibility, allowing you to adopt new major versions when you're ready while keeping your workspace up-to-date within your current track. By default, the Rocket.Chat Snap installation is set to the latest available track at the time of setup . Before updating your workspace, consider the following: Backup your data before performing an upgrade. Review the Rocket.Chat forums for announcements regarding major updates. Often, major releases are delayed for feedback and minor patches before the final release . Refer to the general guidelines for updating Rocket.Chat. To update your workspace to the latest release within your current track, refresh your server by running: To update to a new major version, switch to the desired track and refresh your Rocket .Chat server: Alternatively, to immediately update to the latest release of a specific major version, run: Learn more about track changes in this discussion. If you have any concerns or issues with your deployment, see Snaps FAQ", "tokens": 276}
{"title": "Deploy with Snaps", "content": ". The Snap backup and restore feature allows you to easily create backups of your Rocket.Chat instance and restore them when needed. This ensures that your data is protected and can be recovered at any time . To enable automatic backups whenever your Snap installation is refreshed, run: To manually create a backup of your Rocket .Chat Snap data, follow these steps: Stop your rocketchat-server by running the command: While the rocketchat-server service should be stopped, the rocketchat-mongo service should be kept running . To verify this, run the following command: Ensure MongoDB is still running with the output: Run the backup command: A successful backup will return this: Start your rocketchat-server Copy the backup to a secure location on another system for safekeeping . To restore your Rocket.Chat Snap data, follow these steps: Stop your rocketchat-server by running this command: While the rocketchat-server service should be stopped, the rocketchat-mongo service should be kept running . To verify this, run the following command: Copy your backup file to the snap's common folder: Run the restore command: If you are replacing an existing database, you get a warning message: Choose your restore option . If it is successfully done, you will see an output similar to the following: Start your rocketchat-server You can either use Caddy with custom configurations or opt for a different HTTP proxy . The Snap package includes both Caddy v2 (preferred) and Caddy v1 (end-of-life), with v2 prioritized. To configure Caddy manually, place your Caddyfile in the following directory and restart the Rocket .Chat service: If you prefer using another reverse proxy, disable Caddy by running: If you're using an older Snap version or want more control over the HTTPS setup, you can manually configure Caddy as follows: Run this command to disable automatic Caddy configuration: Edit the Caddyfile found at /var/snap/rocketchat-server/current/Caddyfile and write your configuration", "tokens": 445}
{"title": "Deploy with Snaps", "content": ". Replace _caddy-url_ and _port_ with your site information. For example, suppose that you have example-domain.com directed toward your server . If your DNS is not working, you could be instantly throttled by Let's Encrypt for up to a week. Make sure your DNS is resolved before enabling TLS . To test your DNS you can use http: Restart Caddy: Check the status to ensure Caddy started correctly: Once that is tested and resolved, to get secured communications, you can remove the http://: Using an IP address will not work for automatically enabling TLS with a publicly-trusted certificate . You must use a valid hostname for a trusted certificate. See the official guide for more information. If you use an IP address, Caddy will still serve your site over TLS, but using a self-signed certificate . Restart the Caddy service by running: You can check that the Caddy service started correctly by running: If the configuration is successful, the website should now be accessible at https://example-domain.com. For logging when deploying Rocket .Chat with Snaps, you can check logs using journalctl and snap logs . Here's how: Since Snap services are managed by systemd, you can check logs using: To follow logs in real-time: Alternatively, Snap provides a built-in command for viewing logs: To get real-time logs: MongoDB logs are also managed by systemd . To check logs, run: For live logs, run: If you are using Caddy for SSL/TLS, check its logs with: To follow logs live: Run the command below to view all logs related to Rocket.Chat (including Rocket .Chat itself, MongoDB, and Caddy): To follow logs live: AppArmor errors after Snap update", "tokens": 391}
{"title": "Updating Rocket.Chat", "content": "As of December 15, 2023, Rocket.Chat has ceased support for connections from cloud services and official mobile/desktop apps to workspaces running legacy versions outside our support window. Users on unsupported legacy servers are advised to upgrade to the latest Rocket .Chat version to ensure continued access to cloud, mobile, and desktop applications. Each Rocket.Chat version is supported for six months post-release. See Version Durability for details on the support dates of each release version. Keeping your Rocket .Chat installation up-to-date is essential to ensure that you have access to the latest features, bug fixes, and security enhancements. This guide will walk you through the process of updating Rocket.Chat across various deployment methods. To prepare for a successful Rocket .Chat update, it's vital to adhere to specific guidelines. Start by thoroughly understanding the system requirements and carefully reading the release notes specific to your target version. Backup your data: Always perform a full backup of your Rocket .Chat instance, including the database and any custom configurations. This ensures you can revert to a working state in case of any issues during the update . Avoid skipping major versions: When updating from one major version to another, it is important to follow a sequential path and not skip any intermediate major versions. For example, if you are updating your workspace from version 1.x.x to version 4 .x.x, we recommend that you follow this path: 1.x.x -> 2.x.x -> 3.x.x -> 4.x.x . Like so: Following the recommended path above enables you to update to the latest version of the next release from your current version until you get to your preferred version without missing any significant changes. Skipping intermediate major versions, such as updating directly from 1 .x.x to 4.x.x, can lead to problems because the software in 4.x.x may not be compatible with the data or settings that you have in 1.x.x", "tokens": 420}
{"title": "Updating Rocket.Chat", "content": ". See our update version path flowchart and demo for a more detailed workflow on updating your workspace from the oldest version (1.x.x) with MMAP to the latest version with the supported MongoDB release. Update version path Updating your Rocket .Chat workspace to a new version involves several steps, which can vary depending on the deployment method you're using. If you have deployed your workspace with Docker, follow the update Rocket.Chat on Docker guide . If you have deployed your workspace with Kubernetes, follow the update Rocket.Chat on Kubernetes guide. If you have deployed your workspace with Snaps, see the update Rocket.Chat on Snaps guide . If you deployed your workspace following the manual installations (CentOS, Debian), continue with the following steps: Stop Rocket.Chat service: Remove the installation folder, usually in /opt Ensure you have the needed build packages for Debian . Update the node version required by Rocket.Chat. Check the release notes for the supported engine versions for MongoDB and NodeJs, and install as recommended. Download the latest version of Rocket.Chat: Install it and set the proper permissions to Rocket .Chat folder with these commands: Additional steps for updating to the 6.10 release If you\u2019re updating your workspace to version 6.10, run these additional commands: Start the Rocket .Chat service: If you have any concerns or issues with updating Rocket.Chat, see updating Rocket.Chat FAQ Refer to MongoDB version support and learn more about the supported MongoDB versions for your Rocket.Chat workspace and how to update.", "tokens": 348}
{"title": "Scaling Rocket.Chat", "content": "As concurrent users on your workspace grow, you may experience system latency. Monitoring system performance is essential to determine if additional resources are needed. For example, you may see the Rocket.Chat mode process approaching 100% CPU (even if the host CPU load is low). This is due to the single-threaded nature of Node.js applications, as they can't take advantage of multiple cores natively. To overcome these limitations and ensure smooth performance as your workspace grows, consider scaling your environment by deploying Rocket.Chat using Microservices (smaller components focused on specific features). The scaling approach you choose depends on how you deploy your workspace. For deployments using Docker, scaling by running multiple Rocket.Chat instances is a well-established approach. However, microservices offer a more granular and efficient scaling option for Kubernetes deployments. For deployments approaching 1,000 concurrent users and above, the microservices architecture is recommended for optimal scalability. This documentation will guide you through both approaches, ensuring your Rocket.Chat workspace scales alongside your growing user base. As of December 15, 2023, Rocket.Chat has ceased support for connections from cloud services and official mobile/desktop apps to workspaces running legacy versions outside our support window. Users on unsupported legacy servers are advised to upgrade to the latest Rocket.Chat version to ensure continued access to cloud, mobile, and desktop applications. Each Rocket.Chat version is supported for six months post-release.", "tokens": 315}
{"title": "Microservices", "content": "Deploying Rocket.Chat as microservices improves scalability and fault isolation within your workspace. By dividing Rocket.Chat into specialized services, each component operates independently, optimizing performance and simplifying maintenance. Rocket.Chat officially supports deploying microservices using Kubernetes with the official Helm chart . It is essential to note that we do not support direct Docker microservices deployment. . In this document, you'll learn: Key components of the Rocket.Chat microservice architecture How to scale your existing Rocket.Chat workspace with microservices Rocket .Chat\u2019s microservices architecture consists of several components, each focusing on a specific feature. These components work together to form a fully operational Rocket.Chat workspace . Here are the key components: authorization (rocketchat/authorization-service): Manages role and permission validation, ensuring that users have the right access levels. nats (docker .io/nats): A messaging system that provides a scalable and highly available message bus for microservices communication. It acts as a message distributor, i.e., you point to the distributor instead of pointing to each component in the deployment resource . This determines the service to forward the requests. To learn more about NAT, see the official documentation . stream-hub ( rocketchat/stream-hub-service) : Functions as a message broker that provides a scalable and fault-tolerant message stream for Rocket.Chat. It receives real-time changes or data from MongoDB and sends it to all the services . The services can act on that change at their discretion. accounts (rocketchat/accounts-service): Manages user accounts and authentication . ddp-streamer (rocketchat/ddp-streamer-service): Handles all WebSocket connections using the Distributed Data Protocol (DDP). presence (rocketchat/presence-service): Manages user presence status. The central Rocket .Chat monolith (rocketchat/rocket.chat): Each component is disabled from this monolith, so each \"service\" can take over its respective functionalities. Rocket.Chat's microservices deployment is illustrated in the diagram below", "tokens": 467}
{"title": "Microservices", "content": ". This guide assumes you have a monolithic Rocket.Chat workspace deployed with Kubernetes. It focuses on scaling the existing deployment using microservices. If you haven\u2019t deployed a workspace with Kubernetes yet, refer to the Deploy with Kubernetes guide for instructions . To configure Rocket.Chat microservices in your Kubernetes deployment, modify the values.yaml file and follow these steps: Set the enabled value for microservices to true: By default, the Rocket.Chat Helm chart deploys a single monolithic instance . To scale the deployment with multiple replicas, add the number of desired \u00a0replicaCount as follows: Alternatively, specify the number of replicas for each service as shown below: For ddp-streamer, aim one pod for every 500 concurrent users . stream-hub is the only service/component that can not be scaled and is limited to one pod for each deployment. After updating the microservices configuration in values.yaml, apply the changes by upgrading Rocket", "tokens": 226}
{"title": "Microservices", "content": ".Chat: If your deployment is successful, you\u2019ll get a response similar to the following: Verify that the corresponding certificates, secrets, and pods have been successfully created with the kubectl get pods command . The result is similar to the image below, depending on your configurations: Congratulations! You\u2019ve successfully scaled your Rocket.Chat workspace using microservices. You can return to your workspace and continue chatting with your team mates. If you\u2019re deploying a new Rocket .Chat workspace with microservices: Follow the Deploy Rocket.Chat with Kubernetes guide. While defining the configurations, enable microservices and configure your desired replicas for microservices in the values.yaml file as outlined above. Finalize the deployment by installing Rocket .Chat: If your deployment is successful, you\u2019ll get a response similar to the following: Lastly, verify that the corresponding certificates, secrets, and pods have been successfully created with the kubectl get pods command . The result is similar to the image below, depending on your configurations: After a few minutes, you can now access your workspace at the domain where Rocket.Chat was deployed and complete the setup wizard . Additionally, you can refer to this recording that explains how to deploy Rocket.Chat with microservices in a test environment. For multi-workspace deployment, please contact support. Congratulations! You have successfully deployed your Rocket.Chat workspace with microservices . Your workspace is now live and ready to use. Enjoy your new Rocket.Chat workspace!", "tokens": 330}
{"title": "Running Multiple Instances", "content": "Deploying Rocket.Chat with multiple instances improves scalability and reliability by distributing the workload across several Rocket.Chat instances as the user base grows. This document details the process of setting up a multi-instance Rocket.Chat deployment using Docker . While scaling up by adding more servers is recommended for high availability \u00a0purposes, you can better utilize your existing hardware by running multiple instances of the Rocket.Chat application (Node.js/Meteor app) on your current host(s) . This approach is particularly effective if you have a multi-core computer. A good rule of thumb is to run N-1 Rocket.Chat instances, where N is the number of cores . Running multiple instances on a single host requires a reverse proxy to manage traffic before it reaches your application. By following this document, you will be able to: Set up multiple Rocket.Chat instances using Docker . Configure a single MongoDB database to be shared among these instances. Implement a reverse proxy server to manage traffic distribution. This document shows an example on \u00a0how to run multiple Rocket.Chat instances . Your actual prodecures may vary depending on your organization's policies and configurations. Servers: One server for MongoDB. One server for Nginx or your preferred reverse proxy. Two or more servers for deploying Rocket.Chat instances as per your needs . Docker must be installed and operational on all servers. Configure the servers to either allow all traffic from any source or restrict traffic to only allow communication between the MongoDB, Nginx, and Rocket.Chat servers. Deploying Rocket .Chat with multiple instances involves the following key phases: Setup MongoDB database Deploy Rocket.Chat servers Configure a reverse proxy to manage traffic across the Rocket.Chat instances Configure MongoDB according to your preference and verify the setup", "tokens": 380}
{"title": "Running Multiple Instances", "content": ". Alternatively, use the Docker command below to set up MongoDB on the MongoDB server: Replace <mongodb-ip-address> with the IP address or hostname of your MongoDB server. This document outlines the steps to deploy two instances of Rocket .Chat using Docker, with both workspaces connected to the MongoDB database configured above. These instructions can be extended to deploy additional instances. Create a compose.yml file: On each Rocket.Chat server, create a compose.yml file with the following configuration: Replace placeholders in each compose.yml file: <mongodb-ip>: The IP address or hostname of your MongoDB server . <current-rocketchat-ip-or-hostname>: The IP address or hostname where the current Rocket.Chat server is being deployed(i.e., the server where this compose file is used to deploy Rocket.Chat) . <rocketchat-01-ip-or-hostname> and <rocketchat-02-ip-or-hostname>: The IP address or hostname of all the Rocket.Chat servers. Ensure that each server's compose .yml file includes its specific IP or hostname as <current-rocketchat-ip-or-hostname>, and lists all Rocket.Chat servers IP/hostname under extra_hosts. The extra_hosts key facilitates inter-instance communication. Adjust MongoDB connection strings if using MongoDB Atlas: If you are using MongoDB Atlas, adjust the connection string in the MONGO_URL and MONGO_OPLOG_URL variables to the following format: Start the Rocket.Chat container: On each Rocket.Chat server, run the following command to start the container: To deploy more than two Rocket.Chat instances: Create additional compose.yml files for each new instance . Add the IP address/hostname of the new instances to the extra_hosts section in all compose.yml files of existing instances. Ensure each new compose.yml file includes the IP/hostname of all other Rocket.Chat servers . By following these steps, you can scale the deployment to include multiple Rocket.Chat instances, each connected to the same MongoDB database, and ready for configuration with a reverse proxy for load balancing", "tokens": 488}
{"title": "Running Multiple Instances", "content": ". Now that both workspaces are running, set up a reverse proxy to distribute the traffic and balance the load among the Rocket.Chat instances. It also allows you to access the workspaces from a single host . In this document, we will use Nginx as the reverse proxy. To keep this example simple, TLS termination is not considered. On the Nginx server, create a compose.yml file: Set up a backend and define all the Rocket .Chat workspaces that Nginx will proxy requests to under the upstream block. Create an nginx.conf file with the following content: Update the <nginx-ip-or-hostname> with the public IP address or hostname of the Nginx server . The Rocket.Chat servers added to the backend upstream correspond to the IP/hostname defined in the ROOT_URL variable of the compose file used to deploy each Rocket.Chat instance(port 3000 by default) . Start Nginx using Docker Compose: Once the reverse proxy server is running, visit the public IP address or hostname of the Nginx server on your browser. You can now explore your Rocket.Chat workspace and invite other users . To verify the connected instances running for your Rocket.Chat workspace, navigate to Administration > Workspace, \u00a0and click the Instances button under Deployment. The Rocket .Chat instances connected on your workspace are listed as shown below: To access more configuration details for a specific instance, click on the desired instance from the list . The image below shows \u00a0detailed example for a selected instance: To maintain optimal functionality in a multi-instance Rocket.Chat deployment, instances must communicate directly with one another", "tokens": 354}
{"title": "Running Multiple Instances", "content": ". This direct communication is crucial for transmitting ephemeral events, like user typing indicators, between instances. To enable this peer-to-peer communication, set the INSTANCE_IP environment variable for each Rocket.Chat instance . This variable defines the IP address that is accessible by other instances . In a Docker environment where host networking isn't used, INSTANCE_IP should be set to the host's IP address rather than the Docker-assigned IP, as the latter is only reachable within the same Docker network on the host . Additionally, the TCP_PORT environment variable can be configured to specify a port for event communication. By default, Rocket .Chat selects a random port for each instance, but you can define TCP_PORT when dealing with firewalls or Docker environments to ensure the correct port is opened and accessible. Both INSTANCE_IP and TCP_PORT are stored in the instances' collection, where Rocket .Chat instances monitor and maintain connectivity. This internal registry allows each instance to discover new peers and establish TCP connections as new instances are added . If an instance fails to update its record, it will eventually expire and be removed from the registry, ensuring only active connections are maintained . When using MongoDB Atlas or deploying your custom database, it is essential to verify your database as a critical component of this setup . Ensure that you are running a replica set for the following reasons: Database reliability: Replication ensures your data is backed up and another node is available if the primary node fails . Oplog tailing: Enabling oplog with a replica set allows MongoDB to publish events for data synchronization across nodes. Rocket.Chat relies on this to monitor database events . For instance, if a message is sent on Instance 1 and you are connected to Instance 2, oplog tailing ensures Instance 2 receives the message insert event, displaying the new message.", "tokens": 394}
{"title": "Automation Tools", "content": "Instead of manually deploying Rocket.Chat, automation tools can help streamline the process and improve overall efficiency. Ansible : Understand how to configure an Ansible environment for deploying Rocket.Chat to multiple servers. Kubernetes using Helm: Install Rocket.Chat microservices on Kubernetes using Helm. OpenShift : Automate Rocket.Chat deployment on OpenShift. Vagrant : Deploying Rocket.Chat on Vagrant with Ubuntu.", "tokens": 103}
{"title": "Ansible", "content": "Set up an Ansible environment for deploying Rocket.Chat to multiple servers. See the Rocket.Chat official Ansible role. Ansible works on a \"push to clients\" basis . Your control node pushes all the configuration/ad-hoc tasks out to your systems via SSH, with no client running on the systems you're deploying to! In order words, it's swift, efficient, secure, scalable, and highly portable . Therefore, to control remote systems, you only need to install Ansible on your control node (your desktop can be an excellent control node to deploy from). To learn more about Ansible installation on different operating systems, see the official installation guide . Ansible is likely available in your official package repositories if you're using a UNIX-like operating system, such as Linux or BSD. Use your package manager to see if it's available and install it . Ansible is written in Python, so it's only natural that it be available for installation via pip . If you have pip installed, run the following command: If you do not have pip, check if you can install pip through your system's package manager (look out for Python 2.7 version) . If you're on Mac OS X and you're not using Homebrew or pkgsrc, you should be able to install pip using easy_install with this command: Now that you've installed Ansible, you can deploy Rocket.Chat . You must have SSH access to the system you want to deploy to, as the root user . The system you're deploying to must have Python installed and run one of the following operating systems: EL 7 (RHEL/CentOS) Debian 8 (Jessie) LTS Ubuntu 18.04 LTS Ubuntu 19 .04 Future releases of the official Rocket.Chat Ansible role will include other operating systems and Linux distributions/releases. If you'd like to see a particular OS supported, please raise an issue to ask if it can be added", "tokens": 428}
{"title": "Ansible", "content": ". Create a directory anywhere on your system, possibly in your home directory or where you save your code or Git repositories. Give it a name and navigate to that directory. Next, create an inventory file in that directory . The inventory file is a simple formatted file containing a list of systems we want to connect to and control using Ansible. It can include single hosts, group hosts together, groups of groups, and set variables on a host or group basis . We recommend naming the directory ansible and the file inventory to maintain a proper naming convention. Open the file and add the hostname or FQDN of the server(s) you want to deploy Rocket.Chat to . The [chat_servers] denotes a group called \"chat_servers.\" Any hostnames/FQDNs/IP addresses under this will be members of the \"chat_servers\" group . If you want to add another server, add it like this: We recommend authenticating SSH connections to your server(s) using SSH key pairs", "tokens": 220}
{"title": "Ansible", "content": ". However, you can provide Ansible with the root user's password in the inventory file if you don't have SSH. This should only be temporary because it is an insecure practice. Set the root user's password for the chat.my .domain host: Ansible shares and uses other people's roles through Galaxy. You can download the roles you want using a command-line tool installed earlier when you installed Ansible. First, create a roles directory: Then, create a requirements .yml file describing how we want to fetch the role to ansible-galaxy. Open the file roles/requirements.yml. The file's contents will vary based on which version of Ansible you're running . Run ansible --version to know your version of Ansible. If you're running Ansible 1.9.4, update requirements.yml with the following data: If you're running Ansible 2.0, update requirements .yml with the following data: Next, fetch the Rocket.Chat Ansible role using the ansible-galaxy command: This command installs any roles defined requirements.yml. Now you have the RocketChat.Server role in your roles directory . Ansible roles are built from a collection of \"plays\" - essentially, tasks/actions to take. To use a role, create a simple playbook that tells Ansible, \"I want to run this role on these systems .\" Let's call the playbook rocket_chat.yml . The .yml denotes a YAML document, which is what language you use to express most things in Ansible. Add the following information to your rocket_chat .yml playbook: To run the playbook, use the ansible-playbook command, This command can be expressed as \"run the rocket_chat.yml playbook with the inventory file inventory.\" When the deployment is successful, visit https://chat.my.domain and the Rocket .Chat login screen appears. See the READMe to explore other Ansible role options.", "tokens": 433}
{"title": "OpenShift", "content": "Deploy Rocket.Chat using the Red Hat OpenShift platform and easily manage your application. Several templates for providing Rocket.Chat are hosted in this repository. Download and install CDK. Download and install the OpenShift client tool. Run OpenShift Vagrant machine. Pull the Rocket.Chat Docker image from Docker hub and tag/push to the internal OpenShift registry using these commands: Login in OpenShift and create a new project in OpenShift Clone this repo and add the templates and imagestream to the Openshift namespace: Create the rocket-chat app Rocket.Chat uses a domain check code to verify the validity of the e-mail address. To disable it, run these commands: Inside the Mongo client, run these commands: \ud83d\udea7 Page Under Development \ud83d\udea7 This page is currently under development to bring you the latest details and features. Deploying Rocket.Chat on OpenShift This guide covers how to host Rocket.Chat on OpenShift Online Next Gen. OpenShift Online Next Gen is a completely rewritten PaaS solution based on Docker and Kubernetes that allows developers to quickly develop, host and scale applications in a cloud environment. OpenShift provides a CLI based tool that allows managing your projects and applications. Please refer to Getting Started with the CLI documentation on OpenShift website. Login Create a project Import the ImageStream and templates Create the app First of all, we need to log in to OpenShift API URL to create our project. The command to log in to OpenShift Online Next Gen is shown below: You can find the API Token to login to OpenShift Online Next Gen in the about page of the Web console. After login to OpenShift Online Next Gen, we need to create a project to host our Rocket.Chat application: Clone the Rocket.Chat GitHub repository and import the templates to your OpenShift project: Create the application using the newly created templated and pass the MONGODB_DATABASE,MONGODB_USER and MONGODB_PASSWORD parameters: Rocket.Chat uses a domain check code to verify the validity of the e-mail address. To disable it, run the following commands:", "tokens": 467}
{"title": "VagrantAdditional Deployment Methods", "content": "You can set up a Vagrant virtual machine environment to deploy a portable Rocket.Chat workspace. The following code explains how you can deploy Rocket.Chat on Vagrant with Ubuntu. These are additional deployment methods that are less commonly used. Deploy with Digital Ocean: Deploy Rocket.Chat with a one-click install from the Digital Ocean marketplace. Deploy on Ubuntu: Set up Rocket.Chat on Ubuntu, one of the most popular Linux distributions. Deploy on Windows 10: Install and run Rocket.Chat on your Windows 10 machine. Deploy on Debian: Support Rocket.Chat installation for all Debian-based distros. Deploy on CentOS: Install and run Rocket.Chat on CentOS Cloudrun.io: Set up a Rocket.Chat server on Cloudrun. OpenShift: Deploy Rocket.Chat on OpenShift. The recommended methods are Deploy with Docker & Docker Compose, Deploy with AWS, or Deploy with Kubernetes.", "tokens": 208}
{"title": "Deploy with Digital Ocean", "content": "The recommended deployment methods are Docker, AWS, and Kubernetes. Rocket.Chat offers a seamless and user-friendly deployment solution on Digital Ocean with the 1-Click install from the Digital Ocean marketplace. Follow the steps in this document to install Rocket .Chat using Digital Ocean. Before you begin, make sure you have the following: An active Digital Ocean account. A domain name (optional) . You can use Digital Ocean's provided IP address, but it is recommended that you have a domain name for production setup. For example, chat.mycompany.com. With this setup, HTTPS will be available using Let's Encrypt certificates . Make sure that you are logged into your Digital Ocean account and follow these steps: Go to the Rocket.Chat app on the Digital Ocean marketplace. Click Create Rocket.Chat Droplet . A new tab opens with the Create Droplets page, where we configure the droplet. For further details, refer to the\u00a0How to Create a Droplet\u00a0guide . Choose the region and the data center for the droplet according to your needs. In the Choose an image section, the Rocket.Chat image is selected automatically, so you don\u2019t need to do anything here . In the Choose size section, select the CPU and storage options according to your needs. (Optional) You can add more storage or enable automated backups of the droplet . In the Choose Authentication Method section, select how you want to log in to the droplet . In the Finalize Details section, you can add droplets with the same configuration, provide a hostname to the droplet (or the default one is used), add tags, and select the project . Once you have selected the options, click Create Droplet. Give it a few minutes, and your droplet should be created successfully. You can view the droplet details, such as the IP address . Now, create a registered domain name if you don\u2019t have one and set up an A record from your domain (for example, chat.mycompany.com) to the droplet's IP address . You'll need the domain to enable HTTPS on your workspace. If you are deploying for testing purposes and do not need a domain name, you can directly proceed to the next step", "tokens": 479}
{"title": "Deploy with Digital Ocean", "content": ". Once the droplet is set up, you can log in and access your Rocket.Chat workspace. Follow these steps to do so: Click the droplet to access the droplet view page . Click Access, log in as root, and launch the droplet. Alternatively, use the command ssh root@your_droplet_ip. Once connected, you will see a message as follows: Now you can access your Rocket .Chat workspace using your registered domain or by visiting http://<droplet-ip>:3000. The first user needs to create an account using the setup wizard, and this user will be automatically set as the workspace administrator . The Digital Ocean deployment solution is a one-click installation of the server with the Docker deployment of Rocket.Chat. See deploy with Docker & Docker Compose to learn how to manage your Rocket.Chat Docker deployment. Great! You\u2019ve successfully created your Rocket .Chat workspace and logged in. Next, check out the following documents to get started: User Guides: Learn the basics of your Rocket.Chat account, the types of rooms, and how to communicate with your workspace users . Workspace Administration: Administrators and owners can set and manage various configurations. Marketplace: Explore the available apps to enhance your workspace.", "tokens": 270}
{"title": "Deploy with Ubuntu", "content": "The recommended deployment methods are Docker, AWS, and Kubernetes. Using other deployment methods may result in unexpected challenges or compatibility issues. Rocket.Chat offers several deployment options, one of which is on Ubuntu . Whether you\u2019re new to server administration or an experienced professional, this document will provide a step-by-step walkthrough to set up a secure and efficient Rocket.Chat environment on Ubuntu. For any Rocket .Chat version you want to install, check the release notes to see the supported engine versions for MongoDB and NodeJs, and install as recommended . Follow the official guide to install NodeJS on Ubuntu, or use third-party tools like nvm or n for easier version management. Deploying Rocket.Chat requires Deno. Only Deno versions >=1.37.1 and <2.0 .0 are supported. Follow the official Deno installation guide to install the correct version. When deploying MongoDB, it is crucial to secure MongoDB instances by restricting public access to all MongoDB ports . Unsecured instances can create serious security vulnerabilities, so taking these precautions is critical to ensuring the integrity and safety of your systems. Start by installing MongoDB on Ubuntu . Refer to the official MongoDB documentation for the latest installation instructions Once MongoDB is installed, open the MongoDB configuration file (/etc/mongod .conf) by running: In this file, enable replication and specify the replica set name as rs01 The MongoDB replica set is mandatory for Rocket.Chat > 1.0.0 . Your MongoDB configuration file should look something like the below: Refer to the official MongoDB configuration documentation for additional configuration options . Start MongoDB with this command: Next, initialize the replica set: To ensure MongoDB is running successfully, run this: With all the prerequisites in place, you're ready to install Rocket.Chat. Install the required packages and dependencies Check the Rocket .Chat release document to choose the version you need. For stability and compatibility, we recommend downloading a specific version. For example, to download version 6.13", "tokens": 465}
{"title": "Deploy with Ubuntu", "content": ".0, run this command: Alternatively, if you prefer to download the latest version, you can use the following command: Extract the Rocket.Chat server files using this command: This command extracts the contents of the downloaded \u201crocket.chat .tgz\u201d compressed tar archive located in the /tmp directory and places the extracted files into the same /tmp directory. Next, run the command below to change the current directory and install the necessary production dependencies . When executing npm install, it is recommended to operate using a non-root account. Alternatively, you can utilize the npm install --unsafe-perm --production command. This approach eliminates the necessity for building libc or upgrading the host system . Move the extracted files to the /opt directory. This guide uses the /opt directory. However, you can choose your preferred directory. Start by adding the Rocketchat user and setting the right permissions on the Rocket.Chat folder . Depending on how you install NodeJS, the binary path may be different. Save the path to a variable. Now, save the systemd service file", "tokens": 231}
{"title": "Deploy with Ubuntu", "content": ". The command above will create a barebone service file, which the system will use to start your Rocket.Chat daemon/process. Running the Rocket.Chat daemon requires passing some environment variables. See Rocket.Chat environmental variables for more details. Update the Rocket .Chat file by running: Next, update the file with the information below and save it. Additional steps for installing 6.10.x releases If you\u2019re installing version 6.10, run these additional commands: Now, start your Rocket .Chat workspace using this command: If you edit your Rocket.Chat configuration file, make sure to reload the daemon and restart the Rocket.Chat process by running the following commands: You can also check the status of the Rocket .Chat process with this command: To access your Rocket.Chat workspace, open a web browser, and navigate to the \"ROOT URL\" you specified in the Rocket.Chat configuration file. This is typically accessible at http://your-host-name.com:3000 . Follow the on-screen prompts to configure your workspace. Great! You\u2019ve successfully created your Rocket.Chat workspace and logged in. Next, check out the following documents to get started: User Guides: Learn the basics of your Rocket .Chat account, the types of rooms, and how to communicate with your workspace users. Workspace Administration: Administrators and owners can set and manage various configurations. Marketplace: Explore the available apps to enhance your workspace . You can also apply the following additional configuration to your Rocket.Chat setup for enhanced security and performance: For your workspace\u2019s security, your domain should be accessible only via HTTPS", "tokens": 343}
{"title": "Deploy with Ubuntu", "content": ". While there are various ways to set up a reverse proxy, this section provides a walkthrough on using Nginx or Traefik . You must set up a DNS record for your domain before configuring Nginx or Traefik with Let's Encrypt . This domain must have A or AAAA records pointing to the IP address where Nginx or Traefik is running Install Nginx Create a new Nginx configuration file: Add the following configuration, replacing your_domain .com with your actual domain: Enable the configuration: Test and restart Nginx: This proxies requests from port 80 to Rocket.Chat running on localhost:3000 . Enable SSL with Let's Encrypt and Certbot by installing the Certbot and the Nginx plugin: Run Certbot to obtain and configure the SSL certificate: Ensure your_domain.com \u00a0is set correctly in your Nginx config . Follow the prompts to provide an email, agree to terms, and enable HTTPS redirection. Certbot will automatically configure SSL and set up renewal. After completion, verify HTTPS by visiting https://your_domain.com . Install Traefik: Create a Traefik configuration file: Add the following: Replace your_email@your_domain.com with your email address. Create a dynamic configuration file for Rocket.Chat: Add the below: Make sure your_domain .com and http://your_ip:3000 point to the appropriate domain and IP address respectively. Create a systemd service file for Traefik: Add: Start and enable Traefik: Open your Rocket .Chat systemd service file to set the correct ROOT_URL: Update the Environment variable:: Restart Rocket.Chat: Make sure ports 80 and 443 are open: Now, you can access your Rocket.Chat workspace securely via HTTPS using https://your_domain.com . If you're not using a reverse proxy and have a firewall enabled, you may need to allow traffic on port 3000. For more details, refer to the firewall rule documentation. Here are other additional configuration options to consider when optimizing your Rocket", "tokens": 481}
{"title": "Deploy with Ubuntu", "content": ".Chat server: Configure Mongo access control Configure production values for Mongodb This section provides a guide to monitoring your deployments' health and quickly diagnosing any issues. Check the latest Rocket.Chat logs: View logs in real-time: Check Rocket .Chat status: Check MongoDB logs: View logs in real-time: Check MongoDB status: Connect to MongoDB and verify the replica set: If a service is failing and you need system-wide logs: For logs of a specific time range (e.g ., last 30 minutes): Check error logs: Check access logs: Monitor logs in real-time: Check if Nginx is running: Test the Nginx configuration: If there are configuration issues, restart Nginx after fixing them: Check Traefik logs with: View logs in real-time: Check Traefik\u2019s status: Inspect Traefik\u2019s logs for routing issues: It\u2019s important to keep your workspaces updated to enjoy the benefits of new features and fixes . Follow these steps to update your workspace version: Stop the Rocket.Chat service with this command: Remove the installation folder, usually in /opt: Ensure you have the supported node and MongoDB versions by checking the releases. Download the version of Rocket .Chat that you need: Using latest instead of the version number is not recommended. Extract the Rocket .Chat server files using the following command: Next, run the following command to change the current directory and install the necessary production dependencies: Move the extracted files to the /opt directory: Start the Rocket.Chat service: Check the status of the Rocket .Chat process with this command: If you have any questions or issues when updating Rocket.Chat, refer to the Updating Rocket.Chat FAQ. For information on supported MongoDB versions, see the MongoDB version support document.", "tokens": 402}
{"title": "Deploy with CentOS", "content": "The recommended deployment methods are Docker, AWS, and Kubernetes. This document guides you through the process of deploying a Rocket.Chat workspace on CentOS. Depending on the version of Rocket .Chat you want to install, check the releases to see the supported engine versions for MongoDB and NodeJs, and install as recommended. Install Node.js: Download Node.js for Linux systems using the package manager . Install Deno: Only Deno versions >=1.37.1 and <2.0.0 are supported. Follow the Deno installation guide to install the correct version. For example, to install the 1.38 .5 version with Shell, use the following command: Make sure you export the Deno path according to your installation, for instance: Install MongoDB: Refer to the MongoDB documentation on installing MongoDB on CentOS . When deploying MongoDB, it is crucial to secure MongoDB instances and close all MongoDB ports from public access. Unsecured instances can lead to significant security vulnerabilities. Your vigilance in these practices is essential for maintaining the integrity and safety of your systems . Once MongoDB is installed, you must enable replication and specify the name of the replica set. To do this, enter the command below: In this case, we named the replica set as rs01. The MongoDB replica set is mandatory for Rocket .Chat > 1.0.0. Open the MongoDB configuration file (/etc/mongod.conf) by running: The MongoDB configuration file should look something like this: Refer to the MongoDB configuration documentation for additional details . Enable and start MongoDB with the following command: Next, initialize the replica set: To ensure that MongoDB is running successfully, enter the following command: Start by installing the required dependency packages: Check the Rocket.Chat releases to deploy the version you need . For stability and compatibility, we recommend downloading a specific version. For example, to download version 6.13", "tokens": 432}
{"title": "Deploy with CentOS", "content": ".0, run this command: Alternatively, if you prefer to download the latest version, you can use the following command (note that using latest is not recommended for production purposes): Extract the Rocket .Chat server files using the following command: This command extracts the contents of the downloaded rocket.chat.tgz compressed tar archive located in the /tmp directory and places the extracted files into the same /tmp directory . Next, run the following command to change the current directory and install the necessary production dependencies. When executing npm install, it is recommended to operate using a non-root account. Alternatively, you can utilize the npm install --unsafe-perm command . This approach eliminates the necessity for building libc or upgrading the host system. Move the extracted files to the /opt directory: This guide uses the /opt directory. However, you can choose your preferred directory. Add the Rocket", "tokens": 189}
{"title": "Deploy with CentOS", "content": ".Chat user and set the proper permissions on the Rocket.Chat folder: We need the NodeJS binary path to create the Rocket.Chat service file. Depending on how you install NodeJS, the binary path may be different . Save the path to a variable as follows: Now create a barebone service file, which the system will use to start your Rocket.Chat daemon/process. Create the Rocket .Chat service file as follows: Alternatively, if you don\u2019t want to use the NODE_PATH variable in the service file, save the path to the variable, and then print it to find the path as follows: Now replace the ExecStart variable in the service file with the path you see in your terminal, for example : If you use nvm to manage Node .js versions, update the ExecStart variable as follows: Be sure to replace <user> and <node_version> with your actual system user and installed Node.js version. Running the Rocket.Chat daemon requires passing some environment variables. See Rocket .Chat environment variables for more details. Update the Rocket.Chat file by running: Update the file with the following information according to your configuration and save it: Additional steps for installing 6.10 release If you\u2019re installing version 6 .10, run these additional commands: Now start the Rocket.Chat service using the following command: Check the status of the Rocket.Chat process with this command: If you edit your Rocket.Chat configuration file, make sure to reload the daemon and restart the Rocket .Chat process by running the following commands: To access your Rocket.Chat workspace, open a web browser, and navigate to the specified root URL (http://your-host-name.com:3000). Follow the configuration prompts to configure your workspace . During the configuration steps, your workspace and email are registered to the Rocket.Chat Cloud portal. You can manage your workspace and subscriptions from the cloud portal. Great! You\u2019ve successfully created your Rocket.Chat workspace and logged in . Next, check out the following documents to get started: User Guides: Learn the basics of your Rocket.Chat account, the types of rooms, and how to communicate with your workspace users . Workspace Administration: Administrators and owners can set and manage various configurations. Marketplace: Explore the available apps to enhance your workspace. You can also apply the following additional configuration to your Rocket", "tokens": 508}
{"title": "Deploy with CentOS", "content": ".Chat setup for enhanced security and performance: For your workspace\u2019s security, your domain should be accessible only via HTTPS. While there are various ways to set up a reverse proxy, this section provides a walkthrough on using Nginx or Traefik . You must set up a DNS record for your domain before configuring Nginx or Traefik with Let's Encrypt . This domain must have A or AAAA records pointing to the IP address where Nginx or Traefik is running Install Nginx Create a new Nginx configuration file: Add the following configuration, replacing your_domain .com with your actual domain: Enable the necessary SELinux boolean to allow Nginx to connect to your backend: Test and restart Nginx: This proxies requests from port 80 to Rocket.Chat running on localhost:3000 . Enable SSL with Let's Encrypt and Certbot by installing the Certbot and the Nginx plugin: Run Certbot to obtain and configure the SSL certificate: Ensure your_domain.com \u00a0is set correctly in your Nginx config . Follow the prompts to provide an email, agree to terms, and enable HTTPS redirection. Certbot will automatically configure SSL and set up renewal. After completion, verify HTTPS by visiting https://your_domain.com . Install Traefik: Create a Traefik configuration file: Add the following: Replace your_email@your_domain.com with your email address. Create a dynamic configuration file for Rocket.Chat: Add the below: Make sure your_domain .com and http://your_ip:3000 point to the appropriate domain and IP address respectively . Create a systemd service file for Traefik: Add: Enable the necessary SELinux boolean for Traefik: Start and enable Traefik: Open your Rocket .Chat systemd service file to set the correct ROOT_URL: Update the Environment variable:: Restart Rocket.Chat: Make sure ports 80 and 443 are open: Now, you can access your Rocket.Chat workspace securely via HTTPS using https://your_domain.com", "tokens": 483}
{"title": "Deploy with CentOS", "content": ". If you're not using a reverse proxy and have a firewall enabled, you may need to allow traffic on port 3000. For more details, refer to the firewall rule documentation. Here are other additional configuration options to consider when optimizing your Rocket .Chat server: Configure Mongo access control Configure production values for Mongodb This section provides a guide to monitoring your deployments' health and quickly diagnosing any issues. Check the latest Rocket.Chat logs: View logs in real-time: Check Rocket .Chat status: Check MongoDB logs: View logs in real-time: Check MongoDB status: Connect to MongoDB and verify the replica set: If a service is failing and you need system-wide logs: For logs of a specific time range (e.g ., last 30 minutes): Check error logs: Check access logs: Monitor logs in real-time: Check if Nginx is running: Test the Nginx configuration: If there are configuration issues, restart Nginx after fixing them: Check Traefik logs with: View logs in real-time: Check Traefik\u2019s status: It\u2019s important to keep your workspaces updated to enjoy the benefits of new features and fixes . Follow these steps to update your workspace version: Stop the Rocket.Chat service with this command: Remove the installation folder, usually in /opt: Ensure you have the supported node and MongoDB versions by checking the releases. Download the version of Rocket .Chat that you need: Using latest instead of the version number is not recommended. Extract the Rocket .Chat server files using the following command: Next, run the following command to change the current directory and install the necessary production dependencies: Move the extracted files to the /opt directory: Start the Rocket.Chat service: Check the status of the Rocket .Chat process with this command: If you have any questions or issues when updating Rocket.Chat, refer to the Updating Rocket.Chat FAQ. For information on supported MongoDB versions, see the MongoDB version support document.", "tokens": 441}
{"title": "Deploy on Debian", "content": "The recommended deployment methods are Docker, AWS, and Kubernetes. Using other deployment methods may result in unexpected challenges or compatibility issues. Rocket.Chat offers several deployment options, one of which is on Debian . Whether you\u2019re new to server administration or an experienced professional, this document will provide a step-by-step walkthrough to set up a secure and efficient Rocket.Chat environment on Debian. For any Rocket .Chat version you want to install, check the release notes to see the supported engine versions for MongoDB and NodeJs, and install as recommended . Follow the official guide to install NodeJS on Debian, or use third-party tools like nvm or n for easier version management. Deploying Rocket.Chat requires Deno. Only Deno versions >=1.37.1 and <2.0 .0 are supported. Follow the official Deno installation guide to install the correct version. When deploying MongoDB, it is crucial to secure MongoDB instances by restricting public access to all MongoDB ports . Unsecured instances can create serious security vulnerabilities, so taking these precautions is critical to ensuring the integrity and safety of your systems. Start by installing MongoDB on Debian . Refer to the official MongoDB documentation for the latest installation instructions Once MongoDB is installed, open the MongoDB configuration file (/etc/mongod .conf) by running: In this file, enable replication and specify the replica set name as rs01 The MongoDB replica set is mandatory for Rocket.Chat > 1.0.0 . Your MongoDB configuration file should look something like the below: Refer to the official MongoDB configuration documentation for additional configuration options . Start MongoDB with this command: Next, initialize the replica set: To ensure MongoDB is running successfully, run this: With all the prerequisites in place, you're ready to install Rocket.Chat", "tokens": 411}
{"title": "Deploy on Debian", "content": ". Update your system by running this command: Install the required packages and dependencies Check the Rocket.Chat release document to choose the version you need. For stability and compatibility, we recommend downloading a specific version. For example, to download version 6.13 .0, run this command: Alternatively, if you prefer to download the latest version, you can use the following command (note that using latest is not recommended for production purposes): Extract the Rocket .Chat server files using this command: This command extracts the contents of the downloaded \u201crocket.chat.tgz\u201d compressed tar archive located in the /tmp directory and places the extracted files into the same /tmp directory . Next, run the command below to change the current directory and install the necessary production dependencies. When executing npm install, it is recommended to operate using a non-root account. Alternatively, you can utilize the npm install --unsafe-perm command . This approach eliminates the necessity for building libc or upgrading the host system. Move the extracted files to the /opt directory. This guide uses the /opt directory. However, you can choose your preferred directory", "tokens": 242}
{"title": "Deploy on Debian", "content": ". Start by adding the Rocketchat user and setting the right permissions on the Rocket.Chat folder. Depending on how you install NodeJS, the binary path may be different. Save the path to a variable. Now, save the systemd service file . The command above will create a barebone service file, which the system will use to start your Rocket.Chat daemon/process. Running the Rocket.Chat daemon requires passing some environment variables. See Rocket.Chat environmental variables for more details. Update the Rocket .Chat file by running: Next, update the file with the information below and save it. Additional steps for installing 6.10 release If you\u2019re installing version 6.10, run these additional commands: Now, start your Rocket .Chat workspace using this command: Check the status of the Rocket.Chat process with this command: If you edit your Rocket.Chat configuration file, make sure to reload the daemon and restart the Rocket.Chat process by running the following commands: To access your Rocket .Chat workspace, open a web browser, and navigate to the \"ROOT URL\" you specified in the Rocket.Chat configuration file. This is typically accessible at http://your-host-name.com:3000 . Follow the on-screen prompts to configure your workspace Great! You\u2019ve successfully created your Rocket.Chat workspace and logged in. Next, check out the following documents to get started: User Guides: Learn the basics of your Rocket .Chat account, the types of rooms, and how to communicate with your workspace users. Workspace Administration: Administrators and owners can set and manage various configurations. Marketplace: Explore the available apps to enhance your workspace . You can also apply the following additional configuration to your Rocket.Chat setup for enhanced security and performance: For your workspace\u2019s security, your domain should be accessible only via HTTPS", "tokens": 389}
{"title": "Deploy on Debian", "content": ". While there are various ways to set up a reverse proxy, this section provides a walkthrough on using Nginx or Traefik . You must set up a DNS record for your domain before configuring Nginx or Traefik with Let's Encrypt . This domain must have A or AAAA records pointing to the IP address where Nginx or Traefik is running Install Nginx Create a new Nginx configuration file: Add the following configuration, replacing your_domain .com with your actual domain: Enable the configuration: Test and restart Nginx: This proxies requests from port 80 to Rocket.Chat running on localhost:3000 . Enable SSL with Let's Encrypt and Certbot by installing the Certbot and the Nginx plugin: Run Certbot to obtain and configure the SSL certificate: Ensure your_domain.com \u00a0is set correctly in your Nginx config . Follow the prompts to provide an email, agree to terms, and enable HTTPS redirection. Certbot will automatically configure SSL and set up renewal. After completion, verify HTTPS by visiting https://your_domain.com . Install Traefik: Create a Traefik configuration file: Add the following: Replace your_email@your_domain.com with your email address. Create a dynamic configuration file for Rocket.Chat: Add the below: Make sure your_domain .com and http://your_ip:3000 point to the appropriate domain and IP address respectively. Create a systemd service file for Traefik: Add: Start and enable Traefik: Open your Rocket .Chat systemd service file to set the correct ROOT_URL: Update the Environment variable:: Restart Rocket.Chat: Make sure ports 80 and 443 are open: Now, you can access your Rocket.Chat workspace securely via HTTPS using https://your_domain.com . If you're not using a reverse proxy and have a firewall enabled, you may need to allow traffic on port 3000. For more details, refer to the firewall rule documentation. Here are other additional configuration options to consider when optimizing your Rocket", "tokens": 481}
{"title": "Deploy on Debian", "content": ".Chat server: Configure Mongo access control Configure production values for Mongodb This section provides a guide to monitoring your deployments' health and quickly diagnosing any issues. Check the latest Rocket.Chat logs: View logs in real-time: Check Rocket .Chat status: Check MongoDB logs: View logs in real-time: Check MongoDB status: Connect to MongoDB and verify the replica set: If a service is failing and you need system-wide logs: For logs of a specific time range (e.g ., last 30 minutes): Check error logs: Check access logs: Monitor logs in real-time: Check if Nginx is running: Test the Nginx configuration: If there are configuration issues, restart Nginx after fixing them: Check Traefik logs with: View logs in real-time: Check Traefik\u2019s status: Inspect Traefik\u2019s logs for routing issues: It\u2019s important to keep your workspaces updated to enjoy the benefits of new features and fixes . Follow these steps to update your workspace version: Stop the Rocket.Chat service with this command: Remove the installation folder, usually in /opt: Ensure you have the supported node and MongoDB versions by checking the releases. Download the version of Rocket .Chat that you need: Using latest instead of the version number is not recommended. Extract the Rocket .Chat server files using the following command: Next, run the following command to change the current directory and install the necessary production dependencies: Move the extracted files to the /opt directory: Start the Rocket.Chat service: Check the status of the Rocket .Chat process with this command: If you have any questions or issues when updating Rocket.Chat, refer to the Updating Rocket.Chat FAQ. For information on supported MongoDB versions, see the MongoDB version support document.", "tokens": 402}
{"title": "Deploy on Windows 10", "content": "Are you deploying for testing, development, or production? This document will walk you through the process of deploying Rocket.Chat on your Windows machine using Docker. This is a community-supported installation method. To learn more, see this forum thread. Before you begin, make sure you have the following: Minimum of 4 GB of memory on your Windows machine Minimum of 20 GB of disk space, preferably SSD Your system has the latest Windows updates Download and install Docker for Windows Enabled Hyper-V (requires a reboot) See the Docker desktop virtualization to enable Hyper-V. On your Windows computer, create or open a directory where you want to store your Rocket.Chat server content In this directory, create a file named docker-compose.yml. You can use the official example as a template for configuring this file Still in the directory, execute the following command to create and start the containers defined in the Docker Compose file: Once the containers are up, open your browser and visit http://localhost:3000 to access your Rocket.Chat workspace. It may take a few minutes for the workspace to be fully accessible, as the server initializes. If you experience any issues or performance delays, you can check the server logs for errors or other useful information by running: This command provides real-time logs, which can be helpful for troubleshooting and performance monitoring. Finally, follow the configuration prompts to complete the setup of your Rocket.Chat workspace.", "tokens": 313}
{"title": "Cloudron.io", "content": "\ud83d\udea7 Page Under Development \ud83d\udea7 This page is currently under development to bring you the latest details and features. Cloudron is a complete solution for running apps on your server and keeping them up-to-date and secure.Cloudron is a complete solution for running apps on your server and keeping them up-to-date and secure.Rocket.Chat can be installed on Cloudron from the Cloudron Store. The guide for the Rocket.Chat app on Cloudron can be found here. There is a demo at https://my.demo.cloudron.io (username: cloudron password: cloudron).", "tokens": 128}
{"title": "Recommendations for File Upload", "content": "Rocket.Chat supports various file storage types to manage file uploads. Each system has its strengths and limitations. This guide outlines some of these options and provides recommendations based on scalability and production requirements . To configure the file upload storage type in your workspace, visit File Upload. Amazon S3 and Google Cloud Storage are the recommended options for file upload in Rocket.Chat . GridFS is a MongoDB specification for storing and retrieving large files such as images, audio, and video. While it functions like a file system, GridFS stores its data within MongoDB collections . It is designed to handle files that exceed MongoDB's document size limit of 16MB. GridFS divides a file into smaller chunks and stores each chunk of data in a separate document, each with a maximum size of 255KB . It uses two collections to store files: fs.files stores the file\u2019s metadata fs.chunks stores the binary chunks Visit the GridFS documentation to learn more. By default, GridFS is used in Rocket .Chat for file storage because MongoDB offers this functionality with zero configuration. However, it is not recommended for production environments due to the high load it places on the database . GridFS can only be suitable if: A retention policy is in place to manage file storage. You are storing only a small number of lightweight files each week. The File System stores uploaded files directly on the local storage of the server running the Rocket", "tokens": 308}
{"title": "Recommendations for File Upload", "content": ".Chat instance. It is simple to configure and works well for small-scale, single-server deployments. Files are stored in a designated folder on the server's file system, and Rocket.Chat retrieves them directly as needed . To use File System as the storage type, navigate to Workspace > Administration > Settings > File Upload and continue with the following steps : Go to General and select File System as the Storage Type . Navigate to FileSystem and specify a valid System Path on the server where files will be uploaded. For example, setting the path to /uploads will save files in an uploads directory at the root of your server. Click Save Changes and restart the Rocket .Chat server. Uploaded files will now be saved to the specified system path. Accessing the Rocket.Chat server to confirm the uploaded files varies based on your deployment method: For Docker deployments, access the Rocket .Chat container with docker exec -it <container-name> sh. When scaling Rocket.Chat to multiple servers, the File System becomes challenging: The file storage directory must be accessible to all Rocket.Chat servers . This requires setting up shared storage solutions such as Network File System (NFS). Managing shared storage introduces additional configuration and infrastructure overhead. FileSystem is recommended only when you are running a single Rocket.Chat instance.", "tokens": 282}
{"title": "Settings", "content": "These are the various settings for admin users to configure their workspaces. To access the settings page, go to Administration > Workspace > Settings. Accounts: Common Rocket .Chat user account settings such as anonymous reads, usernames, passwords, and email modifications can be configured under Accounts. Analytics: Investigate how users interact with your workspace. Assets: Learn how to provide scalable assets for your brand's identity . Bots: Find out how to set the fields that can be utilized and referenced while developing bots. CAS: Learn how to configure Central Authentication Service to allow members to use one set of credentials to sign in to multiple sites over multiple protocols . Conference Call: Choose your preferred conference call providers for your Rocket.Chat workspace while enabling any for direct messages, private and public rooms, and teams. Custom Emoji Filesystem: Specify whether to store emojis on GridFS or your storage . Custom Sound Filesystem: Find out how to specify how custom sounds are saved on your workspace. Device management: Become familiar with configuring security and access control rules for your workspace . Discussion: Learn how to configure whether users can accept invitations to join particular talks from other channels. E2E Encryption: Discover how to turn on end-to-end encryption to maintain the confidentiality of user communications . Email: Learn how to configure how broadcast email template formats are sent from your Rocket.Chat server. Federation: Learn how to configure multiple workspaces to communicate with each other . File Upload: Configure the type of storage and turn on or off user-document upload on your workspace server. General: Learn how to configure available workspace settings. IRC Federation: Learn to configure how to connect to other IRC servers . Layout: Under the layout option, you can personalize the appearance of your Rocket.Chat workspace by specifying various colors or providing custom CSS . LDAP: Learn how to configure Lightweight Access Directory Protocol so that no one can access or cannot access information about your server or business. Logs: Learn to configure how server logs are received, the log level, and other essential log settings", "tokens": 475}
{"title": "Settings", "content": ". Message: Message settings such as message pinning, starring, deleting, and others can be found under the Message option. Meta: Enable better search engine optimization (SEO) for your Rocket.Chat server by providing custom metadata for your instance . Mobile: Check how you can help users using Rocket.Chat mobile app to save files to the device storage while enforcing biometrics, pin, or Face ID to gain access to your workspace . OAuth: Ensure that users of your workspace can connect to it using third-party authentication providers such as Facebook, GitHub, Google, Apple, and more. Omnichannel: Explore the Omnichannel option to talk to your clients from Rocket .Chat without the need to install the messaging apps they are using, such as WhatsApp. OTR: Under off-the-record chats, enable private, encrypted messaging in direct discussions, which are also deleted when conversations are finalized . Outlook Calendar: Sync your Outlook events and reminders to your workspace so that you can always stay on top of your schedule. Premium: Manage your workspace license. Push: Customize notification behaviors for users using the Rocket.Chat mobile apps . Rate Limiter: Limit network traffic and potential bot attacks on your Rocket.Chat server by limiting the number of hits on the server within a specified timeframe", "tokens": 283}
{"title": "Settings", "content": ". Retention Policy: Learn to configure whether to enable the automatic removal of old messages and files across your workspace. SAML: Enable using the Security Assertion Markup Language standard to exchange authentication and authorization information . Search: Check how to select and configure your workspace's search provider. Setup Wizard: Learn how to provide specific details about your Rocket.Chat workspace, such as the company name, type, and size. SlackBridge: Master how to set up Rocket .Chat direct communication with Slack. Smarsh: Become familiar with setting up email communication preservation . SMS: Discover how to enable, choose, and configure any SMS gateway providers, which are Twilio, Mobex, or Vortelesys, to use for your workspace . Threads: You can find out how to enable message threads on specific conversations in your workspace. Troubleshoot: Learn how to configure how error correction should be handled in your Rocket.Chat workspace . User Data Download: The ability for workspace users to download data can be controlled, and you can find it under User Data Download. Voice Channel: Understand how to set up the Rocket.Chat voice channel in your workspace . WebDav Integration: Learn how to enable your workspace users to add, edit, and delete files on a WebDAV server . WebRTC: Discover how to enable real-time communication to ensure the transmission of audio/video data and other data among browsers. To control a user's access to any of these settings based on their role, see Setting's Permission.", "tokens": 335}
{"title": "Feature Preview", "content": "Feature Preview in Rocket.Chat allows you to enable and experiment with features still under development and not officially released yet. These configurations are in the testing phase and may be unstable or incomplete. Learn how you can use the Feature Preview option. Feature Preview settings allow workspace administrators to enable feature previewing on the workspace and determine the options that are enabled for users by default. To access this setting, go to Administration > Workspace > Feature Preview. Enable Allow Feature Preview. Alternatively, go to Administration > Workspace > Settings > Accounts and enable Allow Feature Preview. The feature preview settings configured by the admin here apply to new users and users who have yet to configure feature preview for their accounts. However, individual user preferences in Accounts > Feature preview override the admin's default settings. Once the workspace admin has enabled and configured the feature preview settings, users can access this feature from their profile by selecting Account > Feature Preview. The following features are available for preview: Quick reactions: Display the three most-used reactions when hovering over a message for quick interaction. Enable timestamp parsing in messages: Parse and display Unix timestamps within messages in your timezone. Contextual bar resizable: Adjust the size of the contextual bar by dragging to customize your view. The contextual bar is the panel on the right side of a room, providing a dedicated space for specific actions or information. Enhanced navigation experience: Explore the upcoming navigation improvements, designed with clear scopes for easy access to what you need. This change sets the stage for future enhancements in navigation management. Secondary navigation for teams: When you select a team, the associated channels and discussions \u00a0are displayed by default. This option can only be activated when the Enhanced navigation experience is enabled.", "tokens": 365}
{"title": "Collaborate Using Rooms", "content": "Rooms provide different methods of conversations in your workspace. They allow a more structured and purpose-oriented workflow. If you are an administrator, see the Room Workspace Administration. Channels: Organize conversations across different topics. Teams: Promotes collaboration between different teams. Discussions: Allows a separate focused conversation around larger topics in a team or channel. Direct Messages: Allows one-off conversations that do not require a channel or team. Thread: Organized conversations around a particular message. Learn about Rocket.Chat Room Roles. When someone mentions you with @username, @all or @here, a symbol or a number will appear alongside the channel name. If someone mentions @all or @here a number will show up showing the number of times the mention is specific to you. For workspaces on version 6.6 and above, mentioning a user in rooms they aren't a member of prompts the following options: Add them: This option allows you to add the user to the room so they can see your message. It is only displayed if you have permission to add members to that room. Let them know: You can notify them via DM that you mentioned them, but they're not in the room. Do nothing: You can also choose to do nothing about it. The bot informs you that the user you mentioned is not in the room. Auto-Translate is a powerful feature of Rocket.Chat that improves communication and collaboration by translating room messages in real-time. This tool is especially valuable for global teams, multilingual communities, and organizations needing to seamlessly overcome language barriers The workspace administrator must configure the Auto-Translate settings. To enable Auto-Translate in a room, Click the kebab icon at the room menu bar. Select Auto-Translate. Enable Automatic Translation. Select your preferred language. All the messages you receive in the room will be automatically translated into the selected language. Your translation settings won't affect other users in the room. The messages they receive will also be translated to their selected language.", "tokens": 417}
{"title": "Channels", "content": "Channels are chat rooms with useful features designed to increase communication and collaboration. For example, you can have a dedicated channel for the designers in your workspace to discuss design-related topics. Channels can be made private or public . The list of channels that you are a part of can be found on the workspace sidebar. Public Channels are open for all members of a Rocket.Chat workspace to join, and anything posted is searchable by all members . They are identified by: Channels make it easy to find out what's going on with your team. New members can join a channel and read all the information previously shared by other users . Public conversations help you build your organization's knowledge base with minimal effort. For example, you can create a channel for a company department or to discuss a specific programming language. Private channels are closed channels. They are only visible to their members . Use private channels for sensitive, confidential subjects that are not open to all members. They are identified by: Private channels can be joined by invitation only. The administrator sets the permissions, determining who can invite others to the channel . By default, only administrators, room owners, and moderators can invite others to private rooms. Only users with the Post ReadOnly permission can send messages in Read-only channels. Read-only channels are most suitable for announcements and voting . To allow other users to react to messages in this channel, navigate to Channel info > Edit > Advanced settings and enable the Allow reacting option . Like read-only channels, broadcast channels allow authorized users with the Post ReadOnly permission to write new messages while other users can reply to existing messages . However, it differs from read-only channels in the following ways: All messages have a reply button that redirects you to the sender's direct message (DM), replying to the message as a quote. Users can\u2019t react to messages", "tokens": 391}
{"title": "Channels", "content": ". Encrypted channels have end-to-end encryption enabled across all messages exchanged by the channel members. To learn more, see End to End Encryption. The room information screen gives detailed information about the current channel . These details include: Channel Name: The channel's name, how users see the title and find the channel via search. Topic: The topic is displayed next to the title on the channel header. It is a great way to provide more channel information . Announcement: Announcements are highlighted in a bar under the channel header. Description: The description of the channel. Private: Tells whether a channel is private or public. Read Only: Tells whether a channel is read-only . Archived: Tells if a channel is archived. Nobody can post messages on an archived channel; a channel search will not find that channel. Password to access: Protect the channel with a password that allows you to set the password . Users must enter the password to become a channel member if a channel is password-protected. If a Retention Policy is active on this channel, a red warning box appears stating when messages or files are deleted. Learn about Rocket.Chat Room Roles . When workspace administrators first log in to the workspace, the general channel is automatically created, and all users are added to it by default. Administrators can manage the channel settings or delete it, similar to any other channel . For more information, see Channel Actions.", "tokens": 294}
{"title": "Create a New Channel", "content": "Learn how to create a new channel on a browser, desktop, or mobile app. To create a new channel on a browser or the desktop app, follow these steps: On the Rocket.Chat menu bar, click the Create new icon . Select Channel from the drop-down menu. Give the channel a name and topic. Select members to be added to the channel. Choose if the channel is public or private. Open the Advanced settings: Here, update your preferred security and permissions for the channel. If your workspace is federated, you can opt to make the channel federated. Refer to the Federation Admin Guide to know more. Then, click Create. To create a new channel the Rocket.Chat mobile app, follow these steps: Tap the \u00a0 Create new icon from the main menu. Select Channel from the list of rooms. Search and select the users you want to add to the room. You can also skip this step and add the members later. Provide a name and choose if the room is public or private. Update your preferred privacy and encryption settings for the channel. Tap Create channel. Channels have restrictions in their naming. To update the regex responsible for channel name validation, go to Administration > Settings > General > UTF8. You can join a channel through a search, invites, or mentions. Use the search feature to search for channels and users. Alternatively, you can use Ctrl/Cmd + k to access the search bar quickly. Users and channels are displayed in the search results. However, private channels are not displayed. If you select a public channel that you are not a member of, click the Join button to join that channel. To help organize and prioritize your communications, you can favorite (or star) channels, private groups, and DMs. All channels marked as favorites are listed at the top of the sidebar, making them easy to access. To mark a channel as a favorite, At the top of the channel page, click the star icon next to the channel name to mark a channel as a favorite. To remove the channel from favorites, click the star icon again. Learn about Rocket.Chat Room Roles.", "tokens": 440}
{"title": "Manage Channels", "content": "This guide provides detailed instructions on the various channel management options available within Rocket.Chat. Each icon in the channel menu bar represents a specific function that helps you manage and interact within channels effectively according to your permissions. To view or edit a channel\u2019s information, Click the Room Information icon from the menu bar to view more details about the channel. Click the Hide button to hide a channel from the list in the left sidebar. If someone sends a message to that channel, it will be displayed again on the left sidebar. To unhide a channel, search for it using the Directory icon. Click the Edit button to update the channel information and avatar. Under Advanced settings, you can enable the Hide system messages option to hide system messages and select the messages you want to hide. For example, the User joined option hides the message displayed when a new user joins the channel. Enable Allow Reacting to allow members to react to messages in a read-only channel. To set an automatic pruning retention policy for the channel, see Per-room policies. Click the Delete button to delete the channel. A channel owner can not leave a channel until they set someone else as the owner of that channel. You can also enter the command /part or /leave in the message input box to leave a channel. If you using the mobile app, tap the channel name to access the channel options. In addition to editing a channel, you can perform various other actions in the menu bar to effectively manage and interact within a channel. For details, refer to Room Options. You can also convert the channel to a team or add an existing channel to a team. For details, see Manage Team Channels.", "tokens": 344}
{"title": "Teams", "content": "A Team in Rocket.Chat is essentially a collection of channels, each serving a specific purpose or project. For instance, consider a scenario where your workspace includes a Team designated for your organization's core members . This Team encompasses a variety of channels tailored to their needs and roles. The primary advantage here is the automation of access privileges: when a new core member joins the Team, they are instantly granted access to all associated channels . This eliminates the need for manually adding them to each channel, thereby enhancing efficiency and reducing administrative overhead. Teams are identified by: Teams can be made private so that only invited members can join or public so that all Rocket.Chat users can see them . Each Team may consist of channels, which may also be either public or private. Only users with the Post ReadOnly permission can send messages in Read-only teams . To allow other users to react to messages in this team, navigate to Team info > Edit > Advanced settings and enable the Allow reacting option . Like read-only teams, broadcast teams allow only authorized users with the Post ReadOnly permission to write new messages, while other users can reply to existing messages . However, it differs from read-only teams in the following ways: All messages have a reply button that redirects you to the sender's direct message (DM), replying to the message as a quote. Users can\u2019t react to messages . The team cannot be converted to a read-only again. Encrypted teams have end-to-end encryption enabled across all messages exchanged by the Team members. The team information screen gives detailed information about the selected team", "tokens": 337}
{"title": "Teams", "content": ". These details include: Name: The team's name, how users see the title and find the team via search. Topic: The topic is next to the team header's title. It is a great way to provide more information about the team . Announcement: Announcements are highlighted in a bar under the team header. Description: The description of the team. Private: Select if the team is private or public. Read Only: Tells whether a team is read-only . Archived: This tells if a team is archived. Nobody can post messages on an archived team, and a directory search will not find that team. Password to access: Protect the team with a password and allow you to set it . If a team is password-protected, users are required to enter the password to become team members. With teams, you don\u2019t need to remember everyone\u2019s name to communicate with a team quickly . Just mention a team \u2014 @engineersFor instance, all members will get notified instantly. To learn more, see Teams: Efficiently Manage Your Remote Team on Rocket.Chat In summary, the Team feature in Rocket .Chat represents a significant step towards more efficient and cohesive team management. Centralizing access to multiple channels under a single Team umbrella simplifies the process of managing group memberships and ensures seamless integration of new members into the organizational workflow.", "tokens": 278}
{"title": "Create a New Team", "content": "Learn how to create a new team on a browser, desktop, or mobile app. To create a new channel on a browser or the desktop app, follow these steps: On the menu bar, click the Create New icon, then select Team. Give the team a name and topic. Add members to the team. Select whether the team should be read-only. Open the Advanced Settings and update your preferred security and permissions for the team. Choose if the team should be a broadcast. Then, click Create. To create a new team, the Rocket.Chat mobile app, follow these steps: Tap the \u00a0 Create new icon from the main menu. Select Team from the list of rooms. Search and select the users you want to add to the room. You can also skip this step and add the members later. Provide a name and choose if the room is public or private. Update your preferred privacy and encryption settings for the channel. Tap Create team. A team name must not include space or any special character except dash (-) and underscore(_). All teams marked as favorites are listed at the top of the sidebar, making them easy to access. To mark a team as a favorite, At the top of the team screen, click the star icon next to the team name to mark that team as a favorite. To remove a team from Favorites, click the star icon again. Creates a new team. Permission required: create-team permission The authToken of the authenticated user. The userId of the authenticated user. The team name. Privacy of the team (0 - Public, 1 - Private). The user ids to add to the team when it is created. List the team's channels or discussions to be displayed in the sidepanel. The options are discussions and channels. Set the owner of the team. OK Note that the roomId is main room ID of the team. Unauthorized", "tokens": 396}
{"title": "Manage Teams", "content": "This guide offers comprehensive instructions on the different team actions available in Rocket.Chat teams. Each menu bar icon corresponds to a specific function, enabling you to manage and interact within teams based on your permissions efficiently. Click the Team info icon from the menu bar to view more details about the team. Click the Hide button to hide a team from the list in the left sidebar. If someone sends a message to that team, it will be displayed again on the left sidebar. To unhide a team, search for it using the Directory icon. Click the Edit button to update the team information and avatar. Enable the Hide system messages option to hide system messages and select the Rocket.Chat action alerts you want to hide. For example, the User joined option hides the message displayed when a new user joins the team. Enable Allow Reacting to allow members to react to messages in a read-only team. To set an automatic pruning retention policy for the team, kindly visit Per-room policies. Click the Delete button to delete the team. Once you delete a team, the associated chat content and configurations will also be deleted. You also have the option to keep or delete team channels. If you delete a team and decide to keep the channels, they go to the workspace. Click the View channels button to list all the channels in the team. A team owner can not leave a team until they set someone else as the owner of that team. You can also enter the command /part or /leave in the message input box to leave that team. When leaving a team, you can decide if you want to continue in the team channels or not. If you using the mobile app, tap the team name to access the team options. In addition to editing a team, you can perform various other actions in the menu bar to manage and interact with a team effectively. For details, refer to Room Options. Additionally, you can add channels to a team and convert a channel into a team. See Manage Team Channels for details.", "tokens": 416}
{"title": "Manage Team Channels", "content": "Here are some essential details to know about Team Channels. Teams may have their own channels, but not all channels belong to a team. Teams can have both public channels and private channels . Teams can have Auto-join channels where members are automatically added to, upon joining the team . You can add all team members to a channel You can add users outside the team to the team\u2019s channels A team can have a maximum of 100 channels . To see a team's list of channels, click the Team Channels icon at the top-right side of the team home page. As a team owner, you can create new channels for the team . Creating private channels in a team requires the Create group within team permission, while creating public channels requires the Create channel within team permission. To create a new Team Channel: Click the Team Channels icon at the top-right side of the team home page . Select Create New at the bottom of the Team Channels page. Name the channel, add a topic, set it as private/public, and complete other basic channel settings. Finally, add members from the drop-down and click Create . To add an existing channel to a team, you must be the channel owner or have appropriate permissions in the team to add an existing channel. The Move Room within team permission is required from version 7 .0 onward, while Add Team Channel is required for workspaces below version 7.0. When adding a channel to a team, the team owner gains rights over the channel (e.g., The team owner can delete the channel) . Click the Team Channels icon at the top-right side of the team home page. Click Add Existing at the bottom of the Team Channels page. Search and select the channels you'll like to add to the team. Click Add", "tokens": 366}
{"title": "Manage Team Channels", "content": ". Teams can have auto-join channels\u2014channels where team members are added automatically. It reduces extra work with handling users and the channels they must belong to. It\u2019s also handy for onboarding teams with many different channels . For instance, you can use auto-join to quickly add new members joining the company to specific onboarding channels. You could set auto-join to automatically add team members to company-related channels, such as channels meant to share updates and company news . You can mark a channel Auto-join for members to join them automatically once they join a team. Mark a channel as Auto-join by following the steps below. Click the Team Channels icon to view the list of channels in the team . Select the kebab icon beside the channel name. Mark the Auto-join checkbox. To remove a channel from auto-join, unmark the Auto-join checkbox. As a team owner, you can remove channels from a Team . After a channel is removed from the team, it moves to the workspace. If the channel were a public channel inside a private team, the channel would become public in the workspace after removal from the team . Remove a channel from the Team by following the steps below. Click the Team Channels icon to view the list of channels in the team. Select the kebab icon beside the channel name. Then, select Remove from Team . As a team owner, you can delete channels from the team in your workspace. Deleting private channels in a team requires the Delete group within team and Delete Private Channels permissions . Deleting public channels in a team requires the Delete channel within team and Delete Public Channels permissions. Delete a Team Channel by following the steps below. Click the Team Channels icon to view the list of channels in the team . Select the kebab icon beside the channel name. Then, select Remove from Team. A channel owner can transform an existing channel into a team anytime. The channel must belong to the workspace rather than already in a team", "tokens": 422}
{"title": "Manage Team ChannelsTeams Premium Plan", "content": ". Otherwise, the option to transform into a team is not available. A private channel converts to a private team, and a public channel converts to a public team . This decision can't be reversed! Therefore, please exercise extreme caution while converting a channel into a team. To convert a channel into a team, Click the Room Information icon at the top-right side of the channel home page . Click the kebab icon next to Delete, then select Convert to Team Rocket.Chat offers additional team functionalities for workspaces subscribed to any premium plans. They include the following: Connecting Rocket.Chat with tools like Active Directory Groups or Keycloak makes team management easier for IT teams. This feature ensures that any changes you make to your organization's infrastructure or user details are instantly reflected in Rocket.Chat. It's especially handy for larger teams, where you frequently add or remove members. Essentially, it keeps Rocket.Chat in sync with your company's structure automatically, saving you time and effort in managing teams. Workspaces subscribed to any of Rocket.Chat's premium plans can access the Auto-Join and Auto-Leave Teams feature in LDAP.", "tokens": 250}
{"title": "Discussions", "content": "Rocket.Chat discussions allow you to have a separate conversation about larger topics in a team or channel. Use discussions to address specific topics and their related conversations. They are displayed under the Discussions section of the sidebar and identified by . Discussions must belong to a parent team or channel. For example, you have an Engineering-Team in your workspace and created a channel under that team called Website-Development-Channel. Let's break down the conversations about each feature of the website into discussions. Now, you can have a Website-Landing-Page discussion where all the conversations about the landing page occur. The room information screen gives detailed information about the current discussion. These details include: Name: The name of the discussion, how users see the title and find the discussion via search. Description: The description of the discussion. Announcement: Announcements post in a bar under the discussion header. Topic: The topic here is next to the channel header's title. It shows which channel or group the discussion is linked to. Private: When enabled, makes the discussion private. Read Only: Tells whether a discussion is read-only and toggles the read-only status on the discussion. In read-only discussions, only people with admin permissions can post messages. Archived: Enable to archive a discussion. Nobody can post messages in an archived discussion, and searching will not find the discussion. Password to access: Protect the discussion with a password and allow you to set the password. If a discussion is password-protected, users are required to enter the password to become a discussion member.", "tokens": 320}
{"title": "Create a New Discussion", "content": "To create a new discussion, On the Rocket.Chat menu bar, click the Create New icon, then select Discussion. Select the parent team or channel. Enter the discussion name and topic. Add members to the discussion. Add the discussion message. Enable encryption if you want the room to be encrypted. Then, click Create. To create a discussion on the mobile app, follow these steps: Tap the Create New icon  on the main menu and select Discussion from the list. Select the name of the parent channel or group of the discussion. Enter the name of the discussion. Search and select the users you want to add to the discussion. Tap Create. When a discussion is created, anyone from that channel or team can join the discussion. All discussions marked as favorites are listed at the top of the sidebar, making them easy to access. To mark a discussion as favorite, At the top of the discussion screen, click the star icon next to the discussion name to mark that discussion as Favorite. To remove a discussion from Favorites, click the star icon again.", "tokens": 217}
{"title": "Manage Discussions", "content": "This guide explains the various options to manage discussions. Each icon represents a specific action you can take to manage and interact within discussions based on your assigned permissions. To view or edit discussion information, Click the Room Information icon from the menu bar to view more details about the team. Click the Hide button to hide a discussion from the list in the left sidebar. If someone sends a message to that discussion, it will be displayed again on the left sidebar. To unhide a discussion, search for it from the Directory. Click the Edit button to update the Discussion information and avatar. Enable the\u00a0Hide system messages\u00a0option to hide system messages\u00a0and select the Rocket.Chat action alerts you want to hide. For example, the User joined option hides the message displayed when a new user joins the discussion. Enable Allow Reacting to allow members to react to messages in a read-only discussion. To set an automatic pruning retention policy for the discussion, visit Per-room policies. Click the Delete button to delete the discussion. A discussion owner can not leave a discussion until they set someone else as the owner of that discussion. Alternatively, enter the command /part or /leave in the message input box to leave that discussion. If you using the mobile app, tap the discussion name to access the discussion options. In addition to editing a discussion, you can perform various other actions in the\u00a0menu bar\u00a0to manage and interact within a discussion effectively. For a detailed guide, refer to Room Options.", "tokens": 303}
{"title": "Direct Messages", "content": "In Rocket.Chat, you can have one-on-one conversations or one-to-many conversations with other users in your workspace. They are called Direct Messages (DMs). Your most recent DMs are default listed under the Direct messages section in your Rocket.Chat sidebar. The two types of DMs are as follows: Direct messages (DMs) are private one-on-one conversations between members of your workspace. You can create a DM with another user on the same workspace (or a different workspace via Rocket.Chat Federation) to communicate and share files privately. It exists between just two users, and no other user can join. Direct Messages Between Multiple Users allows you to chat with multiple users inside a DM. You can create direct message rooms between several users to exchange messages and files. Unlike private channels, you do not need to specify the name, topic, or if the room is read-only. It works exactly like a 1:1 DM, the only difference is that multiple users are involved. See the following topics for further details: Create a New Direct Message Direct Message Actions", "tokens": 233}
{"title": "Create a New Direct Message", "content": "Here you will find information on how to create 1:1 DMs and DMs with multiple users. To create a direct message from the menu bar, On the Rocket.Chat menu bar, click the Create New icon, then select Direct Message . Select the user you want to start a DM with. Then, click Create. A new direct message is opened with the user, and you can now communicate privately. To create a direct message from the menu bar, On the Rocket .Chat menu bar, tap the Create New icon, then select Direct Message. Select the user you want to start a DM with. Then, tap Create. A new DM is opened with the user, and you can now communicate privately . You can open a 1:1 DM with a user if you are in the same room as them by following these steps: Click the Members icon at the top-right menu of the room screen or click the kebab menu to find the room members . The list of the room members is displayed. Select the member from the list with whom you want to start a DM. Alternatively, you can search for the member using the search bar . Beside the search bar, you can select whether you want to view all members or only members who are online Once you have selected the member, their User Info page opens . Click the Direct message button below their avatar, and a DM room opens for you and that user . You can open a 1:1 DM with a user if you are in the same room as them by following these steps: You can select the user profile directly by tapping the user avatar or the name. The User info page opens . Tap Message to begin a DM with that user. Alternatively, tap the room name to access the room options. Tap Members and select the user with whom you want to begin a DM . Select Direct message and a DM room opens for you and that user. Creating a 1:M DM is similar to creating a 1:1 DM. Follow any of the methods described above and select multiple users instead of selecting one . A DM room opens containing all the users you selected. Here are some important features to note about a multi-user DM room: You can't create a multi-user DM with the same user combination", "tokens": 479}
{"title": "Create a New Direct MessageManage Direct Messages", "content": ". Once a DM is created, the membership can't be updated. So, you can't add or remove members to the DM. No one is the owner, unlike channels. The DM can not be deleted. You can only hide the conversation . You can not ignore, block, mute, or remove a user for multi-user DMs. Although, you can start a call or start a 1:1 DM with them. We recommend a maximum of 8 users in a DM . However, contact your workspace administrator if you need to update it to suit your needs. All DMs marked as favorites are listed at the top of the sidebar, making them easy to access . To mark a DM as favorite, At the top of the DM screen, click the star icon next to the DM header to mark it as Favorite. To remove the DM from Favorites, click the star icon again. You can perform various actions from the DM menu bar to effectively manage your DMs with other users in your workspace. To view a user details from your DM, Click the User Info icon from the menu bar to view the user information. For multi-user DMs, refer to Manage Room Members. Click the Start Call button to initiate the call with the user. Ensure that one of the Conference Call apps has been configured on your workspace. Click View reported messages button to view the moderation dashboard for reported users and messages. This option is exclusively available for workspace administrators. Click the kebab menu to block or report the user. Add the reason for reporting the user and hit Report. After blocking a user, the room will indicate blocked too. Blocked users will not be able to send you direct messages unless they are unblocked. In addition to viewing user info, you can perform various other actions in the menu bar to manage your DMs effectively. For a detailed guide, refer to Room Options.", "tokens": 405}
{"title": "Off-the-record (OTR) Messaging User Guide", "content": "This feature is currently in beta. Search operations will not find encrypted messages of encrypted rooms. The mobile apps and multi-DMs may not support the encrypted messages (currently under implementation). File uploads will not be encrypted in this version", "tokens": 63}
{"title": "Off-the-record (OTR) Messaging User Guide", "content": ". Off-the-record (OTR) Messaging is a feature that allows users to exchange temporary, encrypted messages directly between each other. This happens by using the local, non-persistent session storage of their browser rather than storing messages on the Rocket.Chat server . After an OTR session ends and the session storage is cleared, the OTR messages are removed and can no longer be restored. OTR messages can help exchange confidential information between users without creating a record of this exchange on the server . In contrast to OTR, end-to-end encrypted messages have a record on the server (in the form of the encrypted message string) and are persistent. OTR messages will not be included in exported messages . Your workspace administrator has enabled OTR (if not, you will not be able to see it in the DM context menu). A direct message (DM) room with only one other participant . You and your DM partner have entered their end-to-end encryption key. You and your DM partner are both online. See the following steps for sample users A and B . User A: Starts the OTR conversation by clicking the DM context menu and selecting OTR. This will open the OTR sidebar. Selecting OTR-Panel User A: Start OTR . Starting OTR-Chat User B: Accepts the OTR invitation. Accepting the invitation The following messages will be subject to the OTR session and marked by a key icon. Unlike end-to-end encryption, this key icon is bold . OTR messages visual display If User A or B breaks OTR (by clearing their local session storage, e.g., refreshing the web client), one must re-initiate the OTR session by clicking Refresh Keys . Options during OTR conversation If User A or B wants to end the OTR session, one of them needs to click End OTR. This ends the OTR session . The following messages will follow the normal configuration of the DM and be recorded on the server again. If the user refreshes their local session storage, all OTR messages disappear. Ending OTR conversations", "tokens": 449}
{"title": "Threads", "content": "Threads help to organize conversations and enable users to discuss topics without disorganizing a room. They improve the ability to process room content, find, follow, and resume conversations more efficiently, keeping threaded discussions focused. Threads are a series of replies or follow-up conversations under any message in a Team, Channels, Discussion, or Direct Message. They are identified by: . To create a thread, Hover over the message you'd like to reply to. Click the thread icon . A side panel opens. Type your reply. If you want to send your response back to the channel, select the Also send to channel box below your message. Send the message once you\u2019re done. To close a thread, click the  close icon on the thread header. To create a thread in the mobile app, Long-press the message for which you want to create the thread. Select Reply in thread. Type your reply. If you want to send your response back to the channel, select the Also send to channel box below your message. Send the message once you\u2019re done. To view the list of all threads in a room, click the thread icon in that room menu bar. Since threads appear by the side of any room in which they were created, you can expand them to occupy a lot of space. To expand a thread, click the  expand icon on the thread header. To collapse a thread, click the  collapse icon on the thread header. You can follow and unfollow threads to get notifications on any messages sent under that thread. By default, you automatically follow any thread you belong to. To follow or unfollow a thread, click on the  bell icon on the thread header. Threads are a key part of the messaging experience in Rocket.Chat rooms and direct messages. They\u2019re used to organize conversations and enable users to discuss topics without adding noise to rooms or direct messages. Collapsed Reply Threads offer an improved experience for users communicating in threads and replying to messages that include a unified threads inbox to read all conversations in one view. Threads improve the ability to process room content, find, follow, and resume conversations more easily, and keep threaded conversations focused. To access this setting, go to Administration > Workspace > Settings > Threads. Enable: When enabled, users are able to create threads in conversations.", "tokens": 476}
{"title": "Create a New Thread", "content": "To create a thread, Hover over the message you'd like to reply to. Click the kebab icon Select Reply in thread. Type your reply. Check the Also send to channel box below your message if you want to send your response back to the channel. Click Send. You can also click the thread icon to create a thread when you hover over a message. To close a thread, click the  close icon on the thread header.", "tokens": 93}
{"title": "Room Options", "content": "Rocket.Chat offers a comprehensive set of features for team collaboration, allowing users to create and manage rooms tailored to their specific needs. These rooms come with various options that help manage and utilize them effectively . This document guides you through the common room options for channels, teams, and discussions. For DM room options, see Manage Direct Messages. Room options are accessible from the menu bar. Click the kebab menu to view additional options . The list of options may differ according to the room type. Let\u2019s look at an overview of the key options available across rooms in Rocket.Chat. Click the threads icon  to view and participate in threads . This keeps related messages organized and allows you to focus on the most relevant conversations in the room. You can filter threads between All, Following, and Unread. Tap the threads icon  from the menu bar to view and participate in threads . This keeps related messages organized and allows you to focus on the most relevant conversations in the room. Tap the filter icon to filter threads between All, Following, and Unread, or use the search icon to search for specific messages . Click the discussions icon  to view and search for discussions in a room. This option is available in all rooms except discussions. Tap the room name for which you want to view discussions. Tap the Discussions to view and search for discussions in the room . This option is available in all rooms except discussions. Rocket.Chat search supports basic search commands, including the use of regular expressions . Regular expressions provide flexibility to search chat entries in any language, even those traditionally challenging, like \"CJK\" languages (Chinese, Japanese, Korean). Use the search icon  in any room to search messages . Basic search commands You can use the following commands before or after entering search terms in a room: from:me - To search for messages only created by the current user. from:user.name - To search for messages created by a specific user . The username entered must be the format without spaces (i.e., \"john.doe\" and not \"John Doe.\") Search for any mentions of a user by searching for their username. has:star - Returns messages that the current user stars . is:pinned or has:pin- Returns messages that pin in the current room. has:url or has:link - Returns messages that contain a link. has:location or has:map -Returns messages that have a location attached", "tokens": 499}
{"title": "Room Options", "content": ". before:dd/mm/yyyy, after:dd/mm/yyyy and on:dd/mm/yyyy - Return message created before, after, or on the provided date. Dashes dd-mm-yyyy or dots dd.mm.yyyy can be used instead of slashes . order:desc, order:descend, or order:descending - Sorts messages by descending timestamp. Select the Options icon of a message in the search result and click Jump to message to take you directly to the message . Refer to these resources to learn more about regex(regular expressions). Wikipedia Regex 101 Regexr Regex Info Click the mentions icon  to view a list of all messages you've been mentioned in, ensuring you don't miss any important conversations", "tokens": 177}
{"title": "Room Options", "content": ". Tap the room name for which you want to view your mentions. Tap Mentions from the list of room options. The pinned messages option allows you to quickly access important messages that have been pinned within a room . Pinned messages are highlighted to ensure they are easily retrievable and viewable by all room members. To view pinned messages in a room, follow these steps: Click the kebab icon from the room menu bar . Select Pinned Messages from the drop-down menu. All pinned messages in the room are displayed in the right-hand side pane. To view pinned messages in a room in the mobile app, follow these steps: Tap the room name from the menu bar . Tap the Pinned option from the list of room options. The list of pinned messages is displayed for that room. Refer to the Message actions guide to learn how to pin a message . The starred messages option allows you to access messages you have marked as important by starring them. Starred messages help you keep track of critical information without pinning it for the entire room . To view starred messages in a room, follow these steps: Click the kebab icon from the room menu bar. Select Starred Messages from the drop-down menu. All your starred messages are displayed in the right-hand pane of the room . To view starred messages in a room in the mobile app, follow these steps: Tap the room name from the menu bar. Tap the Starred option from the list of room options. The list of starred messages is displayed for that room . Refer to the Message actions guide to learn how to star a message. Rocket.Chat allows you to update the notification preferences for any room you are a member of", "tokens": 342}
{"title": "Room Options", "content": ". By default, you receive notifications whenever someone mentions you or uses the @all mention in a room. Room notifications are sent only if the desktop or web client has been inactive for over five minutes. Changing your status to away does not reduce this period . Depending on the privacy settings configured by the administrator, notifications on your mobile device include the sender's name, room name, or the first line of the message . To update the notification preferences for a room, follow these steps: Click the kebab icon from the room menu bar. Select Notification Preferences. Enable Turn ON to receive notification alerts . Update the following notification options: Field Description Mute @all and @here mentions Mute alerts whenever you are mentioned in the channel. Mark As Unread Display the room as unread when there are unread messages . Desktop Control notification behavior for message alerts and the sound when using the desktop app or a browser. Mobile Control push notification behavior for alerts when using the mobile app . Email Set the type of messages that send an email notification To update the notification preferences for a room in the mobile app, follow these steps: Tap the room name from the menu bar. Select Notifications from the list of room options . Enable the option Receive notification if you want to receive notifications for that room. Enable the option Receive group mentions to receive notifications when someone uses the @all and @here mentions . Enable the Mark unread option to display the room as unread when there are unread messages in that room. You can set\u00a0Alert\u00a0and\u00a0Sound\u00a0options for in-app and desktop notifications, as well as the Alert option for mobile push notifications . If you want to receive email notifications, set the Alert option under E-mail. Select Troubleshooting to view the status of the device notification settings and the push gateway connection . The alert options for desktop, mobile, or email notifications are: Default, All Messages, Mentions, and Nothing. Select your preferred option to specify which types of messages you want to receive alerts for", "tokens": 424}
{"title": "Room Options", "content": ". These options provide flexibility in how you receive notifications, ensuring that you stay informed in a way that suits your preferences and work style. The Files option is particularly useful for finding documents, images, and other attachments shared in the room . This feature ensures that all files are easily retrievable and organized in one place. To view files in a room, follow these steps: Click the kebab icon from the room menu bar. Select Files . For DMs and discussions, click the attachment icon from the room header menu bar. All the file attachments in the room are displayed, allowing you to filter by audio, video, files, and images . To view files in a room in the mobile app, follow these steps: Tap the room name from the menu bar. Select Files from the list of room options. All files shared within that room are displayed. You can maximize your efficiency with Rocket .Chat by using hotkeys. Click Keyboard Shortcuts to view the list . Shortcut Description Command (or Ctrl) + k Open Room / User search Control (or Shift) + ESC Clear all unread messages Up Arrow Edit the previous message Command (or Ctrl) + Left Arrow Move to the beginning of the message Command (or Ctrl) + Up Arrow Move to the beginning of the message Command (or Ctrl) + Right Arrow Move to the end of the message Command (or Ctrl) + Down Arrow Move to the end of the message Control (or Shift) + Enter New line in the message compose input Command (or Ctrl) +b Bold Command (or Ctrl) + i Italic Command (or Ctrl) + c Copy Command (or Ctrl) + v Paste Command (or Ctrl) + x Cut The Prune", "tokens": 369}
{"title": "Room Options", "content": "Messages option enables administrators and room owners to delete messages from a room swiftly based on specific criteria . It requires the clean-channel-history permission. This feature helps maintain a clean and relevant conversation history by removing unnecessary or outdated messages. Visit our Retention Policy guide to learn more about automated retention policies . Pruned messages and files are deleted forever and cannot be recovered. You are advised to use this feature with caution. To prune selected messages, Click the kebab icon from the room menu bar . Select Prune Messages and update the following fields: Field Description Newer than Deletes all messages posted after a particular date. Older than Deletes all messages posted before a particular date . Only prune content from these users Allows you to specify which user's message to delete. Leave empty to prune everyone\u2019s messages . Inclusive Deletes all messages that were sent at the specified start and end times you have specified in the Newer than and Older than fields. Do not prune pinned messages Do not delete pinned messages. Do not prune discussion messages Do not delete discussion messages . Do not prune threads Do not delete thread messages. Only remove the attached files, keep message If enabled, messages are not deleted, but files are. They are replaced by a File removed by an automatic prune message . When used together with Exclude pinned messages, only unpinned files are deleted. Once you\u2019re done, click Prune. With the Export Messages feature, you can export the entire conversation history of a room or selected messages", "tokens": 317}
{"title": "Room Options", "content": ". To export messages, follow these steps: Click the kebab icon in the room menu bar. Select Export Messages. Select the export method and update the required fields . The export methods are as follows: Method: Select Send email from the drop-down menu. Output format: The HTML format is supported. To Users: Select the users to send the email . To additional emails: Add any additional email addresses that should receive the export email, separated by commas. Subject: Provide a subject for the email. Select the messages you want to export and click Send . The users will receive an email containing the selected exported messages. Output format: The HTML and JSON formats are supported. Select the option you prefer. From and to dates: Enter the dates for which you want the messages to be exported . Click Send, and you will receive an email with the downloadable zip file. Method: Select Download from the drop-down menu. Output Format: The JSON format is supported. Select the messages you want to export and click Download . If the room is encrypted, see how to export messages in the End-to-End Encryption User Guide.", "tokens": 237}
{"title": "Manage Room Members", "content": "This document provides detailed instructions on managing members across rooms in Rocket.Chat. It covers viewing member information, adding and removing members, managing invite links, assigning room roles, and much more . You can add members to a room in two ways: manually adding users and sending an invite link. To add users who are already in your workspace: At the bottom of the Members screen, click Add . Search for and select the users, then click Add Users. Rocket.Chat notifies you if the user is already an existing channel member . To invite users via a link: At the bottom of the Members screen, click Invite Link and copy the generated link to share with invitees . Edit invite link To manage the duration and usage of an invite link: On the Invite Members screen, click Edit Invite. Select the expiration (in days) and the maximum number of uses, then click Generate New Link . This link will prompt invitees to sign up if they are outside your Rocket.Chat workspace before granting them access to the room. Delete invite link To delete an invite link, see Delete an Invite Record via Admin Panel . This feature comes in handy when you have an invite link with an Expiration date: Never. To avoid abuse, you can revoke it by deleting the invite record. To create invite links, your role needs the Create Invite Link permissions", "tokens": 284}
{"title": "Manage Room Members", "content": ". It's enabled by default for Admins, Owners, and Moderators. Contact your workspace administrator to adjust permissions as needed. By default, only the room owner can remove a member. However, users with appropriate permissions can also remove members . To remove a member: In the Room Members screen, search for and select the user to view their User Info. Click the kebab menu and select Remove from room . Room members must have one of the following room roles: Owner, Leader, Moderator, or User. Each member's permissions depend on their role, with the room owner having full management capabilities, including assigning roles . To see the list of members in a room: Click the Members icon in the room menu bar. Initially, only active users are shown. For Teams, click the kebab menu from the room menu bar and select Team Members . Select \"All\" from the dropdown beside the search bar to view all users. Select a user to view their User Info. The user preview displays their name, username, roles, and current timezone . From the user info, you can send a direct message or call the user. Click the kebab menu for additional actions such as: Ignore: Messages from this user will be replaced with the label \" > This message was ignored\" . Click the label to reveal the original message. Mute: The room becomes read-only for the muted user. They can still view messages but cannot send any until unmuted. Report user: Provide a reason for reporting the user and click Report . Remove from room: Remove the user from the room. Set role: Assign a role (moderator, leader, or owner) to the user. View reported messages: Access all the messages from the user that have been reported on the moderation dashboard .", "tokens": 375}
{"title": "Room Roles", "content": "Rocket.Chat rooms have different roles that users can assign to control actions and features within a particular room, including Teams, Channels, and Discussions. These roles are associated with permissions in the room scope. By default, there are three major room roles available in a Rocket.Chat workspace: Owner: This is the highest room-scoped role. It provides complete control over the room, including the ability to change its name and description, manage its members, and delete the room entirely. Leader: A Room leader has significant control over the room and can manage room members, edit the room name and description, and perform other tasks pertaining to the room. Moderator: This role is designed to help keep the room organized and on-topic. Moderators can delete messages, kick users out, and pin important messages to the top of the room. Creating custom roles is exclusively available to workspaces subscribed to the Enterprise plan. For more details, see Custom Roles. Room roles can only be assigned to members belonging to the room. To assign a role to a user: Open the desired room. Click Members icon on the top right action bar. This shows a list of users in that room. Search and select the user you want to assign a role. Click the kebab menu on the right against the user. A dropdown is seen. Click Set as <role> from the dropdown to set the role you wish to assign to the user. Only Room Owners and Leaders can assign Roles to other users. Users can have multiple roles within a single room. Room roles can be revoked from a user in a room if no longer needed. To remove a role: Open the desired room. Click on the Members icon on the top right action bar. This shows a list of users in that room. Search or select the user having the existing role. Click the kebab menu on the right against the user. A dropdown is seen. From the dropdown, click Remove as <role> to remove the role previously assigned to the user. See the official documentation to learn more about Rocket.Chat Roles and Permissions.", "tokens": 435}
{"title": "Communicate Using Messages", "content": "In Rocket.Chat, conversations take place in rooms. To send a message, go to a room and type in the message box. Then, press enter or click the send button . While typing in the message box, press Shift + Enter to enter a new line. You can also move the cursor using the arrow keys. Before you proceed, ensure that the workspace administrator has configured the Message settings for your workspace according to your needs . Utilize the icons in the message box to upload files, format your message, record an audio/video message, and do much more while typing a message. Improve your messages by making them clear and neat with various formatting options . You can format your messages using the formatting icons in the message box or markdown . Highlight a message and click on any of the following formatting icons: bold, italics, strikethrough, inline code block, multiline code block, and links . In the mobile app, tap the T icon below the message box to access these formatting icons. Formatting icons Optionally, you can use markdown to format your messages . Here is a list of the supported markdown formats you can use in your workspace: Markdown Example Input Example Ouput Bold *Hello Team* Hello Team Italics _Hiya_ Hiya Blockquotes >consectetuer Color", "tokens": 279}
{"title": "Communicate Using Messages", "content": "color:#F00 Emoticon :) :( Escape \\*test\\* *test* Headings # Heading Image ![](https://raw .githubusercontent.com/ RocketChat/Rocket.Chat.Artwork/ master/Logos/2020/png/logo-horizontal-red.png) Links <https://rocket.chat|link> [secondlink](https://rocket .chat) link secondlink Ordered list First item Second item First item Second item Unordered list - First item - Second Item First item Second Item Tasks list - [ ] Get press release - [x] Checked item Get press release Checked item Phone [here](+(075)-63546725) +(075)-63546725 +07563546725 here +(075)-63546725 +07563546725 Strikethrough ~Lorem ipsum dolor~ Lorem ipsum dolor Inline codeblock `welcome` welcome Multiline codeblock ``` npm install ``` To upload files to a room, follow these steps: Click the upload file icon (the attachments symbol) in the message box and choose the files, or drag and drop the files into the message box", "tokens": 284}
{"title": "Communicate Using Messages", "content": ". You can also paste an image from your clipboard in the message box. Add a file name and description if required, and click Send. To forward files from a room, follow these steps: Hover over the file message and click the forward message icon . Select the user or room to forward the message and click Forward. To search files in a room, follow these steps: Click the kebab menu icon on the room header and select Files. By default, all types of files are listed . You can choose the file type you want to search for and then proceed with your search. To upload files to a room in the mobile app, Under the message box, tap the plus icon + . Select any of the options to attach a file, and send the file. To forward files from a room, follow these steps: Long press the file message and select the Forward option. Select the user or room to forward the message and tap Send . To search files in a room, follow these steps: Tap the room name from the menu bar. Select Files from the list of room options. All files that have been shared in the room are displayed . Note that the workspace administrator may restrict the upload of certain file types. To upload files from Google Drive, see the Google Drive app guide. To improve communication with team members, you can send audio and video messages within a room . Other users in the room can listen to and respond to your message. To record an audio message, Go to a room and click the audio message icon  in the message box. Click the check icon  to finish the recording . Click the cancel icon  to discard the recording. Add a file name and description, then click Send. To record a video message, Click the video message icon  in the message box. A video preview window is displayed . Click the record button  to start recording. Click the record button  again to finish the recording and hit Send. Click the cancel button to discard the recording. Add a file name and description, then click Send . To record an audio message in the mobile app, Go to a room and tap the audio message icon  in the message box. The recording begins. Tap Send to finish recording and send it. Tap the trash icon to delete the recording", "tokens": 462}
{"title": "Communicate Using Messages", "content": ". To record a video message in the mobile app, Tap the plus icon + under the message box. Select Take a video from the list. Remember to grant Rocket.Chat permission to access your microphone and webcam when prompted . To share your location in a room, Click the  plus icon in the message box. Select Share > Location. A Google Maps preview of your location is displayed. Click Share to send your location or Cancel to discard it . To insert an emoji, Click the emoji icon in the message box. Browse emojis using the icon categories or the search box. Select the emojis you want to use inside your message. Hit enter or click send . Alternatively, you can also insert emojis by entering an emoji code. For example, typing :) will automatically convert into a smiley face emoji. To disable emojis in your workspace, refer to #messages . When graphical emojis are disabled, emoji keywords and shortcuts display as regular text. When a user types in a channel, a typing indicator appears below the message box for others. For instance, \" User-5 is typing .\" To mention your team member in a channel, type @ followed by their username (e.g., @username). The mentioned user will be notified through a red badge or email/mobile notification if offline . For important announcements, use @all sparingly to notify everyone in the channel. You can view PDF attachments within the app from the release version 6.6.0 and the desktop app version 3.9.13 . The PDF Viewer is only supported for the desktop app. In the File Upload settings, the file Storage Type must be Amazon S3 or Google Cloud Storage. See File Upload. To access the PDF Viewer, send a PDF file attachment to any channel . Select the PDF and the PDF Viewer screen displays the file contents within the app.", "tokens": 411}
{"title": "Messaging Options", "content": "Message options allow you to interact with and manage your messages in a room. This document will walk you through the available message actions in a Rocket.Chat workspace. To display the message actions menu, hover over the message and click the kebab menu . In the mobile app, long-press the message to access these options. Click the quote iconto quote and respond to a message. To edit a message, click on the Edit option from the message actions menu . You can also place your cursor in the message box and press the Up arrow to edit your last message. The workspace administrator can assign permissions for users to edit messages from other users . By default, only administrators, moderators, and channel owners can edit other users' messages. To delete a message, click Delete from the message actions menu. Star messages to make it easier to locate them later . To Star a message, click Star from the message actions menu. If you want to unstar a message, click Remove Star. To view starred messages, click the kebab menu on the room navbar and select Starred Messages . Starred messages are specific to individual rooms and do not apply globally across the workspace; each room maintains its own list of starred messages. Pin messages in a room to make them easily accessible to all users in that room . To pin a message, select the Pin Message option from the message actions menu. Remove pinned messages by selecting Remove Pin. The workspace administrator can assign permissions for users to pin messages in a room . By default, only administrators, moderators, and owners of the channel can pin messages. You can react to messages with emojis. To add a reaction to a message, hover over the message and click on the Smiley Face icon . Then, select an emoji. You can see other users' emoji reactions under the message. To react with the same emoji as another user, click on the emoji. To remove your reaction, click on your emoji", "tokens": 419}
{"title": "Messaging Options", "content": ". Permalink a message to create a URL directly to that message in the chat. Click on the Copy Link option from the message actions menu. This copies the message URL into your clipboard . To copy the contents of a message to your clipboard, click on the Copy Text option from the message actions menu. Reply to a message to quote and respond to the message. The reply automatically triggers a notification sent to the message's original author . You can Reply in Thread or Reply in Direct Message. Use Reply in Thread to start a new thread under the original message. Use Reply in Direct Message to quote and respond to the original message in the sender's DM . To report offensive messages, click Report from the message actions menu. To report a user, click the user icon and see the user's full profile. A User Info panel opens on the right-hand side. Click the kebab icon and click Report . Workspace admins, moderators, and users with appropriate permissions can access the Moderation tab to review the details of the reported messages and users. Read receipts show a list of users that have read the message with a timestamp . It is displayed when the read receipts setting is enabled in the workspace. Click the Read receipts option from the message actions menu to view this information. Click the share icon to forward messages to another channel, thread, or discussion . You can forward messages directly to any user, channel, thread, or discussion you have access to. You can select a message and share it with unlimited recipients . This streamlines information sharing across various channels with large audiences, ensuring everyone receives the same message simultaneously. The benefits include saving time, improved communication flow, increased collaboration, and overall convenience. Message sharing is available from version 6.2 and above . From editing and deleting messages to pinning and reacting to them, users can use these message actions to enhance their communication and collaboration experience.", "tokens": 403}
{"title": "Slash Commands", "content": "Slash commands in Rocket.Chat allows you to execute various actions directly from the message box, making it quicker to complete tasks like managing rooms and interacting with users . By typing a forward slash (/), followed by the specified command, you can access functions without leaving the chat interface. When you start typing a forward slash, a menu appears with a list of recently used commands . You can either scroll through these options or continue typing to search for specific commands. Rocket.Chat comes with a set of default slash commands that are immediately available in your workspace. Additionally, Rocket .Chat Apps may introduce their own commands for effective integration with external services. To explore all available slash commands in your workspace, use the List Slash Commands API . Below is a list of default slash commands and their functionalities: Slash command Action Permission required /archive <#roomName> Archives the specified room. archive-room /unarchive <#roomName> Unarchive the specified room . /create <channelName> Create a new channel. create-c, create-p /topic <message> Set a new topic for a room. edit-room /status <statusText> Update your user status text . /mute <@username> Mute a user in a room. The room becomes read-only for that user. mute-user /unmute <@username> <message> Unmute a user in a room . The user can now send messages in the room. mute-user /msg <@username> Send a DM to a user create-d /part or /leave Leave the current room . leave-c, leave-p /kick <@username> Remove a user from a room remove-user /join <#roomName> Join a room view-c-room /gimme <message> Append \u0f3c \u3064", "tokens": 382}
{"title": "Slash Commands", "content": "\u25d5_\u25d5 \u0f3d\u3064 to the start of a message . /lennyface <message> Append \u00a0( \u0361\u00b0 \u035c\u0296 \u0361\u00b0) at the end of a message . /shrug <message> Append \u00af\\_(\u30c4)_/\u00af at the end of a message . /tableflip <message> Append (\u256f\u00b0\u25a1\u00b0\uff09\u256f\ufe35 \u253b\u2501\u253b at the end of a message . /unflip <message> Append \u252c\u2500\u252c \u30ce( \u309c-\u309c\u30ce) at the end of a message. /help Display the keyboard shortcut keys. /hide Hides the current room from the sidebar . /invite <@username> Adds a user to the current room. add-user-to-joined-room /invite-all-from <#roomName> Adds all users from a specified room to the current room . add-user-to-joined-room, add-user-to-any-c-room, add-user-to-any-p-room /invite-all-to <#roomName> Adds all users from the current room to a specified room. add-user-to-joined-room The Slash Commands feature enables users to invoke your app or any other functionality by entering a string in the message composer window. This reduces the amount of text needed to produce complex Markdown. The slashCommand method is used to call an app deployed in Rocket.Chat", "tokens": 294}
{"title": "Slash Commands", "content": ". Your app can contain numerous slash commands and subcommands. In this section, we'll send a message to any room from our Hello World app using the slashCommand property . For this app, we will create a main slash command called phone, and it will have two subcommands: text and call. We want to execute these subcommands to invoke an app function . We will use them as follows: /phone text /phone call Although it is possible to have everything in a single file, this is not recommended . Put each component of your app in its own file, and logically similar components in their own subdirectories. We recommend creating a commands subdirectory at the root of your project for slash command-related files, but you are free to choose a different name . The following code excerpts are a recommendation for organizing the slash commands in your app. Even if you do not wish to adhere to the subcommand pattern, you must still register the slash command. The primary step is to register the slash command . It must be registered in the app's main class, at the project's root. Add the following code to register your slash command, phone: To import the new slash command class, replace the import statements with the following: Create a PhoneCommand .ts file in the commands directory that we created at the root of the project. In this file, the slash command is defined. Now add the following code: Let's look at the logic of this code in the PhoneCommand .ts file: The slash command is named phone. When it gets executed, we get the argument that the user passed after the command. The argument is used as the subcommand and it is mandatory . We match the argument with the list of allowed subcommands, in this case, text and call. If the argument matches the text subcommand, log \"Texting!\" . If the argument matches the call subcommand, log \"Calling!\" Any other argument throws an error. After registering and defining your slash command, the final step is to deploy your app to the server", "tokens": 452}
{"title": "Slash Commands", "content": ". To deploy the app, go to the app folder in the command line and run: The <server_url> parameter is the URL of your Rocket.Chat server. Replace the placeholders with the URL, username, and password for your server, respectively . After executing this command, your application will be deployed to the server. Packaging your app Alternatively, you can execute the rc-apps package command . This gives you a compressed zip file of your app that you can upload as a private app to your Rocket.Chat server. After deploying the app, you can input /phone text or /phone call on any channel . The app logs \"Texting!\" or \"Calling!\" to the Logs section, respectively. After deploying the app, you can input /phone text or /phone call on any channel . Go to Administration > Workspace > Reports > Logs to view the command response. The response \"Texting!\" or \"Calling!\" is displayed based on your input . If you want to send the command response to the channel, follow these steps: Add the following method to the PhoneCommand class: This function: Retrieves the user who invoked the command (in this case, you) . Selects the room where the command was executed. Sets the received string as the message. Sends the message to the room. Change the console .log from the switch block of the executor method and call the sendMessage method instead: Here, context and modify are the arguments passed to the executor method, and they are forwarded to the sendMessage method . Save the file and redeploy the app by running the following command: All that's left is for you to test it! Go to the channel in Rocket .Chat where you want to test your app by typing /phone text and /phone call in the message composer. Press Enter and you can see the output as Texting! or Calling! in the channel . Similarly, you can register and define multiple slash commands tailored to your organization's requirements. Head over to the next page to find more slash command examples . In addition to slash commands, you can use other properties supported by the Apps-Engine to expand the functionality of your app to meet business requirements, as we will see in the upcoming sections.", "tokens": 491}
{"title": "Rocket.Chat Conference Call", "content": "Rocket.Chat provides real-time audio and video conference calling capabilities, enabling teams to share ideas, brainstorm solutions, and collaborate. Users in your workspace can quickly transition from text-based conversations to audio or video calls using any of the following call providers, available as apps on the marketplace: Pexip: An enterprise-grade video conferencing solution with advanced security features. Jitsi: A popular open-source video conferencing platform. BigBlueButton: A web-based conferencing solution with whiteboard and presentation features. Google Meet: A cloud-based video conferencing platform integrated with Google Workspace. Here are the various conference call features supported across our various plans and on mobile devices: Feature Community Starter Pro Enterprise Mobile Create calls \u2713 \u2713 \u2713 \u2713 \u2713 List in the channel users who joined a call x \u2713 \u2713 \u2713 x Contextual bar containing call history x \u2713 \u2713 \u2713 x Options to start with camera and mic off \u2713 \u2713 \u2713 \u2713 \u2713 Mark calls as ended after 24 hours \u2713 \u2713 \u2713 \u2713 \u2713 Ring users before starting a call x \u2713 \u2713 \u2713 x Disable call button in the workspace x \u2713 \u2713 \u2713 x Here are the conference call features supported across the available call providers on the marketplace: Feature Pexip Jitsi BBB Google Meet Start calls from Rocket.Chat \u2713 \u2713 \u2713 \u2713 Identify moderator automatically \u2713 \u2713 \u2713 x Control microphone from Rocket.Chat x \u2713 x x Control camera from Rocket.Chat x \u2713 x x Load user names from Rocket.Chat x \u2713 \u2713 x Load user avatars from Rocket.Chat x \u2713 \u2713 x End calls automatically x x \u2713 x Whether you're collaborating on projects, hosting virtual meetings, or conducting remote workshops, Rocket.Chat's conference call feature provides a robust solution for effective communication. As a workspace administrator, refer to the Conference Call Admin Guide to configure conference calls on your workspace. Once it's successfully configured, users can visit the Conference Call User's Guide to initiate and receive calls on your workspace.", "tokens": 422}
{"title": "Conference Call Admin Guide", "content": "To configure conference calls on your Rocket.Chat workspace, you need to first install and configure conference call apps of your choice. Refer to the following admin guides to learn how to configure the apps for your workspace: Pexip app Jitsi app BigBlueButton (BBB) app Google Meet app Once you have configured the app, follow these steps to enable it for your workspace: Go to Administration > Workspace > Settings > Conference Call. Select Default Provider as the app that you installed and configured. Enable mobile ringing: Select this option to ring mobile devices as a phone call. When enabled, it will send additional push notifications to users. Enable or disable the call option in DMs, public channels, private channels, and teams as per your needs. Enable Persistent Chat: Select this option to store the messages sent during conference calls. Keep the following points in mind when using this setting: It will only take effect if the video conference provider app registers itself as compatible with it. Currently, the Pexip app supports this feature. When this option is enabled, Rocket.Chat will automatically create a new discussion every time a conference is started and the discussion ID will be made available to the app. The provider app is then responsible for sending any messages exchanged during the conference to the specified discussion. Any user who joins the conference will automatically be subscribed to that discussion. Discussions created for conference calls will not be listed on the room's list of discussions. Instead, they can be accessed through the list of conference calls. During a conference, a button to access the discussion is also available in the message sent. Make sure that discussions are enabled in your workspace. Persistent Chat Discussion Name: Enter a name for the discussions. Enter the [date] tag to set where to include the date in the discussion name; for example, chat [date]. By default, discussions are named as [date] Conference Call Chat History. The Default Provider options will be empty if you have not set up any conference call apps from the marketplace.", "tokens": 430}
{"title": "Pexip App", "content": "This app can also work in a fully air-gapped environment. If your workspace is subscribed to any of Rocket.Chat's premium plans, follow the Air-gapped App installation guide, and continue with the configuration instructions below . Pexip is a purpose-built video communication platform that empowers organizations to transform their operations with video conferencing. Pexip\u2019s technology provides a customized solution with data privacy and business continuity features for secure spaces", "tokens": 100}
{"title": "Pexip App", "content": ". Pexip offers both self-hosted and as-a-service deployment options for enterprise video conferencing. The integration between Rocket .Chat and Pexip enables secure and compliant communication, ideal for organizations operating within strict regulatory requirements for internal and external communications, such as government, financial services, healthcare, and other sectors. Key features of the Rocket .Chat - Pexip integration Initiate calls from Rocket.Chat directly without switching tools. Record and list call details to check users who joined the call. Maintain a record of the call history . In this guide, let's take a look at the underlying architecture of the integration and the app configuration steps. This integration is made possible by connecting Rocket.Chat with Pexip Infinity through its external policy API. The Pexip app in Rocket .Chat acts as a relay between the two platforms. Rocket.Chat users initiate a video call to a Pexip conferencing node and trigger an external policy request to Pexip . The policy server creates a single-use Virtual Meeting Room (VMR) and responds with the meeting parameters. This VMR is made available in the Rocket.Chat room for its duration. Ensure that the Rocket .Chat external policy server can connect to the Pexip Infinity Conferencing Nodes over HTTPS on port 443. Rocket.Chat Pexip Architecture For a complete setup, here are some requirements you need: A workspace subscribed to any of Rocket .Chat's premium plans. A Pexip infinity server deployed with: Valid certificates and intermediate certificates. A suitable network routing between Rocket.Chat and Pexip Infinity Only one location for each Rocket .Chat workspace, but that location can contain multiple Conferencing Nodes. To download the Pexip app, follow these steps: Go to Administration > Apps > Marketplace. Search for the Pexip app and click Install. Accept the required permissions . To set up the Pexip app on your Rocket.Chat workspace, follow these steps: Confirm that the app is enabled on your workspace. Configure the Pexip server with a remote policy to make service configuration requests before connecting with Rocket.Chat", "tokens": 453}
{"title": "Pexip App", "content": ". On the Pexip App Info screen, go to Details. Copy the policy server URL (GET policy/v1/service/configuration) and update the Pexip settings . Copy the POST events URL and add it to the Events Sink on your Pexip server. The events sink informs the workspace when a call on Pexip Infinity has ended . This way, the call message block on your workspace is updated with the appropriate call status. On the Pexip App Info screen, go to Settings. Update the Base URL with the URL of your running Pexip server. Click Save Changes . Additional settings details are as follows: Field Description Base URL* The URL where the Pexip server is running. Meeting URL* The path used to generate the full meeting URL . It is prefilled by default with /webapp/conference?conference={callid}. API Username The API username to use for authenticated calls. If specified, Rocket.Chat will ignore any API calls that do not include this username and password . API Password The password to use along with the API Username. Theme Name Name of the Pexip theme to be used on Rocket.Chat calls. In Pexip Infinity's settings, you can configure different UI themes to use for your calls . If you want to use a specific theme for calls initiated by Rocket.Chat, enter the theme name in this field. Lock Conferences Whether conferences should be locked on creation. When enabled, call owners must accept each participant . Allow multiple concurrent calls on the same room Enable this option to allow the creation of multiple conference calls in the same room. When disabled, Rocket.Chat will only create one Pexip Conference per room and re-use it for every new call . Users can then connect to the meeting using the room's internal name. When using persistent chat, disable this option to maintain a single discussion for conference calls in the same room. Participant name overlay text Enable this option to display the names or aliases of all participants in a text overlay along the bottom of their video image", "tokens": 450}
{"title": "Pexip App", "content": ". Meeting layout Select the meeting layout from the drop-down menu. This determines how the participants are displayed in the meeting room. This does not limit the total number of call participants. Static Host Pin A pin code to identify meeting hosts . Leave empty to generate a new unique pin for every meeting. Static Guest Pin Set a pin code to grant meeting access to guests. Leave empty to generate a new unique pin for every meeting . To configure the Pexip video conference on your workspace, follow the steps in the Conference Call Admin Guide. After successfully installing and configuring the Pexip app, you can initiate a secure Pexip call within any Rocket .Chat room using either the /pexip slash command or the call icon in the menu bar. When you enter the /pexip command in any room, a new Pexip Virtual Meeting Room (VMR) is automatically created . Alternatively, you can click the call icon in the menu bar and select Start Call. In both cases, a call message block is sent to the room, containing a Join button that allows others to participate in the call . If you have set Static Host Pin and Static Guest Pin, click the information icon to see this information . If you initiate the call in a Direct Message (DM), this action will ring the other participant(s) and present them with options to accept or reject the call . Upon joining the Pexip call, users are prompted to provide their details and grant permission to use their camera and microphone. The list of participants in the VMR is displayed within the call message block in the Rocket.Chat room . For more details, refer to the Conference Call User\u2019s Guide to start using the app . If you have configured more than one conference call provider, for example, Pexip and Google Meet: Using the /pexip slash command initiates a conference call using the Pexip app, regardless of the default provider . Clicking the call button from the room header initiates a conference call using the default provider that you have selected in the settings. Rocket.Chat supports persistent chat for conference calls on Pexip by creating dedicated discussion rooms in your workspace", "tokens": 456}
{"title": "Pexip App", "content": ". These discussion rooms allow participants to exchange messages during the call and continue the conversation effectively within the workspace even after the call has ended . With persistent chat, all interactions from the call are preserved, ensuring that important conversations are easily accessible and can be revisited or extended as needed. This feature is available exclusively to workspaces running version 6 .11 or higher, and it requires Pexip Infinity v35+ along with the Pexip App v1.6.1+", "tokens": 101}
{"title": "Pexip App", "content": ". To enable this feature, follow these steps: Navigate to Administration > Workspace > Settings > Discussion and confirm that discussions are enabled on your workspace. Go to Administration > Workspace > Setting > General and disable Restrict access inside any Iframe . Go to Administration > Workspace > Settings > Conference call and enable Persistent Chat. You can also set a name for the discussion. By default, discussions are named as [current-date] Conference Call Chat History . For more information about the settings, refer to the\u00a0Conference Call Admin Guide. When a call is\u00a0initiated\u00a0in a room, a call message block is sent to the room, containing a Join button and a discussion icon . Simultaneously, Rocket.Chat generates a dedicated discussion for that call. The discussions are not displayed automatically . To access the discussion, users can click the discussion icon displayed on the call message block, as shown in the following screenshot: The discussions are also displayed in the sidebar when a user sends a message to the discussion . These discussions won\u2019t appear in the room\u2019s discussion list. However, you can still access them through the Call History: In a room, click the kebab menu in the menu bar and select Calls . This will display a history of all calls in the room. Click the discussion icon for the call you want to access, as shown in the following screenshot: To access the discussion from the call on Pexip: Click the Rocket .Chat icon from the Pexip toolbar at the left of the window. The linked discussion will open in an embedded window. If this is your first time using the feature, you\u2019ll be prompted to log in . You can view any previous messages in the discussion and continue exchanging messages with other participants during the call. These messages will remain accessible on your workspace even after the call ends . Users do not need to be present in the call to participate in the discussion room, as long as they have access to it within the workspace.", "tokens": 408}
{"title": "Jitsi App", "content": "Jitsi is a collection of open-source projects for voice, video conferencing, and instant messaging. Jitsi provides users with secure, scalable, and easy-to-use video conferencing platforms with state-of-the-art video quality and features . The Jitsi Meet project is a bandwidth-efficient WebRTC-compatible SFU (server-based) solution from our FOSS partner, Jitsi . Jitsi Meet is a fully encrypted, open-source video conferencing solution that enables users to share screens and collaboratively edit documents together while video conferencing . It is browser-ready and doesn\u2019t require a client to install the application, as you can invite users via a custom URL. Key features of the Rocket .Chat - Jitsi integration Directly initiate calls from DMs, channels, teams, and discussions. Identify the moderator of the call automatically . Check user names and avatars before initiating a call Here are a few additional features for our Enterprise plan: Record and list call details to check users who joined the call. Ring users before initiating a call to provide a visual and audio indicator for them . A record of the call history. This app can also work in a fully air-gapped environment. Follow the Air-gapped App installation guide and continue with the configuration instructions below. A Jitsi server is required for this integration . To download the Jitsi app on your workspace, follow these steps: Go to Administration > Apps > Marketplace. Search for the Jitsi app. Click Install. Accept the terms and conditions and the required permissions . To set up the Jitsi app on your workspace, follow these steps: Confirm that the app is enabled. Go to the Settings tab and update the following fields: Field Description Domain Your Jitsi URL. For example, jitsi", "tokens": 394}
{"title": "Jitsi App", "content": ".test.rocket.chat. Title prefix Text that is added before the title when identifying a conference call URL. For example, https://jitsi.test.rocket.chat/RocketChat663b75818a8cfe91babdc15e . Here RocketChat is the prefix. This is displayed in the URL and the call name when you join the call. Title suffix Text that is added after the title when identifying a conference call. Use SSL Determines if the call URL uses https or http . Enable this option to use https. Chrome Extension Id Enter the ID of an extension from Chrome's extension list. If the specified extension is installed on your browser, it is used to render the call instead of Jitsi's standard web interface . Use Authentication Token When enabled, Rocket.Chat will generate a JWT token. You may configure Jitsi to require user authentication before allowing access to the calls . This authentication token is generated based on the rest of the parameters in this section, and the values for them must match the parameters configured in Jitsi. Application ID (iss) The app ID to use when generating authentication tokens . Application Secret The app secret to use when generating authentication tokens. Use JaaS (8x8) The provided URL is obtained from a JaaS provider like 8x8 . The private key you downloaded in BASE64 encoded format Must be in base64 format to preserve the format, use base64 -i \".pk file\" to get the base64 string . 8x8 API key id The API key ID you get from 8x8. Limit token to Jitsi Room If enabled, generated tokens will grant access only to the intended Jitsi room . Token Auditor The auditor's name to use when generating authentication tokens. Token Expiration The expiring time of the authentication tokens. Click Save changes", "tokens": 406}
{"title": "Jitsi App", "content": ". To configure the Jitsi video conference on your workspace, follow these steps: Go to Administration > Settings > Conference Call. Select Jitsi as the Default Provider . You can enable or disable the call option in DMs, public channels, private channels, and teams according to your needs. Click Save changes . After successfully installing and configuring the Jitsi app, you can initiate a secure Jitis call inside any Rocket.Chat room by using the slash command /jitsi or the call icon in the room header . If you have configured more than one conference call provider, for example, Jitsi and Google Meet: Using the /jitsi slash command initiates a conference call using the Jitsi app, regardless of the default provider . Clicking the call button from the room header initiates a conference call using the default provider that you have selected in the settings. Follow Conference Call User's Guide to start using it . When using mobile apps to join a public server, Jitsi may redirect users to a browser to complete authentication before joining calls . Users can choose to stay on the call screen within the app while waiting for another participant to log in, then they can continue the call via their mobile app . However, if you're using a private Jitsi server, there's no need for anyone to sign in.", "tokens": 286}
{"title": "BigBlueButton (BBB) App", "content": "BigBlueButton is an open-source web collaboration software used by education organizations for online learning and training. BigBlueButton enables users to conduct web-conferencing and share documents, audio, and video files . The software\u2019s whiteboard feature allows presenters to mark valuable topics in the presentation. In addition, its polling feature engages learners and helps the presenter to receive feedback . BigBlueButton\u2019s desktop sharing feature extends beyond slides and allows moderators to share their screens with the audience, enabling a better understanding of topics. Key features of the Rocket.Chat - BigBlueButton integration Real-time communication with integrated chat . Initiate calls from Rocket.Chat directly without having to switch tools. Check user names and avatars before initiating calls. End the call automatically", "tokens": 166}
{"title": "BigBlueButton (BBB) App", "content": ". Here are a few additional features for our Enterprise plan: Record and list call details to check users who joined the call. Ring users before initiating a call. A record of the call history. A BigBlueButton server is required for this integration . To download the BigBlueButton app, follow these steps: Go to Administration > Apps > Marketplace. Search for the BigBlueButton app. Click Install. Accept the terms and conditions and the required permissions . To set up the BBB app on your workspace, follow these steps: Confirm that the app is enabled. Run sudo bbb-conf --secret on the BBB server. It gives you a URL and a Secret. See BBB's documentation . Use this URL and Shared Secret in the Settings tab of the app to connect to BBB. Register Hook: Enable this option to register a webhook on BBB to close conference calls automatically when they end. It requires the bbb-webhook package . Custom parameter for bbb-client: Add additional parameters to the BBB call URL. Enter the keys and values in the JSON format. The parameter names must start with userdata-bbb. See Application parameters for details. Click Save changes . To configure the BBB video conference on your workspace, follow these steps: Go to Administration > Settings > Conference Call. Select BigBlueButton as the Default Provider . Enable or disable the call option in DMs, public channels, private channels, and teams as per your needs. Click Save changes. The BigBlueButton app is successfully configured on your workspace . If you have configured more than one conference call provider, for example, BBB and Google Meet: Using the /bbb slash command initiates a conference call using the BBB app, regardless of the default provider . Clicking the call button from the room header initiates a conference call using the default provider that you have selected in the settings. Follow Conference Call User's Guide to start using the app.", "tokens": 429}
{"title": "Google Meet App", "content": "The app is currently in Beta, and some features may not function as expected. Google Meet is a video conferencing service from Google. It is an enterprise-grade, secure video conferencing solution that makes it easy for users to collaborate via one-to-one or group audio and video calls. The Google Meet app in Rocket.Chat allows you to start a video call from within Rocket.Chat, without having to switch tools. The call encryption between all users ensures a secure video conference. This integration works exclusively with Google business accounts, so users must be part of your organization and logged in to their Google accounts. Key features of the Rocket.Chat - Google Meet integration Start Google Meet calls from DMs, channels, teams, and discussions. Record and list call details to check users who joined the call. Ring users before initiating a call to provide a visual and audio indicator for them. Maintain a record of the call history. To download the Google Meet app, follow these steps: Go to Administration > Apps > Marketplace. Search for the Google Meet app. Click Install and agree to the required permissions. Confirm that the app is enabled. To configure the Google Meet app on your workspace, follow these steps: Go to Administration > Settings > Conference Call. Select Google Meet as the Default Provider. Enable or disable the call option in DMs, public channels, private channels, and teams as per your needs. Click Save changes. The Google Meet app is successfully configured on your workspace. Once the app is installed and configured, you can initiate meetings immediately. In any room, use the slash command /meet or click the call icon. The meeting is created in a new tab. If you have configured more than one conference call provider, for example, Pexip and Google Meet: Using the /meet slash command initiates a conference call using the Google Meet app, regardless of the default provider. Clicking the call button from the room header initiates a conference call using the default provider that you have selected in the settings. Follow Conference Call User's Guide to start using the app.", "tokens": 432}
{"title": "Conference Call User's Guide", "content": "Contact your workspace administrator or follow Conference Call Admin Guide to configure conference calls in your workspace. This guide will walk you through the essential steps to effectively participate and use conference calls in your Rocket.Chat after it has been successfully configured. In Rocket.Chat, you can initiate video and audio conference calls using the configured provider in any room on your workspace. To start a call in a DM, follow these steps: Click on the  call icon from the room's header. You may have options like turning on/off the camera or microphone. However, these options depend on the conference call provider you have selected. Click Start call. The pop-up changes to the \u201ccalling state\u201d and you have the option to cancel the call. The ringer stays active for 30 seconds. After that, you can choose to Call again. Three things happen once you receive a call: A pop-up appears wherever you are in the Rocket.Chat application. The incoming call ringer starts to ring. An incoming call item will be highlighted in the left sidebar. The following options are available when you have an incoming call: Accept and join the call room. Decline and give the other user feedback through the chat. Dismiss and ignore the call. You can also start a call in other rooms such as teams, channels, discussions, and multiple direct messages. To start a call in a room, follow these steps: Click on the call icon from the room's header. You may have options like turning on/off the camera or microphone. However, these options depend on the conference call provider you have selected. Click Start call. A message is sent in the room, where all participants in the call are shown as thumbnails. The call message block allows the following actions: Reply in Thread, Follow Message, React, Pin, Star, Copy Link, and Delete. The ringing feature is unavailable in any room except Direct Messages (DMs). After a conference call is ended, the room keeps a record of the following: The user who initiated the call. The start time. The name of the conference. The list of attendees.", "tokens": 440}
{"title": "Omnichannel Video/Audio Call Configuration", "content": "You can create calls for Omnichannel conversations using any of the conference call providers. The default provider is the one you set when configuring conference calls. To be able to create calls for Omnichannel conversations, set the call provider by following these steps: Go to Administration > Workspace > Settings > Omnichannel > Video and Audio Call > Call Provider. Select Default Provider. To learn how to use conference calls as an Omnichannel agent, see Omnichannel Conversations - Call.", "tokens": 108}
{"title": "Rocket.Chat Federation", "content": "Rocket.Chat's Federation feature enables interconnected communication across different workspaces, leveraging the Matrix protocol for secure, decentralized, and interoperable messaging. This guide provides an overview of Rocket .Chat Federation, including how to enable it, supported deployment paths, limitations, and critical considerations for effective federation setup and management. Federation in Rocket .Chat allows workspaces to communicate and share resources within a federated network, facilitating collaboration with external partners, customers, and other organizations. By using the Matrix protocol, Rocket .Chat ensures secure and decentralized communication, enhancing security and interoperability across the federated network. Security: Implement secure communication protocols to protect data in transit and at rest across the federated network . Interoperability: Seamlessly exchange data and communicate across different platforms within the federated ecosystem. Efficient Services: Apply consistent policies and configurations across the federated network for streamlined management and operations. Rocket .Chat federation supports both monolithic and microservices deployments on Kubernetes, with the configuration of a single Matrix home server. Set up and configure federation with Matrix Bridge using the Federation Admin Guide. Rocket .Chat uses Matrix for federation, employing Matrix bridges for connecting with platforms like Slack and WhatsApp. Rocket.Chat basic federation is deprecated from version 6.0. Thus, we strongly recommend using Federation Admin Guide. The scalability of Rocket .Chat Federation is limited to the scaling capabilities Matrix home server. For information on sizing and scaling, refer to the Matrix documentation. Both continuous and sporadic connectivity scenarios are supported in a federated Rocket.Chat implementation. However, Rocket .Chat has not extensively tested environments with intermittent connectivity. Event synchronization between Rocket.Chat and the Matrix home server face several challenges that may impact operational consistency . Below is a list of events and issues that have been identified, which will be continually updated as more information becomes available. Room and user deletion: Currently, the deletion of rooms and users is not implemented for synchronization between Rocket .Chat and the Matrix home server. This means that any deletion action taken in one platform will not automatically reflect in the other. It's essential to consider how user data is managed and deleted across systems to maintain consistency between environments", "tokens": 475}
{"title": "Rocket.Chat Federation", "content": ". File upload limits: There is a discrepancy in file size limits between Rocket.Chat and the Matrix home server. Administrators need to manually align these limits to ensure files are appropriately handled during synchronization . Administrators are advised to review these limitations and adjust their workflows accordingly to minimize disruption and maintain compliance with regulatory standards. Future documentation updates will provide further details and guidance on mitigating these synchronization challenges. Here are various Rocket .Chat federation features and the plans they're supported in: Feature Community Starter Pro Enterprise Create 1:1 DMs Create federated channels and multi-user DMs . Invite external users to federated channels and DMs Search for public federated rooms in the Matrix Network. Invite multiple users to multi-user DMs using slash commands. Invite an external user to DMs using slash commands . Send/Receive attachments (files, audio, and video messages) Edit, Delete and Qoute messages. Message reactions and sending emojis. Mention internal and external users in federated channels. User's avatar synchronization . User's typing indicator Define permissions for users inside rooms Support for Markdown spec. Servers allow list/block list Rocket.Chat Federation expands your workspace's communication capabilities, enabling seamless collaboration across different platforms and organizations . By understanding the supported deployment paths, limitations, and key features, administrators can effectively set up and manage their federated networks, ensuring secure, interoperable, and efficient communication across the Rocket.Chat ecosystem.", "tokens": 320}
{"title": "Federation Admin GuideFederation Access Control", "content": "Rocket.Chat Federation utilizes the Matrix Federation Protocol (MFP) to connect servers, enabling seamless communication with users on Matrix-compatible platforms like Element. Matrix bridges allow users to connect with other networks, enabling interaction across different platforms. For instance, Element users can communicate with Slack, Discord, or Rocket.Chat users through bridges. Kindly refer to the official documentation for more details. In this guide, you'll learn about the following: Deploy a Federated Rocket.Chat Workspace: Understand how to set up a federated Rocket.Chat workspace. Federation Access Control: Learn how to create a list of allowed and blocked IP addresses from communicating with your workspace. Matrix Bridge Configuration: Gain insight into the pre-defined configurations for Matrix Bridge on your workspace. Blocking or allowing specific domain names or IPs address to communicate with your Matrix Homeserver This page is under development. See the official Synapse documentation for more details about this configuration.", "tokens": 199}
{"title": "Matrix Bridge Configuration", "content": "Configure the Rocket.Chat workspace to link with your Matrix Homeserver. You don\u2019t need to perform any additional federation configuration, as the required fields were automatically populated during the installation of Rocket.Chat and Synapse . Subscribe to any of our premium plans or apply trial on your workspace to unlock all the available federation features. To access this setting, Go to Administration > Workspace > Settings > Federation > Matrix Bridge. Enable federation with Matrix . AppService ID: A unique identifier for the Application Service. It is automatically generated by Rocket.Chat. Homeserver Token: A unique homeserver token to authenticate requests to Application Services . App Service Token: A unique Application Service token to authenticate requests to homeservers. It is automatically generated by Rocket.Chat Homeserver URL: The URL of the Matrix server you want to use as your Proxy homeserver. e.g . http://localhost:8008 Homeserver Domain: Your Matrix homeserver's name, the same as you've configured in your Matrix configuration file. Bridge URL: The URL for the Matrix bridge . It is the location where you want your bridge to run. Ensure the port you use for the bridge is free in your host. We recommend you use a brand new Matrix Homeserver as your Proxy homeserver . We strongly recommend not connecting to this Matrix Homeserver with other Matrix clients. AppService User Localpart: The bot user associated with the application service (Sometimes, it's used to execute some actions) . Maximum number of users when joining a public room in a remote server:  The number of the maximum users when joining a public room in a remote server. Public rooms with more users will be shown in the list of public rooms to join . However, they display a Can't join warning, and users won't be able to join those channels. Increasing the maximum number may consume a large amount of the resources in your infrastructure platform. It is recommended to adhere to the default size . Registration file: Automatically generated and updated by Rocket.Chat based on all the values provided in the above settings (the Application Service is configured using this file)", "tokens": 468}
{"title": "Matrix Bridge ConfigurationFederation User Guide", "content": ". Configuration status: This field displays the configuration status between the homeserver and the appservice as Valid or Invalid. For information, see the Pinging section of the Matrix documentation. Verify configuration: Use this option to verify the federation connection status . The configuration must be valid before you can take further actions. You can check the report of your Matrix server using the Matrix Federation Tester tool. Configuration is verified when federation is enabled, or when the configuration is changed automatically . You can still use this button to force a verification check. If you are on an airgapped workspace, you'll need to host federation tester (https://github .com/matrix-org/matrix-federation-tester) on the same network or Rocket.Chat won't be able to verify the configuration . Use the FEDERATION_TESTER_HOST environment variable to set the endpoint of federation tester (including the http or https part). After the workspace administrator has successfully deployed a federated workspace, users can start communicating with federated users from other servers. This guide is designed to help you connect and communicate with users on other servers through federation. Invite external users: Extend invitations to users from other Matrix servers to collaborate on your workspace. Create federated rooms: Learn how to create federated DMs and channels in your workspace to facilitate cross-platform communication. Search and join public channels on the Matrix network: Join conversations on public channels from other servers on the Matrix network. Assign roles for users in federated rooms: Efficiently manage your federated rooms by assigning specific roles to users. Explore the range of message actions supported within federation for Rocket.Chat: Send and receive messages, including emojis and markdown. Exchange attachments such as files, audio, and video. Send and participate in message threads Quoting messages and reacting to them. Edit and delete your own messages. Mention internal and external users within federated rooms. Receive typing indicators from other users. Assign room roles to users", "tokens": 418}
{"title": "Create Federated Rooms", "content": "To create a federated 1:1 Direct Message with other federated users in your workspace: Create a 1:1 Direct Message. Add the federated user as a member following the syntax to invite external users. Then, click Create. You can also use a slash command to create a 1:1 DM with an external user. The general syntax for the slash command is: Where @username:server.com represents the external user you want to invite, following the syntax to invite external users. Multi Direct Message allows you to send DMs to multiple users simultaneously, whether they are federated or not. To create a federated Multi Direct Message: To create a federated Multi Direct Message: Create a Multi-user Direct Message. Add the members of the DM. Use the syntax to invite external users when adding federated users. Then, click Create. You can also use a slash command to create a 1:M DM with an external user. The general syntax for the slash command is: Where @username:server.com represents the external user you want to invite, following the syntax to invite external users. You can create federated channels having both Rocket.Chat and other federated users. To create a federated channel, Start by creating a channel within your Rocket.Chat workspace. Enable Federated. Add members to your workspace. Use the syntax to invite external users when adding federated users. Then, click Create. Federated Channels cannot be Encrypted, Read-Only, or Broadcast for now. You cannot create Discussions within federated Channels. Whenever your user is invited to participate in a federated room created in an external server, the server name is displayed at the top of that room. This helps the user to differentiate when there are multiple rooms with the same name but all from different servers. Only the name, avatar, and topic of a federated room can be edited after it is created. Rocket.Chat federation does not support deleting rooms and sending invite links for now.", "tokens": 417}
{"title": "Invite External Users to Your Rocket.Chat Server", "content": "To invite an external user to a federated DM or channel, use the following syntax to add them as members when creating the room: @username: The username from the external server (:): A colon character separating the external username and the external server name. server.com.com: The external server name or domain name For example, @test_user:matrix.org. When you successfully invite an external user to a federated room, a local copy of that user is generated within your Rocket.Chat instance. There's no need to use the external user syntax (@username:server.com) to invite them to other rooms in your workspace. Instead, you can simply invite the local user, who appears as a suggestion in the \"Add Members\" input. Once the external user exists and the external server runs, the user will auto-join the room. However, they can choose to decline or accept the invite. Federated users can\u2019t be deleted on workspaces from 6.12.", "tokens": 215}
{"title": "Search and Join Public Channels on the Matrix Network", "content": "You can easily search for and join public channels on the Matrix network from your workspace. This feature expands your ability to collaborate and communicate securely with users from different nodes, encouraging meaningful engagement and knowledge sharing. The global search for federated public channels is available to workspaces subscribed to any of Rocket.Chat's premium plans from version 6.3. To search for and join a federated channel, On the Rocket.Chat menu bar, click the Create New icon. Navigate to Create > Explore and select Search federated rooms. Select a server and search for federated rooms on that server. You can join rooms that have auto-join enabled. Users may encounter difficulty joining a public channel with a large number of members. A temporary fix is to enable faster remote room joins as an administrator. However, it is essential to note that enabling this setting may potentially impact other aspects of the matrix server. You can manage the server list and choose to join federated rooms from each of the Matrix network servers you have enlisted. To add a server, Below the server option dropdown, click Manage server list. Add a server (for example \u2014 community.rs) and click Add. Now, you can search and join public federated channels from that server. To remove a server, Hover over the server. Click the cancel button beside the server name. The default servers cannot be removed. You can only remove the servers that you added.", "tokens": 294}
{"title": "Assign Roles for Users in Federated Rooms", "content": "In Rocket.Chat rooms, users have different roles. However, roles in federated rooms differ slightly from the regular Rocket.Chat room roles. Federated rooms support three roles: Owner: Owners have full control over the room, including inviting users, assigning roles, and managing room activities. Moderator: Moderators can manage user actions and details of the room. They can invite users, assign new moderators, remove users from the room, and edit the room name and topic. User: Users can send and perform message actions in the room. They cannot perform any room management-related tasks. It is the default role for every room member. Matrix uses the concept of power levels to define room roles, with the owner as admin, then the moderator, and the user as default. Rocket.Chat global roles are not supported in federated rooms. It doesn't matter if they are Room Scoped. For rooms created using Element as a Matrix client, only Owners (admins) can assign room roles/permissions. Navigate to Room info > Room settings > Roles & Permission on Element and update the Change permissions room setting to Moderator. Otherwise, Moderators using Rocket.Chat in that room cannot assign roles to other users. Rooms that are created with Element have a set of room permission possibilities. Changing the permissions for event-specific features in a room can lead to unexpected behavior for federated users on Rocket.Chat. The main rules for assigning roles in federated rooms are: Only room owners (admins) can assign roles once the room is created. All users added to federated rooms start with a user role by default. Users with the same role cannot assign each other roles (promote/demote) If a user promotes another user to a role as powerful as their own, such as a room owner appointing another room owner, this action cannot be undone. Users who are demoted cannot regain their previous privileges unless the role is re-assigned by a user with the necessary permission. Other rules, such as room owners being unable to demote themselves if they are the last room owner, follow the same principles as regular Rocket.Chat rooms.", "tokens": 439}
{"title": "Rocket.Chat Basic Federation", "content": "Rocket.Chat basic federation is deprecated as from Rocket.Chat 6.0. We recommend federating using Federation Admin Guide.", "tokens": 31}
{"title": "Rocket.Chat Mobile", "content": "This section covers information on accessing Rocket.Chat workspaces through mobile apps and how to use them. You can download the Rocket.Chat mobile app on Google Play for Android devices and App Store for iOS devices. To create a Rocket .Chat account, you must join an existing workspace. Follow these steps: Launch the Rocket.Chat app on your mobile device. Enter your workspace URL. If you don't have one, you can join our community workspace. Click Create an account . Sign up with any available third-party authentication providers like Google or submit a name, username, email, and password. A confirmation email is sent to your email address. To log in, click\u00a0Login\u00a0or access the URL of your provided workspace . To log in to Rocket.Chat mobile app, follow these steps: Launch the Rocket.Chat app on your mobile device. Enter your workspace URL. Click Login . If you created an account with a third-party authentication app like Google, choose the respective option or provide a username/email, and password combination to log in . You will be prompted to input your email and check your mailbox to verify if you have not verified your email. After verification, you are taken to your workspace's homepage upon successful login", "tokens": 269}
{"title": "Rocket.Chat Mobile", "content": ". The homepage of your workspace has a navigation menu, toolbar, and main body, allowing you to perform different actions. The navigation menu is accessible by selecting the kebab menu in the top-left corner next to your workspace name . The menu displays your profile avatar and name. Additionally, it includes these five action items: Edit Status: Set a custom status. Chats: It displays the rooms you belong to, enabling you to select any and start a conversation . Profile: It takes you to the screen for managing your profile. Display: This takes you to the display settings screen to choose between expanded or condensed messages, the sort order, and the grouping order of your rooms . Settings: It takes you to the app settings screen, such as language, default browser, and theme. The toolbar (action bar) has three action icons: Create New: It is used to create new rooms . Search: It searches your whole workspace for rooms and users. Directory: It is used to browse between all the channels, teams, and users in the workspace. Your workspace's main body includes all the rooms you belong to . You can tap a room from the list to start a conversation or follow up on an existing conversation . On the profile screen, you can perform the following actions: Edit your workspace avatar: You can enter an image URL, take a photo, or upload an image. Edit your name, username, email, nickname, and bio . You can also update your password, log out from other logged-in locations, and delete your account. From the top-right of the Profile screen, select the settings icon to access the Preferences screen", "tokens": 349}
{"title": "Rocket.Chat Mobile", "content": ". You can update the following: Select Notifications to update your notification preferences: Desktop notifications: Select the type of notification for which you want to be notified. These notifications are delivered to the desktop . You can select Default, All messages, Mentions, or Nothing. Push notifications: Select the type of notification for which you want to be notified. These notifications are delivered to the mobile . You can select Default, All messages, Mentions, or Nothing. Troubleshooting: These notifications are delivered to you when the app is not open. Based on your push configuration, you can find the troubleshooting information . In-app message notifications: You can enable or disable the Vibrate option. Email: You can disable email alerts or choose to receive notifications for every mention or DM. You must verify your email address to get notifications . Contact your workspace administrator if you need to confirm your email verification. Also send to channel: Select the Also send to channel behavior option. This gives users the option to send thread messages to a channel . You can select Default (the default workspace setting), Always, or Never. On the Display screen, you can update the following settings: Display: Select the display type of the main body. The Expanded display type displays the latest messages in the rooms . The Condensed display type displays only the room name. You can also enable or disable the room avatars. Sort by: Sort the order in which the rooms are displayed. You can order by Activity or by Name", "tokens": 318}
{"title": "Rocket.Chat Mobile", "content": ". Group by: Group how the rooms are displayed according to the Unread on top, Favorites, and Types options. The Rocket.Chat mobile app allows you to configure different app features, such as language, theme, and more, in the settings screen . Contact Us: Email Rocket.Chat support team for your worries or inquiries. It redirects you to your default email client. Language: Set your preferred language from a range of Rocket.Chat supported languages. Review this app: Review Rocket .Chat on either Google Play Store or Apple App Store. Depending device's operating system, you are taken to the respective store. Share this app: Share the Rocket .Chat app link from the store to others so they can visit the link to install the mobile app. Default browser: Select the browser where the links in Rocket.Chat should be opened by default. You also have an in-app browser option . Theme: Choose between using your device's default or a light or dark theme. Media auto-download: Select the auto-download options for images, videos, and audio. You can choose Wi-Fi and mobile data, Wi-Fi, or Never . Security and Privacy: Modify security and privacy settings. You can reset your end-to-end encryption key, set a screen lock for devices that support biometrics, log analytics events, and send crash reports to our backend . Crash reports help us track and solve bugs. We never track the content of your chats. The crash report and analytics events contain only the relevant information for us to identify and fix issues. License: Open and read Rocket.Chat mobile's MIT License . Version: Displays the version of Rocket.Chat mobile app that you are using. Workspace version: Displays the current Rocket.Chat workspace version. Clear local server cache: Delete cached information from your workspace. Logout: Logout from your workspace.", "tokens": 397}
{"title": "Create and Add Workspaces on Rocket.Chat MobileCreate Rooms on Rocket.Chat Mobile", "content": "To create a new workspace, follow these steps: Click the title of your current workspace. Click Create a new workspace. You are redirected to Rocket.Chat Cloud. Follow Create your new cloud account to create a new workspace. To add a workspace that you are already part of, follow these steps: Click the title of your current workspace. Click Add workspace. Enter workspace URL. If you have an SSL certificate on your device, select Apply your certificate. For details, see Supporting SSL for development on Rocket.Chat. Click Connect to log in to the workspace. Create different types of rooms from Rocket.Chat mobile app. To create a Channel or Team on Rocket.Chat mobile app, follow these steps: Click  Create New icon on the navigation menu. Click Channel or Team. Search and select the users you want to add to the room. You can also skip this step and add the members later. Provide a name and choose if the room is public or private. Update your preferred privacy and encryption settings for the channel. Click Create channel or Create team. To create a Discussion on Rocket.Chat mobile app, follow these steps: ClickCreate New icon on the navigation menu. Select the name of the parent channel or group of the discussion. Enter the name of the discussion. Search and select the users you want to add to the discussion. Click Create. To create a Direct Message on Rocket.Chat mobile app, follow these steps: ClickCreate New icon on the navigation menu. Click Direct Message. Search and select the users you want to start a DM with. Click Create.", "tokens": 338}
{"title": "Messages and Threads on MobileConfigure Push Notifications", "content": "Rocket.Chat has different types of messages you can send in a room. Text: In a room, type your message in the New Message input box and click Send. Photos and Videos: To use your camera, click the +plus icon in the room and select Take a photo or Take a video. After taking the photo or video, click use photo or use video to send them to the chat. For photos, you can edit the picture you took before sending it. Gallery: To send a video or image from your device, click the +plus icon in the room and select Choose from Library. Select the video or image. Then, click Send. You can add a message before sending it. Files: To send videos, photos, and any other type of file, click the +plus icon in the room and select Choose file. Select the file and attach any message you want to it. Then, click Send. To create a thread, Long-press the message you'd like to reply to. Select Reply in thread. Type your reply. Check the Also send to the channel box below your message if you want to return your response to the channel. Click Send. There are two ways to set up push notifications with Rocket.Chat: Push gateway Self-configured Note that if you are using a firewall, you need to whitelist the gateway.rocket.chat URL. For a complete list of URLs, see Firewall Configuration . Select this option if you and your users intend to use the official Rocket.Chat mobile applications. We set up a push gateway holding our keys to enable push alerts to be received on our official mobile application by any server . Doing this safeguards the secret keys required to transmit notifications to you and your users via Apple (APN) and Google (FCM) systems. See the Push workspace settings to learn more . You'll have to white-label your app if you don't want to use our push gateway. See the Mobile App White Labeling guide. The push notification workflow for Rocket .Chat is designed to be fast, reliable, and flexible, allowing users to stay informed and engaged with their chat messages and channels even when they're not actively using the app. The flowchart below describes the workflow of Rocket", "tokens": 470}
{"title": "Configure Push Notifications", "content": ".Chat notifications from when a message is sent to when its notification is delivered. Here are some potential causes to watch out for if you notice that notifications are not being delivered. The notification will not be sent if: The room notifications are disabled . The user ignores the sender. @here, @all notifications are disabled, and the message is @here, @all. The user is not active, or their status is set to Busy. The user notification is not connected to Desktop or Mobile . The user settings to always display mobile notifications is not ON. The user room preference is set to Nothing, or use a default preference set to Nothing. The room members count is bigger than the limit for disabling notifications . Notifications are determined based on server settings, user preferences, and subscriptions. User status (online, away, offline)is no longer considered for email and mobile push notifications . Instead, these notifications go to a new queue following these rules: When the user is online, the notification is scheduled to be sent in 120 seconds . When the user is away, the notification is scheduled to be sent in 120 seconds minus the amount of time he is away. When the user is offline, the notification is sent immediately . When the user reads a channel, all the notifications for that user are removed (clears the queue) . When a notification is processed to be sent to a user, and there are other scheduled notifications: All scheduled notifications for the user are now rescheduled to the current time. The current notification goes back to the queue to be processed ordered by creation date . I am getting, \"Server notifications are misconfigured!\"", "tokens": 353}
{"title": "Push Notifications User Guide", "content": "To enable push notifications, Always confirm that your mobile device settings allow the Rocket.Chat app to show notifications. Click your avatar from the sidebar to access the user panel. Select My Account. Click Preferences, then select Notifications. Select the type of messages you want to Send Push Notifications For. Click Save Changes. Learn about Idle Time Limit and enable Auto-away from User Presence.", "tokens": 83}
{"title": "Manage Your Account Settings", "content": "In this document, learn how to access and manage your Rocket.Chat account settings through the browser, desktop, and mobile apps. Login to your Rocket.Chat server with a valid username and password. Click your avatar . Under Account, select any of the settings to access the account settings: Profile, Preferences, Accessibility, and Appearance . On the left-hand pane, you can find the following tabs: Profile Preferences Security Integrations Personal Access Tokens Omnichannel Feature Preview Accessibility and appearance Manage devices Updating account settings is specific to your workspace and does not impact your account on other workspaces . Click Save changes for your updates to take effect. Let's look at the settings for each tab in detail. Before you proceed, keep in mind that the settings displayed depend on your workspace account settings configured by the administrator . See Accounts to learn about the settings. You can update the following settings for your Profile: Profile Picture: You can upload a picture or enter a URL to change the avatar. Generally, the avatar is the first letter of your first name . Name and Username Status message Nickname Bio Email Click Logout from other Logged In Locations to log out of your account from other clients. Click Delete my account to delete your account from this workspace . On the Preferences tab, you can configure and set your preferences for your account on the workspace. These preferences include the following: Language: Set the language to use for the Rocket.Chat user interface. Rocket .Chat determines the language displayed in your workspace based on the following priority: User preference: This is the language you choose for your account under the user preferences. It takes priority over all other options . Browser language: If you haven't selected a language under user preferences, Rocket.Chat will use the language configured in your web browser. Server language: This is the default language set by the Rocket.Chat workspace administrator . It's only used as a last resort if neither your user preference nor browser language is available. This displays a list of all the actions for which you selected Don\u2019t ask me again", "tokens": 437}
{"title": "Manage Your Account Settings", "content": ". You can choose to set your status automatically to active and away based on your activity. Enable Auto-Away: Enable the auto-away functionality, which changes the status to away after an idle period . When you are active again, the status is automatically set to active. Idle time limit: Set the time in seconds to wait before the status changes to away. You do not receive push notifications on your mobile device when using your web or desktop client . If you are idle for 60 seconds, you will be considered away, and all your mentions will be pushed to your mobile client after 60 seconds", "tokens": 122}
{"title": "Manage Your Account Settings", "content": ". However, if you disable auto-away, you won't receive any push notifications unless your screen goes off due to your computer settings. Select the general notification types and preferences . Desktop Notifications: Click the Test Desktop Notification to see how notifications will be displayed on the desktop. If you are using a web browser, ensure the web notifications are enabled . You can check this by clicking the settings icon next to the URL in the browser\u2019s address bar. Require Interaction to Dismiss Desktop Notification: When enabled, notifications must be attended to before they can be dismissed . They will remain in the notification panel until they are visited. Show Desktop Notifications For: Select the type of messages that should trigger desktop or browser notifications. Upon starting Rocket.Chat in a browser, you are asked to allow desktop notifications. The notification options are as follows: Default: This selects the default user preferences set in the workspace account settings by the workspace admin. All messages: You will receive notifications for all messages . Mentions: You will receive notifications only when you are mentioned in any room. Nothing: You do not receive any notifications. Send Push Notifications For: Select the type of messages that should trigger push notifications for the mobile app . The options are as follows: All messages: You will receive notifications for all messages. Mentions: You will receive notifications only when you are mentioned in any room . Nothing: You do not receive any notifications Offline Email Notifications: Set the type of message notifications you want to receive by email. These notifications are only sent to your email address if you are offline. The options are as follows: Default: This selects the default user preferences set in the workspace account settings by the workspace admin. Every Mention/DM: You will receive email notifications for every mention and DM. Disabled: Email notifications are disabled . Receive login detection emails: Enable this option to get an email notification whenever a login is made to your account. Mentions in rooms include using @username, @here, and @all. To receive email notifications, you must verify your email address . You can do this by going to the Profile tab and clicking Resend verification mail. If you don\u2019t see this option, contact your workspace administrator for assistance in verifying your email. Select how you want the messages and media to be displayed", "tokens": 500}
{"title": "Manage Your Account Settings", "content": ". Unread Tray Icon Alert: Enable this option to highlight unread messages. Always show thread replies in the main channel: When enabled, all replies under a thread will also be displayed directly in the main room . When disabled, they're displayed based on the sender's choice . Also send thread messages to channel behavior: When replying to a thread, select how your replies should be sent to the room: Selected for the first reply, unselected for the remaining: The first reply to the thread is displayed in the main room, while subsequent replies are not . Selected by default: The Also send to channel checkbox is always selected when replying to a thread. When the reply is sent, it's also displayed in the main room . Unselected by default: The Also send to channel checkbox is not selected when replying to a thread, and the reply is not displayed in the main room when it is sent . When replying to a thread, you can select or unselect the Also send to channel checkbox based on your preference. Use Emojis: Enable this to allow the use of emojis . Convert ASCII to Emoji: Enable this option to convert ASCII characters to emojis. Auto Load Images: Enable this option to autoload images and avoid clicking on them to preview. Save Mobile Bandwidth: Saves mobile data when the app is open . Commonly known as data saver. Collapse embedded media by default: Enable this option to collapse media such as link previews, screenshots, videos, and audio messages . Hide Contextual Bar by clicking outside of it: Automatically closes the right sidebar in rooms when you click outside them. Display Avatars: Enable this option to view users\u2019 avatars. If disabled, you can only view the usernames . Enter key behavior: Configure what the Enter key does . Normal mode (send message with Enter) Alternative mode (send message with Enter + Ctrl/Alt/Shift/CMD) Desktop mode (only sends messages with Enter on desktop) Highlight words: Specify a comma-separated list of words or phrases to trigger", "tokens": 449}
{"title": "Manage Your Account Settings", "content": "notifications when mentioned by anyone in public or private channels of which you are a member . Highlight words are not case-sensitive. Configure audio and notification sounds. Master volume: Control the volume for all sounds coming from your workspace. Notification volume: Adjust the volume for message notifications, whether the workspace is open or minimized . Caller ringer volume: Set the volume for all incoming voice call notifications. New Room Notification: Select the sound to play when added to a new room. New Message Notification: Select the sound to play for every new message . Mute Focused Conversations: When enabled, open and active rooms will not create notifications. You can download your personal data on the workspace as HTML or export it as JSON . When you click any of the download options, you'll be notified that your data file is being generated and will receive a link to download it via email once it's ready", "tokens": 193}
{"title": "Manage Your Account Settings", "content": ". Additionally, you're informed of how many other operations are queued ahead of yours. Refer to the User Data Download Settings to configure this feature appropriately. You can update the following account security settings depending on your workspace settings . This tab is displayed if the settings to change passwords in Accounts are enabled. Update your password and confirm the new password. Then, click Save Changes. This tab is displayed if 2FA is enabled in the workspace settings . Refer to the Two Factor Authentication User Guide to comprehensively understand two-factor authentication in Rocket.Chat. This tab is displayed if E2E encryption is enabled in the workspace settings. You can create encrypted private groups and direct messages . You may also update existing private groups or DMs to encrypted. It is end-to-end encryption, so the key to encode/decode your messages isn't saved on the server. For that reason, you need to store your password somewhere safe . You must enter it on other devices where you want to use E2E encryption. To create an encryption password, Enter a new encryption password. Confirm the new encryption password and click Save Changes . You can't set a password for your encryption key if your private key is not present in the workspace. To set a new password, you must load your private key using your existing password or use a workspace where the key has already been loaded . This option will remove your current E2E key and log you out. A new key will be generated upon logging back in, and you'll regain access to any encrypted rooms where at least one member is online . If no members are online, access will be restored once a member logs in. For users with passwords: Users with a password will be prompted to enter it before resetting the E2E key . For SSO users (no password): Users who log in through Single Sign-On (SSO) do not have a password. They can reset their E2EE key without being prompted to insert a password . For each of these different users, if 2FA is enabled, you may be required to enter the TOTP code sent to your email or from your authentication app. Refer to the E2E Encryption user guide for more details", "tokens": 474}
{"title": "Manage Your Account Settings", "content": ". WebDAV Accounts: Select a webdav account for integrations. Integration is only available if enabled by the workspace administration in the Webdav Integration. To make API calls easily, you can create personalized access tokens . Create a Personal Access Token To create a personal access token, Enter the token name and click Add . You can configure whether or not to require 2FA when using this token by selecting between the Ignore Two Factor Authentication and Require Two Factor Authentication drop-down options. Enter your password or 2FA code to Verify. Your access token is generated successfully . It displays Your User Id and an Access Token. Remember to store the user Id and access token in a safe place as you can only view it once . Delete Personal Access Token To delete an access token, From the Personal Access Token list, click the Delete icon against the token you choose to delete. Then, click Delete . Regenerate Personal Access Token To regenerate an existing access token, From the Personal Access Token list, click the refresh icon against the token you choose to regenerate. Then, click Regenerate . Hide conversation after closing: Redirect agents to the home page after closing a conversation. Conversational Transcript Export chat transcript as PDF: Always export the transcript as PDF at the end of conversations . Send chat transcript via email: Always send the transcript to contacts at the end of the conversations. The Manage Devices menu lets you monitor and log out of your devices remotely . Here, you can see a list of all the devices you\u2019ve used to log into your Rocket.Chat workspace. Click on any device to view the client, device operating system, your last login activity, and device ID . To log out of a device, select the device you want to disconnect and then click Logout. Your device will be logged out from the workspace, and the current session will end. You can log back into your account whenever you need it . To learn about the accessibility and appearance settings and the feature preview options, see the next topics.", "tokens": 430}
{"title": "Accessibility and Appearance", "content": "Rocket.Chat is dedicated to providing an accessible and customizable user experience. The accessibility and appearance cater to diverse needs, whether prioritizing style, readability, or specific visual requirements, allowing users to personalize their experience. To access this menu, Navigate to Avatar Menu > Account > Accessibility and Appearance The theme offers a visually comfortable experience that aligns with individual tastes and work environments, enhancing aesthetics and accessibility. You can choose from: Light: The light theme promotes clarity and visibility if you like a bright and vibrant experience. It's ideal for well-lit environments. Dark: Better for low-light settings and reduces eye strain during extended usage. Enhances focus and readability. High contrast (light): For maximum accessibility, it provides the most optimal viewing experience for all users. It's especially beneficial for visually impaired people, emphasizing the distinction between elements enhancing readability and usability. Match system: Automatically configured according to your system appearance settings. For customizing your messaging experience, we've incorporated a suite of customization options to align with your preferences. Font size: Optimize your reading experience by adjusting the font size to your specifications. Whether working on a high-resolution monitor or a smaller device, this setting guarantees that messages are presented in a font size that accommodates your preferences. Mentions with @ symbol: Mentions notify and highlight messages for groups or specific users, facilitating targeted communication. Screen readers benefit from having explicit @ symbol in front of mentions so that the user can interpret them easily. Time format: Precision matters, especially when it comes to time. Whether you prefer a 12-hour or 24-hour clock, ensure accurate tracking of conversations in a format that aligns with your workflow. Show usernames: Decide whether usernames are displayed or hidden, fostering a cleaner interface without compromising your ability to identify contributors during crucial communication. Show roles: Personalize your view by displaying or concealing user roles, streamlining your interface for optimal information retention without unnecessary visual clutter.", "tokens": 413}
{"title": "Manage Your Account Security", "content": "Rocket.Chat Security Bundle is a set of security-focused features and tools that enhance the security of your Rocket.Chat workspace and users. These features are intended to help organizations prevent unauthorized access to sensitive data, protect against data breaches and other security threats, and provide greater visibility into their security posture, meeting their security and compliance requirements. The Rocket.Chat Security Bundle includes the following features and tools: Data Loss Prevention(DLP) app: Manage the sharing of sensitive data on your workspace. Open-source Antivirus app: Secure file sharing within your workspace. E2E Encryption: Secure the confidentiality of your communication with encryption. Two Factor Authentication(2FA): Enforce authentication and account access with 2FA.", "tokens": 151}
{"title": "Data Loss Prevention User Guide", "content": "In its simplest terms, data loss prevention (DLP) is a security mechanism that helps ensure that sensitive data is not unduly shared, misused, lost, or accessed by unauthorized users. Rocket.Chat's DLP App includes several controls to prevent data loss, such as restricting access to sensitive information, monitoring data transfers, and detecting and blocking potentially dangerous activities. If there is any Rocket.Chat room, where sensitive information like credit card details, phone numbers, and IP addresses is being exchanged between users, you can prevent or restrict the sharing of this sensitive information using the DLP app. To get the DLP app functioning on your workspace, you need the workspace administrator to install and configure the DLP app from the Rocket.Chat marketplace. Data Loss Prevention (DLP) App With the app installed and fully configured, the defined rulesets take effect. If a user wants to share credit card details with another user in a room, The DLP app picks up this message and replaces the sensitive data with ###. Clicking on More Info details the message and its current status. The app's bot user dlp.bot notifies the specified channel about sharing sensitive details. Channel Moderators can Accept or Reject the message in the Moderator Channel from being sent. Approving a message allows it to go through. It is received and visible in the room. Rejecting a message prevents it from reaching its destination, and the status gets updated to Rejected.", "tokens": 303}
{"title": "End-to-End Encryption User Guide", "content": "End-to-end encryption (E2EE) is a secure communication method in which only the senders and recipients can encrypt and decrypt the messages and files. Rocket.Chat provides an additional layer of security with the E2EE feature . To use E2E encryption, your workspace administrator must enable the E2E Encryption feature in the workspace settings. IMPORTANT: E2E encryption functionality includes notable restrictions that workspace owners should carefully consider before activating this feature . Here are what to keep in mind: Encrypted messages of encrypted rooms will not be found by search operations. Bots may not be able to see encrypted messages until they implement support for it . Spotted a bug? Help us improve by reporting it directly to Rocket.Chat! Once E2E is enabled in your workspace, a Save your encryption password banner will appear at the top of the screen . To save this password, Click the Save your encryption password banner. It displays a modal with the encryption password. Click copy password and save the password securely. Finally, click on the I have Saved my Password button to confirm . The encryption password is displayed only once. Therefore, it is essential to save it securely as you will require it to decode or encode encrypted messages on your workspace from any client. After this, you can create encrypted rooms and communicate securely with the participants . Now, whenever you log in to your account, an\u00a0Enter E2E password\u00a0banner appears at the top of your workspace . To access your encrypted rooms and messages, enter your E2E encryption password by following these steps: Click on the Enter E2E password banner. A modal is displayed, prompting you to enter your encryption password. Enter the password you saved earlier . Click the Decode Key button. E2E is only available for DMs, private channels, and private teams. Enable the\u00a0Encrypted\u00a0option while creating the room to create an encrypted channel or team. Rocket", "tokens": 429}
{"title": "End-to-End Encryption User Guide", "content": ".Chat allows end users to export conversations from encrypted rooms directly from the client. To ensure privacy, only users with decryption rights can generate these exports . Steps to export messages Click the hamburger menu (three horizontal lines) in the encrypted room and select Export messages Choose the specific messages you want to include in the export Choose the export options: Method: For example, Download file Output format: Such as JSON Once satisfied with your selections, click Download Check your computer\u2019s default download location for the exported messages in the selected format This feature ensures secure access to message exports while safeguarding user privacy . To enable/disable E2E in an existing private room, Ensure you have entered your E2E Encryption password. Click the kebab menu from the room header. Select Enable E2E or Disable E2E . To set a new encryption password or reset your E2E key, see Account - Security. You can only change your encryption password in a workspace where you have already entered the existing password . Explore the E2EE specification to gain a deeper understanding of Rocket.Chat\u2019s technical implementation of end-to-end encryption. How can I tell if the room is encrypted? How can I tell if a message is encrypted?", "tokens": 271}
{"title": "Two Factor Authentication User Guide", "content": "With the ability to use Rocket.Chat on multiple platforms, you carry the risk of exposing your account details. Rocket .Chat\u2019s two-factor authentication (2FA) feature provides additional protection for workspace users by requiring them to provide two forms of authentication before accessing their accounts. Before you can use 2FA, workspace administrators must enable it for the workspace users . Admins can access this setting from Administration > Workspace > Settings > Accounts > Two Factor Authentication. This section is for workspace users who want to enable or disable 2FA for their own accounts. The two options for 2FA in Rocket .Chat are: Two factor authentication via TOTP: Requires a code from an authenticator app (e.g., Google Authenticator, Authy, Duo) Two factor authentication via Email: Requires a code sent to your registered email . Depending on your workspace configuration, you can select one or both options. If you are unsure, contact your workspace administrator. Before beginning the setup, download any authenticator app of your choice . Some popular authenticators include Google Authenticator, Authy, and Duo. Click your avatar and select My Account. Go to Security > Two Factor Authentication. Click Enable two-factor authentication via TOTP . Scan the QR code provided with your authenticator app or set it up manually using the authentication keys. Add the code generated by the authenticator app (Rocket.Chat: <username>) and click Verify . Your account will be added to the authenticator app. A list of backup codes is provided in your Rocket.Chat account. Save them securely in case you lose access to your authenticator app. Now, the 2FA setup is complete . You will be prompted to enter the 2FA code when logging in or performing certain workspace actions according to the workspace settings. TOTP is a Time-based One-Time Password. It is a very common form of 2FA . TOTP works by generating a unique numeric password with a standardized algorithm. Time-based passwords are available and provide user-friendly, increased account security when used as a second factor. This method sends temporary codes to your email ID", "tokens": 449}
{"title": "Two Factor Authentication User GuideAccounts", "content": ". Click your avatar and select My Account. Go to Security > Two Factor Authentication. Click Enable Two-factor authentication via Email . To log in to your account, you will need to enter your username, password, and authentication code you receive in your email inbox. To disable the 2FA via TOTP, Click your avatar and select My Account . Go to Security > Two Factor Authentication. Click the Disable Two-factor authentication via TOTP button. Enter the six-digit TOTP code from your authenticator app and click Verify . To disable the 2FA via email, Click your avatar and select My Account. Go to Security > Two Factor Authentication. Click the Disable Two-factor authentication via Email button. Enter the six-digit authentication code sent to your email and click Verify . Now, 2FA has been disabled on your account. You can modify the workspace member account settings by navigating to Administration > Workspace > Settings > Accounts. Below are the basic account configuration settings. Most of the settings can be either enabled or disabled", "tokens": 219}
{"title": "Accounts", "content": ". Allow Anonymous Read: If enabled, people can use the chat without creating an account or logging in. Anonymous users are only allowed to read messages on public channels. Allow Anonymous Write: If enabled, anonymous users can post messages on public channels . Allow users to Delete Own Account: If enabled, users can delete their accounts. When a user is deleted, all their messages are deleted too. Allow User Profile Change: If disabled, blocks users from changing the information on their profile . Allow User Avatar Change: If disabled, users are blocked from changing their avatar. Allow Name Change: If disabled, users are blocked from changing their names. Allow Custom Status Message: Setting this to true allows users to create a custom status message . Allow Username Change: Setting this to false blocks users from changing their usernames. Allow Email Change: Setting this to false blocks users from changing their email. Allow Password Change: Setting this to false blocks users from changing their password . Allow Password Change for OAuth Users: Setting this to false blocks OAuth users from changing their password. Allow Email Notifications: Setting this to true enables the users to receive email notifications. Allow Feature Preview: If enabled, grants access to unreleased developmental features . Custom Fields to Show in User Info: Other fields to be displayed in the user info. Refer to Custom Fields. Login Expiration in Days: The number of days after which a user is logged out if they are inactive . Placeholder for Email or Username Login Field: This changes the placeholder for the email or username field on the login screen. Placeholder for Password Login Field: This changes the placeholder for the password field on the login screen . Confirm Placeholder for Password Login Field: This confirms the placeholder for the password field on the login screen. Forget user session on window close: This logs out users when they close the window running Rocket.Chat . Fields to Consider in Search: Specifies the fields to be considered when searching for users. The default is username, name, bio, and nickname. Default Directory Listing: This sets the default directory to be listed on your workspace . Allow Invisible Status Option: Setting this to true allows users to set the invisible status. Reset defaults: Clicking the button returns configurations to their default value. Rocket", "tokens": 474}
{"title": "Accounts", "content": ".Chat\u2019s two-factor authentication (2FA) feature provides additional protection for workspace users by requiring them to provide additional forms of authentication before accessing their accounts. With 2FA enabled, users logging into Rocket .Chat must provide their username and password and a unique one-time code, either generated by an authenticator app or sent to their email. This code is unique to each login attempt and provides an extra layer of security, as it cannot be reused or guessed . Enable Two Factor Authentication: Enable or disable 2FA for the workspace users. Maximum Delta: This field determines how many tokens are valid at any given time . Tokens are generated every 30 seconds and are valid for (30 * Maximum Delta) seconds. For example, with the Maximum Delta value set to 10, each token can be used up to 300 seconds before or after its timestamp", "tokens": 182}
{"title": "Accounts", "content": ". This is useful when the client's clock is not properly synced with the server. Enable Two-Factor Authentication via TOTP: Set whether or not users can set up two-factor authentication with authentication apps like Google Authenticator . Enable Two Factor Authentication via Email: Set whether users receive emails with a temporary code to log in or to authorize certain actions. Make two factor via email available for oAuth users: When enabled, users signing in through OAuth providers (e.g ., GitHub, Google) will receive an email with a temporary code to authorize actions such as logging in, resetting E2E keys, and more . Auto opt in new users for Two Factor via Email: When enabled, users have 2FA via email enabled by default. This can be disabled on their profile page . Time to expire the code sent via email in seconds: Set the time (in seconds) for how long the 2FA code sent to a user's email is valid . Maximum Invalid Email OTP Codes Allowed: Set the maximum number of invalid email OTP codes before auto-generating a new code . Remember Two Factor for (seconds): Set the number of seconds users won't be able to request an authorization code if one has already been provided . Enforce password fallback: Enabling this setting forces users to enter their passwords to perform some important workspace actions, such as updating certain configurations. By default, this setting is enabled if no other 2FA method is enabled . By default, 2FA is enabled with the email you used for signing up on the workspace. To learn how to use the 2FA feature in your account, see the 2FA user guide . If you need to reset 2FA TOTP for a user\u2019s account, refer to the Managing users document. In the Enterprise plan, you can force certain user roles to use 2FA to improve security . Go to Administration > Workspace > Permissions and edit the role. Default user preferences for notifications are universal for all the users in your workspace until a user changes it for themselves", "tokens": 431}
{"title": "Accounts", "content": ". Enable Auto-Away: When set to true, it automatically changes the user's status to Away when they exit Rocket.Chat. Idle Time Limit: Sets how long in milliseconds for a user to go idle . Require Interaction to Dismiss Desktop Notification: Enabling this sets the notification prompt active until the User interacts with it. Desktop Notifications Default Alert: This lets you set when the desktop notification alert is triggered. The default is All messages . This only concerns the groups and channels the user belongs to. Push Notifications Default Alert: This setting allows users to choose whether to receive push notifications. The default is All messages . Unread Tray Icon Alert: Disabling this stops the unread tray icon from displaying. Use Emojis: Setting this to false disables the use of emojis. Convert ASCII to Emoji: ASCII characters are converted to emojis when this setting is enabled . Auto Load Images: Turning this off prevents images from auto-loading when a room/chat is opened. Save Mobile Bandwidth: When enabled, acts like a data saver. Collapse Embedded Media by Default: Setting this to true causes embedded media cards to collapse . Hide Usernames: When enabled, it'll hide usernames in conversation rooms. Hide Roles: When set to true, user roles like admin and moderator are not shown in chat rooms . Hide Contextual Bar by clicking outside of it: Enabling this hides the right sidebar. Display Avatars: Setting this to true displays the user's avatars in chat. Group by Type: This lets you group conversations by type . Theme Appearance: This allows you to set the theme of the workspace. The default is Match System, which matches your device\u2019s theme. Sidebar Channel List Mode: This mode lets you choose the sidebar size, from Extended to Medium to Condensed . Display Avatars in Sidebar: Disabling this disables avatars from showing in the sidebar. Unread on top: Turning this on displays all unread messages at the top. Sort by: This lets you sort the list by user activity or alphabetical order . Always show thread replies in main channel: If enabled, show thread messages in the room; otherwise, let the user decide on the display. Also send thread message to channel behavior: Select the behavior of messages sent in a thread", "tokens": 494}
{"title": "Accounts", "content": ". Group favorites: Setting this to false disables favoriting groups. Enter key Behavior: Lets you configure the action of the Enter key . The available options are: Normal mode (send with Enter), Alternative mode (send with Enter+Ctrl/Alt/Shift/CMD), and Desktop mode (only sends with enter on desktop) Offline Email Notifications: Lets you set when users should receive email notifications . The available options are Disabled and Every Mention/DM. New Room Notification: Configures the notification when a new room is created/joined. New Message Notification: Lets you select the notification for new messages. The default options are None and Default . Mute-Focused Conversations: When set to true, no notifications are sent for focused/open conversations. Notifications sound volume: Lets you set the notification volume . Send chat transcript via email: If enabled, the transcript is sent to contacts at the end of the conversations. Notify calendar events: If enabled, notify users of calendar events. Enable mobile ringing: Allows ringing on mobile for new calls . Sidebar sections order: As an admin, you can select and change the order of room categories displayed on the left-hand sidebar . The available options are: Incoming calls Queued chats Chats in progress On hold Unread Favorites Teams Discussions Channels Direct messages Conversations Accounts Default User Preferences Features Preview: Shows all the feature preview settings selected by the user", "tokens": 302}
{"title": "Accounts", "content": ". Resize Avatar: Set this to true to resize user avatars to a predefined size. This feature requires ImageMagick or GraphicsMagick installed on your server. Avatar Size: The desired size after the avatar resizing . The unit is pixels (px). Avatar External Provider URL: Lets you set a URL from which avatars can be loaded. Example: https://acme.com/api/v1/{username} . Room Avatar External Provider URL: The URL where the room avatar is loaded from. Avatar cache time: This sets how long in milliseconds users avatar is to be cached . Block Unauthenticated Access to Avatars: When enabled, this feature restricts unauthenticated users from accessing avatars. Set Default Avatar: If this setting is set to true, Rocket .Chat tries to find a default avatar based on OAuth Account or Gravatar. Enabled: Enable this option to authenticate users using your own login page instead of Rocket.Chat's login page via the iframe integration . Iframe URL: Enter the URL of the page you want to show as the login page of your Rocket.Chat instance. The login page then communicates back to Rocket.Chat using postMessage API . The Login page can be created in any programming language and/or web framework. Setting API URL and API Method parameters enables Rocket.Chat to call the third-party system to either log in or verify if the user is already logged in . API URL: Enter the URL, which refers to the endpoint on the third-party system. This checks if the user is already logged in to that system. API Method: Specify the API (POST) method Rocket .Chat will use to submit information to the API URL. If the user has already logged into the third-party system, the API URL should communicate to Rocket .Chat and return a JSON object containing either a token or loginToken property, otherwise (if the user is not already logged in) the API URL should return an empty body with the status 401", "tokens": 456}
{"title": "Accounts", "content": ". Enable collect login data: When set to true, it allows for collecting failed login attempts. Block failed login attempts by Username: Blocks failed login attempts with username . Amount of failed attempts before blocking user: This option lets you set the number of failed login attempts before blocking the user. Duration of user block (in minutes): Sets in minutes how long to unblock a user after blocking . Block failed login attempts by IP: Enables the blocking of IP addresses after failed login attempts. Amount of failed attempts before blocking IP address: This lets you set the number of failed login attempts before blocking an IP address . Duration of IP address block (in minutes): Sets how long to unblock a blocked IP. IP Whitelist: Takes in a list of comma-separated IP addresses to be whitelisted . Notify of failed login attempts: When set to true, a channel is notified of all failed login attempts. Channel to send the notifications: Specifies the channel to which the failed login attempts are sent . We recommend you create the channel first without the # symbol in the channel name. Log (on console) failed login attempts: Logs all failed login attempts on the console . Show Username on failed login attempts logs: When enabled, usernames are shown on the console for all failed login attempts. Show UserAgent on failed login attempts logs: Shows the user agent on failed login attempts when enabled . Show Client IP on failed login attempts logs: When set to true, it shows the client IP address on the console on any failed login attempt. Show Forwarded IP on failed login attempts logs: Show the forwarded IP on any failed login attempts", "tokens": 359}
{"title": "Accounts", "content": ". Enable Password History: When enabled, users won't be able to update their passwords to some of their most recently used passwords. Password History Length: This lets you set number of most recently used passwords to prevent users from reusing them . Enable Password Policy: When this is set to true, new passwords must follow the corresponding configured policies. Minimum Length: Ensures that passwords must have at least this amount of characters. Use -1 to disable . Maximum Length: Ensures that passwords do not have more than this amount of characters. Use -1 to disable. Forbid Repeating Characters: Ensures passwords do not contain the same character repeating next to each other . Max Repeating Characters: Set the number of times a character can be repeated before it is not allowed. At Least One Lowercase: Enforce that a password contains at least one lowercase character . At Least One Uppercase: Enforce that a password contains at least one uppercase character. At Least One Number: Enforce that a password contains at least one numerical character . At Least One Symbol: Enforce that a password contains at least one special character. Send email to user when user is activated: When enabled, an email is sent to the user after their account has been activated . Send email to user when user is deactivated: If set to true, users get an email after account deactivation. Default username prefix suggestion: This is the prefix that is suggested when a user is creating a username. Default is user . Require Name For Signup: If this is set to true, the name of the user is required to create an account. Require Password Confirmation: If this is set to true, the user has to input their password twice when registering", "tokens": 353}
{"title": "Accounts", "content": ". Only allow verified users to login: Enable this option only to allow the verified users only to log in. Mark Email for External Accounts Verified: If this is set to true, users has to confirm their email via a confirmation email sent to their email . (For this setting to work, the SMTP settings must be already set up . See Email Configuration) Manually Approve New Users: If this is set to true, new users have to wait for a user with the view-user-administration permission to approve their account before using Rocket.Chat . Allowed Domains List: This blocks emails with domains different from the ones on the list. Blocked Domains List: This blocks emails with domains that are on the list. Blocked Username List: This blocks usernames that are on the list . Use Default Blocked Domains List: Blocks the email domains listed here. Use DNS Domain Check: When this is set to true, users cannot register with invalid domains. Registration Form: This changes how the registration form is presented . Currently, there are 3 options: Public: The form is made public, and anyone can access it. Disabled: The form is disabled, and users can not register through it. Secret URL: The form is only accessible using a specific URL . Registration Form Secret URL: String to be added to the secret URL. A random string is recommended for that. Example: https://open.rocket.chat/register/[secret_hash].You can copy this URL to share the form with anyone . Invite URL Type: URL type can either be direct or through a proxy. Registration Form Link Replacement Text: Text to be shown in place of the registration form when the registration form is disabled . Registration with Authentication Services: Set this to true to allow registration with third-party authentication services like Google or Twitter. Default Roles for Authentication Services: Default roles users are given when registering through authentication services . Default Roles for Users: Default roles users are given when registering through manual registration. Password Reset: Set this to true to allow users to reset their password. Custom Fields: A valid JSON key-value pairs of additional fields to be added during user registration .", "tokens": 448}
{"title": "Configure Custom Fields for Users", "content": "You can set custom fields for specific users while registering or updating user information. For example, you can add fields like address or employee ID. You may need some basic understanding of Javascript and Rocket .Chat's internal working structure is required to set other custom fields than those in the example below. A more user-friendly interface is planned for the future. To set custom fields, go to Administration > Workspace > Settings > Accounts > Registration > Custom Fields . Configure the custom fields using a JSON object containing a dictionary of field settings. Let's look at two examples. Basic example In this example, we add two custom fields, team and designation, with the type text . This means that the custom fields can take any text values as input. Once these custom fields are saved, you can enter the values for the fields while creating a new user or updating an existing user . The following screenshot shows the example: Advanced example Here, role is a custom field consisting of two options (teacher and student) as the possible values. twitter and dept are text fields where you can enter values according to the defined settings . Let's look at the properties in detail: Parameter Description type Defines the type of the custom field. Currently, there are 2 types: select and text, where select creates a drop-down list, and text creates a plain text form . If you enter a URL in the text field, it is interpreted as a hyperlink (it will be clickable on the User Info pane). defaultValue Used with a select form type to set the default option for the list . options Used with a select form type for the values that should be on the drop-down list, which follows the [\"item1\", \"item2\",\"item3\"] pattern. Use a JavaScript Array to create it", "tokens": 383}
{"title": "Configure Custom Fields for Users", "content": ". required Set whether the field is required for registration. Enter true or false for this property. minLength Used with the text type to define the minimum length required for the text. maxLength Used with the text type to define the maximum length required for the text . modifyRecordField This property is required when you add a field that already exists in Rocket.Chat. array Used inside the modifyRecordField property to define whether the existing field is an array. field Used inside the modifyRecordField property . It should be the name of the existing field. public Defines the field as visible to other users when viewing the user's profile. Enter true or false for this property. By default, the value is true. private Defines the field as private . Only users with view-full-other-user-info permission can see this field when viewing the user's profile. Enter true or false for this property. sendToIntegrations Define the field as shareable with external applications, such as Omnichannel integrations . Use tabs for indentation in the JSON object, do not use spaces. You can also use the API to create and manage custom fields. See the Create User, Update User, and Get Users List endpoints . You can configure the list of custom fields displayed on the User Info panel. Go to Administration > Workspace > Settings > Accounts > Custom Fields to Show in User Info . The list of fields needs to be specified as a JSON array in the following format: The label can be the name of the custom field that is displayed for users. The key must be a custom field name defined previously . Considering the previous example, the field can look something like this: This means that the role and dept custom fields will be displayed on the User Info panel . Note that the fields are only shown if the user has permission to view private fields or if the field is set to \"public\": true. Now that you have configured the custom fields, they will be displayed when creating new users or updating existing ones . Enter the respective values and save the user details.", "tokens": 443}
{"title": "Assets", "content": "Manage the assets and various resources your Rocket.Chat workspace uses. This involves customizing your workspace with logos, icons, and other images to have a branded look. To access the assets section, go to Administration > Workspace > Settings > Assets . Remember to hit Save Changes to apply any changes made. Field Description Recommended size Enable SVG favicon When enabled, you can set an SVG favicon. logo (svg, png, jpg) The logo asset represents the primary branding image of the Rocket .Chat workspace and it's used in various parts. It appears on the sidebar footer of your workspace . 300px \u00d7 300px, with a transparent background logo - dark theme (svg, png, jpg) This asset is a variation of the primary logo image specified to be used for a dark theme environment . 300px \u00d7 300px login background (svg, png, jpg) Set the image to appear in the background of the login and sign-up screen . 1920px \u00d7 1080px, with a 72dpi resolution login background - dark theme (svg, png, jpg) This is a variation of the login background image specified for the dark theme of the workspace . 1920px \u00d7 1080px, with a 72dpi resolution favicon (ico) Set a favicon for the .ico extension. It represents the icon displayed on the browser tab . 16px \u00d7 16px favicon (svg) This is another variation of the favicon asset of the .svg extension optimized for vector graphics. For the desktop apps, it appears as the workspace logo on the servers list. 16px \u00d7 16px favicon 16x16 (png) This asset type is an alternative variation of the favicon, optimized for use with PNG format . 16px \u00d7 16px favicon 32x32 (png) A favicon asset but with a larger size", "tokens": 438}
{"title": "Assets", "content": ". 32px \u00d7 32px android-chrome 192x192 (png) Lets you set the icon that appears on an Android home screen . 192px \u00d7 192px android-chrome 512x512 (png) This asset refers to the icon displayed on the workspace tab when accessed via Chrome on an Android device . 512px \u00d7 512px apple-touch-icon 180x180 (png) Set the Apple icon shown on a web page . 180px \u00d7 180px apple-touch-icon-precomposed 180x180 (png) Set an icon with a precomposed design that bypasses the iOS automatic icon effects. It appears on the iOS home screen . 180px \u00d7 180px mstile 70x70 (png) This asset type represents the icon that appears on the Windows Start Screen . 70px \u00d7 70px mstile 144x144 (png) It lets you set another variation of the Mstile asset optimized for higher resolutions . 144px \u00d7 144px mstile 150x150 (png) The icon that appears on the Windows Start Screen . 150px \u00d7 150px mstile 310x310 (png) Another variation of the Mstile asset, optimized for other resolutions . 310px \u00d7 310px mstile 310x150 (png) Another variation of the Mstile asset, optimized for higher resolutions . 310px \u00d7 150px safari pinned tab (svg) Lets you set the icon that appears on the Safari browser's pinned tabs . 16px \u00d7 16px, and it should be designed with a transparent background, so it blends well with the browser interface. For further white-labeling options, see Open-Source Projects.", "tokens": 383}
{"title": "Bots", "content": "The Rocket.Chat Bots setting lets you specify the various fields that can be accessed by bots helper methods. These fields can be referenced and used when developing bots. To access this menu, go to Administration > Workspace > Settings > Bots. User Fields: This takes in comma-separated fields that can be accessed by bots helper methods.", "tokens": 77}
{"title": "Custom Emoji Filesystem", "content": "You can decide where to store the custom emojis uploaded in your Rocket.Chat workspace. By default, emojis are stored using GridFS within MongoDB. If you prefer local storage, you can specify a valid storage path on your Rocket.Chat server. To access this setting, Go to Administration > Workspace > Settings > Custom Emoji Filesystem Update the following fields: Field Description Storage Type Select how you want to store emojis, either GridFS or Filesystem. GridFS is the default storage system for custom emojis in Rocket.Chat. Filesystem stores custom emojis directly on the local storage of the server running the Rocket.Chat instance. System Path If you select Filesystem as the storage type, specify a valid path on the server hosting Rocket.Chat where custom emojis will be stored. For example, using /emojis will store your custom emojis in an emojis directory at the root level of your server. For Docker deployments, access the Rocket.Chat server with docker exec -it <container-name> sh to verify the uploaded emojis. Click Save Changes. Restart the server for the updated storage settings to take effect", "tokens": 256}
{"title": "Custom Sound Filesystem", "content": "Choose where to store the custom sounds uploaded to your Rocket.Chat workspace. By default, GridFS within MongoDB is used. You can specify a valid storage path on your Rocket.Chat server if you prefer local storage. To configure this setting: Navigate to Administration > Workspace > Settings > Custom Sound Filesystem. Update the following fields: Field Description Storage Type Select how you want to store sounds, either GridFS or Filesystem. GridFS is the default storage system for custom sounds in Rocket.Chat. Filesystem stores custom sounds directly on the local storage of the server running the Rocket.Chat instance. System Path If you select Filesystem as the storage type, specify a valid path on the server hosting Rocket.Chat where custom sounds will be stored. For example, using /sounds will store your custom sounds in a sounds directory at the root level of your server. For Docker deployments, access the Rocket.Chat server with docker exec -it <container-name> sh to verify the uploaded sounds. Click Save Changes. Restart the server for the updated storage settings to take effect.", "tokens": 234}
{"title": "Discussion", "content": "Discussions are an additional way to organize conversations that allow users from outside channels to participate in specific conversations. Discussions are created from parent channels or groups. To access this setting, go to Administration > Workspace > Settings > Discussion. Enable: When enabled, users will be able to create discussions.", "tokens": 60}
{"title": "E2E Encryption", "content": "End-to-end encryption (E2EE) is a system of communication where only the communicating users can read the messages. Rocket.Chat uses this to prevent potential eavesdroppers. IMPORTANT: E2E encryption functionality includes notable restrictions that workspace owners should carefully consider before activating this feature. Here are what to keep in mind: Encrypted messages of encrypted rooms will not be found by search operations. Bots may not be able to see encrypted messages until they implement support for it. Spotted a bug? Help us improve by reporting it directly to Rocket.Chat! To access this setting, go to Administration > Workspace > Settings > E2E Encryption. Enabled: When set to true, users can create encrypted rooms, change rooms, and set direct messages to be encrypted. Unencrypted messages in encrypted rooms: Enable this option to allow plain text messages to be sent in encrypted rooms. These messages will not be encrypted. Encrypt files: Enable this option to encrypt uploaded files. Your File Upload settings affect the files supported in encrypted rooms. Enable encryption for Direct Rooms by default: When set to true, direct rooms will be encrypted by default. Enable encryption for Private Rooms by default: When enabled, private rooms will be encrypted by default. Mentions: Notify people and highlight users, channels, and team mentions in encrypted channels by using the @ symbol. Mentioned users will get notified if they have enabled the workspace notifications. Refer to End-to-End Encryption User Guide \u00a0to learn how to use the E2E feature.", "tokens": 358}
{"title": "EmailEdit your Email Content", "content": "Configure email settings to broadcast emails directly from Rocket.Chat. To access this menu, go to Administration > Workspace > Settings > Email. Here you will find various email settings and tools: Email Configuration Edit Email Content Mailer Direct Email Reply You can customize the predefined emails sent out to users on your workspace. Select the email type you want to change and modify to customize email content. The email body can take in placeholder values used to set customized data e .g [Site_Name] is replaced with your Rocket.Chat server name. Available placeholder fields can be seen at the bottom of the field being edited. You can use Rocket.Chat internationalization engine by wrapping sentence string with { }, see all internationalization strings here", "tokens": 161}
{"title": "Edit your Email Content", "content": ". The email users receive when a user login is detected from a new device. Subject: The email subject. Body: Email body. Direct email reply Formats email to send when users change their email. Subject: The email subject. Body: Email body . The email users receive when they trigger the forget password action. Subject: Subject of the email. Body: Email body. Defines the header and footer style to use for all your emails. Header: Header to use for all emails sent . Footer: The email footer to use for all emails. Footer When Direct Reply is Enabled: Defines the footer for when direct reply is enabled. Email format for when a user is invited to join the workspace. Subject: The email subject . Body: Email content. Use Deep Link URL Format: When enabled, deep linking is made possible in emails sent. Email format for when a user's password is changed. Subject: The email subject. Body: Email body . Set a level of privacy to the emails sent. Show Message in Email Notification: Whether or not to show messages in email notifications. Add Sender to Reply-To: When enabled, message senders will be added to the Reply-To email header property . Email to send on new user registration. Subject: Email subject. Body: The body of the email. Format of the email to send to a user when registered by an admin. Subject: The email subject. Body: Email body . Email configuration Here, you define the styling to be applied to all emails. Send only plain text emails: When enabled, emails are sent in plain text only. Email Style: Write CSS to style every email . Lets you specify email subjects for various notification types. Direct Message Email Subject: Email subject to use for direct message notification. Mention Email Subject: Email subject for when a user is mentioned in a room . Mention All Email Subject: Email subject when a message is posted in a room. Email format to use when sending user verification. Subject: Email Subject. Body: The email body.", "tokens": 421}
{"title": "Direct email reply", "content": "Enable this feature to allow users to reply to chat messages by directly replying to email notifications they receive. We currently use subaddressing for this feature. To set up credentials, Navigate to Administration > Workspace > Settings > Email > Direct Reply . Enable Direct Reply: Switch on to allow direct replies through emails. Debug Direct Reply: Enables debugging for direct replies. Protocol: Select the email server protocol (IMAP or POP). Host: Your email server hostname (e.g. imap.example .com or pop.example.com). Port: The port (143 or 993 for IMAP and 110 or 995 for POP). IgnoreTLS: Set to true if the port is 143 or 110 . Email Check Frequency: Email check frequency (in minutes) if POP server (>=2). Delete Emails: Delete intercepted emails . We recommend keeping true if you don't want to keep copies of email messages, in the case of an IMAP server. Separator: A separator (default and recommended) is the character separating the base and tag part of the email . For example, base+tag@domain (separator: +). Username: The email server username. Reply-To: The reply-to email address. Password: The email server password. Click Save changes to commit . Now, you can reply chat messages via email. It supports full formatting like inline, multiline, bold, italics, etc. Before you switch from IMAP to POP using the same email address, you must empty all the folders", "tokens": 335}
{"title": "Direct email replyEmail configuration", "content": ". Keeping all emails results in duplicate messages because all those messages in POP are treated as new messages. Currently, only emails in English are supported, or at least the quote On <date>, <author> wrote: is in English . An email body in languages other than English may also work until and unless On <date>, <author> wrote: is in English, or a copy of an older email is removed manually. Only text messages are supported; attachments are not supported yet . Quoted headers aren't picked up if the email client breaks it up into multiple lines. Gmail breaks up any lines over 80 characters for you. Also, we are searching for on and wrote. It doesn't work with other languages . Possible solution: While replying, remove everything other than your actual message . Lines starting with - or _ sometimes mark the beginning of signatures: But some users change this convention: Your message wasn't posted? Did you get an Invalid Email in the Admin console? This likely means that the email format was not as expected . Maybe you were blocked, or the message/room was deleted. The Rocket.Chat emails, notifications, email verification, and mailer features depend on this email configuration. This page guides you through configuring SMTP settings for your Rocket.Chat workspace. This configuration is only available for self-managed workspaces. SaaS workspaces already have this pre-configured. Go to Administration > Workspace > Settings > Email > SMTP. Protocol: Select the mailing protocol to use. SMTP(Simple Mail Transfer Protocol) or SMTPS (Simple Mail Transfer Protocol Secure) protocol. Host: Your SMTP server hostname (e.g. mail.example.com) Port: The SMTP port (usually 587 for modern secured SMTP servers). IgnoreTLS: Enable to ignore TLS(Transport Layer Security). Pool: Enable this option to use pooled connections. Otherwise, a new connection is created for every mail. Username: Your SMTP username. Password: Your SMTP password. From Email: The email to be shown as the sender. Save changes Send a test mail to my user - Use this option to send a test mail to yourself.", "tokens": 471}
{"title": "Deploy a Federated Rocket.Chat Workspace with Kubernetes", "content": "To configure a Matrix bridge that allows Rocket.Chat users to engage in federated rooms and communicate with federated users, a homeserver is required. Homeservers are key components that host user accounts and other data related to communication . It also facilitates communication between users on different servers by relaying messages through a network of matrix servers until they reach the destination. Rocket.Chat listens to events happening in the homeserver and sends events relayed to other networks . For further details, explore the Rocket.Chat and Matrix architecture. This documentation details the deployment of a federated Rocket.Chat workspace with Kubernetes using Helm. Before you proceed, consult the official guide for deploying a basic Rocket .Chat workspace with Kubernetes to gain a foundational understanding of the Kubernetes procedure. This section details the prerequisites for deploying a federated workspace with Kubernetes, including recommendations and examples to guide you. Kubernetes cluster: Ensure your Kubernetes cluster is up and running . Helm v3: Install Helm v3 if not already installed. Firewall configuration: Verify that your firewall rules allow HTTPS traffic. Two domains: Confirm that the domains point to your server's IP address. For example, domain .xyz - The domain for your Rocket.Chat workspace. synapse.domain.xyz - The domain for your Synapse server. Note that you need the Synapse version 1.8.x and above", "tokens": 317}
{"title": "Deploy a Federated Rocket.Chat Workspace with Kubernetes", "content": ". The following Kubernetes resources must be deployed on your server: The examples provided are intended as a guide. Your implementation may vary based on your specific requirements and Kubernetes configuration . Storage Class: Use an existing storage class in your Kubernetes cluster, or set up a new one depending on your cluster configuration. Ingress Controller: This deployment requires an ingress controller. In this guide, we\u2019ll use nginx as an example . Install Ingress-Nginx controller by running: Confirm that the ingress-nginx-controller service with a LoadBalancer type has an external IP address by running: Certificate manager and ClusterIssuer: If you\u2019re not using a domain with a valid TLS certificate, you may need to set up one to use HTTPS . Cert manager: To facilitate TLS certificate management, install cert-manager by running: Check the created resources in the cert-manager namespace with: ClusterIssuer: cert-manager requires a ClusterIssuer to automatically issue TLS certificates across the cluster . Below is an example configuration for setting up Let's Encrypt in a clusterissuer.yaml file: Create this resource by running the following command: Confirm that the ClusterIssuer was properly deployed and that the secret was successfully created by running: The Rocket .Chat chart has an optional dependency on the MongoDB chart. By default, the MongoDB chart requires PV support on underlying infrastructure, which may be disabled", "tokens": 313}
{"title": "Deploy a Federated Rocket.Chat Workspace with Kubernetes", "content": ". Once you've confirmed that all prerequisites are met, continue with the next steps to deploy a \u00a0federated Rocket.Chat workspace using Kubernetes. Add the Rocket .Chat helm chart repository by running the following command: If successful, it returns a response that \"rocketchat\" has been added to your repositories. To install Rocket.Chat using the chart, define your configuration options in a values.yaml file . Below is an example configuration to use for deploying a federated workspace: Replace <release> with the Rocket.Chat release tag you intend to deploy. Update domain.xyz with your actual domain name. Set the ingressClassName to the ingress controller you are using . If you\u2019ve configured a certificate manager and ClusterIssuer for TLS, specify your ClusterIssuer name and a secretName for TLS. If you already have a valid certificate or do not wish to use TLS, the annotations and tls values can be omitted . The values.yaml file contents provided here serve as examples for your reference. Your implementation may vary according to your specific requirements. To scale your workspace with microservices, visit the Microservices documentation. With your configurations defined in values .yaml, proceed with the Rocket .Chat installation by running: If your deployment is successful, you\u2019ll get a response similar to the following: After a few minutes, verify that the corresponding certificates, secrets, and pods have been successfully created with the kubectl get pods command . The response is similar to the image below, depending on your configurations: You can now access your workspace at the domain where Rocket.Chat was deployed and complete the setup wizard", "tokens": 359}
{"title": "Deploy a Federated Rocket.Chat Workspace with Kubernetes", "content": ". After deploying your workspace, it's essential to validate your federation configuration to confirm it's functioning properly before creating federated rooms. To verify the configuration: Go to Administration > Workspace > Settings > Federation > Matrix Bridge . Click Verify Configuration to check the status of the federation connection. The Configuration Status field is updated to show the current federation connection status. If the status is Valid, you can proceed to test federation within the workspace . Congratulations! You have successfully deployed and set up your federated Rocket.Chat workspace on Kubernetes. Your workspace is now live and ready to use . Refer to the next section to conduct a basic test on your workspace or access the user guide to begin using your workspace. To test the federation, send a direct message to any user on a matrix-compatible server . You can DM a user on another federated Rocket.Chat workspace or Element. To send a DM to a user on Element: Create a user account on Element. Create a 1:1 Direct Message on your Rocket.Chat workspace . Add the Element user as a member of the DM using this syntax: @username:matrix.org. Then, send a message. You receive an invite notification on Element from a user in your Rocket.Chat workspace who wants to send a message . Accept the invite and continue the conversation. To send a DM to a user on another federated Rocket.Chat workspace: Deploy another federated workspace with the steps highlighted above. Create a 1:1 Direct Message on your Rocket.Chat workspace . Add a user from the second federated workspace as a member of the DM using this syntax: @username:server. For example, @test_user:your_workspace_domain. Then, send a message to the user . The user receives the message, and you can continue exchanging conversations. Refer to Create federated rooms to learn more about sending messages to federated users . Now that your federated workspace is ready, you can: Go to the Federation User Guide to learn how to invite external users on the Matrix protocol to your workspace, join other channels on the Matrix network, etc . Allow or block specific IP addresses to communicate with your workspace.", "tokens": 472}
{"title": "Deploy a Federated Rocket.Chat Workspace with Docker", "content": "This page guides you through the steps to set up your federated Rocket.Chat workspace using Docker following any of these methods: Automated installation: Install Synapse and Rocket.Chat using a simple setup script . Manual installation: Manually install and configure your Homeserver with Rocket.Chat. In the installation methods, we are using Element and Traefik, along with Matrix, to configure a federated workspace . We recommend using automated installation since this comes with some pre-configurations. 8GB of RAM 2CPU 20GB of Storage Ubuntu 20.04 You are required to have a domain available to host your matrix homeserver . Important warning about the installation You must be aware of this vital setting before proceeding with the installation. Enabling ephemeral events like user typing indicator can affect the performance of your Matrix Homeserver and Rocket.Chat server for federated communication . This can be enabled by adding the following property in your Application Service configuration file: Add and enable the following properties to make public rooms visible and searchable on other Matrix networks . Following the automated installation enables everything by default and can be disabled by editing the generated configuration at data/matrix/synapse. You must use the Synapse version 1.8.x and above . The automated install offers a simple option to install a matrix homeserver pre-configured with Rocket.Chat. Prerequisites You are required to have the following on your system before installing. A domain pointing to your server's IP . Docker and Docker compose (> 2.3 .3) If you don't have them installed, you can conveniently set them up using Docker's official helper script: To run Docker commands without using sudo, add the current user to the Docker group and then reboot using the following commands: Open your terminal in any directory of your choice Download and execute the script by running the following command", "tokens": 408}
{"title": "Deploy a Federated Rocket.Chat Workspace with Docker", "content": ". This creates a docker-compose and a .env file that can be edited as needed. Follow the instructions provided by the script to configure the workspace: Server's hostname: Add your domain name . Create A domain records pointing to your server's IP address as requested. synapse.<your-domain> element.<your-domain> traefik.<your-domain> Enter your email address. This is used to issue an SSL certificate for your domain . To install a specific version of Rocket.Chat, navigate to the .env file, and replace these variables as shown below: Replace x.x.x with the docker image tag of your preferred version . Start the container by running the following command: To test and ensure your Matrix setup is successful, download and execute the test script in the same directory where the setup was initiated using the following command: You get a notice about the setup status . This concludes the automated setup. Access your federated workspace at the domain! By default, the first user to log in is the workspace administrator . Now that your federated workspace is ready, you can: View the configuration details from Administration > Workspace > Settings > Federation. Allow or Block specific IP addresses to communicate with your workspace . Go to the Federation User Guide to learn how to invite external users, join channels on the Matrix network, etc. Installing with the automated setup automatically sets the values at Administration > Workspace > Settings > Federation > Matrix Bridge. Rocket .Chat Matrix setup CLI is coming soon! The following section guides you through the manual installation steps for a federated workspace . Prerequisites Docker If you don't have it installed, you can conveniently set it up using Docker's official helper script: To run Docker commands without using sudo, add the current user to the Docker group and then reboot using the following commands: Your domain records and SSL certificates . For example, if your domain is ps-rocketchat.com, you can create subdomains under it like matrix2.ps-rocketchat.com. Name the subdomains based on your preference", "tokens": 466}
{"title": "Deploy a Federated Rocket.Chat Workspace with Docker", "content": ". All the generated DNS records pointed to your server's IP address (the same IP address). To set up a Matrix Homeserver with Synapse manually, Replace ps-rocketchat.com and matrix2.ps-rocketchat .com with your domain and subdomain respectively while following this guide. Set up the docker network with this command: To set up a server, run this command to set up the Synapse environment: The homeserver .yaml configuration file is stored in the \"data\" directory of your current working directory. To start the Synapse Docker, use this command: Next, set up MongoDB with this command: To start Rocket .Chat, execute this command: Set up reverse proxy Before accessing your Rocket.Chat workspace, set up the reverse proxy following the next steps: Obtain SSL certificates for your domain records, if you don't have any. You can use Lets Encrypt . Create an nginx.conf file containing forwarding rules for each domain. Create the file in the same folder where you intend to start your docker instance and paste the following contents: Update your domain, subdomain, and the paths to your SSL certificate and key . Start the reverse proxy mapping the nginx.conf and the certificate and private key for SSL by running this command: Ensure to specify the paths to certificates if you are using relative paths. In this example, the reference location for certificates is the home folder . Additionally, it's recommended to use the complete directory path for your nginx file, for example \u2014 /home/ubuntu/test/nginx.conf:/etc/nginx/nginx.conf:ro Visit your domain URL in a web browser to access your Rocket.Chat workspace . Complete the Rocket.Chat Setup Wizard and your workspace will be set up and ready to use. Configure Rocket.Chat Matrix Bridge Before you proceed, subscribe to any of our premium plans or apply trial on your workspace to unlock all the available federation features . See Matrix Bridge Configuration\u00a0to learn more about the configurations and their definitions. Now that your workspace is set up, navigate to Administration > Workspace > Settings > Federation > Matrix Bridge and follow these steps: Enable Matrix Bridge . Update the following fields with these values: Homeserver URL: http://synapse:8008 Homeserver Domain: <your domain> Bridge URL: http://rocketchat:3300 Be cautious not to include \"https://\" before your", "tokens": 550}
{"title": "Deploy a Federated Rocket.Chat Workspace with Docker", "content": "homeserver domain . Save your changes and copy the contents of your registration file. Configure the support for Application Service on the matrix home server by creating a registration.yaml file in the data directory that was created for synapse earlier and paste the contents of the registration file . Creating and modifying files in the data directory may require administrative(sudo) rights. For Synapse versions 1.9 and higher, the registration .yaml file must include the following line: use_appservice_legacy_authorization: true Add the following content at the end of the homeserver .yaml file in that same data directory and save: Now restart the rocketchat and synapse containers with these commands: Now, you can proceed to test your workspace setup. To run multiple Rocket.Chat instances, see Clustered Manual Installation . For testing the Matrix setup, you can use the Matrix Federation Tester if your certificates are from a \u201cstandard\u201d CA recognized by Linux distros, etc. For more real-time testing, visit Element and complete these steps: Create a user using matrix .org as a homeserver (assuming the default whitelisted matrix.org is still set on your matrix homeserver) Start a direct message from your Rocket.Chat workspace with the user you just created using their matrixId (@username:matrix.org) . Check Element to confirm that you received the DM from your Rocket.Chat user. You can choose to respond to the message from Element and confirm that you can receive the response in your Rocket.Chat workspace . Now that your federated is successful on your workspace, see the Federation User Guide \u00a0to learn more about how to use federation . If you're in an air-gapped environment or use non-standard certificates, you can decide to use your own federation tester", "tokens": 391}
{"title": "Deploy a Federated Rocket.Chat Workspace with Docker", "content": ". Download the GitHub project locally and run the test yourself from (supposing you have the CA in your keychain) using these commands: Now, execute this command: To distribute the work on Rocket.Chat, you run two identical Rocket .Chat applications ( can be named rocketchat1 and rocketchat2) that both connect to the same MongoDB. To make this setup accessible externally, you use an NGINX load balancer . This load balancer acts as a single entry point, and internally it distributes the workload between the two Rocket.Chat instances. Before you proceed, ensure you have completed the Standard Manual Installation. Start the second Rocket.Chat with this command: Update the nginx .conf file with these contents: Restart nginx with this command: Navigate to Administration > Workspace > Settings > Federation > Matrix Bridge and update these configurations: Homeserver URL: http://synapse:8008 Homeserver Domain: <your domain> Bridge URL: http://nginx:3300 Save your changes and copy the contents of your registration file . Paste the contents in the data/registration.yaml file. For Synapse versions 1.9 and higher, the registration .yaml file must include the following line: use_appservice_legacy_authorization: true Now restart the rocketchat and synapse containers with these commands: Now you can proceed to test your workspace again . Execute the following commands to clean up your files, reset your environment, and restart your setup: If you had a cluster set, you also need to stop/remove the rocketchat2 docker instance. See Federation FAQ for more troubleshooting tips.", "tokens": 365}
{"title": "Layout", "content": "The layout feature empowers you to personalize the appearance of your Rocket.Chat workspace. This includes defining content, applying custom CSS, and incorporating JavaScript, providing you with the means to tailor your workspace's visual aspects . To access this setting, go to Administration > Workspace > Settings > Layout. Remember to Save changes to apply any customization made. Colors You can define custom CSS to modify your workspace's appearance . Example The following CSS code snippet changes the color of your Rocket.Chat rooms and the hover color on the sidebar. Customized Rocket.Chat UI To learn more about the available classes and colors for easy customization in Rocket .Chat, you can refer to the Customizing Colors guide. Custom Scripts allow you to execute JavaScript code in response to specific events in the workspace. Custom Script for Logout Flow: Set a script to be executed during any logout process . Custom Script for Logged Out Users: Define a custom script that will run ALWAYS and for ANY user who is NOT logged in, for example, when they access the login page . Custom Script for Logged In Users: Set a custom script that will run ALWAYS and for ANY user who is logged in. For example, whenever they enter the chat, they'll be logged in . Example Setting a custom script for logged-in users, as demonstrated in the example below, will trigger a \"Welcome\" alert when a user logs in and is on the /home page. The section allows you to change the content of your workspace homepage", "tokens": 322}
{"title": "Layout", "content": ". Home Title: The title on the header of the first screen that your users will see when they log in. Show home page button on sidebar header: When enabled, the Home button will be shown on your server's navbar . Content block: The content of the first screen that your users will see when logging in. Show custom content to homepage: Enable to show custom content on the homepage . Show custom content only: Turn this on to hide all other content blocks on the homepage. The Show custom content to homepage settings is only available to workspaces on the enterprise plan . Show custom content only can be enabled only when Show custom content to homepage is enabled. Terms of Service: Set the terms of service of your workspace. You can also redirect to YOUR-SERVER-URL/terms-of-service . This is shown by default on the links below your login page. Login Terms: Specify the terms on which users are to accept before logging in. Privacy Policy: Set your server's privacy policy . It can also be accessed via YOUR-SERVER-URL/privacy-policy. This is shown by default on the links below your login page . Legal Notice:\u00a0By default, this screen is accessed on the links under the login page; here, you can set the legal notice of your server. It can also be accessed via YOUR-SERVER-URL/legal-notice . Side navigation footer: This is the logo or text on the bottom left of the sidebar. For better consistency, we recommend using the images set on your Assets. Customize your login page . All the login settings except \"Show Default Login Form\" are only available to workspaces on the premium plan. Hide Logo: Enable this to hide the Rocket.Chat. Hide Title: Turn this on to hide the title on the login page . Hide \"Powered by\": Enabling this hides the \"Powered by\" on the login page. Login Template: Select the direction of the login page. Horizontal/Vertical. Show Default Login Form: Enable to show the default login form", "tokens": 444}
{"title": "Layout", "content": ". Display Roles: Toggles the display of user roles shown beside the usernames on messages. Group Channels By Type: Enabling this separates the channels by category (Channel, Private Room, Direct Message, or Discussion) on the left sidebar . Use Full Name Initials to Generate Default Avatar: This setting changes default avatars to use the user's full name instead of username. For example, if the username is \"blue .ducks\" and the name is \"Richards Nate\", t\u201d the default avatar displays \"BD\" by default. With this setting enabled, it displays \"RN\" instead . Use Real Name: Enabling this changes the display of usernames to full names. Click to Create Direct Message: Turn this on so that workspace users can create a direct message with another user when they click on their profile . This skips viewing the user's profile. Number of users' autocomplete suggestions: Sets the number of autocomplete suggestions shown when you begin tagging any user with the @ symbol . Unread Counter Style: Different Style for user mentions: Makes the notification counter differentiate normal messages from mentions. Same style for mentions: Makes the count mark mentions and normal messages the same . Allow Special Characters in Room Names: When enabled, it allows for using special characters like ! @ # $ % ^ & * in room names. This setting does not affect the room display name . Show top navbar in embedded layout: When enabled, show the top navigation bar in an embedded layout.", "tokens": 316}
{"title": "File Upload", "content": "Configure file uploads and storage on your workspace. To access the menu on your workspace, go to Administration > Workspace > Settings > File Upload. Remember to hit Save Changes to apply any changes made", "tokens": 49}
{"title": "File Upload", "content": ". File Uploads Enabled: Use this setting to enable or restrict file uploads on your workspace Maximum File Upload Size (in bytes): This setting defines the maximum allowed file size for uploads. Set it to -1 to remove the file size limitation . Ensure the maximum file upload size matches your proxy's if any is used. Accepted Media Types: This setting defines the files users can upload. Comma-separated list of media types. Leave it blank for accepting all media types . Blocked Media Types: Specify the types of files to block in the workspace by entering the MIME types, separated by commas (with or without spaces). This setting has priority over the Accepted Media Types . For example, adding text/plain,image/jpeg,video/mp4 blocks .txt, .jpeg, .jpg and, .mp4 files. Protect Uploaded Files Yes: Only authenticated users can access the uploaded files . No: If in possession of the uploaded file's URL, unauthenticated users can access and download said files. Restrict files to rooms' members: Restrict the access of files uploaded on rooms to the rooms' members only . Restrict files access to users who can access room: Allows users with access to a room (such as those with Livechat manager or monitor roles or agents with special permissions to view closed rooms) to download files . Rotate images on upload: Turn on to enable image rotation. This affects the image quality. Enable JSON Web Tokens protection to file uploads: Turn on to enable JWT protection on file uploads . File Upload Json Web Token Secret: Set the JWT secret to be used. Storage Type GridFS: Uses the default MongoDB specification for storage. Visit Recommendations for File Upload to learn more . AmazonS3: Uses the Amazon S3 storage type Google Cloud Storage: Uses the Google Cloud Storage storage type WebDAV: Uses the WebDav storage type FileSystem: Uses the FileSystem storage type File Uploads Enabled in Direct Messages: Use this setting to enable or restrict file uploads on Direct Messages You can find a more detailed guide on how to set up your Amazon S3 server here", "tokens": 465}
{"title": "File Upload", "content": ". Bucket name: The bucket name you've created on Amazon S3 Acl(Optional): A Canned ACL configuration (see a complete list here) Access Key: Your Amazon Access Key ID. Secret Key: Your Amazon Secret Access Key . Note: If no AWSAccessKeyId and AWSSecretAccessKey are set, the underlying AWS SDK will fallback to trying to retrieve credentials from the usual locations . CDN Domain for Downloads(Optional): If you had set a CDN for your bucket, put it here Region(Optional): If you have created your bucket in a region different from the US Standard, you have to set their code here (see a list of region codes here) Bucket URL(Optional): Override the URL to which files are uploaded . This URL is also used for downloads unless a CDN is given Signature Version: Identifies the version of AWS Signature that you want to support for authenticated requests. Force Path Style: Enable force path style . URLs Expiration Timespan: Time after which Amazon S3 generated URLs are no longer valid (in seconds). If set to less than 5 seconds, this field is ignored . If you run into issues with files not loading consistently for some users located further from server location. Increasing this time might help. Proxy Avatars: Proxy avatar file transmissions through your server instead of direct access to the asset's URL . Proxy Uploads: Proxy upload file transmissions through your server instead of direct access to the asset's URL. Proxy User Data Files: Proxy user data file transmissions through your server instead of direct access to the asset's URL", "tokens": 352}
{"title": "File Upload", "content": ". For example, exporting a room as file. Amazon S3 CORS Configuration System Path: The local path on the server where the uploaded files should be stored. Check the Recommendations for File Upload to learn how File System works . The settings used when configuring a Google cloud storage server. You can find more details here. Google Storage Bucket Name: The bucket name to which the files should be uploaded . Google Storage Access ID: The access ID (or username) of the service account that has access to your Cloud Storage bucket. The Access Id is generally in an email format, for example: \"example-test@example.iam.gserviceaccount .com\" Google Storage Secret: A .pem containing your private key and certificate. You can find a guide here on how to get your keys . Project ID: The project ID from the Google Developer's Console Proxy Avatars: Proxy avatar file transmissions through your server instead of direct access to the asset's URL Proxy Uploads: Proxy upload file transmissions through your server instead of direct access to the asset's URL Proxy User Data Files: Proxy user data file transmissions through your server instead of direct access to the asset's URL . For example, exporting a room as file. More information about Google Storage Secret The settings used for WebDAV as a storage server. Upload Folder Path: WebDAV folder path to which files are uploaded . WebDAV Server Access URL: The URL of the WebDAV server (WebDAV URLs of Common Cloud Storage Services). WebDAV Username: Username for the remote WebDav server . WebDAV Password: Password for the remote WebDAV server. Proxy Avatars: Proxy avatar file transmissions through your server instead of direct access to the asset's URL . Proxy Uploads: Proxy uploads file transmissions through your server instead of directly accessing the asset's URL. Proxy User Data Files: Proxy user data file transmissions through your server instead of direct access to the asset's URL . For example, exporting a room as file.", "tokens": 438}
{"title": "Minio", "content": "Minio is an object storage server built for cloud applications and DevOps. Minio is S3 compatible and provides an open-source alternative to AWS S3. You can download and install Minio pretty quickly. Minio also provides an official Docker image. For further details, check out Minio documentation website. Once you install and deploy Minio server, you can get the AccessKey and SecretKey from the startup message. To override Minio auto-generated keys, you may explicitly pass secret and access keys as environment variables. Find more details on the Minio docs. To set up Minio as the file storage server in Rocket.Chat, go to File Uploads section under Administration, then set Storage Type: GridFS (default) to AmazonS3. Next, access the AmazonS3 menu and update the following details: Configuration Name Description Bucket name Minio Bucket Name Access Key Minio server Access Key Secret Key Minio server Secret Access Key Region us-east-1 Bucket URL http://[your.minio.domain/bucketname] Signature Version v2 (This may not be needed if using ssl) Force Path Style true (this may not be needed if using ssl) URLs expiration timespan 0 (if you want your files to never expire) In production, you can use a reverse proxy with Minio server. You can also secure access to Minio server with TLS. Find out more on the Minio documentation. Note: If you specify a different region in Minio, ensure it is the same as the S3 region. Check the complete regions list.", "tokens": 337}
{"title": "General", "content": "To access the general settings of your workspace, navigate to Administration > Workspace > Settings > General. Remember always to hit Save Changes to apply any changes made. Show Setup Wizard: This setting SHOULD NOT be altered . It has been set automatically from Pending -> In Progress -> Completed depending on whether your workspace's general setup procedure has been completed. Changing this manually can lock your workspace. Please refer to this issue. Site URL: This sets the URL of the workspace . Example: https://chat.domain.com/ Site Name: This sets the name of the workspace. Example My Rocket.Chat Server Document Domain: Lets you set the document domain. Language: This sets the default language for the workspace . This setting is overridden if the user has changed his language preference. Refer to the user preference guide for language preference priority in Rocket.Chat. Allow Invalid Self-Signed Certs: Enable to allow invalid and self-signed SSL certificates for link validation and previews . Enable Content-Security-Policy: Do not disable this option unless you have a custom build and are having problems due to inline-scripts. Extra CSP Domains: Extra domains to add to the Content-Security-Policy . Restrict access inside any Iframe: Lets you set restrictions to load the Rocket.Chat inside any iframe Options to X-Frame-Options: Options to X-Frame-Options. You can see all the options here . Enable Favorite Rooms: Lets you set if users can mark a room as favorite First Channel After Login: Give the channel name the user joins after logging in by default . Setting this field to empty or setting an invalid name results in the user being directed to the workspace's home page", "tokens": 363}
{"title": "General", "content": ". Example: #welcome Unread Count: This setting changes the behavior of the unread counter All messages: All messages are counted on the counter, regardless of whether they are mentioned or not . User mentions only: Only mentions using @yourUsername are counted on the counter. Group mentions only: Only group mentions using @all or @here are counted on the counter . User and group mentions only: All mentions are counted; this includes @all, @here and @yourUsername Unread Count for Direct Messages: This setting changes the behavior of the unread counter on Direct Messages All messages: All messages sent by a customer are counted on the counter . Mentions only: Only mentions using @yourUsername are counted on the counter . Unread Count for Omnichannel Chats: This setting changes the behavior of the unread counter on Direct Messages All messages: All messages sent by another user are counted on the counter . Mentions only: Only mentions using @yourUsername are counted on the counter. DeepLink_Url: Lets you set the DeepLink URL CDN Prefix: If you want to use a CDN to load your workspace assets, insert your CDN prefix here", "tokens": 251}
{"title": "General", "content": ". Use CDN Prefix for all assets: This defines if all assets from the workspace come from a CDN. CDN Prefix for JS/CSS: Insert the prefix for the CDN that should load the JS/CSS assets here . Force SSL: You can use this setting to force SSL on your workspace. We strongly discourage the use of this setting; redirecting to HTTPS should be done at the reverse proxy level. Force SSL should never be used with reverse proxy . If you have a reverse proxy, you should do the redirect there. This option exists for deployments like Heroku, which does not allow the redirect configuration at the reverse proxy. Google Tag Manager ID: You can use Google Tag Manager on Rocket .Chat by setting your Id in this setting. Bugsnag API Key: If you are integrating Bugsnag with Rocket.Chat, you should put your Bugsnag API Key here. Store Last Message: Store the last message sent in each room . This enables the viewing of the last message on the left sidebar (should be on by default) Robots.txt File Contents: This sets the content of the Robots .txt file, used to help index your workspace on different search engines and crawlers Default Referrer Policy: This controls the 'referrer' header that's sent when requesting embedded media from other workspaces. For more information, refer to MDN . Remember, a full page refresh is required for this to take effect Enable second-layer encryption for data transport: Lets you enable second-layer encryption. This feature is currently in alpha Reset Section to Default: Click to reset the general settings to default . Number of days to keep logs from apps stored: Lets you set how long in days to keep logs from Rocket.Chat Apps. Apps' Source Package Storage type: Choose where all the apps' source code should be stored . Each app can be multiple megabytes in size . Directory for storing apps source package: Absolute path in the filesystem for storing the apps' source code (in zip file format) Max Record Amount: This sets the maximum number of records the REST API should return when not set to unlimited", "tokens": 458}
{"title": "General", "content": ". Default Count: The default count for REST API results if the consumer did not provide any. Allow Getting Everything: This setting affects the count query parameter. See more at Offset and Count Information . Yes: Allows the usage of the number 0 as count parameter. Setting count to 0 returns ALL the data from that endpoint No: Setting the number 0 on count, returns 0 results . Enable Direct Message History Endpoint: This enables the /api/v1/im.history.others which allows the viewing of direct messages sent by other users that the caller is not part of. Enable Shields: Enables the usage of Shields via API . Shields are available at /api/v1/shield .svg Shield Types: Types of shields to enable as a comma-separated list, choose from online, channel or * for all Require authentication for users shields: Let you set if user authentication is required for shields", "tokens": 187}
{"title": "General", "content": ". Enable CORS: Use this setting to enable CORS for the REST API. Enabling CORS makes the workspace only accept API Calls from specific origins. Setting this to false makes your workspace only accept requests from the same domain of the said workspace. E.g . Rocket.Chat workspace will only accept requests from the Rocket.Chat domain. CORS Origin: Here, you can set what origins are allowed to make requests to your workspace. You can use * to accept from all origins . For multiple Origins, use a comma-separated list. E.g https://domain1.com, https://domain2.com, https://domain3.com Use REST instead of WebSocket for Meteor calls: Set if Rest is used instead of WebSocket for Meteor calls . User Limit for Adding All Users to Channel: This limits the number of users that can be added to a Channel simultaneously . Update Latest Available Version: Updates to the specific versions available Enable the Update Checker: Checks automatically for new updates / important messages from Rocket.Chat developers and receives notifications when available . The notification appears once per new version as a clickable banner and as a message from the Rocket.Cat bot, both visible only to administrators . Max Room Members Before Disabling All Message Notifications: Max number of members in the room when notifications for all messages get disabled. Users can still change the per-room setting to receive all notifications individually . (0 to disable) To be able to use the microphone, camera, and geolocation in an iframe, be sure to allow the iframe features policy. Example Enable Send: This setting defines if Rocket.Chat can send events to the parent window . Send Target Origin: Origin with protocol prefix, which commands are sent to e.g. https://localhost, or * to allow sending anywhere. Enable Receive: This setting determines whether a parent window can send commands to Rocket.Chat . Receive Origins: Origins with protocol prefix, separated by commas, which are allowed to receive commands e.g. https://localhost, http://localhost, or * to allow receiving from anywhere . Net Promoter Score (NPS) survey Stream Cast Address: IP or Host of your Rocket.Chat central Stream Cast. E.g. 192.168.1", "tokens": 497}
{"title": "General", "content": ".1:3000 or localhost:4000 Default timezone for reporting: Sets the default timezone that is used when showing dashboards or sending emails . Custom timezone: Let you set custom timezones Custom Translations: With this setting, you can configure custom translations for your workspace. It should be a valid JSON where keys are languages containing a dictionary of keys and translations . Example: UTF8 Usernames Validation: RegExp used to validate usernames and channel names UTF8 Channel Names Validation: RegExp used to validate channel names UTF8 Names Slugify: RegExp used to create slugs for names . If you are having problems with names when creating channels (e.g., when using non-English characters), changing these values will probably fix it. For example, using [\\w_-]+ should allow any non-space character to be part of a name .", "tokens": 202}
{"title": "Net Promoter Score (NPS) survey", "content": "NPS aims to assess user satisfaction and make the Rocket.Chat experience even more pleasant for users. By allowing it to run on your workspace, you are helping Rocket.Chat to: Build a better product & better user experience Develop and prioritize features aligned with our users\u2019 needs Get accurate user feedback on what needs fixing versus what needs improvements. A banner is exhibited with the question: \u201cHow likely are you to recommend us to a friend or colleague?\u201d and a scale from 0-10 to collect the answer. If the user clicks on a score, a modal is exhibited to collect text feedback. Both actions can be dismissed by the user. NPS surveys are triggered every 6 months via Rocket.Chat cloud. The workspace needs to be registered in Rocket.Chat cloud. Otherwise, the survey is never triggered. All users in the workspace receive the survey on the same day. Admins get notified one month before the NPS is rolled out via an in-app banner and alert via Rocket.Cat. That means admins can quickly turn off the NPS if they choose. All feedback received through the NPS is anonymous. It does not collect any personal data. The following data elements are transmitted via statistics collector: Per-user who participates in the NPS An anonymous but unique hash value per user. The hash is created locally as a SHA256-hash of the combined user ID and NPS ID. The user ID is a local workspace value per user and is not transmitted outside of the workspace for the NPS campaign. The NPS ID is a string that identifies the NPS campaign to which the user is responding The user ID and NPS ID cannot be reversely identified from the hash itself. The user role (e.g. guest, admin) The numerical NPS score of the user (a number between 1-10) An optional comment from the user (e.g. \u201cI like the emojis a lot!\u201d) A workspace ID, which is a unique string per workspace but does not indicate who uses it Our users have total freedom to disable the NPS survey. Follow the steps below to switch NPS off: Within your Rocket.Chat workspace, navigate to Administration > Workspace > Settings > General > NPS Uncheck \u201cEnable NPS Survey\u201d Once the setting is turned off, the NPS survey stays off indefinitely.", "tokens": 495}
{"title": "IRC Federation", "content": "IRC Federation is in beta. Use on a production system is not recommended at this time. IRC Federation allows your server to connect to other IRC servers. Internet Relay Chat (IRC) is a text-based group communication tool. Users join uniquely named channels, or rooms, for open discussion. IRC also supports private messages between individual users and file-sharing capabilities. This package integrates these layers of functionality with Rocket.Chat. After configuring, you are able to communicate directly from your Rocket.Chat to any external IRC server. To access this setting, go to Administration > Workspace > Settings > IRC Federation. Enabled: When enabled, provides settings for IRC Federation integration. Protocol: This lets you set the protocol your IRC server uses. Example RFC2813. Host: The host on which your IRC is running, for example irc.rocket.chat Port: The port to bind to on the IRC host server. Name: What to name your IRC server. Description: Description of your IRC server. Local Password: Set the local password if existing. Peer Password: Lets you specify the peer password. After configuring, hit Save Changes and Restart your server.", "tokens": 253}
{"title": "Authentication and Identity Management FAQBrand and Visual Guidelines", "content": "For an overview of the identity management features available across our various plans, please refer to authentication across plans. What identity management features are exclusive to the Premium plan? What do LDAP, Active Directory, OAuth, and SAML mean? Why is identity management crucial? What is the impact of single sign-on (SSO) in Rocket.Chat? Why am I unable to use the code I contributed to building for LDAP/SAML/custom OAuth? How is my air-gapped environment impacted? Does the LDAP change affect the security or data privacy in my air-gapped environment? What does the Bind successful but user was not found via search error mean? How can I prevent disabled LDAP users from logging into Rocket.Chat? Why can't I log in even though the setup seems correct? Why are users not created even though the setup seems correct? Microsoft LDAP Search Filter Syntax Our brand guidelines are a collection of information, assets, and general advice to help you by providing guidance on what our brand consists of, feels like, and looks like. These guidelines will touch on the following topics: Logo Typography Colors Patterns Iconography Photos Brand usage examples Media kit Ensure to use this guide anytime you feel unsure of which visual path to take when producing content regarding Rocket.Chat.", "tokens": 272}
{"title": "LogoTypography", "content": "This document details the guidelines around Rocket.Chat's logo. The logo is one of the primary resources to identify Rocket.Chat. So, using it consistently and coherently is fundamental to strengthening the brand image. Our vertical variant should only be used when the full logo won't fit, but our brand name must still be displayed. The proximity to other elements can reduce the visual impact of the logo. When applying any of the versions, an area of non-interference around the logo must be protected, equivalent to at least three balls from our symbol. Whenever placing the Rocket.Chat symbol in circular or square formats, use the circle in the center of our symbol as a reference for centering. This document details the guidelines around Rocket.Chat's typograpghy. The Rocket.Chat typeface family brings flexibility and recognition. Its primary function is to have a fluid performance in the digital medium. Its unique design also helps to highlight aspects such as modernity, technology, and simplicity. We follow a 6px baseline grid for achieving a vertical rhythm on all block-level elements in the app.", "tokens": 229}
{"title": "Colors", "content": "This document details the guidelines around Rocket.Chat's color. Our color palette is varied and offers many accent colors to use when producing content for our brand . A white or light-colored background is favored, with small splashes of color in the form of type accentuation, images, or small elements that display our brand tones . A dark background can also be used, but the white type and accenting elements are best for contrast. Red is a primary color along with blue, and both should be prioritized in their usage above secondary and supporting colors . Red is the color of our logo and plays a significant role in our branding. Blue was also adopted as a primary color for its positive connotations in the tech space . These colors should only be used on white or corresponding light backgrounds (see supporting colors section). Transparency on these colors may be altered if used on elements but not on backgrounds and typography. The typography that sits atop these colors should be white . Their respective color codes are: Red: #F5455C Blue: #1D74F5 The following first two colors serve as taste breakers from the usual red and blue and can be used in iconography, illustrations, typography, and other assets to bring variety to our visual identity", "tokens": 267}
{"title": "Colors", "content": ". These can also be used to highlight certain keywords in a title or subtitle but shouldn\u2019t be used as the background color. Our black and white shades also bring versatility to our brand image, offering more possibilities for typographical styling and backgrounds . Their respective color codes are: Dark Purple: #9F22C7 Light Purple: #CA71E7 Light Green: #2DEDA5 Dark Green: #148660 White: #F7F8FA Black: #2F343D These lighter shades of our brand colors serve as options for backgrounds, iconography, and other elements such as images and illustrations . These lighter shades of our brand colors serve as options for backgrounds, iconography, and other elements such as images and illustrations . Their respective color codes are: Red for backgrounds: #FEECEF Blue for backgrounds: #E8F1FE Purple for backgrounds: #F5E9F9 Green for backgrounds: #EAFCF6 These gradients are a gradient version of the supporting colors and should only be used as the fill for the highlighting shape, as exemplified on our homepage, behind the second sentence in the subtitle . Light red highlight: #FEECEF to#FFFFFF Light blue highlight: #E8F1FE to#FFFFFF Light purple highlight: #F5E9F9 to#FFFFFF Light green highlight: #EAFCF6 to#FFFFFF", "tokens": 305}
{"title": "PatternsIconographyPhotos", "content": "This document details the guidelines around Rocket.Chat's patterns. Our brand doesn\u2019t rely on repeatable patterns, leaning more on illustrations that reflect our product\u2019s capabilities and our brand values or are otherwise relevant to complement a certain topic. Below, you\u2019ll find some versatile examples that can be used to add a bit of our branding to any content you produce. See the complete collection of Rocket.Chat branded images on our shared google drive folder. This document details the guidelines around Rocket.Chat's iconography. Our iconography follows the same design principles as the rest of our brand. Utilizing our brand colors as the focal point, using transparency for a lighter look, simple and clean lines along with to-the-point and easy-to-understand representations. Find some examples of our icons on the complete collection of Rocket.Chat branded icons. This document details the guidelines around Rocket.Chat's photos. Our brand makes use of illustrations in lieu of photography. Although images of people should be included in these illustrations for both realism and relatability, the focal point should be the product and not the photography, hence the shift in focus favoring illustration. We increasingly want to appropriate a unique, contemporary language that conveys our value proposition in the stories that we are telling. So, we have some guidelines to inspire the way the Rocket.Chat style must be. Our photos are high-temperature and saturated, resulting in a simple, proprietary effect. First, when choosing a bank image photo, it is necessary to understand the content and context it will bring to your art. Then you will do the right search and filter for the best image. The more specific your search term is, the easier it will be to find the right image.", "tokens": 359}
{"title": "Brand Usage ExamplesMedia Kit", "content": "Below are some examples of how to use the new Rocket.Chat brand from online applications to offline. Be sure to maintain consistency in applying all elements of the brand. This document details the guidelines around Rocket.Chat's modular compositions. Our media kit contains essential resources for producing content regarding Rocket.Chat. Complete with our logo, official fonts, and some supplementary resources to help fine-tune the overall aesthetic of whatever is produced.", "tokens": 92}
{"title": "Logs", "content": "Logs are a very useful way to monitor workspace activities in detail. They can also be very helpful for debugging in case of failures or errors. The server logs are available in the\u00a0Reports section. Here, you have the interface to configure how server logs are received. To access this section, go to Administration > Workspace > Settings > Logs. Log Level: A dropdown to select the level of logs to receive Log View Limit: The limit of logs to view Trace method calls: When enabled, it enables a trace of every method call. Trace method filter: The text here is evaluated as RegExp (new RegExp('text')). Keep it empty to show a trace of every call. Trace subscription calls: If enabled, every subscription call will be traced. Trace subscription filter: The text here is evaluated as RegExp (new RegExp('text')). Keep it empty to show a trace of every call. Log Exceptions to Channel: Set a channel to receive all captured exceptions. Leave empty to ignore exceptions. Prometheus is an open-source monitoring solution. Enable: When enabled, Prometheus monitoring is activated. Port: The port to listen to. Reset Interval (ms): Takes time in milliseconds when the connection should be reset. Collect NodeJS GC: When enabled, NodeJS garbage collector is activated. API: Track User Agent: If set to true, API calls of the user agent are tracked.", "tokens": 309}
{"title": "Message", "content": "Configure message settings. To access this menu, navigate to Administration > Workspace > Settings > Message. Remember to hit Save Changes to apply any changes made. Custom Domain Whitelist for Auto Link: To make local server links (like http://gitlab .local) clickable, you must whitelist the corresponding custom domain. Once you've done this, any message you send that includes a URL with the custom domain will have a clickable link . Custom Domain Whitelist for Auto Link is available on workspaces running version 6.2 and above. Allow message Editing: When enabled, users can edit messages . Block Message Editing After (n) Minutes: Specify the time in minutes when users can edit messages. After this period, editing will be disabled. Enter 0 to allow unlimited editing time . Allow message-deleting: Toggle on to allow users to delete messages. Block Message Deleting After (n) Minutes: This lets you set a duration in minutes in which users are allowed to delete messages . Allow Unrecognized Slash Commands: When enabled, unknown Slash Commands are allowed. Allow user direct messages to yourself: When enabled, users can send direct messages to themselves. Always Search Using RegExp: When enabled, all searches use RegExp . We recommend setting this True if your language is not supported on MongoDB text search. Show Deleted Status: When enabled, shows deleted when a message is deleted. Allow Message bad words filtering: Turn on to allow filtering of blacklisted words in messages . Add Bad Words to the Blacklist: Takes in a list of comma-separated words that are to be filtered from the workspace. Remove words from the Blacklist: Takes in any word already on the Blacklist and removes it . Keep Per Message Editing History: Whether or not to keep message editing history. Maximum Channel Size for ALL Message: This lets you set the maximum size of a channel . Maximum Allowed Characters Per Message: This lets you specify the maximum number of characters a message can contain. Allow converting long messages to attachments: When enabled, long messages can be converted to attachments . Grouping Period (in seconds): Takes in time in seconds in which messages are grouped with the previous message if both are from the same user and the elapsed time was less than the informed time in seconds", "tokens": 487}
{"title": "Message", "content": ". Embed Link Previews: Turn on to enable embedded link previews when links are posted in a chat. Embed Request User Agent: This lets you set a request user agent. Embed Cache Expiration Days: Set how many days the embed cache expires . Embed Ignored Hosts: Comma-separated list of hosts or CIDR addresses, eg. localhost, 127.0.0.1, 10.0.0.0/8, 172.16.0", "tokens": 106}
{"title": "Message", "content": ".0/12, 192.168.0.0/16 Safe Ports: Comma-separated list of ports allowed for previewing. Time Format: Specify the time format on your server. See also: Moment .js Date Format: Set the date format on your server. Time and Date Format: This lets you set the time and date format. Maximum Number of Chained Quotes: This lets you set the maximum number of Chained quotes . Hide System Messages: Select from a dropdown which system messages will be hidden. Max users in direct messages: Specifies the maximum uses for direct messages . Message Erasure Type: Select from the drop-down what to do with messages of users who removed their accounts. Code highlighting languages list: Comma-separated list of languages (all supported languages at highlight.js) that are used to highlight code blocks . Video Recorder Enabled: Requires video/webm files to be an accepted media type within File Upload settings. Allow Message Pinning: When enabled, allow messages to be pinned to any channel. Allow Message Starring: When enabled, users can star messages . Allow Custom Fields in Messages: Enable this option to use custom fields for messages. For example, set priorities for messages . Note that you can only add custom fields via any of these API endpoints: Update Message, Post Message, Send Message, and Upload File to a Room . Custom Fields Validation: The custom field values will be validated according to the rules defined in this setting. Check ajv.js.org for more information regarding validation options. Properties type and additionalProperties will be forced to object and false respectively. For example: Custom fields in messages is exclusively available to workspaces from 6.8.0. Enabled: Set true to allow preview for hex colors in rgba format . To preview a color you should write in this format: \u201ccolor:#000000\u201d and it will be displayed as: Hex color preview Enable image thumbnails to save bandwidth: When set to true, thumbnails are served instead of the original image to reduce bandwidth usage", "tokens": 432}
{"title": "Message", "content": ". Images at original resolution can be downloaded using the icon next to the attachment's name . Thumbnail's max width (in pixels): Takes in the thumbnail's max width in pixels Thumbnail's max height (in pixels): Takes in the thumbnail's max height in pixels Remove EXIF metadata from supported files: Enable to strip out EXIF metadata from image files (jpeg, tiff, etc .). This setting is not retroactive, so files uploaded while disabled will have EXIF data Audio Recorder Enabled: When set to true, users can record audio. Audio Message Bit Rate: Lets you set the bit rate for audio messages . Show Read Receipts: Whether to show read receipts. Detailed Read Receipts: This shows each user's read receipts. When both options are enabled, the read receipts action shows a list of users who have read the message . Delivered messages are indicated by a grey checkmark on the right. Once the message is read, the checkmark turns into a blue double checkmark", "tokens": 215}
{"title": "Message", "content": ". Enable Auto-Translate: Enabling auto-translation allows users with auto-translate permission to have all messages in a room automatically translated into their selected language. To learn more, see the Auto-Translate user guide . Auto-Translate for non-default language members: If enabled, any user with a language preference different from the workspace default will have the room automatically translated for them upon joining. Service Provider: A drop-down to select the translation service provider . You can choose between DeepL, Google, and Microsoft. Add the respective API key to complete authentication for the setup depending on your selected service provider. API Key: Enter your DeepL API key . To get the authentication key, see the official DeepL API documentation. Rocket.Chat does not currently support the free version of DeepL API. API Key: Enter your Google Translate API key . To get the API key for authentication, see the official setup guide for Google Translate. Ocp-Apim-Subscription-Key: Enter your Microsoft Ocp-Apim-Subscription-Key . Follow the official Azure translator guide to create a translator resource and use the API key as your Microsoft Ocp-Apim-Subscription-Key. Enable Mapview: Enabling map view displays a location share button on the right of the chat input field . Google Static Maps API Key: The Google Static Maps API Key can be obtained for free from the Google Developers Console. Katex Enabled: When enabled, allows the use of katex for math typesetting in messages . Allow Parenthesis Syntax: When enabled, you can use [katex block] and (inline katex) syntaxes. Allow Dollar Syntax: When enabled, allows using $$katex block$$ and $inline katex$ syntaxes.", "tokens": 360}
{"title": "Message", "content": "The message object is the heart of a conversation. It encapsulates all the information needed in order to represent a single entry on a message list. Messages are stored in the rocketchat_message collection on MongoDB . The IMessage interface represents the structure of a message object in the Rocket.Chat It defines the properties and their types that can be associated with a message sent. You can check the IMessage interface here. Rocket.Chat/IMessage .ts at develop \u00b7 RocketChat/Rocket.Chat Example object The message object contains these fields. Parameter Data type Description _id String The unique identifier for the message. rid String The unique ID for the room", "tokens": 144}
{"title": "Message", "content": ". This will identify the room that the message belongs to. Example: 'GENERAL' msg String The content of the message. tmid String The ID of the thread to which the message belongs. tshow Boolean Indicates whether the thread should be shown . ts Date A timestamp of when the message was created. (The date of creation on client) mentions Array of objects An array of user mentions within the message . Identifies (type:\"type of the mention; either user or tea\", _id: ID of the user that is mentioned, username: username of the user that is mentioned\", name: name of the user that is mentioned) . groupable Boolean Boolean that states whether or not this message should be grouped together with other messages from the same user. channels Array of objects An array of channels to which the message belongs . u Object The user who sent the message (either the _id or username or name). blocks MessageSurfaceLayout (enum) If it is a UIkit message, then the UIkit blocks components. alias String An alias for the message sender . md Array of object The message's content in a markdown format. _hidden Boolean Indicates whether the message is hidden. imported Boolean Indicates whether the message is imported. replies Array of strings An array of user IDs representing the message replies . location Object The geographic location associated with the message. starred Array of objects A list of users that have the message starred (list of user IDs` (_id) pinned Boolean Indicates whether the message is pinned . pinnedAt Date The date and time when the message was pinned. pinnedBy Object Information about the user who pinned the message. unread Boolean Indicates whether the message is unread. temp Boolean Indicates whether the message is temporary . drid String The direct room ID (if belongs to a direct room). tlm Date The date and time when the last thread message was sent. dcount Number The count of messages deleted in the thread . tcount Number The count of messages in the thread. t MessageTypesValues (enum) The message type. e2e pending or done (enum) The end-to-end encryption status of the message", "tokens": 468}
{"title": "Message", "content": ". otrAck String The acknowledgment status of an off-the-record message. urls Array of objects An array of URLs contained within the message. actionLinks Array of objects (deprecated) An array of action links associated with the message . file FileProp (deprecated) The file property associated with the message. fileUpload Object Information about a file upload associated with the message. files Array of FileProp objects An array of file properties associated with the message . attachments Array of MessageAttachment objects An array of attachment objects, available only when the message has at least one attachment. reactions Object Object containing reaction information associated with the message. private Boolean Indicates whether the message is private . bot Boolean (deprecated) Indicates whether the message is sent by a bot. sentByEmail Boolean Indicates whether the message was sent by email. webRtcCallEndTs Date The date and time when a WebRTC call ended . role String The role associated with the message. avatar String A url to an image, that is accessible to anyone, to display as the avatar instead of the message user's account avatar emoji String The emoji associated with the user who sent the message . tokens Array of Token objects An array of tokens extracted from the message content. html String The HTML representation of the message. token String (deprecated) A deprecated field used for messages sent by visitors. federation Object Information about federation associated with the message . slaData Object (used for specific message types) Additional data related to SLA (Service Level Agreements) change history messages. priorityData Object (used for specific message types) Additional data related to priority change history messages . The user presented on u and editedBy fields are a simplified version of the user information: (_id: The user id, username: The username, name: The name) The URL metadata contains several informational fields: (url: The URL itself (just as it appears on the message), meta: URL metadata (varies accord to the URL), headers: Some HTTP headers (varies accord to the URL), parsedUrl: The parsed URL broken into its parts) Some of the message types are listed below", "tokens": 489}
{"title": "Message", "content": ". A full list of the message-type property can be found here: Rocket.Chat/MessageTypes.ts at 957c69d7ebdcf4dca02e7753bfd75086be11ca44 \u00b7 RocketChat/Rocket .Chat Type Description r Room name changed au User added by ru User removed by ul User left ult User left team uj User joined channel ujt User joined team ut User joined conversation rm Message removed added-user-to-team Added user to team removed-user-from-team Removed user from team user-muted User muted by The attachment object is fully described here", "tokens": 138}
{"title": "Meta", "content": "With the Meta configuration, you can set custom meta properties for your workspace. Meta elements are tags used in HTML and XHTML documents to provide structured metadata about a Web page. They are very important for SEO, among other uses. To access this setting: Navigate to Administration > Workspace > Settings > Meta. Language: This lets you set the meta language. E.g en. Facebook App Id: When provided, allows the Facebook scraper to associate the Open Graph entity with your server. Robots: Specify to tell search engines what to and what not to index or follow. Google Site Verification: Input metatag to verify you own the server/site. MSValidate.01: A tag that is to be added to your site (header) to verify your site with the Bing webmaster tool. Custom Meta Tags: Any custom meta tags you wish to include. Example", "tokens": 181}
{"title": "Mobile", "content": "The Mobile settings are applied to the users using the Mobile App on your workspace. This gives you the flexibility to define some behaviors when connecting to your workspace from a mobile device. To access this setting, go to Administration > Workspace > Settings > Mobile. Allow Save Media to Gallery: When enabled, files shared in chats are saved on the user's device gallery. Force screen lock: When enabled, your users are required to use a PIN, BIOMETRIC, or FACE ID to unlock the app. Force screen lock after: The time in seconds to request the password again after the expiry of the latest section. Release Date: January 24, 2025 Resolved an issue where the navigation bar color was not displaying correctly. Fixed an issue where the autocomplete menu remained open after pressing the send button. Fixed issues with closing and visibility in hidden thread channels . Resolved failing discussion-related tests. improved accessibility for the following multiple components. For more details, check out our GitHub release page . Release Date: January 8, 2025 Fixed an issue that caused the Apple Watch app to malfunction when using an SSL Client Certificate in certain scenarios. For more details, check out our GitHub release page . Release Date: December 23, 2024 Introduced asynchronous end-to-end encryption (E2EE) key exchange to improve security and reduce delays. Support for the API_Embed settings was added to enhance customization options . Improved the process for resending two-factor authentication emails, with a toast notification confirming the email was sent. A legal button was added to the settings view to ensure compliance. Enhanced accessibility in the ReportUserView for better usability . For more details, check out our GitHub release page. Release Date: December 02, 2024 Enhanced image previews for URLs, ensuring consistent display of images. Adjusted toast notification text contrast to better align with themes for improved readability . Introduced pagination support for message synchronization, optimizing performance. Upgraded WatermelonDB to version 0.27.1 for improved database stability and performance. Added a new stars icon for a consistent and modern design", "tokens": 451}
{"title": "Mobile", "content": ". Updated the members list to display usernames when a member name is missing. Fixed the positioning of the keyboard emoji selector to ensure proper functionality. Corrected an issue requiring an extra tap to connect to a workspace . Prevented editing of direct message names on mobile where it was not intended. Resolved an issue where logging in returned a 401 error and failed to fetch old messages. Modified logout behavior to only occur when receiving a 401 error . Restored the delete channel permission for team channels. Fixed an issue where the \u201cApply your certificate\u201d option was not visible when adding a new workspace. Corrected the usage of database batch operations to address a regression . For more details, check out our GitHub release page. Release Date: November 11, 2024 Resolved an issue that prevented some Android users from logging in due to encryption keychain errors, making access smoother and more reliable . Added extra checks to ensure all settings load as expected, even when opening the app from a push notification. Enforced stricter server version requirements, allowing connections only with supported servers for enhanced compatibility", "tokens": 224}
{"title": "Mobile", "content": ". Fixed a crash occurring in the Directory on tablets, enabling stable navigation across devices. Corrected an issue where some emails appeared as \u201cundefined\u201d in rooms, ensuring an accurate display of all user information . Updated the attachment screen to remove the light status bar, providing a consistent look and feel across screens. Improved background process handling to minimize unexpected errors and improve app stability. Removed video thumbnails in the app\u2019s display for better overall performance in video content areas . Updated Directory parameters and refreshed the LiveChat API endpoints to keep everything running smoothly behind the scenes. For more details, check out our GitHub release page . Release Date: November 7, 2024 Message composer now indicates read-only mode in air-gapped environments. Video messages now feature custom thumbnails, enhancing visual appeal. New permissions for teams give admins finer control over access and roles . Switched to a new navigation stack for faster, smoother in-app transitions. Moved the edit action to the top of message options for quicker access. Added support for the \"livechat/room.saveInfo\" endpoint, expanding LiveChat capabilities . Implemented KeyID generation logic to improve user authentication security. Enhanced link readability for better clarity across the app. Made workspace selection more intuitive and user-friendly. Updated query parameters for select routes, keeping navigation efficient . Fixed custom emoji alignment to match the new line heights. Draft messages now save and update correctly, preventing content loss. Corrected a translation error in German for preview mode messaging . Resolved an issue where the pinned menu displayed a blank screen in certain rooms. Large emojis now display fully without being cut off, ensuring they appear as intended. For more details, check out our GitHub release page . Release Date: October 7, 2024 Resolved a scrolling issue when trying to view older posts, making it easier to browse long conversations. Made file format attachments less restrictive, ensuring smoother uploads and downloads", "tokens": 407}
{"title": "Mobile", "content": ". Fixed an issue with Google OAuth, restoring seamless login for Google users. Action sheets now close properly after editing a message, improving workflow consistency. Adjusted letter-spacing to fix a line break issue with the Inter Regular font for cleaner text formatting . Introduced a new buttonFontPrimary color in the light theme for better button visibility. Fixed the unread message separator, ensuring it appears correctly in chats. For more details, check out our GitHub release page . Release Date: September 26, 2024 Introduced the ability to mention users within E2EE messages. Added a dedicated Help page for improved user support. Enhanced color and contrast for better accessibility . Resolved memory issues related to the share extension on iOS. Fixed an issue where message details were not shown in push notifications in certain cases. Fixed flickering issues in the last message preview. Addressed the problem of the image viewer losing quality . For more details, check out our GitHub release page. Release Date: September 9, 2024 Improved markdown readability with better line height for cleaner formatting. Introduced a setting to enable file encryption, adding an extra layer of security for your files . Collapsible quotes now display additional text, giving more context at a glance. Enhanced accessibility with new labels and improved color usage in menus for better navigation. Image previews now display correctly without size distortions . Resolved an issue where draft content was being retained incorrectly in some cases. Increased security for randomly generated E2EE passwords. Small images in link previews will no longer appear enlarged. Fixed media auto-download issues to ensure smoother functionality . Corrected encryption behavior in rooms where the E2E_Enabled setting was disabled. The action sheet will no longer close unexpectedly when focusing on an input field. Changing E2EE passwords is now more reliable and straightforward . Restored backward compatibility for the E2E file encryption setting. For more details, check out our GitHub release page. Release Date: July 11, 2024 No more sending empty messages by accident . E2EE PDFs now open without a hitch. Fixed message composer placeholder breaking lines, keeping your text tidy. Updated the minimum iOS supported version in the README for clarity. For more details, check out our GitHub release page . Release Date: July 11, 2024 File encryption support keeps your files super secure", "tokens": 492}
{"title": "MobileOmnichannel Apps", "content": ". Unencrypted messages? Not in E2EE rooms! Messages are now automatically marked as read when you close a room, so you won\u2019t fetch already-seen messages. Need a password change? Users can now request it . A new sleek 'slide' drawer gives you a better UI experience. Upgraded to bluesky-social/react-native-bottom-sheet for top-notch performance. PDFs now open without a hitch on Android 11+ . Russian localization strings for user role updates are spot on. The save button stays disabled until the status value actually changes. Server time now properly synced. Added a function to keep your subscription's last open date up to date . Message labels on SelectListView now display correctly. For more details, check out our GitHub release page. Release Date: June 13, 2024 Fixes: You can now open PDFs on Android 11+ without any hassle . The updateLastOpen function is back to keep your subscription dates accurate. Improvements: Circular dependency in sharedStyles import? Resolved! For more details, check out our GitHub release page. Omnichannel apps give consumers a choice to engage with you on their favorite channels like: SMS Email Voice WhatsApp Telegram Facebook Messenger You must have the Omnichannel feature enabled and have agents and managers assigned to receive and send Omnichannel messages. If you are using a firewall, you must whitelist the omni-gateway.rocket.chat URL to communicate with Omnichannel apps. See Firewall Configuration for a complete list of URLs. SMS Telegram App Rasa App Salesforce CRM Integration Dialogflow App Twitter App Facebook App WhatsApp 360Dialog Instagram Direct", "tokens": 368}
{"title": "Private App Development and Installation", "content": "Rocket.Chat allows you to develop and upload private apps tailored to specific workspaces. These apps are functional only within the workspaces where they are manually installed. You can also share your app package privately with other workspace owners for use in their respective environments . To begin developing a Rocket.Chat app, refer to the Apps-Engine guide. With Apps-Engine, you can create apps to: Display interactive and dynamic content on their interface - like a modal or the room\u2019s contextual bar . Create buttons in the UI for users to interact with native content. Create slash commands for users to trigger more generic interactions. Register endpoints to receive data from other applications and services. Work on both desktop and mobile clients . Send messages to users; create and manage public channels, groups, discussions, and threads. Starting with Rocket.Chat Version 7 .0, the ability to upload private apps is now restricted to our premium plans (Starter, Pro, and Enterprise). This change is designed to maintain the integrity of Rocket.Chat's customization options while safeguarding the exclusive features of our paid plans . By limiting private app uploads, we ensure that only licensed users can fully tailor their experience, protecting both the value and security of our platform. To install a private app in Rocket.Chat, ensure that your app is packaged in a .zip format . Follow these steps to complete the installation on your workspace: Navigate to the Private Apps section Go to Administration > Marketplace > Private Apps. Upload the Private App\nClick on Upload Private App. Click Browse Files and select the app .zip file. Complete Installation Agree to the required permissions to finalize the installation. Once complete, your app will be installed and ready to use. For Rocket.Chat workspaces on versions less than 6 .0, go to Administration > Settings > General > Apps and Enable development mode, then proceed to Administration > Apps to Upload App. In Rocket.Chat versions lower than 6.0, you can continue using all previously enabled public and private apps", "tokens": 424}
{"title": "Private App Development and Installation", "content": ". However, purchasing or enabling new apps is restricted once the app limit is reached. After uploading a private app to your workspace, it is enabled by default, and you can start using it . If you don\u2019t want to use the app but still need it, you can disable it for any period of time. You can enable and disable an app in the following ways: Go to the Private Apps section of the Marketplace in your workspace . Select the kebab menu against an app and click Enable or Disable. Go to the App Info page of the app you want to enable or disable. Select the kebab menu under the app name and description . Click Enable or Disable according to your needs. Premium plans Public apps Private apps Install Unlimited Unlimited Enable/Use Unlimited Unlimited Community workspaces Public apps Private apps Install Unlimited Unlimited (from 7 .0, the installed apps are disabled by default) Enable/Use 5 0 Currently, Community users can install unlimited public apps after reaching the enabled app limit . To enable the new apps, users must disable existing enabled apps or upgrade to a premium plan. Workspaces with an expired premium license will have all their apps disabled if they exceed the community workspace\u2019s limit. The app count will return to zero . Starting with Rocket.Chat version 7.0, only workspaces on premium plans can install and use private apps. For community users, the following changes will apply: Exemption to existing private apps: If you had private apps installed and enabled before upgrading to version 7.0, you will still be able to use them. Rocket.Chat will exempt these apps from the private app limit policy. Re-enabling disabled apps: If you disabled an app before updating to version 7.0, you can re-enable and use it after the update. Uninstalling private apps: If you uninstall a private app after upgrading to version 7.0, you will not be able to re-upload or reinstall it. Downgrading from Premium to Community after a trial period or paid subscription: You will be able to continue using the apps you have after downgrading your workspace.", "tokens": 452}
{"title": "Rocket.Chat Public Apps Guides", "content": "Public Apps include all the apps listed on the Rocket.Chat Marketplace. They also include tools that contribute to a seamless experience in your workspace.", "tokens": 32}
{"title": "Dialogflow App", "content": "Dialogflow lets you integrate lifelike conversational AI with advanced virtual agents into your websites, applications, messaging platforms, and contact centers. With the Rocket .Chat and Dialogflow integration, you can train your chatbot to handle specific queries and configure it to function as an Omnichannel agent. This document provides a guide to integrating Rocket.Chat with Dialogflow . You must have the Omnichannel feature enabled and have agents and managers assigned to receive and send Omnichannel messages. To install the Dialogflow app, Go to Administration > Apps > Marketplace. Search for the Dialogflow app . Click Install and accept the needed permissions. See the official Dialogflow guide to learn how to set up Dialogflow. After creating a service account on your Google Cloud Console, download the JSON file containing the key and the necessary credentials . To configure a bot user, Go to Administration > Workspace > Users. Create a new user (bot). Assign the roles Bot and Livechat Agent to this user . Configure the app to assign a \u201clivechat-visitor\u201d to this bot automatically. Navigate to Administration > Workspace >Settings > Omnichannel > Routing. Enable Assign new conversations to bot agent . On the Dialogflow App Info screen, go to Settings. Update the required fields: Bot Username: Set the username of the bot you created earlier. This user will assist with the conversations through Dialogflow integration . Project Id: The project_id property of the Google credentials file. Environment: The environment where the bot is set up. Client Email: The client_email property of the Google credentials file. Private Key: The private_key property of the Google credentials file . Language: Select the language in which you'd be interacting with the bot", "tokens": 385}
{"title": "Dialogflow App", "content": ". Fallback Responses Limit: If the Omnichannel end-user asks something the bot is not trained to answer and fails, this specifies the limit of the conversation failures before the conversation is forwarded to a human agent . Target Department for Handover: Select the department to transfer customers when there is a \u201cbot-to-live agent\u201d handover. Handover Message: A message sent to the customer upon handover . Service Unavailable Message: A message sent by the bot to the customer if service is unavailable. Close Chat Message: A message sent automatically to the customer when a chat is closed . Hide Quick Replies: If enabled, all quick replies will hide when customers click on any of them. Click Save Changes. You can test your Dialogflow connection by: Viewing your app log . To view your app log: Click the kebab menu on the Dialogflow App Info screen and select View Logs. Select the recent app:getStatus tile. If Google Credentials Validation Success appears, your setup is ready . Otherwise, recheck your Dialogflow credentials. Navigating to the workspace\u2019s Livechat and sending one of the prompts you\u2019ve trained the bot to recognize. The Dialogflow bot is expected to reply with the appropriate response . To add quick Replies, use Custom-Payload for responses on Dialogflow Console. Go to Intent > Responses > Add Responses > Custom Payload. Add the Quick Replies you want, following the structure format in the repository . To delete the app from your workspace, Go to Administration > Apps > Installed. Click the kebab menu against the Dialogflow app. Select Uninstall. Click Yes to confirm the uninstallation.", "tokens": 356}
{"title": "Upload File To Ongoing Dialogflow Chats", "content": "You may have a use case where you want to upload a file to the ongoing Bot conversation, like a product handbook or purchase invoice. Have a Dialogflow intent with fulfillment webhook enabled A bot user with a Live Chat agent role. To upload a file to an ongoing bot conversation, Get the Dialogflow session-id of the ongoing bot conversation where you want to upload this file. You can get it from the fulfillment webhook request, which Dialogflow will send upon detecting your target intent. See a sample webhook request for a detailed example. The session-id is in the session property. Use the Upload File to a Room endpoint with the session id as the Room Id on Rocket.Chat. The endpoint requires authentication, so you can use the Login endpoint to get authentication tokens for the bot user.", "tokens": 181}
{"title": "Facebook Messenger", "content": "Omnichannel Integration between Rocket.Chat and Facebook Messenger. The Facebook Messenger app lets you handle messages from your Facebook contacts directly in Rocket.Chat. Your customers contact you via Messenger, and you answer chats from your Rocket.Chat workspace . Some key features of this integration include: Sending messages with quick reply buttons Welcome messages(starting/closing chat) File sharing Correlation between your Facebook pages and your Rocket.Chat departments . You must have the Omnichannel feature enabled and have agents and managers assigned to receive and send Omnichannel messages. To install the Facebook App, Go to Administration > Apps > Marketplace. Search for the Facebook App . Click Install and accept the needed permissions. You receive a message from facebook.bot in the #omnichannel-facebook-setup channel with setup instructions. To configure the Facebook App, On the Facebook App Info screen, navigate to Settings . Update the Settings: Agents Display Name: You can display the agent's name or username. File Upload Enabled: You can enable/disable file sharing and set a limit for maximum upload size . Accepted Media Type: Select the type of files that can be shared between the Agents and your Twitter Contacts. Click Save changes. Before sending any messages, you must authorize Omni-Gateway to send and receive Facebook messages on behalf of your account . Ensure that each of the following requirements is met before starting the authentication process: A Facebook account. A Facebook page. This is the page from where your customers can message you. Make sure your Rocket .Chat instance is on a public Address and is accessible by anyone on the internet. Go to Admin > General > Site Url to confirm this. Lastly, ensure your Rocket.Chat instance is connected to Rocket.Chat Cloud . Go to Admin > Connectivity Services to connect to Cloud. You are automatically subscribed to the Facebook page after successful authentication. However, you can choose to unsubscribe . From the list of connected Facebook Accounts, click the UNSUBSCRIBE button against the account you want to unsubscribe . To update the page configurations, Click the Edit Page Config button under the account and update the following settings: Department: You can route all the conversations from this page to a specific department", "tokens": 477}
{"title": "Facebook MessengerFacebook App Agent's Guide", "content": ". Only the agents of this department can serve conversations coming from this page. Welcome Message: First message your customer will receive when they message you. Conversation Finished Message: A message sent to your customer when a conversation is closed . Default message for offline service: Message sent to your customer when no agents are available online. Only the agents of this particular department can see and take the chats. The Facebook app has a list of shortcuts to ease usage . /facebook authorize:: Starts the Facebook authorization. /facebook unauthorize: Revoke Facebook authorization. /facebook edit pageId: Edit Page configuration for the given page ID. /facebook help: Shows help message . When a Facebook user sends a message, and no agent is available on the server to chat, the conversation won't be created. This means that when agents return to work, they will not know someone was reaching out . Therefore, please ensure you always have at least one agent online. To delete the Facebook app from your workspace, Go to Administration > Apps > Installed. Click the kebab menu against the Facebook app. Select Uninstall . Click Yes to confirm the uninstallation. If you set up Facebook app integration and a user sends you a message on your Facebook business page, It appears in your Rocket.Chat workspace, just like any other Omnichannel conversation available for an agent to take it. You can respond to the customer from your workspace, and they receive the response on Facebook. You can also send and receive files during the conversation. You must be an agent before you can receive omnichannel messages from Facebook.", "tokens": 343}
{"title": "HubSpot CRM", "content": "HubSpot CRM helps you manage customer relationships and track interactions effortlessly. By integrating HubSpot CRM with Rocket.Chat, you can streamline contact management and receive HubSpot ticket notifications directly in Rocket.Chat . Once integrated, the HubSpot bot is added as a user to your workspace. You must have the Omnichannel feature enabled and have agents and managers assigned to receive and send Omnichannel messages . To install the HubSpot CRM app, Go to Administration > Apps > Marketplace. Search for the HubSpot CRM app. Click Install and accept the needed permissions. Migrate an API key integration to a private app: If you've built a Rocket .Chat and HubSpot CRM integration that uses a HubSpot API key, you need to complete the migration to your private app, remove all references to the HubSpot API key from your code, and follow the next steps to use your private app's access token . This secure method allows you to use HubSpot's APIs to access specific data from your account. You can authorize what each private app can request or change in your account, generating an access token unique to your app . In your HubSpot account, navigate to Settings > Account Management > Integrations > Private Apps. Click Create private app. On the Basic Info tab, update your app's\u00a0name,\u00a0upload icon,\u00a0and\u00a0description . Click the Scopes tab. Click on \u201cAdd new scope,\u201d search, and select the Read or Write checkbox for each scope you want your private app to access . The image below highlights the scopes you should add: After configuring your app, click Create app. Review the information about your app's access token in the dialog box, then click Continue creating. Once you have created your app, copy the access token . You can start making API calls using the app's access token. Migrated an API Key integration to a private app: Private apps enable you a powerful, secure way to make API calls to your HubSpot account . To configure the HubSpot CRM App, On the HubSpot CRM App Info screen, navigate to Settings. Update the required fields: API key: Enter the API key or private app's access token to allow access to your HubSpot account information . Enable the option to display contact information when assigning the agent to the chat. Enable/disable the option to ignore archived objects. Click Save Changes. To delete the HubSpot CRM Integration app from your workspace, Go to Administration > Apps > Installed . Click the kebab menu against the HubSpot CRM Integration app. Select Uninstall. Click Yes to confirm the uninstallation.", "tokens": 583}
{"title": "HubSpot CRM Agent's Guide", "content": "If you have HubSpot CRM integration in place and a user sends you a message, it appears in your Rocket.Chat workspace just like any other Omnichannel conversation. When you start serving the conversation as an agent, the Hubspot CRM Integration takes effect and displays options for various tasks in the chat. If it is an existing contact, you can view their contact info by clicking the Contact Info button in the chat. You can see all HubSpot deals associated with contacts, companies, engagements, line items, tickets, and custom objects by clicking View Deals. You can create a ticket and assign appropriate owners and stages to your tickets by clicking on Create Ticket. You can view and manage all HubSpot tickets by clicking View All Tickets.", "tokens": 157}
{"title": "Instagram Direct", "content": "With the Instagram Direct app, you can directly handle messages from your Instagram Business inbox in Rocket.Chat. Instagram users contact you via Instagram Direct messages, and you answer chats from your Rocket.Chat workspace . Some key features of this integration include sending messages with quick reply buttons, welcome messages(starting/closing chat), file sharing, and the correlation between your Instagram Direct pages and your Rocket.Chat departments . The Instagram Direct integration is available to the following Instagram Direct Professional Accounts: All business accounts Creator accounts via a phased roll-out, beginning with accounts with less than 500k followers For more official info, see Instagram messaging with the Messenger platform . To install the Instagram Direct app, Go to Administration > Apps > Marketplace. Search for the Instagram Direct app. Click Install and accept the needed permissions. You receive a message from instagram .bot in the #omnichannel-instagram-setup channel with setup instructions. You must have the Omnichannel feature enabled and have agents and managers assigned to receive and send Omnichannel messages . If you have multiple Facebook apps connected to a single Facebook account, then Facebook allows those apps to participate in a conversation by passing control of the conversation between them. This feature is known as the Handover protocol . If you use the Handover protocol on your account, this Instagram app allows you to perform some handover operations. To learn more, see the official documentation for handover protocol . To configure the Instagram Direct app, On the Instagram Direct App Info screen, navigate to Settings. Update the required fields: Agents Display Name: Choose to display the agent's name or username . File Upload Enabled: Enable/disable file sharing and set a limit for maximum upload size. Accepted Media Types: Select the type of files that can be exchanged during a conversation . Delete messages once it has been \"Unsend\" from Instagram: Select what to do with Unsent messages", "tokens": 419}
{"title": "Instagram Direct", "content": ". Instagram Handover Protocol Action: It defines the action which should be performed while sending an agent's message to a thread to get access to the thread. Take Thread Control action will only work if you've configured Rocket .Chat Omni-gateway app as a Primary Receiver from Facebook Apps page settings. Instagram Handover Protocol Metadata: It defines the metadata to be passed along with thread control action requests. You can use this to pass some custom payload to other apps . Click Save Changes. Before sending any messages, you must authorize the Omni-Gateway to send and receive Instagram Direct messages on behalf of your account. Ensure that each of the following requirements is met before starting the authentication process: An Instagram Business Account . A Facebook account. A Facebook page connected to your Instagram account. See the Meta guide on connecting your Facebook page to your Instagram account. Enable Message Control Connected Tools Settings from your Instagram account on mobile. Make sure your Rocket .Chat instance is on a public address and is accessible to anyone on the internet. Go to Admin > General > Site Url to confirm this. Lastly, ensure your Rocket.Chat instance is connected to Rocket.Chat Cloud . Go to Admin > Connectivity Services to connect to Cloud. To start the authentication with Instagram Direct, From the instagram.bot message, click on the Start Authentication button. You are redirected to a page to log in and authorize Instagram Direct . Select the Instagram business account you want to use with Rocket.Chat Omni Gateway. If you have multiple pages associated with your Instagram account, it will prompt you to choose the preferred page to connect. Determine what Rocket .Chat Omni Gateway can do with the pages you have selected. After selecting your page, you will receive a success message with credentials for your Instagram Business Account that has been authenticated and subscribed. You are automatically subscribed to the Instagram page following successful authentication . However, you can choose to unsubscribe. From the list of connected Instagram Business Accounts, click the UNSUBSCRIBE button against the account you want to unsubscribe . To update the page configurations, Click the Edit Page Config button under the account and update the following settings: Department: You can route all the conversations from this page to a specific department", "tokens": 487}
{"title": "Instagram Direct", "content": ". Only the agents of this department can serve conversations coming from this page. Welcome Message: First message your customer will receive when they message you. Conversation Finished Message: A message sent to your customer when a conversation is closed . Default message for offline service: Message sent to your customer when no agents are available online. When an Instagram user sends a message, and no agent is available on the server to chat, the conversation won't be created . This means that when agents return to work, they will not know someone was reaching out. Therefore, please ensure you always have at least one agent online. The Instagram Direct app has a list of shortcuts to ease usage . /instagram authorize:: Starts the Instagram authorization process to connect your Instagram accounts. /instagram unauthorize: Revoke Instagram authorization to remove all connected Instagram accounts. /instagram edit pageId: Edit Page configuration for the given pageId . /instagram edit username: Edit PageInstagram configuration for the given Instagram username. /instagram help: Shows help message. To delete the Instagram Direct app from your workspace, Go to Administration > Apps > Installed . Click the kebab menu against the Instagram Direct app. Select Uninstall. Click Yes to confirm the uninstallation. You cannot receive messages on Rocket.Chat if you have a country restriction set on Instagram.", "tokens": 298}
{"title": "Instagram Direct Agent's Guide", "content": "If you set up Instagram Direct app integration and a user sends you a message on your Instagram business page, It appears in your Rocket.Chat workspace, just like any other Omnichannel conversation available for an agent to take it. You can respond to the customer from your workspace, and they receive the response on Instagram. You can also send and receive files during the conversation. The integration also supports context from Instagram stories and posts within the incoming messages. You must be an agent before you can receive omnichannel messages from Instagram.", "tokens": 117}
{"title": "Rasa App", "content": "Rasa is a framework for developing AI-powered, industrial-grade chatbots. It is an open-source alternative to the Dialogflow app . With the Rasa Chatbot app, you can set up and train your chatbot to respond to any query it's been trained for and configure it to act as an Omnichannel agent . You must have the Omnichannel feature enabled and have agents and managers assigned to receive and send Omnichannel messages. The Rasa app operates in two modes: Synchronous and Asynchronous modes . The app uses Rasa's REST API to exchange messages in synchronous mode. To enable this mode, configure the Rasa bot's credentials.yml file and enable the REST API. In asynchronous mode, the app utilizes callbacks to receive messages from Rasa . It is helpful if your app uses features like Reminders and External events, as they only work in this mode. To configure Rasa for this mode, you need to include the following configuration in the credentials .yml file of your Rasa server: To get your app callback URL, navigate to the Rasa App Info > Details > APIs on your workspace. To install the Rasa App, Go to Administration > Apps > Marketplace . Search for the Rasa app. Click Install and accept the needed permissions. To set up Rasa server, visit the Rasa installation guide . Go to Administration > Workspace > Users and create a new user with the following roles: bot livechat-agent Go to Administration > Workspace > Settings > Omnichannel > Routing and enable Assign new conversations to bot agent. Open the installed Rasa app . On the Rasa App Info screen, go to Settings. Update the required fields: Bot Username: Set the username of the bot you created above. This user will assist with the conversations through Rasa integration . Rasa Server URL: The URL of your Rasa server (for example, http://localhost:5005). Service Unavailable Message: A message sent to your customer if the service is unavailable", "tokens": 458}
{"title": "Rasa AppSalesforce CRM", "content": ". Close Chat Message: A message is sent to the customer when a conversation is closed. Handover Message: A message sent to a customer upon handover . Default Handover Department Name: The target department name where you want to transfer the customer upon handover. Enable Callbacks: Enable callbacks to allow the app to use only callback messages . It is useful when you are using reminder messages in your RASA bot. Hide Quick Replies: If enabled, all quick replies will hide when customers click on any of them. Click Save Changes . To see the bot in action, go to the workspace\u2019s Livechat and send one of the prompts you\u2019ve trained the bot to recognize. The Rasa bot will reply with the appropriate response . The Rasa app provides out-of-the-box support for quick replies to improve customer conversations. To add quick replies, you can follow the structure of the rich responses defined in Rasa . To delete the Rasa app from your workspace, Go to Administration > Apps > Installed. Click the kebab menu against the Rasa app. Select Uninstall. Click Yes to confirm the uninstallation. The Rocket.Chat Salesforce CRM cloud app enables businesses to effectively manage sales, marketing, and support services. Using this app, you can maintain customer data, track sales leads, and create and monitor marketing campaigns. Key features of the Rocket .Chat Salesforce CRM app Streamline communication between sales teams, customer service, and management. Quickly access customer information and history. Consolidate data from both platforms to analyze the operations and customer relations . Different teams and departments have access to the same information, ensuring consistency in customer interactions. Create a private key and public key certificate with these commands: Linux has OpenSSL by default to run these commands. However, you can choose your preferred method", "tokens": 389}
{"title": "Salesforce CRM", "content": ". To view the keys you just created, run this command: Retrieve and copy the private key using this command: Create a new connected app on Salesforce. Fill in the name, email, and other required information. Check the Enable OAuth Settings option . Add your callback URL. Check the Use Digital signatures option and upload the public key certificate (publickey.cer) you created earlier. For the Selected OAuth scopes, add the api refresh_token offline_access option. Click Save . Click Manage Consumer Key and copy the Consumer Key. Navigate to Settings > Apps > Manage Apps > Connected Apps. From the list of connected apps, click the Edit action beside the app you created earlier . Select Admin approved users are pre-authorized option for Permitted Users dropdown option. Click Save. Navigate to Settings > Users > Users and confirm your user profile name. Navigate to Settings > Users > Profile . From the list of profiles, click the Edit action beside your user's profile name. Alternatively, click the profile name, then hit the Edit button. Scroll to Connected App Access and select the checkbox of the app you created. Click Save . To install the Salesforce CRM Integration App, Go to Administration > Apps > Marketplace. Search for the Salesforce CRM Integration app. Click Install and accept the needed permissions . You must have the Omnichannel feature enabled and have agents and managers assigned to receive and send Omnichannel messages. To configure the Salesforce CRM Integration App, On the Salesforce CRM Integration App Info screen, navigate to Settings . Update the required fields: Consumer Key: The consumer key from your Salesforce instance. Private Key: The private key from your Salesforce instance. Salesforce Username: Your salesforce username, it's useful for identification. Authentication URL: Authentication URL for Salesforce API . In the case of production, this should be https://login.salesforce.com/services/oauth2/token. Audience for JWT: In case of production, this should be https://login.salesforce.com", "tokens": 449}
{"title": "Salesforce CRM", "content": ". Display Contact information when assigning the agent to the chat: If enabled, Salesforce contact information will be displayed to agents when assigned to chats . Auto-Save/Update Contacts when a Chat Ends: If enabled, the app will auto-save/update the customers' info on Salesforce once an agent closes the chat . Metadata Refresh Interval(in Minutes): The duration within which the app will automatically refresh its cache. For a better user experience, the app will cache some meta-data information from Salesforce . Salesforce Session Timeout(in Minutes): It should be the same as the Session Timeout setting on your Salesforce Setting ( Setup > Session Settings > Session Timeout > Timeout Value ). Click Save Changes . The Salesforce CRM integration lists shortcuts to ease usage during Omnichannel conversations. /salesforce contact : View Contact information. /salesforce create-contact : Create a new contact. /salesforce cases : View All Contact cases . /salesforce create-case : Create a new case. /salesforce case 123 : View information about a specific Case using the Case Number. /salesforce help : Shows help message . To delete the Salesforce CRM integration app from your workspace, Go to Administration > Apps > Installed. Click the kebab menu against the Salesforce CRM Integration app. Select Uninstall. Click Yes to confirm the uninstallation.", "tokens": 300}
{"title": "Salesforce CRM Agent's Guide", "content": "If you have Salesforce CRM integration in place and a user sends you a message, it appears in your Rocket.Chat workspace just like any other Omnichannel conversation. When you start serving the conversation as an agent, the Salesforce CRM Integration takes effect and displays options for various tasks in the chat. If it is a new customer, you can create their contact inside your Salesforce CRM from within Rocket.Chat. To create a contact, Click the Create Contact button in the chat. Fill in the required contact details. Click Confirm. The customer is now a Salesforce contact. If it is an existing contact, you can view their contact info by clicking the Contact Info button in the chat. You can view their cases by clicking the View Cases button in the chat if it is an existing contact. You can also create a new case for a customer from your Rocket.Chat workspace. Click on the Create Case button in the chat. Fill in the required information. Click Confirm. A new Salesforce case is created for the customer. You can also view the customers' Tasks, Events, and Calls.", "tokens": 230}
{"title": "SMS", "content": "External users can communicate with your Rocket.Chat workspace through SMS. This integration extends Rocket.Chat's Omnichannel capabilities. This is helpful for customers to contact your support team via SMS. It offers the ability to configure SMS integration with several providers . However, this guide is focused on Twilio using Twilio Programmable Messaging API. Your workspace must be available on a public URL. To relay SMS, you need to get a Twilio number and create a messaging service . To do this, follow these steps: Sign up or log in to your Twilio account. From the messaging section, Twilio will automatically provision a number for you. You can send test messages from the Twilio console to ensure the number works . After configuring your Twilio number for messaging, the next step is to link it to Rocket.Chat through the Omnichannel webhook endpoint. From your Twilio console, go to Phone Numbers > Manage > Active numbers . You will see your Twilio provisioned number and the messaging service it is linked to. Click on the number to open its configuration page. Go to Messaging Configuration . Update the Webhook URL value for \"A message comes in\" with the URL of your publicly available Rocket.Chat workspace in this format https://<SERVER_URL>/api/v1/livechat/sms-incoming/twilio. Then, click Save . Ensure the action type selected above is Webhook and the method is HTTP POST. To connect your Twilio account to your Rocket.Chat workspace, follow these steps: Go to Administration > Workspace > Settings > SMS on your workspace . Enable it and select the Service as Twilio. On the same page, go to the Twilio tab. Enter the Account SID and Auth Token values from your Twilio console. Enable or disable the File Uploads Enabled option . If enabled, you can enter the Accepted Media Types as comma-separated values. For example, image/,audio/,video/,text/,application/pdf. Leave it blank to accept all media types. Click Save Changes", "tokens": 467}
{"title": "SMS", "content": ". We have configured a Twilio Programmable Messaging number and linked it with Rocket.Chat through a webhook. To test the two-way communication between Rocket .Chat and SMS, follow these steps: Open any SMS messaging app on your phone and send a message to your Twilio active number. The message is received on your Rocket.Chat workspace and available for any Omnichannel agent to continue the conversation . When a reply is sent from Rocket.Chat, the sender receives it via SMS. The green message icon  is displayed on the side and identifies external SMS messages sent to an Omnichannel department. You can enable and configure various SMS gateways on your workspace. To access this menu, navigate to Administration > Workspace > Settings > SMS. Enabled: This lets you enable or disable SMS service on your server. Service: Select the available SMS services e .g. Twilio, Mobex, Voxtelesys Omnichannel Department (Default): If set, all new incoming chats initiated by this integration are routed to this department. Use an external frame to embed Rocket .Chat into your own solution or interact with your CRM. External frame enabled: Turn on to enable external frame. External frame URL: Add the URL of your external frame", "tokens": 277}
{"title": "SMS", "content": ". Encryption key (JWK): If provided, it encrypts the user's token with the provided key, and the external system needs to decrypt the data to access the token. Create a Mobex account at https://mobex .biz/ and get a plan with the needed credentials to configure your Mobex SMS integration. Mobex SMS Gateway Address: IP or Host of your Mobex service with the specified port. E.g. http://192.168.1 .1:1401 or https://www.example.com:1401 Mobex SMS REST API Address: IP or Host of your Mobex REST API. E.g. http://192.168.1.1:8080 or https://www .example .com:8080 Username: Your username Password: Your Mobex password From: Originating address/phone number when sending a new SMS to Live Chat client List of numbers to send SMS from: Comma-separated list of numbers to use in sending brand new messages, eg . 123456789, 123456788, 123456888 Account SID: Your account's SID. It is provided by Twilio . Auth Token: Your Twilio auth token File Uploads Enabled: When enabled, file uploads will be active in SMS Accepted Media Types: Comma-separated list of media types. Leave it blank to accept all media types . Auth Token: Your Voxtelesys auth token URL: The Voxtelesys URL e.g https://smsapi.voxtelesys .net/api/v1/sms File Uploads Enabled: When enabled, file uploads are made available Accepted Media Types: Comma-separated list of media types. Leave it blank to accept all media types.", "tokens": 407}
{"title": "Telegram App", "content": "With the Telegram app on Rocket.Chat, your customers can send and receive Omnichannel messages from your workspace through a Telegram bot. Key features of the Rocket.Chat Telegram app Manage Telegram conversations from a single inbox with unlimited chat history . Engage with clients via multimedia chat. Option to set up quick replies using bots. The Telegram app is used for Omnichannel conversations. To use your Telegram bot in rooms, see the Simple Telegram Bot integration . To install the Telegram app in your workspace, follow these steps: Go to Administration > Apps > Marketplace. Search for the Telegram app. Click Install and accept the needed permissions . You must enable the Omnichannel feature with agents and managers assigned to receive and send Omnichannel messages. To generate a Telegram bot token, follow these steps: Install and open the Telegram app on your device . Open a new chat, search and select \"BotFather\". Click Start. Type /newbot in the chat and Send. Select a name and a unique username for your bot . Once the username is accepted, a congratulatory message displays all the bot's details, including the API token. Copy the bot API token . To configure the Telegram app in your workspace, follow these steps: On the Telegram App Info screen, go to the Settings tab. Update the following fields: Field Description Telegram Bot Token * The bot token you copied when generating the telegram bot . Default Department Id or Name Only the agents of this department can serve Telegram conversations. Service Unavailable Message The message that is sent to your customer when no agents are available online. Welcome Message The message sent to customers when they send their first message . Conversation Finished Message The message sent to your customer when an agent closes the conversation. Agents Display Name You can display the agent's name, or username, or not display anything. File Upload Enabled Enable or disable file sharing", "tokens": 399}
{"title": "Telegram App", "content": ". Accepted Media Types Select the type of files that can be shared between the agents and your Telegram customers. Enter the values as a comma-separated list of media types. Leave it blank to accept all media types. There are some limitations for media types . For details, see https://core.telegram.org/bots/api#sending-files Message Text Formatting options Select the text formatting option for your conversations . You can select one of the following values: None Html Markdown MarkdownV2 The Bot API supports basic formatting for messages, like bold, italic, underlined, strikethrough, spoiler text, and more . For details, see https://core.telegram.org/bots/api/#formatting-options Click Save changes. Send messages to your bot to test the configuration. You will only receive messages if you have a department set up . Only the agents of that particular department can receive the chats. To delete the Telegram app from your workspace, follow these steps: Go to Administration > Apps > Installed. Click the kebab menu against the Telegram app. Select Uninstall . Click Yes to confirm the uninstallation. To learn more about Telegram bots, see the official Telegram bots guide.", "tokens": 271}
{"title": "Telegram Agent's Guide", "content": "If you set up Telegram app integration and a user sends you a message on the connected Telegram bot, It appears in your Rocket.Chat workspace, just like any other Omnichannel conversation available for an agent to take it. You can respond to the customer from your workspace, who receives the response on Telegram. You can also send and receive files during the conversation. You can also use quick reply buttons to send or receive quick replies on telegram. This is useful and required for companies with a chatbot user serving Omnichannel conversations. You need to have a bot (Dialogflow/RASA) configured before implementing bot quick replies. Navigate to Administration > Workspace > Settings > Omnichannel > Routing. Enable Assign new conversations to bot agent. The routing system attempts to find a bot agent, if any exists, before addressing new conversations to a human agent.", "tokens": 181}
{"title": "Twitter App", "content": "Please be aware that the current Twitter integration facilitated by Rocket.Chat Twitter app has been deprecated. This change follows unilateral amendments to the terms and conditions by Company X (formerly known as Twitter), which has impacted the ability to manage Twitter customer messages directly within Rocket .Chat. Our team is diligently investigating alternative solutions to re-establish this integration. We will provide updates and documentation on a new app designed to deliver an enhanced integration experience as soon as a resolution is found . It is a paid subscription that costs you $25 monthly. You must have the Omnichannel feature enabled and have agents and managers assigned to receive and send Omnichannel messages. To install the Twitter app, Go to Administration > Apps > Marketplace . Search for the Twitter app. Click Install and accept the needed permissions. You receive a message from twitter.bot in the #omnichannel-twitter-setup channel with setup instructions . To configure the Twitter app, On the Twitter App Info screen, navigate to Settings. Update the Settings: Default Department. Only the agents of this department can serve Twitter conversations . Service Unavailable Message: A message sent to visitors when no agents are available online. Welcome Message: A message sent to visitors when they send their first message in a conversation. Conversation Finished Message: A message sent to visitors when the conversation is closed . Agents Display Name: You can display the agent's name or username. File Upload Enabled: You can enable/disable file sharing and set a limit for maximum upload size . Accepted Media Type: Select the type of files that can be shared between the Agents and your Twitter Contacts. Click Save Changes. Before sending any messages, you must authorize the Omni-Gateway to send and receive Twitter messages on behalf of your account", "tokens": 376}
{"title": "Twitter AppTwitter App Agent's Guide", "content": ". To start the authentication with Twitter, From the twitter.bot message, click on the Start Authentication button. The authentication process is started. Hit Click here to authorize. You are redirected to a page where you can use your business mail to authorize Twitter . Confirm the mail and click Authorize app. You will receive a success message with credentials for the Twitter account authenticated to your workspace. The Twitter app has a list of shortcuts to ease usage . /twitter authorize: Starts the Twitter authorization process /twitter unauthorize: Revoke Twitter authorization /twitter support: Show support info /twitter help: Shows help message To delete the Twitter app from your workspace, Go to Administration > Apps > Installed . Click the kebab menu against the Twitter app. Select Uninstall. Click Yes to confirm the uninstallation. If you set up Twitter app integration and a user sends you a message on your Twitter business page, It appears in your Rocket.Chat workspace, just like any other Omnichannel conversation available for an agent to take it. You can respond to the customer from your workspace, and they receive the response on Twitter. You can also send and receive files during the conversation. You must be an agent before you can receive omnichannel messages from Twitter.", "tokens": 276}
{"title": "Verify Chat App", "content": "The Verify Chat application is an optional identity verification solution designed to enhance security by integrating with the Single Contact Identity framework. While Single Contact ID can function with any compatible identity verification app, Verify Chat offers a seamless, pre-integrated experience for managing secure, cross-channel communication. This document will guide you through setting up and using the Verify Chat app for identity verification. Before using the Verify Chat app, ensure the following steps are completed: Purchase add-on: To acquire the Contact-ID-Verification add-on, you can contact the sales team in one of the following ways: Click the \u201cUnverified\u201d tag on any unverified contact and follow the prompt. Contact the sales team directly. This licensed module is available for Enterprise users and unlocks the Single Contact ID feature set. Provision the add-on: Once purchased, the add-on must be provisioned to unlock its features Install the app: Access the marketplace to install the Verify Chat app After installing the app, configure its settings as follows: From the app info page, navigate to the app\u2019s settings Adjust the following options as needed: Protocol: Select the protocol for sending verification codes Language: Choose the preferred language from the dropdown Maximum attempts: Specify the maximum number of verification attempts before a code becomes invalid Expiration time: Set the token\u2019s expiration time (in seconds) Welcome message: Set the initial message to greet users during verification Handoff message: Define the post-verification message OTP code digits: Specify the number of digits in the OTP Options marked with a red asterisk (*) are mandatory. Verification prompt: When users contact your organization, the app prompts them to verify their identity based on the configured settings Handling unverified contacts: Contacts failing verification or without prior identification are marked as unverified. Agents can either block these unverified users or continue conversations with them. Blocking settings: If Single Contact ID is configured to block unknown/unverified users, such interactions are restricted from the Omnichannel queue. By leveraging the Verify Chat app with a Single Contact ID, you can enhance your organization's communication security and streamline contact management. Refer to the Single Contact Identity documentation for a broader understanding of Single Contact ID's capabilities.", "tokens": 466}
{"title": "Whatsapp Apps", "content": "Rocket.Chat offers a suite of WhatsApp integrations designed to enhance customer communication across various business needs. These integrations enable businesses to centralize and manage WhatsApp interactions directly from their workspace. The available WhatsApp integrations in Rocket.Chat include the following: WhatsApp Cloud App: Utilizes the official Meta Cloud API to ensure secure WhatsApp communications. WhatsApp 360Dialog (Cloud API): A paid subscription service powered by 360Dialog, enabling businesses to leverage the WhatsApp API for seamless communication. WhatsApp Sandbox: Provides a testing environment powered by 360Dialog for businesses to experiment with WhatsApp integrations safely. Send template messages: Businesses can send structured and predefined messages to targeted contacts from their workspace. These templates facilitate proactive engagement by providing updates such as appointment reminders, delivery notifications, issue resolutions, and payment updates. Data protection compliance: The integration ensures adherence to data protection regulations, securing the handling and storing customer data exchanged through WhatsApp messages. File transfer: Besides messages, businesses can exchange images, videos, documents, and audio files between WhatsApp and Rocket.Chat.", "tokens": 244}
{"title": "WhatsApp Cloud App", "content": "The Rocket.Chat WhatsApp Cloud app provides direct communication between Rocket.Chat and WhatsApp using the WhatsApp Cloud API without needing third-party services like 360Dialog. It is a more secure option and addresses privacy concerns. Your Rocket .Chat workspace is linked through a Facebook developer app with the WhatsApp setup. Your workspace must be in a secured, publicly available domain. Meta developer account to get the WhatsApp API credentials. Make a Facebook Business account available to link with . Your workspace must be registered on Rocket.Chat Cloud. To install the WhatsApp Cloud app, Go to Administration > Apps > Marketplace. Search for the WhatsApp Cloud app. Click Install and accept the needed permissions. You receive a message from whatsapp-cloud .bot in the #Omnichannel WhatsApp Cloud Setup channel with setup instructions. Meta provides developer tools through the Facebook developer's portal to easily build around the Meta ecosystem . Login to your Facebook developer account and navigate to My Apps You must verify your account before proceeding if it is your first time accessing Facebook for developers . Click on Create App to create a new app Select Business as the App type and fill in the details App name: The name you want to call your app. Contact address: Your email to use when contacting you . Business Account: Select a business account if you have one. A new account can be created automatically if none is selected. Click on Setup against WhatsApp in the list of products to add displayed . A WhatsApp section is added to the left panel of your Facebook developer dashboard. Navigate to\u00a0WhatsApp\u00a0>\u00a0API setup.\u00a0You will find a set of credentials to be used later for\u00a0setting up the WhatsApp Cloud app in Rocket.Chat", "tokens": 366}
{"title": "WhatsApp Cloud App", "content": ". By default, you\u2019re provided with a test phone number, which has a Phone Number ID and WhatsApp Business Account ID. The access token provided is temporary and requires you to refresh periodically, follow these steps to create a permanent token . Optionally, add any existing WhatsApp number to receive messages while in test mode. Now that you have obtained your Access Token, Phone Number ID, and WhatsApp Business Account ID, proceed to\u00a0configure the app\u00a0and connect your WhatsApp number to the workspace . Refer to the official Meta guide for detailed steps on setting up your developer account and business app for the WhatsApp Cloud API. Optionally, you can link your original WhatsApp Business number to the App . Navigate to WhatsApp > Getting Started and click on Add phone number . Follow the guides below to learn more about how to add a WhatsApp production number here: Add a Phone Number - WhatsApp Business Platform Cloud API Documentation When you connect a new number to WhatsApp cloud, you receive some free messages per month . If you exceed this quota, your card will be charged. See the official pricing guide to learn more about the billing and free tier. We recommend adding your card details as soon as you connect a new number . This ensures that your service integration won't be disrupted if you go beyond the monthly free limit. If access to cloud services is suspended on your workspace, you may still incur charges from Whatsapp, as Rocket .Chat does not manage these services and can not cancel them on your behalf. See your WhatsApp business account panel for any pending bills and to manage your payments. Facebook uniquely provides the WhatsApp Cloud API token, Phone Number ID, and WhatsApp Business Account ID . Every business needs these credentials when using WhatsApp Cloud services. The token provided by Facebook for testing is temporary and requires refreshing every 23 hours . Optionally, you can obtain a permanent WhatsApp Cloud API token by following these steps: Open the app panel on your Facebook developers portal. Click to open the business page linked to the app. From the Facebook business setting page, navigate to System user", "tokens": 446}
{"title": "WhatsApp Cloud App", "content": ". A list of existing users on that app is seen, if any. Click Add to add a user, then Accept the terms and conditions. Fill in the System username, then set sthe System User Role to Admin. Click Create System User . Click on Add Assets across the newly created user to add assets to use. A modal opens up, navigate to Apps, select the app, and enable Manage App. Then Save changes. The asset gets added to the system user. Click Done . Click on Generate New Token against the user to generate a new access token. Select the App from the dropdown and check the whatsapp_business_messaging and whatsapp_business_management permissions. Then, click Generate Token. The permanent token is generated and presented to you . Copy this token and use it in your integrations. After installing the app, you can update the app settings according to your requirements. To do this, follow these steps: On the App Info page of the app, go to the Settings tab . Enter the values for the following fields: Field Description Notification of undeliverable message Add a notification message \u00a0to alert the agent that a message was not delivered to the WhatsApp platform . Agents Display Info Select the agent information that would be added to every message sent by an agent to a visitor. The options are as follows: None: No agent information is displayed. Name: The agent\u2019s name is displayed in the conversations . Username: The agent\u2019s username is displayed in the conversations. File Uploads Enabled Select this option to enable file upload in the conversations. By default, file upload is enabled . Maximum File Upload Size (in bytes) Enter the maximum file size that can be uploaded. Set it to -1 to remove the file size limitation. By default, the value is 104857600 . Accepted Media Types Enter the file media types that you want to accept. This is a comma-separated list of media types. Leave it blank to accept all media types . By default, the value is image/*, application/pdf, video/*, audio/*. See Supported Media Types for details", "tokens": 451}
{"title": "WhatsApp Cloud App", "content": ". Allow Quote Messages If this option is enabled, agents can see the message when the visitor quotes or replies to a message on WhatsApp. Message Status Endpoint URL Enter an endpoint URL where you want to receive the status of outgoing messages . Filter Message Status Select the statuses you want to receive at the Message Status Endpoint URL endpoint based on the message type. The options are as follows: All: Receive the status of all messages. Regular Messages: Receive the status of regular messages . Template Messages: Receive the status of template messages only. By default, the value is All. Allow List options for Quick Replies If this option is enabled, then messages with more than three quick reply options will be rendered as list options . Note that the maximum limit for list options is ten. By default, this option is enabled. Custom label for all List Option button* Enter the custom label message you want to display on all quick reply options that are sent as a list", "tokens": 200}
{"title": "WhatsApp Cloud App", "content": ". By default, the message is Show Options. After installing and configuring the app, connect the WhatsApp number in the #Omnichannel WhatsApp Cloud Setup private channel to enable communication. Click on Connect WhatsApp Number from the whatsapp-cloud .bot message in the channel or run the /whatsapp connect \u00a0slash command. Add the following details according to your requirements: Field Description PhoneNo Id* The WhatsApp phone number ID you want to connect . WhatsApp Business Id* The WhatsApp Business Account ID of the WhatsApp number to connect Access Token* The App's access token. It can be either temporary or permanent. Facebook App Secret* The secret of the Facebook app . It is used to verify whether messages are sent from authorized WhatsApp servers. Welcome Message (optional) Enter the first message that your customers receive automatically when they message you . Conversation Finished Message (optional) Enter the message that your customers receive automatically when an agent closes the conversation. Default message for offline service (optional) Enter the message that your customers receive automatically when no agent is available for the conversation . Click\u00a0\"Connect.\" After successfully saving the credentials, the final setup instruction for\u00a0configuring the webhook URL\u00a0on your Facebook developer console is displayed . After connecting the WhatsApp number, the bot provides instructions for configuring a webhook URL on your Facebook app, including a callback URL and a Verify Token. Go to the app created on your Facebook developer console . Navigate to WhatsApp > Configuration and paste the callback URL and Verify Token provided by Rocket.Chat. Click Verify and save. From the configuration screen, click on Manage across the Webhook field. Subscribe to messages (v14.0 or higher) . Now, click Done. This is a one-time process. After subscribing to the messages, the Rocket.Chat WhatsApp Cloud app is ready for use. Visitors can now start sending messages to the WhatsApp phone number, and it gets delivered to your workspace", "tokens": 434}
{"title": "WhatsApp Cloud App", "content": ". To edit or disconnect a WhatsApp number in your workspace: Run the slash command /whatsapp numbers to see a list of connected numbers. Click on Edit below the number you want to change. Make the necessary changes and then click Update . Click on Disconnect below the number you want to disconnect, then confirm the prompt to disconnect. You will receive a message confirming the disconnection. The WhatsApp Cloud app has a list of shortcuts to ease usage . Run the slash command /whatsapp help to see the list of shortcuts and their functions: /whatsapp connect: Connect a new WhatsApp number /whatsapp numbers: View and edit all connected WhatsApp number /whatsapp support: Get support information /whatsapp help: See the help menu The available endpoints are displayed on the Details tab of the App Info page . The POST incoming endpoint is used by the app to receive messages from WhatsApp. You generally don\u2019t need to take action with this endpoint. You must use the POST templateMessage endpoint to send template messages . For more details, refer to the developer guide on sending template messages in Rocket.Chat. You can use the GET get-sidebar-icon endpoint to get the WhatsApp conversation room icons displayed in the Chats in Progress section on the left-hand menu . For example, the request looks like this: To delete the Whatsapp app from your workspace, Go to Administration > Apps > Installed. Search for the WhatsApp Cloud app and click Uninstall. Click Yes to confirm the uninstallation. WhatsApp Cloud API FAQs", "tokens": 358}
{"title": "Using WhatsApp Cloud App", "content": "After configuring the Whatsapp App through webhook, you can test the two-way communication between Rocket.Chat and WhatsApp. You must enable the Omnichannel feature with agents and managers assigned to receive and send Omnichannel messages. Launch the WhatsApp app on your phone while logged in with a verified phone number to receive messages from your app. Send a message to the test number provided or your WhatsApp business number (if you added any). The message is sent to your Rocket.Chat workspace and is placed in the queue or assigned to an agent based on the defined routing algorithm. Agents can respond to the customer from your Rocket.Chat workspace and the customer receives the response on WhatsApp. You can use the Rocket.Chat API to send template messages to contacts from your workspace. Kindly refer to the WhatsApp Template Messages developer's guide for more details.", "tokens": 193}
{"title": "WhatsApp Sandbox", "content": "The WhatsApp Sandbox App provides a secure environment for testing Rocket.Chat's integration with WhatsApp, using the 360dialog sandbox. This allows you to send both regular and template messages from your workspace to your customers on WhatsApp . Similar to the WhatsApp Cloud app, the sandbox app lets you experiment freely without risking your business data or disrupting ongoing operations. This app is for testing only and not intended for production use. For production, use the official WhatsApp Cloud App. A Rocket .Chat workspace with Omnichannel enabled. Omnichannel agents and managers must also be assigned. From 7.0, the WhatsApp Sandbox App requires a subscription add-on. Contact the sales team to get the required add-on . To install the WhatsApp Sandbox app, Go to Administration > Apps > Marketplace. Search for the Whatsapp Sandbox app. Click Install and accept the needed permissions. You receive a message from whatsapp-sandbox.bot with setup instructions . If you don\u2019t have the required add-on, a warning is displayed for you to contact sales to get the add-on. To get support, please run the /whatsapp-sandbox support command . To use the WhatsApp Sandbox App, you'll need a test API-KEY from 360dialog. To obtain the API-KEY: Send a WhatsApp message with the content \"START\" to 4930609859535, or use this link . Alternatively, scan this QR Code. You\u2019ll receive your Test API-KEY, linked to the WhatsApp number you used. With this key, you can start using the 360dialog WhatsApp Sandbox . For more details, refer to the official documentation on 360dialog Sandbox and its limitations. After installing the app, you can update the app settings according to your requirements . To do this, follow these steps: On the App Info page of the app, go to the Settings tab . Enter the values for the following fields: Field Description WhatsApp Sandbox API KEY* The API KEY provided by 360Dialog for the sandbox environment. Default department The default department to handle all conversations from WhatsApp Sandbox", "tokens": 473}
{"title": "WhatsApp Sandbox", "content": ". Welcome Message Enter the first message that your customers receive automatically when they message you. Conversation Finished Message Enter the message that your customers receive automatically when an agent closes the conversation . Service Unavailable Message Enter the message that your customers receive automatically when no agent is available for the conversation. Agents Display Info Select the agent information that would be added to every agent's message . The options are as follows: None: No agent information is displayed. Name: The agent\u2019s name is displayed in the conversations. Username: The agent\u2019s username is displayed in the conversations . Allow Quote Messages If this option is enabled, agents can see the message when the contact quotes or replies to a message on WhatsApp. Message Status Endpoint URL Enter an endpoint URL where you want to receive the status of outgoing messages . Filter Message Status Select the statuses you want to receive at the Message Status Endpoint URL endpoint based on the message type. The options are as follows: All: Receive the status of all messages. Regular Messages: Receive the status of regular messages . Template Messages: Receive the status of template messages only. By default, the value is All. Allow List options for Quick Replies If this option is enabled, then messages with more than three quick reply options will be rendered as list options . Note that the maximum limit for list options is ten. By default, this option is enabled. Custom label for all List Option button* Enter the custom label message you want to display on all quick reply options that are sent as a list", "tokens": 316}
{"title": "WhatsApp Sandbox", "content": ". By default, the message is Show Options. Click Save Changes. After saving the API key, you can begin sending WhatsApp messages to the sandbox number from your linked phone number. The messages are delivered to your workspace and are ready for agents to respond . The WhatsApp Sandbox app has a list of shortcuts to ease usage . Run the slash command /whatsapp help to see the list of shortcuts and their functions: /whatsApp-sandbox view-templates: List the available template messages in the sandbox environment . /whatsapp-sandbox send-template: Send a template message to a contact . /whatsapp-sandbox support: Get support information /whatsapp-sandbox help: See the help menu The available endpoints are displayed on the Details tab of the App Info page . The POST incoming endpoint is used by the app to receive messages from WhatsApp. You generally don\u2019t need to take action with this endpoint. You must use the POST templateMessage endpoint to send template messages to contacts . For more details, refer to the developer guide on sending template messages in Rocket.Chat. There are only three pre-defined template messages available on WhatsApp Sandbox. Templates cannot be created or modified. Consult the 360dialog documentation to learn more . You can use the GET get-sidebar-icon endpoint to get the WhatsApp conversation room icons displayed in the Chats in Progress section on the left-hand menu . For example, the request looks like this: To delete the WhatsApp Sandbox app from your workspace, Go to Administration > Apps > Installed. Click the kebab menu against the Whatsapp Sandbox app. Select Uninstall. Click Yes to confirm the uninstallation .", "tokens": 384}
{"title": "WhatsApp Sandbox Agent's Guide", "content": "After configuring the API key, you can test the two-way communication between Rocket.Chat and WhatsApp following these steps: You must enable the Omnichannel feature with agents and managers assigned to receive and send Omnichannel messages. You cannot share media files within the Sandbox environment. here Send a message to the sandbox number from your linked phone number. The message is delivered to your Rocket.Chat workspace and is placed in the queue or assigned to an agent based on the defined routing algorithm. Agents can reply to messages in your Rocket.Chat workspace, and you will receive the response on WhatsApp. You can use the Rocket.Chat API to send template messages to contacts from your workspace. Kindly refer to the WhatsApp Template Messages developer's guide for more details.", "tokens": 170}
{"title": "WhatsApp 360Dialog (Cloud API)", "content": "This app is currently in beta. Expect ongoing updates and improvements. Your feedback is appreciated to enhance the app\u2019s functionality. To move to the 360Dialog Cloud API from the on-premise API, refer to the 360Dialog documentation . The WhatsApp 360Dialog app (Cloud API) is an integration for Rocket.Chat in partnership with 360Dialog, an official WhatsApp Business API provider offering message templates, automation, support, and data protection services . It is a paid subscription and costs you $39 per month. Alternatively, you can use the WhatsApp Cloud app, which connects Rocket.Chat directly to WhatsApp without any third-party service. Rocket .Chat\u2019s 360Dialog (cloud API) app allows you to integrate your WhatsApp conversations with your Rocket.Chat workspace. You can send and receive text and media messages, send template messages, and register webhooks to receive messages . This document guides you through the app configuration details. A Rocket.Chat workspace with Omnichannel enabled. Livechat agents and managers must also be assigned. A 360Dialog account; create a 360Dialog account if you don\u2019t have one . Add numbers to the account. Generate an API key. From 7.0, the WhatsApp 360Dialog app (Cloud API) requires a subscription add-on. Contact the sales team to get the required add-on . Before you proceed, keep the following points in mind about the data storage region: Our 360Dialog Cloud API architecture uses Meta for default data storage, hosted in the US. Depending on your location, this could involve an international data transfer . Even if you opt to change the storage location, our omnigateway remains situated in the US, necessitating an international data transfer. Refer to our Privacy Policy for information on data transfers . If you are a current 360Dialog customer and considering to transition from the on-premise API to the Cloud API, you can proceed independently. However, we recommend ensuring compliance with privacy regulations relevant to your jurisdiction . If you have any questions or require support, contact our privacy team. Go to Administration > Apps > Marketplace. Search for the WhatsApp 360Dialog (Cloud API) app. Click Subscribe", "tokens": 467}
{"title": "WhatsApp 360Dialog (Cloud API)", "content": ". If you don\u2019t have the required add-on, a warning is displayed for you to contact sales to get the add-on. Click Install and accept the needed permissions . Complete the purchase and the app bot will then send you a message with the setup instructions in the #omnichannel-whatsapp-cloud-api-setup private channel. After installing the app, you can update the app settings according to your requirements . To do this, follow these steps: On the App Info page of the app, go to the Settings tab. Enter the values for the following fields: Field Description Agents Display Info Select the agent information that would be added to every agent's message . The options are as follows: None: No agent information is displayed. Name: The agent\u2019s name is displayed in the conversations. Username: The agent\u2019s username is displayed in the conversations . File Uploads Enabled Select this option to enable file upload in the conversations. By default, file upload is enabled. Maximum File Upload Size (in bytes) Enter the maximum file size that can be uploaded . Set it to -1 to remove the file size limitation. By default, the value is 104857600. Accepted Media Types Enter the file media types that you want to accept. This is a comma-separated list of media types . Leave it blank to accept all media types. By default, the value is image/*, application/pdf, video/*, audio/*. See Supported Media Types for details", "tokens": 322}
{"title": "WhatsApp 360Dialog (Cloud API)", "content": ". Allow Quote Messages If this option is enabled, agents can see the message when the contact quotes or replies to a message on WhatsApp . Template Message Metadata Refresh Interval(in Minutes)* For a better user experience, the app will cache some template messages\u2019 meta-data information. This setting defines the duration the app will automatically refresh its cache. Send template messages using the Send a template message endpoint . Message Status Endpoint URL Enter an endpoint URL where you want to receive the status of each message that is exchanged. Filter Message Status Select the statuses you want to receive at the Message Status Endpoint URL endpoint based on the message type . The options are as follows: All: Receive the status of all messages. Regular Messages: Receive the status of regular messages. Template Messages: Receive the status of template messages only. By default, the value is All . Allow List options for Quick Replies If this option is enabled, then messages with more than three quick reply options will be rendered as list options. Note that the maximum limit for list options is ten. By default, this option is enabled . Custom label for all List Option button* Enter the custom label message you want to display on all quick reply options that are sent as a list. By default, the message is Show Options. Preferred Language* Select the preferred language for this app . We'll try to show system messages in this language. If it is not available, then English will be used. By default, English is selected", "tokens": 312}
{"title": "WhatsApp 360Dialog (Cloud API)", "content": ". After installing and configuring the app, connect verified WhatsApp numbers in the #omnichannel-whatsapp-cloud-api-setup private channel to enable communication . The bot sends the message Do you currently have a 360Dialog account? - If you don't we'll create one. Click No if you don\u2019t have a 360Dialog account. Create an account first, then proceed with the following steps . If you have an account, click Yes and follow these steps: Click Connect WhatsApp Number and enter the following details according to your requirements: Field Description Example API Key* Enter the API key that you generated in your 360Dialog account . 3xnWiXjfksuo09ejfkdsqJcxAK Phone Number* Enter the WhatsApp number that you have added to the 360Dialog account. 551234567890 Department Select the department from the drop-down menu . Ensure that departments are created and agents are assigned to the departments. ServicesDepartment Welcome Message (optional) Enter the message that your customers receive automatically when they message you . Hello! Thank you for contacting us! Conversation Finished Message (optional) Enter the message that your customers receive automatically when an agent closes the conversation . We are happy to help you! Default message for offline service (optional) Enter the message that your customers receive automatically when no agent is available for the conversation. We will get back to you soon! Once you have entered the details, click Connect . You receive a success message that your WhatsApp number is now connected! Now, anyone in your organization can receive messages from this number and reply via Rocket.Chat . If your business has not yet been verified by Facebook, you need to start the business verification process within the Facebook Business Manager. If you get an error message, check the app\u2019s Logs tab to find the cause . If the issue is related to an invalid token, contact the Rocket.Chat support team for assistance. After the number has successfully been connected to Rocket.Chat, you can click Edit to modify the details. Click Disconnect to remove the connected number", "tokens": 445}
{"title": "WhatsApp 360Dialog (Cloud API)", "content": ". Enter the slash command /whatsapp-360d-cloud to use the following shortcuts: /whatsapp-360d-cloud connect: Connect a new WhatsApp number. /whatsapp-360d-cloud numbers: View and edit all connected WhatsApp numbers . /whatsapp-360d-cloud view-templates: See all template messages. The information displayed includes the name, the WhatsApp number connected, and the languages used. Click Refresh Templates to sync the 360Dialog template messages with Rocket.Chat . /whatsapp-360d-cloud send-template: Send a template message. /whatsapp-360d-cloud support: Get support information. /whatsapp-360d-cloud help: See the list of shortcuts . The available endpoints are displayed on the Details tab of the App Info page. The GET authSuccess endpoint is called when 360Dialog\u2019s authentication process is successful . After registering an account on 360Dialog, 360Dialog automatically calls this endpoint and redirects back to the workspace upon successful authentication. You don\u2019t need to take any action from your end . For example, the request looks like this: The POST incoming endpoint is used by the app to receive messages from WhatsApp. You generally don\u2019t need to take action with this endpoint . For example, the request looks like this: You must use the POST templateMessage endpoint to send template messages. For more details, refer to the developer guide on sending template messages in Rocket.Chat and the 360dialog template messages guide . For example, the request looks like this: The request body should look something like this: You can use the GET get-sidebar-icon endpoint to get the WhatsApp conversation room icons displayed in the Chats in Progress section on the left-hand menu . For example, the request looks like this:", "tokens": 409}
{"title": "WhatsApp 360Dialog (Cloud API) Agent's Guide", "content": "If you set up WhatsApp app integration and a user sends you a message on the connected WhatsApp number, It appears in your Rocket.Chat workspace like any other Omnichannel conversation, available for an agent to take or in queue based on the defined routing algorithm. You can respond to the customer from your workspace, who receives the response on WhatsApp. You can also send and receive files during the conversation. You can send template messages using the template message endpoint. Enter the slash command /whatsapp-360d-cloud to use the app shortcuts. Agents can use the following slash commands: /whatsapp-360d-cloud view-templates: See all existing template messages. The information displayed includes the name, connected WhatsApp number, and the languages. /whatsapp-360d-cloud send-template: Send a template message to the Omnichannel conversation.", "tokens": 194}
{"title": "WhatsApp 360Dialog (on-premise API)", "content": "Meta will discontinue support for the On-Premise API by October 2025. No new features have been launched since January 2024 . Therefore, we recommend integrating WhatsApp Business through either WhatsApp 360Dialog (Cloud API) or WhatsApp Cloud (Meta\u2019s official API), both of which are also available in our marketplace. This document guides you through the integration between Rocket .Chat and WhatsApp Business powered by 360Dialog using the on-premise API. It is a paid subscription and costs you $39 per month. Alternatively, you can use the WhatsApp Cloud app, which connects Rocket .Chat directly to WhatsApp without any third-party service. A Rocket.Chat workspace with Omnichannel enabled. Omnichannel agents and managers must also be assigned. From 7.0, the WhatsApp 360Dialog app requires a subscription add-on . Contact the sales team to get the required add-on. To install the WhatsApp app, Go to Administration > Apps > Marketplace. Search for the WhatsApp 360Dialog app. Click Subscribe . If you don\u2019t have the required add-on, a warning is displayed for you to contact sales to get the add-on. Click Install and accept the needed permissions. Complete the purchase and the whatsapp .bot bot will then send you a message with the setup instructions in the #omnichannel-whatsapp-setup private channel. To configure the WhatsApp app, On the WhatsApp 360Dialog Info screen, navigate to Settings . Update the required fields: Notification of undeliverable message: Notification to alert the agent that a message was not delivered to the WhatsApp platform. Agents Display Info: You can display the agent's name or username . File Uploads Enabled: Enable/disable file sharing and set a limit for Maximum File Upload Size (in bytes). Accepted Media Types: Provide a list of accepted media types comma-separated. To accept all media types, leave this blank", "tokens": 436}
{"title": "WhatsApp 360Dialog (on-premise API)", "content": ". Allow Quote Messages: Agents will see the quoted message reference on Rocket.Chat, when the Contact quotes/replies to a message on WhatsApp. For workspaces below version 4.2 .0, ensure you have the following index on the \"rocketchat_apps_persistence\" collection in DB: appId_1_associations_1 before activating Allow Quote Messages feature . Template Message Metadata Refresh Interval(in Minutes): For a better user experience, the app must cache some Template Messages meta-data information. You can define the duration (in minutes) within which the app will automatically refresh its cache . To learn more about template messages, see WhatsApp Omnichannel integration API. Message Status Endpoint URL: The URL to receive the status of each message exchanged . Filter Message Status: Filter the statuses you wish to receive at the endpoint (\"Message Status Endpoint URL\") based on Message Type. Allow List options for Quick Replies: If enabled, messages with more than three quick reply options would be rendered as List options . Max limit for list options is 10. Custom label for all List Option buttons: Define a custom label message you want to display on all Quick reply options sent as List Message. Click Save Changes . If you have a 360dialog account, click Yes and proceed to connect your WhatsApp number. From the whatsapp.bot message, If you don't have a 360dialog account, click No. Click on the Create 360 Dialog Account button . After creating your account, copy the API key and complete the bot instructions. After copying your newly generated API key on 360Dialog, Return to your Rocket.Chat workspace and click Connect WhatsApp Number . Fill in the required details: API Key: The API key of your WhatsApp number. Department: The department that will handle WhatsApp conversations from this number. Welcome Message: A message sent to customers when they send their first message. Conversation Finished Message . A message sent to your customer when an agent closes the conversation, Default message for offline service: A message sent to your customer when no agents are available online, Click Connect. You can set up as many WhatsApp numbers as you want", "tokens": 467}
{"title": "WhatsApp 360Dialog (on-premise API)WhatsApp 360Dialog Agent's Guide", "content": ". If access to cloud services is suspended on your workspace, you may still incur charges for 360Dialog, as Rocket.Chat doesn't manage the billing for this service. Refer to the official documentation for instructions on canceling your service subscription . To delete the WhatsApp app from your workspace, Go to Administration > Apps > Installed. Click the kebab menu against the Whatsapp app. Select Uninstall. Click Yes to confirm the uninstallation. Whatsapp Business App FAQs If you set up WhatsApp app integration and a user sends you a message on the WhatsApp connected number, It appears in your Rocket.Chat workspace, just like any other Omnichannel conversation available for an agent to take it. You can respond to the customer from your workspace, who receives the response on WhatsApp. You can also send and receive files during the conversation. The integration also supports sharing of location and contacts. To configure and send template messages via slash command and UI, see WhatsApp Omnichannel Integration API. The WhatsApp app has a list of shortcuts to ease usage. Run the slash command /whatsapp help to see the list of shortcuts and their functions: /whatsapp connect: Connect a new WhatsApp number. /whatsapp numbers: To view and edit all connected WhatsApp number. /whatsapp view-templates: To see all Template messages. /whatsapp send-template: To send a Template message /whatsapp support: Get support information /whatsapp help: To see this shortcut again", "tokens": 351}
{"title": "Bamboo App", "content": "Atlassian Bamboo integration This app can also work in a fully air-gapped environment. Follow the Air-gapped app installation guide and continue with the configuration instructions below. To install the Bamboo integration app, Navigate to Administration > Apps > Marketplace. Search for the Bamboo Integration app. Click Install. Agree to the permissions to confirm the installation. Confirm that you have the Rocket.Chat Notifications for Bamboo add-on installed on your Bamboo server. To configure the Bamboo integration app, Navigate to a channel or private room and run the slash command /bamboo install. You will receive an ephemeral message with instructions on how to configure your Bamboo, as follows: On your Bamboo, install the Rocket.Chat Notifications for Bamboo add-on. Add notification on a Build Plan or Deployment Environment. Select the \"Rocket.Chat\" recipient type. On the \"Rocket.Chat URL\" field, insert the URL given in the ephemeral message (e.g., https://example.com:3000/api/apps/private/6a7b5a37-b9bb-4d49-ae38-c6ebcb3fe479/ejDjQ9Kyh2wBgrSwt/webhook) On the \"Rocket.Chat channel\" field, type the name of the channel or private room you want to be notified of the events. Now, your Rocket.Chat workspace starts receiving the configured notifications. The Bamboo integration doesn't support every Build/Deployment event. Rocket.Chat won't send any notifications in response to unsupported events. The supported events include the following: Plans: All Builds Completed Failed Builds and First Successful Jobs: All Jobs Completed Failed Jobs and First Successful Job Error Deployments: Deployment Started and Finished Deployment Failed", "tokens": 383}
{"title": "Bitbucket Cloud App", "content": "The Rocket.Chat Bitbucket Cloud app enhances collaboration for development teams by seamlessly integrating Bitbucket Cloud with Rocket.Chat. This app enables users to perform various tasks, such as receiving notifications on commits and pull requests and staying updated on repository events\u2014all directly within the Rocket.Chat workspace. This document covers how to integrate the Rocket.Chat Bitbucket app with your Bitbucket Cloud repository to enable real-time notifications in Rocket.Chat channels. Admin access on Bitbucket is required to set up this integration. To install the Bitbucket Cloud app, Navigate to Administration > Apps > Marketplace Search for the Bitbucket Cloud app Click Install and accept the permissions needed to install it Visit your Bitbucket account Create a new repository or open an existing one Copy the repository\u2019s URL, as you\u2019ll need it for the next steps In Rocket.Chat, go to the channel where you want to receive Bitbucket notifications. Run the following command, replacing Repo-URL with the URL you copied: Press Enter. You should see a confirmation message with a URL which you will use for setting up your webhook In your Bitbucket repository, go to Repository settings Under Webhooks, click Add webhook Fill out the following details: Title: Add a name for the webhook URL: Paste the URL you received after connecting your Rocket.Chat channel Triggers: Select the events for which you want to receive notifications in Rocket.Chat, such as pull requests or pushes Save the webhook configuration Make a change in the repository (e.g., create a pull request or push a commit) If configured correctly, you should see a notification in your Rocket.Chat channel showing the details of the change, including the contributor and summary For a list of available Bitbucket commands, run /bitbucket help in your Rocket.Chat channel. If you encounter any issues or need to modify the webhook settings, you can revisit the Webhooks section in your Bitbucket repository settings to make adjustments. You have now successfully set up and tested the Bitbucket integration with Rocket.Chat. With this configuration, your team will receive real-time notifications in your designated channel, informing everyone of important updates and changes in your Bitbucket repository.", "tokens": 487}
{"title": "ClamAV App", "content": "The ClamAV app enables forwarding uploaded files to an open-source antivirus (ClamAV) application that prevents the upload from completing in Rocket.Chat if a virus is detected. You have to install and run the ClamAV server, and then the ClamAV app connects to it. It works across web browsers, desktop apps, and mobile apps. It is used to prevent users from spreading viruses and malware via Rocket.Chat. It is an open-source (GPL) antivirus engine used in various situations, including email scanning, web scanning, and endpoint security. It provides several utilities, including a flexible and scalable multi-threaded daemon, a command-line scanner, and an advanced tool for automatic database updates. To install your ClamAV server, see the official documentation. To install the ClamAV integration app, Go to Administration > Apps > Marketplace. Search for the ClamAV Integration app. Click Install and accept the needed permissions. To configure the ClamAV integration app, On the ClamAV Integration App Info screen, navigate to Settings. Update the required details: ClamAV Server Host: The ClamAV Server Host, where your ClamAV server is hosted. ClamAV Server Port: The port for your ClamAV server. When a user attempts to send malicious content to a room in the workspace, the content won't be uploaded. The user is notified that a virus has been detected in the file.", "tokens": 311}
{"title": "Data Loss Prevention (DLP) App", "content": "Data loss prevention (DLP) is a security mechanism that helps prevent sensitive data from being unduly shared, misused, lost, or accessed by unauthorized users. The Data Loss Prevention App works best with the most recent version of Rocket.Chat . This app can also work in a fully air-gapped environment. Follow the Air-gapped app installation guide and continue with the configuration instructions below. To install the Data Loss Prevention app, Navigate to Administration > Workspace > Apps > Marketplace . Search for the Data Loss Protection app. Click Install. After installing the app, you need to configure the rule set for its functionality. To configure DLP, On the DLP App Info screen, navigate to Settings", "tokens": 152}
{"title": "Data Loss Prevention (DLP) App", "content": ". Configure the following settings as needed: Rules for Blacklisting message: Takes in an array of regular expressions defining the rules. Add each Regular Expression on a new line. Moderator Channel: Specify the channel to which all blacklisted messages will be forwarded . From there, the channel moderators can either Approve or Reject the message. e.g. general Content control type: Choose to ignore channels or select targeted channels to monitor. Channels: List channels separated by commas to apply the Channel Filter rule . Censor only Sensitive Information: If enabled, only the sensitive information is replaced by multiple hashtags (######) Custom Blacklisted Message title: Set the title of a temporal message that replaces the blacklisted message pending when it gets approved by the moderator . Custom Pending approval message: Set the temporal message that replaces the blacklisted message pending when it gets approved by the moderator. Click More info button under the blacklisted message in the room to see it . Custom Rejected Message: This message is displayed in place of the blacklisted message when a moderator rejects a blacklisted message. Click Save Changes. Navigate to Administration > Workspace > Settings > Message. Enable Allow Custom Fields in Messages . Update Custom Fields Validation with the rule defined below: Click Save Changes. The Data Loss Prevention App is ready and functional on your workspace. Read the Data Loss Prevention user guide to know more about using the DLP app . Through DLP features, admins can create a list of regular expressions to be monitored in Rocket.Chat, and you can apply it to any conversation. Once a regular expression is detected, it appears blurred in the room where it was originally written . The original message is forwarded to a predefined channel for auditing flow, where a moderator can approve or reject its content. Rooms can have more than one moderator. It\u2019s also possible to select the rooms to apply the DLP app . If you have channels on your workspace where sensitive information is frequently shared or data leak is more likely to happen, e.g., the finance team channel, you can restrict this channel.", "tokens": 444}
{"title": "OTR", "content": "Off-the-record (OTR) messaging is a feature that allows users to exchange temporary, encrypted messages directly with each other. This happens by using the local, non-persistent session storage of their browser rather than storing messages on the Rocket.Chat workspace. After an OTR session ends and the session storage is cleared, the OTR messages are removed and can no longer be restored. This feature is currently in beta. Search operations will not find encrypted messages of encrypted rooms. The mobile apps and multi-DMs may not support the encrypted messages (currently under implementation). File uploads will not be encrypted in this version. You can only use the OTR option in direct messages between two users. As an administrator, you can enable/disable OTR for your workspace: Go to Administration > Workspace > Settings > OTR. Enable OTR. Once this setting is enabled, you can begin OTR sessions in DMs. To try this, two users must be online and engaged in a conversation in a DM simultaneously. In the DM room, click the kebab menu at the top-right side and select\u00a0OTR. Click\u00a0Start OTR\u00a0to begin an OTR session with the user. The other user must accept the invite. If it is not accepted, the invite expires in a few seconds, and you can try again. During the OTR chat, the two users have the option to Refresh keys for a fresh session and End OTR.", "tokens": 323}
{"title": "Outlook Calendar", "content": "The Outlook Calendar integration allows users to sync their daily calendar events from Outlook to their Rocket.Chat workspace. It also provides quick action buttons to interact with the events, for example \u2014 joining a meeting . This integration only works with Exchange Servers and does not support Office 365. The Outlook integration is only supported on the Rocket.Chat desktop application . For users to access the Outlook calendar settings, the workspace administrator must follow these steps: Go to Administration > Workspace > Permissions. Select the Settings tab. Search for Outlook . Enable the settings for the roles that you want, for example, the user role. Now, end users with the role user can access and configure the Outlook calendar settings as described in the following sections . To access the Outlook calendar on your workspace, Navigate to Administration > Workspace > Settings > Outlook Calendar. Select Enable to enable the integration. Enter the following information: Exchange URL: The exchange server URL you need to access the server . For example, https://owa.xyz.rocket.cat/. You can find this value from your browser: Outlook URL: The Outlook application URL in the exchange server redirects the user to the correct application. For example, https://owa.xyz.rocket .cat/owa/#path=/calendar/view/Month. You can find this value from your browser by going to the Outlook Calendar page: Meeting url Regular Expression: The expression detects meeting URLs in event descriptions", "tokens": 315}
{"title": "Outlook Calendar", "content": ". The first matching group with a valid URL will be used. HTML-encoded URLs will be decoded automatically. For example, the meeting URL is https://go.rocket.chat/conference?host=app.video.xyz .fi&path=conference%2Ftest_room%3FcallUrl%3Dhttps%253A%252F%252Fmeet.video.xyz .fi%252Fwebapp%252Fm%252Ftest_room%26callProvider%3DPexip . By default, the regular expression is (?:[?&]callUrl=([^&<]+))|(?:(?:%3F)|(?:%26))callUrl(?:%3D)((?:( ?:^&<))+[^&<]?), this will match everything that comes after callURL= and return the specific URL for the meeting . Click Save changes. To access the Outlook calendar in a room, click the kebab menu at the room header. Select Outlook calendar. A sidebar is displayed. From the Outlook sidebar, click Login . In the new window, fill in your Outlook login details and sign in. Check the Remember my credentials option so that you can synchronize multiple times in the future without entering your credentials again . Now, all your events for the current date are fetched and synced to your workspace. Click an event to see more details about it. If the event has a conference call, click the Join button beside it to join the call . Click Calendar Settings to perform the following actions: Event Notifications: You can enable or disable event notifications based on your preferences. Outlook Authentication: You can remove your credentials from your workspace by clicking Disable . To refresh the sync, click the Sync button at the bottom of the sidebar.", "tokens": 419}
{"title": "Premium", "content": "In certain scenarios, you may need to update your workspace license manually. If your workspace is registered and the license is provided by Rocket.Chat Cloud, you don't need to update the license here manually. You can sync your license updates automatically in Subscription. Go to Administration > Workspace > Settings > Premium to access the license update settings. Premium License: Enter your workspace's license key here. Status: Displays the current status of your license, indicating whether it is valid or not. Saving Changes: After making any modifications, \u00a0click the 'Save changes' button to apply them. Contact sales to get a valid license for the plan you want to apply to your workspace. See Trials to get a trial period.", "tokens": 150}
{"title": "Push", "content": "Enable and configure push notifications for your workspace members using mobile devices. Workspaces on the community plan allow up to 10,000 free monthly push notifications. Get unlimited push notifications by subscribing to any of Rocket.Chat's premium plans . To use push notifications, you must accept the Cloud Service Privacy Terms Agreement in the Administration > Workspace > Settings > Setup Wizard > Cloud Info settings . Next, to enable push notifications, go to Administration > Workspace > Settings > Push and update these settings: Enable: Enable push notifications on your Rocket.Chat workspace. Enable Gateway: Setting this to true allows you to use a custom push notification gateway . When disabled, it utilizes certificates and keys, allowing direct communication with Apple/Google instead of going through a gateway. Rocket.Chat SaaS workspaces use the Rocket.Chat gateway by default and cannot be changed . On self-managed workspaces, you can either use the default Rocket.Chat gateway or set up a custom notification gateway. See the Configure Push Notifications section for more information. Gateway: Specify the gateway to use . Multiple lines can be used to specify multiple gateways. Production: Enable this for workspaces in production. With the configuration all done, click the Send a test push to my user button to send a test push to yourself . To successfully send a test push to your user, you need to be logged in to the workspace on your mobile device and then close or minimize the application. If gateways are not enabled, the workspace relies on certificates and keys to configure push notifications . To configure push notification certifications and keys on Android and iOS, refer to the following guide: Configuring Push Notifications In the Privacy section, you can configure secured push notifications with the following settings: Show Channel/Group/Username in Notification: Enable this option to make the channel name, group name, and username visible in notifications", "tokens": 419}
{"title": "Push", "content": ". Show Message in Notification: Enabling this makes messages visible in notifications. Hide message content from Apple and Google (and the Gateway, if enabled):  Enable this option to hide the content of a message from Google/Apple or any other push gateway . This adds only the message ID to the notification data. The mobile client dynamically fetches the content from the server and updates the notification before displaying it . Failure to fetch a message using the provided message ID in the push data triggers a \"You have a new message\" notification. When this option is disabled, the message content is sent via push notification payload so the mobile app can immediately display the notification . If these privacy settings are disabled, the user receives a push notification without contextual information, as no such contextual information is sent to the push notification gateway in the first place. Then, the user can access the contextual information by opening the Rocket.Chat application . It is helpful in compliance-sensitive requirements like HIPAA to prevent sensitive information from being disclosed via push notification. After completing the push configuration, follow the Default User Preferences guide to set the default user preferences for notifications . Then, use the Channel Notifications guide to manage channel-based notifications. On some channels, notifications can stop if the number of users exceeds the set limit. You can set the limit in Administration > General > Notifications. See Notifications for more information . Cloud sync When you purchase a package for push notifications as a self-managed customer, go to Subscription and click Sync license updates to sync your workspace to Rocket.Chat Cloud and fetch any required updates . To check the count of notifications used per month: Go to cloud.rocket.chat. Go to the Workspaces tab. Select the workspace for which you want to check the count . The push notifications block shows the number of used notifications per your current limit per month.", "tokens": 391}
{"title": "Rate Limiter", "content": "Rocket.Chat Rate Limiter is used to control the rate of requests sent or received by your Rocket.Chat workspace. It can be used to prevent cyber attacks like DoS (Denial of Service) attacks and limit web scraping . To access this setting, go to Administration > Workspace > Settings > Rate Limiter. Enable Rate Limiter: This lets you enable API rate limiter . Enable Rate Limiter in development: When Rate Limiter is set to True, the rate limiter is enabled for development. It limits the number of calls to the endpoints in the development environment . Default number calls to the rate limiter: Number of default calls for each endpoint of the REST API, allowed within the time range defined below . Default time limit for the rate limiter (in ms): Takes time in seconds to limit the number of calls at each endpoint of the REST API (in ms) . Customize rate-limiting for methods and subscriptions to avoid a high load of WebSocket (A communication protocol that allows for simultaneous data transmission in one channel) messages on your workspace. Limit by IP: enabled: Enables limit by IP . Limit by IP: requests allowed: This lets you set the number of requests allowed. Limit by IP: interval time: Takes in the interval for limiting IP. Limit by User: This lets you enable DDP rate-limiting by user . Limit by User: requests allowed: The number of requests allowed. Limit by User: interval time: The time interval in seconds for limiting the user . Limit by Connection: This lets you enable limiting connection requests Limit by Connection: requests allowed: The number of connection requests allowed. Limit by Connection: interval time: The interval for limiting connection per method . Limit by User per Method: When set to true, it enables limiting user's rate per method. Limit by User per Method: requests allowed: The number of requests allowed . Limit by User per Method: interval time: The interval for limiting user per method. Limit by Connection per Method: Lets you set connection limit by method. Limit by Connection per Method: requests allowed: The number of request requests allowed . Limit by Connection per Method: interval time: Interval for limiting connection per method. Setting this up gets your sever full protection from email and username enumeration by brute force attack . Default number calls to the rate limiter for registering a user: Number of default calls for user registering endpoints (REST and real-time APIs), allowed within the time range defined in the API Rate Limiter section.", "tokens": 532}
{"title": "Retention Policy", "content": "Retention policy in Rocket.Chat enables you to automatically delete old messages and files in your workspace based on custom rules. Retention policies depend on two types of permissions: edit-privileged-setting: It is required to set global policy . edit-room-retention-policy: It is required to set per-room policy. To enable channel owners to set their policies, assign edit-room-retention-policy permission to channel owners. By default, it is assigned to administrators only . To enable retention policy on your workspace, Navigate to Administration > Workspace > Settings > Retention Policy. Toggle on Enabled. Timer Precision: It establishes how often the deletion script should run . When your policies have a long lifetime or are not concerned about precision, you can lower this to save processing power . Use Advanced Retention Policy Configuration: If enabled, it uses an advanced retention policy configuration, which provides more granular control of the pruning frequency. Use Advanced Retention Policy Cron: Define how often the prune timer should run with a cron job expression . Setting this to a more precise value makes channels with fast retention timers work better, but might cost extra processing power for large communities . When the \"Use Advanced Retention Policy Configuration\" setting is enabled, the policy follows the cron job expression set in \"Use Advanced Retention Policy Cron\". If it's disabled, the policy follows the Timer Precision settings . There are two levels of retention policies in Rocket.Chat: global policies (enforced across the entire workspace) and per-room policies (implemented in specified rooms). Tweaking these settings without extreme caution can destroy all message history across your server . Please read this entire section before you enable this feature. To update the Global Policies settings, navigate to Administration > Workspace > Settings > Retention Policy > Global Policies . The policy is split into three parts: one for all channels, one for all private groups, and one for all direct messages", "tokens": 402}
{"title": "Retention Policy", "content": ". Each type has two options: Prune in channels/private groups/direct messages: Enabling this option applies the global retention policy to this type of message . For example, if you only wish to prune messages in private groups, enable the option for private groups and disable the others . Prune messages older than in channels/private groups/direct messages: This option sets the time period (in days, hours, or minutes) for automatically deleting messages . For instance, entering 30 and selecting \u201cdays\u201d will delete all messages older than 30 days. Similarly, entering 48 and selecting \u201chours\u201d or \u201cminutes\u201d will remove messages older than 48 hours or 48 minutes, respectively", "tokens": 142}
{"title": "Retention Policy", "content": ". Furthermore, other options allow you to specify how the policy works: Do not prune pinned messages: If enabled, pinned messages are not deleted. For example, when you pin a few messages with essential links, these messages stay intact . Only delete files: If enabled, messages are not deleted, but files are. They are replaced by a simple \u201cFile removed by automatic prune message.\u201d When combined with Do not prune pinned messages, only unpinned files are deleted . Do not prune discussion messages: If enabled, discussion messages are not deleted. All the discussions in your workspace remain intact. Do not prune Threads: When enabled, threads are not deleted. All the threads in your workspace remain intact . If you don't enable Do not prune discussion messages, all your discussion messages will be deleted irrespective of the dates. Tweaking these settings without extreme caution can destroy all message history across your server . Please read this entire section before you turn the feature on. Ensure you have the edit-room-retention-policy permission. To enable an automated retention policy in a room that overrides the global retention policy, Click the Room Information icon and select the Edit button . Go to Prune. Automatically prune old messages: Enable this option to prune old messages automatically. Override global retention policy: When enabled, you can define a retention policy for the room that overrides the global policy . Maximum message age in days: This option sets the time period (in days) for automatically deleting messages. For instance, entering 30 will delete all messages older than 30 days, while entering 365 will remove messages older than a year . Exclude pinned messages: When enabled, do not prune pinned messages. Prune files only, keep messages: When enabled, remove only files during pruning and keep the messages. Do not prune threads: Messages in threads are not deleted if enabled . Click Save. Users can determine if a room\u2019s messages will be pruned by scrolling to the top of the message history or opening the room info. A warning is displayed if an automated policy (global or per-room) is present . For example, \u201cMessages older than 3 months will be pruned on June 26, 2012 at 11:30 PM\u201d or \u201cFiles older than 3 months will be pruned on May 13, 2020 at 11:50 PM\u201d", "tokens": 500}
{"title": "Retention Policy", "content": ". You can also manually prune selected messages in a room as needed, outside of the automated retention policies following these steps: Navigate to the kebab menu in the room header . Click Prune Messages and update the following options: Newer than: Set a date and time to prune messages newer than the selected moment. Older than: Set a date and time to prune messages older than the select moment . Only prune content from these users: Select users to delete their messages. Leave empty to prune everyone's content . Inclusive: If you check the inclusive checkbox, messages sent on and between Newer than and Older than dates are deleted (messages are deleted between and including those dates) . If you don't check the inclusive checkbox, messages between Newer than and Older than dates are deleted, and the messages sent on those dates are not deleted. Do not prune pinned messages: Pinned messages are not deleted if enabled . For example, if you pinned a few messages with important links, they stay intact. Do not prune discussion messages: If enabled, messages in the discussions are not deleted. Do not prune threads: If enabled, messages in the threads are not deleted . Only remove the attached files, keep messages: If enabled, messages are not deleted, but files are. They are replaced by a simple File removed by automatic prune message. When used together with Exclude pinned messages, only unpinned files are deleted . Click Prune. The selected messages are deleted immediately based on the specified criteria.", "tokens": 312}
{"title": "SearchSetup Wizard", "content": "Select the workspace search provider and configure search-related settings Here, you can configure how searches work on your Rocket.Chat server. This gives you the option to select a search provider. To access this setting, navigate to Administration > Workspace > Settings > Search. Search Provider: A dropdown that lets you select which search provider you wish to use. By default, it uses the Default provider. Global search: When global search is enabled within the workspace, users can activate it while searching for a text string in a specific room. It returns results for the matching string across all rooms that the user is a member of. Page Size: The number of search results per page. The global search feature is currently in Beta and may not function as expected. This section has basic configurations for the setup wizard of your workspace. To access this menu, go to Administration > Workspace > Settings > Setup Wizard. Remember to hit Save Changes in order to apply any changes made. Organization Type: A dropdown for you to select the type of organization. Example Government Organization Name: The name of your organization. Example RocketChat Industry: The industry to which your organization belongs. Example Technology Services Size: The size of your organization. Country: The country your organization is based in. Example South Africa Website: Your organization's website. Example https://rocket.chat Server Type: The type of server you are running. Example Public Community Allow Marketing Emails: When enabled, marketing emails are sent. Register Server: Enable to register your server. Organization Email: Lets you set your organization email. Cloud Service Privacy Terms Agreement: Enable to agree to Cloud terms and privacy policies.", "tokens": 348}
{"title": "SlackBridge Settings", "content": "Enable Rocket.Chat to communicate directly with Slack! SlackBridge lets you mirror Slack and Rocket.Chat workspaces in real-time. Refer to the SlackBridge guide to learn how to synchronize messages between Slack and Rocket.Chat. To access this menu, navigate to Administration > Workspace > Settings > SlackBridge Remember to hit Save Changes in order to apply any changes made. Enabled: Toggle to true to enable SlackBridge Use Legacy API Tokens: Setting to true enables setting API Tokens. API / Bot / App Tokens: Takes in API tokens of your Slack servers. You can configure multiple Slack servers by adding one API Token per line. Signing secret: Accepts the signing secret for Slack servers. File Upload: Enable to permit file uploads between servers. SlackBridge Out Enabled: Choose whether SlackBridge should also send your messages back to Slack SlackBridge Out All: Send messages from all channels that exist in Slack and the bot has joined. SlackBridge Out Channels: This lets you choose which channels will send messages back to Slack. Alias Format: Import messages from Slack with an alias; %s is replaced by the username of the user. If empty, no alias is used. Exclude Bots: Takes in a regular expression to prevent propagating messages from any bot whose name matches the regular expression. If left empty, all messages from bots are propagated. Reactions: Enable to get reactions Remove channel links: Remove the internal link between Rocket.Chat channels and Slack channels. The links are then recreated based on the channel names.", "tokens": 325}
{"title": "Smarsh", "content": "Smarsh is used to confidently and efficiently preserve email communications. To access this menu, navigate to Administration > Workspace > Settings > Smarsh. Smarsh Enabled: Whether the Smarsh eml connector is enabled or not (needs 'From Email' filled in under Email -> SMTP). Smarsh Email: Smarsh Email Address to send the .eml file to. Missing Email: The email to show for a user account when their email address is missing. It generally happens with bot accounts. Smarsh Timezone: This lets you set the Smarsh timezone Smarsh Interval: The amount of time to wait before sending the chats (needs 'From Email' filled in under Email -> SMTP).", "tokens": 158}
{"title": "Troubleshoot", "content": "Configure how troubleshooting is handled in your workspace To access this section, go to Administration > Workspace > Settings > Troubleshoot. We recommend these settings be altered only with the guidance of the Rocket.Chat Development or Support Teams. Do not touch them if you don't know what you are doing! Disable Notifications: This setting completely disables the notifications system. When enabled, sounds, desktop, mobile, and email notifications immediately stopped. Presence broadcast disabled internally: This shows if the presence broadcast is disabled automatically. This can occur in workspaces with no Premium License Application and over 200 concurrent users. Disable Presence Broadcast: This setting prevents all instances from sending the users' status changes to their clients, keeping all users with their presence status from the first load. Disable Instance Broadcast: Setting this to true prevents the Rocket.Chat instances from sending events to the other instances. It may cause syncing problems and misbehavior. Disable Sessions Monitor: This setting stops the processing of user sessions, causing the statistics to stop working correctly. Disable Live Chat Activity Monitor: Activating this setting stops the processing of Live Chat contacts sessions, causing the statistics to stop working correctly. Disable Data Exporter Processor: This setting stops the processing of all export requests from users, so they will not receive the link to download their data. Disable Teams mention: This disables the teams mention feature, preventing users from being able to mention a team by name in a message. Force browsers to clear networking cache based on version change: This setting allows browsers to clear the cache based on the provided version.", "tokens": 339}
{"title": "User Data Download", "content": "The User Data Download feature allows you to download your Rocket.Chat data including personal data and information related to all the rooms you belong to. You can initiate data download from My Account > Preferences > My Data. To configure this feature, navigate to Administration > Workspace > Settings > User Data Download. Enable User Data Download: When enabled, users can initiate a download of their data from the workspace. System Path (Exported Files): Specifies the location where the exported, uncompressed files are stored. System Path (Compressed File): Defines the directory where compressed ZIP files will be saved. By default, this is set to /tmp/zipFiles, but you can change it to any desired location. Processing Frequency (Minutes): This setting determines how frequently the system processes queued data download requests in minutes. Controlling the queue speed helps manage the workload. Message Limit per Request: Sets a cap on the number of messages that can be included in the data download for each room the user belongs to. When you initiate a data download, the request is added to a processing queue. This queue is necessary because the download process can be resource-intensive, as it involves gathering all relevant data, including messages from every room you are a member of. The frequency of processing these requests is governed by the Processing Frequency (Minutes). Once the request is queued, the system generates an ID for it and sends an email to you. The email contains a link that you can click to download their data as a ZIP file.", "tokens": 315}
{"title": "Omnichannel Voice Channel (VOIP)", "content": "In Omnichannel strategy, the key goal is to meet customer needs across various communication channels consistently. The Voice channel feature is pivotal in this context, offering a crucial human connection that fulfills the innate desire for personal engagement. Voice Channel allows agents to initiate and receive calls with visitors or contacts in your Omnichannel workspace. Using a standalone phone system creates separate data sets, making tracking customer interactions and agent performance across multiple channels challenging. To bridge this gap and prevent fragmented experiences for both agents and customers, Rocket.Chat provides the Voice Channel feature, which is an essential component of the Omnichannel contact center. Voice Channel recognizes the importance of enabling customers to connect with an agent via phone calls when necessary. In this guide, you'll learn how to use Rocket.Chat's Voice Channel in your workspace. Inbound Calls are valuable for establishing a local presence in diverse global markets. They enable you to receive calls on your workspace, initiated by customers using either their mobile or landline phones. With Outbound Calls, you can initiate phone calls with your customers directly from your workspace. Here are the various capabilities of Rocket.Chat's Voice Channel across our various plans: Feature Community Starter Pro Enterprise Inbound calls \u2713 \u2713 \u2713 \u2713 Call history \u2713 \u2713 \u2713 \u2713 In-App SIP extension management \u2713 \u2713 \u2713 \u2713 Outbound calls x \u2713 \u2713 \u2713 Calls on hold x \u2713 \u2713 \u2713 Call Dialer x \u2713 \u2713 \u2713 Call notes x \u2713 \u2713 \u2713 Device selection x \u2713 \u2713 \u2713 Click to call x \u2713 \u2713 \u2713 Voice Channel holds a unique position in the omnichannel landscape, offering a direct line of communication between customers and agents. This human connection fosters trust and understanding, enabling businesses to resolve issues promptly and effectively. By integrating the voice channel into their omnichannel strategies, businesses can provide a complete and satisfying customer experience that extends beyond the digital realm. Moving to the next section, we'll discuss the preparation steps for using Voice Channel. Refer to Voice Channel Admin Guide if you're a workspace administrator, and Voice Channel Agent Guides if you're an agent.", "tokens": 432}
{"title": "Team Voice Calls (VoIP)", "content": "The Team Voice Calls feature is currently in beta. Report any issues to Rocket.Chat support. Cloud-based VoIP has redefined business communication, empowering teams to connect from anywhere without relying on physical phone lines. With Team Voice Calls in Rocket.Chat, VoIP is fully integrated into your workspace, allowing your team to make and receive calls without switching between apps or external systems. This add-on elevates collaboration, bringing a new level of responsiveness and engagement directly into Rocket.Chat. \u00a0It transforms Rocket.Chat into an all-in-one communication platform, connecting your team over text and voice in a single, unified workspace. This documentation provides a comprehensive guide to Team Voice Calls, detailing configuration for administrators and usage instructions for team members. Key features of Team Voice Calls include: Direct calling: Instantly start or receive calls with team members within the Rocket.Chat workspace. Extension management: Admins can assign unique extensions to users, enabling quick, direct dialing. Call transfers: Seamlessly transfer active calls to ensure users reach the right team member. Availability settings: Users can control their availability to receive calls, enhancing flexibility. Team Voice Calls is an add-on for Rocket.Chat that enables direct voice calling within your workspace. To activate this feature, contact our Sales team to purchase the add-on. Once enabled, you\u2019ll receive the \u00a0configuration files for setting up the required FreeSWITCH server that powers Team Voice Calls. Next steps: Workspace admins: Follow the Team Voice Calls Admin Guide for step-by-step instructions on deploying FreeSWITCH and configuring it within your workspace. Users: Visit the Team Voice Calls User Guide to make and receive calls directly in Rocket.Chat.", "tokens": 358}
{"title": "Team Voice Calls Admin Guide", "content": "The Team Voice Calls feature is currently in beta. Report any issues to Rocket.Chat support. Setting up Team Voice Calls in Rocket.Chat involves deploying and integrating a FreeSWITCH server, which serves as the backbone for managing the VoIP functionality . This guide provides clear steps to deploy and configure FreeSWITCH with your Rocket.Chat workspace as an administrator. To get started, contact our Sales team to purchase the add-on and receive the configuration files . This includes a Docker image file and the docker-compose.yaml file for deploying the FreeSWITCH server. Since Team Voice Calls is an add-on, these configuration assets are available only to customers subscribed to the service. In this guide, you\u2019ll learn the following: Deploying the FreeSWITCH server Configuring the FreeSWITCH server in your Rocket .Chat workspace Assigning extensions to users in your workspace A dedicated server to deploy FreeSWITCH, with a domain pointing to its IP . Docker installed and operational on the server To deploy FreeSWITCH, continue with the following steps: Download the Docker image and docker-compose.yaml file from Rocket.Chat\u2019s VoIP package . Navigate to the directory with the downloaded files and run this command to load the image: Run docker images to verify that the freeswitch image was loaded correctly. Deploy the FreeSWITCH container by running this command in the directory containing the docker-compose .yaml file. To verify that the container is running, start it and enter the OS bash with: Once inside, check if FreeSWITCH is active by running fs_cli . The response is similar to the image below, depending on your configurations: You\u2019ve successfully deployed your FreeSWITCH server. The next step is to configure it within your Rocket.Chat workspace to enable team collaboration VoIP functionality . After successfully deploying your FreeSWITCH server, the next step is to configure it within your Rocket.Chat workspace. This process requires enabling certificates on your FreeSWITCH server and connecting it to Rocket.Chat to support secure communication. To allow communication between Rocket", "tokens": 452}
{"title": "Team Voice Calls Admin Guide", "content": ".Chat and FreeSWITCH, enable the SSL certificate for your FreeSWITCH server on your browser: Enabling this certificate allows the browser to accept communication between Rocket.Chat and your FreeSWITCH server . This setup only needs to be done once per browser, and you won\u2019t need to repeat it unless you\u2019re using VoIP on a different browser. Go to https://<your-freeswitch-domain>:7443 in your browser . A warning appears about an invalid certificate (ERR_CERT_AUTHORITY_INVALID). Click Advanced, then select Proceed to <your-domain> (unsafe) to bypass the warning . The page loads, returning an HTTP ERROR 400 message, confirming the certificate is enabled. With the certificate enabled, you can now proceed to configure Rocket.Chat to connect with FreeSWITCH using these steps: In your Rocket .Chat workspace, navigate to Administration > Workspace > Settings > Team Voice Calls. Update the following settings: Field Description FreeSwitch Host The domain of your freeswitch server. FreeSwitch Port The FreeSwitch port. By default, it is 8021 . FreeSwitch Password The FreeSwitch password will be provided to you alongside the Docker image and configuration file. FreeSwitch Request Timeout The time it takes for the server to time out. By default it is, 3000 . WebSocket Path The WebSocket Path follows this example wss://<your-domain>:7443/ Click Save Changes", "tokens": 322}
{"title": "Team Voice Calls Admin Guide", "content": ". To use VoIP efficiently, certain permissions must be assigned based on user roles: Workspace admin/VoIP managers require the Manage Voice Calls permission to administer VoIP settings and extensions . VoIP users require the View Voice Call Extensions and Allow Voice Calls permissions. It's recommended to create custom roles for these permissions and assign them to the appropriate users. Once FreeSWITCH is connected, assign extensions to users in your Rocket.Chat workspace . Each extension represents a user on the FreeSWITCH server, enabling them to make and receive voice calls. By default, 19 extensions (1001 - 1019) are available in the workspace . To assign an extension to a user: Go to Administration > Workspace > Users. Click Assign Extension in the top-right corner. Choose the User and select from the Available Extensions, then click Associate to assign the extension . Alternatively, you can assign an extension by clicking the kebab menu next to the user in the user list and selecting Assign Extension from the options. To unassign an extension: Click the kebab menu next to the user in the list . Select Unassign Extension and click Remove. If you're using LDAP, you can automatically assign user extensions by mapping the Extension Field setting. Ensure this attribute is configured in your LDAP mapping; otherwise, extensions will need to be assigned manually . Great job so far! \u2014With FreeSWITCH deployed and configured, users with assigned extensions can now make and receive calls within Rocket.Chat . In the next section, you\u2019ll learn how to make the most of these calling features, including placing, receiving, and managing calls within Rocket.Chat.", "tokens": 347}
{"title": "Team Voice Calls User Guide", "content": "The Team Voice Calls feature is currently in beta. Report any issues to Rocket.Chat support. With VoIP configured and an extension assigned to you by your workspace administrator, you can start making and receiving calls in Rocket.Chat . This guide provides a walkthrough of the steps for using Team Voice Calls, from setting your availability to managing calls in your workspace . Whether you\u2019re connecting with team members or transferring calls to another user person, these instructions will help you get the most out of the voice calling features in Rocket.Chat . In this guide, you\u2019ll learn how to do the following: Set your availability for calls Initiate a call Recieve a call Transfer a call To allow secure communication between Rocket .Chat and the FreeSWITCH server, you need to enable the server\u2019s SSL certificate in your browser. This action is required only once per browser. You won\u2019t need to repeat it unless you're using VoIP on a different browser . Contact your workspace administrator to obtain the FreeSWITCH server URL. Go to https://<your-freeswitch-domain>:7443 in your browser. A warning appears about an invalid certificate (ERR_CERT_AUTHORITY_INVALID) . Click Advanced, then select Proceed to <your-domain> (unsafe) to bypass the warning. The page loads, returning an HTTP ERROR 400 message, confirming the certificate is enabled", "tokens": 296}
{"title": "Team Voice Calls User Guide", "content": ". To get started with Team Voice Calls, you have to set your availability for calls: Click your avatar menu from the navigation bar. In the dropdown menu, select\u00a0Enable Voice Calling . Usually, this option is already enabled by default, so it shows Disable Voice Calling. Enabling this action registers you with FreeSWITCH under your assigned extension (e.g., 1000), signifying that you\u2019re available for calls . To stop receiving calls and set yourself as unavailable when you\u2019re busy, click Disable Voice Calling. This option unregisters you until you enable it again, allowing you to control your call availability as needed . If this option is not available for you, contact your workspace administrator to assign you an extension. In Rocket.Chat, there are two main ways to start a voice call: through a direct message (DM) or by using the dialer . Follow the steps below to initiate a call using any of these methods. Open a DM with the user you want to call. Click the  call icon from the room menu bar and select Voice Call to start the call . Alternatively, you can click the\u00a0 call icon\u00a0from the user\u2019s card or profile. The dialer is currently only available in Feature Preview. Follow these steps to enable and use it: Navigate to Account > Feature Preview from your avatar menu . Enable Enhanced navigation experience\u00a0to activate the new navigation bar in Rocket.Chat. Click the call icon in the navigation bar to start a new call. Enter the extension number you want to call using the dialpad(e.g ., 1005) and click Call to initiate the voice call. If you can't access the Feature Preview menu, ask your admin to enable it in your workspace . You can also use the dial pad to call Public Switched Telephone Network (PSTN) numbers if your VoIP server is configured for it", "tokens": 389}
{"title": "Team Voice Calls User Guide", "content": ". After you initiate a call, a call popup rings at the bottom of your workspace, displaying the call status and connection progress . For your first VoIP call, if the call ends abruptly after you or the reciever accepts browser microphone permissions, redial the user to connect successfully . When you receive an incoming call, a call popup rings at the bottom of your workspace to notify you. It displays the caller\u2019s name and options for handling the call . Accept the Call: Click the \u00a0 Accept icon to answer the call and begin the conversation. Decline the Call: Click the \u00a0 Decline icon to reject the call. This popup also includes quick controls to help you to manage the call effectively . Once you're on a call, several control options are available in the call popup to help you manage the conversation: Mute/Unmute: Toggle the  microphone icon to mute or unmute yourself . Hold: Click the  hold icon to temporarily pause the call without disconnecting. Dial pad: Click the  dail pad icon to interact with automated systems during the call. Transfer call: Refer to Transfer a call . End call: Click the  end call button to disconnect. Audio controls: Click the  Device settings icon to select your microphone and speaker device. These controls give you full flexibility to manage your calls efficiently . Sometimes you may need to redirect a call to a team member who is better equipped to assist in the conversation. The Transfer feature allows you to transfer the current call to another user within your Rocket.Chat workspace . To transfer the call to another user, Click the  transfer icon \u00a0from the call control. In the transfer modal, select the user you want to transfer the call to. The dropdown menu only displays users who are available to take calls . Click Hangup and transfer call. Once you transfer the call, the call ends for you and begins ringing for the new recipient, similar to the image below: With Team Voice Calls in Rocket .Chat, you have a powerful tool for seamless communication right within your workspace. You can manage calls, collaborate in real-time, and connect with the right people when needed. These features enhance team coordination, making it easier to stay connected and responsive . Enjoy the benefits of integrated voice calling in Rocket.Chat!", "tokens": 470}
{"title": "Getting Started with Voice ChannelVoice Channel Admin Guide", "content": "Before setting up Voice Channel, ensure you have the following prerequisites: Asterisk 16.19.0 or higher (We used FreePBX 16.0.10.40 with Asterisk 18.6.0) Valid SSL certificate (valid domain) A Rocket.Chat workspace on version 5.0.0 or higher Key terms A private branch exchange (PBX) is a telephone system within an enterprise that switches calls between users on local lines while enabling all users to share a certain number of external phone lines. Asterisk is an open-source software implementation of a PBX. FreePBX is a web-based open-source GUI (graphical user interface) that controls and manages Asterisk (PBX). Refer to Voice Channel Technical Specification to gain more understanding on the architecture of voice channel in Rocket.Chat. In the next guide, we'll delve deeper on how to configure voice channel in your workspace as an administrator. As a workspace administrator, you can set up and manage voice channel on your workspace. This guide explains various voice channel components and settings on the admin\u2019s console. To set up a voice channel, you have two methods: Configure without a PBX server Configure with an active PBX server", "tokens": 282}
{"title": "Configure Without Previously Having a PBX Server", "content": "PBX is an architecture that forwards incoming calls from telephony service providers to Rocket.Chat. It is used for call bookkeeping, which includes information such as the number of queues, extension data, agent allocation to a queue, and routing system . For the purpose of this guide, we'll be using FreePBX as the call management server. You can use any Asterisk distro of your choice. Before you proceed, see Getting Started with Voice Channel to view all the necessary requirements . Install your FreePBX server, as usual (that\u2019s out of the scope of this tutorial), and update it using your OS package manager. In such a case, it\u2019s: Enter your server web interface http://your.domain", "tokens": 162}
{"title": "Configure Without Previously Having a PBX Server", "content": ".name and set the password and update settings, and do the activation process. Do not skip the activation process, as you\u2019ll need some features later that are only available if you activate your server instance. Complete the firewall basic configuration . Now you need to prepare the FreePBX firewall to accept AMI (Asterisk Manager Interface) and WSS (WebSocket Secure). Navigate to Connectivity > Firewall > Services > Enable Firewall . Under the Services tab, search for WebRTC and mark Internet and Other options, Local is active by default. We want WebRTC in the Internet zone because the Webphone will connect from the client\u2019s IP address, which could be anywhere . Go to the Custom Services tab and hit the Create new service, name the service AMI, select TCP, and write the port range 5038:5039. Click Save. Mark the Other option and Save . AMI goes in the \u201cOther\u201d zone because only some specific endpoints should be connecting to AMI. Now you don\u2019t want your Rocket.Chat to get banned by the FreePBX firewall so you have to add it to the Whitelist List . First, you need to know the IP or IP Networks from your Rocket.Chat instance. When you have a SaaS Rocket.Chat instance you will have a URL (subdomain) like MyChosenName.rocket.chat, so just ping it . In this demo: Rocket.Chat will be connecting from the whole network 51.81.0.0/16 If you have your own Rocket.Chat instance self-hosted or similar, you should know what\u2019s your IP address or network . Now, navigate to Connectivity > Firewall > Networks, and add the IP address needed or Network. Select the Other zone and Save: Rocket.Chat will be in the Other zone. We used Letsencrypt for this demo . This will only work if you have your FreePBX already activated. Navigate to Admin > Port Management. Change the Admin (web portal) to another port and set Letsencrypt to port 80. Click Update Now . Please note that until here, you have been accessing the server by HTTP (not HTTPS) on port 80. Until you finish the SSL configuration, you are going to be using the newly selected port, 8080, in this demo", "tokens": 493}
{"title": "Configure Without Previously Having a PBX Server", "content": ". Now navigate to Admin > Certificate Management, and click on New Certificate > Generate Let\u2019s Encrypt Certificate: Fill out the form according to your settings and click Generate Certificate: Once it\u2019s generated, mark it as the system\u2019s default: Now you can start using it . Go to the Admin > System Admin > HTTPS Setup and then to the Settings tab. Here select the certificate that was just generated and click on Install, wait, then select the Protocols TLS 1.2 and 1 .3 as others are considered deprecated or insecure: Finally, click on Save and Restart Apache (A server restart is suggested here). Test in incognito that the changes are applied and the certificate is recognized as valid . Additionally, you can go back to the Admin > System Admin > Port Management to enforce HTTPS, select your FQDN and select the force (arrow) button from HTTP (8080) to HTTPS (443), then click hit Save: Test it", "tokens": 214}
{"title": "Configure Without Previously Having a PBX Server", "content": ". Congratulations! you have an HTTPS-valid SSL FreePBX server up and running. We are using chan_pjsip as the only SIP driver. Go to Settings > Advanced Settings, search for SIP Channel Driver, and choose chan_pjsip . Hit Submit. Using the article Configuring Asterisk for WebRTC Clients in Asterisk\u2019s Wiki, we are going only for the principal parameters if you need more details, the article is a great guide . First, check that you have the needed modules loaded using the command module show like <module_name> We are reusing the Let\u2019s Encrypt certificates for the Asterisk mini-HTTP server, WebSockets, TLS encryption, and others . Start by going to Settings > Advanced Settings (again), search for the Asterisk Builtin mini-HTTP server section and, configure as shown, apply changes . Asterisk restart is also recommended here: Using the command http show status verify that both HTTP and HTTPS are up and running: If HTTP does but HTTPS doesn\u2019t check that Asterisk can read the certificate and private key files: Add capture of file reading error . Navigate to Settings > Asterisk SIP Settings. In the General SIP Settings tab configure your audio codecs, enable video, and select video codecs (vp8 and vp9 needed for WebRTC), NAT, etc . Then in the SIP Settings (chan_pjsip) tab, choose your valid SSL certificate for TLS/SSL/SRTP and enable all the desired transports, especially WS and WSS: Click submit and apply changes (an Asterisk restart is recommended) Navigate to https://mysub .domainname.domain:8089/httpstatus and verify that it loads, SSL Port is present, and the SSL certificate is valid: Congratulations! You have a valid SSL Asterisk WebRTC-ready server up and running.", "tokens": 423}
{"title": "Create SIP ExtensionsConfigure Asterisk Manager Interface and UsersConfigure With an Active PBX Server", "content": "Now that you have your Asterisk server up and running let's create some WebRTC-ready PJSIP extensions and configure them. To create an extension: Navigate to Applications > Extensions, and click the Advanced tab. Configure as follows: You can install the FOP2 and FOP2\u015b WebRTC webphone plugins in your FreePBX server, if the plugin works, your WebRTC configuration is complete and working. Is not complicated, and it could help you to diagnose any issue, but it\u2019s out of the scope of this tutorial. Lastly, Rocket.Chat needs an AMI connection to be able to read your Asterisk configuration and connect extensions to RC users. So, navigate to the Settings > Asterisk Manager Users menu. Here you can create a user to be used by Rocket.Chat and limit the access of this user only to the IP address or network where your Rocket.Chat is. You can now proceed to Rocket.Chat and start configuring the voice channel there. An active PBX server SIP extensions created Asterisk manager configured And Omnichannel activated You can start to configure the voice channel Rocket.Chat workspace . Navigate to Administration > Workspace > Settings > Omnichannel voice channel (VoIP) Enable voice channel, as shown below: Rocket .Chat establishes two connections with Asterisk, one via AMI to read configuration and list extensions, queues, and some other things, and the second one is the WebRTC SIP registration . Navigate to Administration > Workspace > Settings > Omnichannel voice channel (VoIP) > Settings > Asterisk Manager Interface (AMI) . Fill the form with the FQDN of your server and the username/password gotten as shown here, or it should be provided to you by your Asterisk manager. AMI connection To test AMI connection, turn to the Extensions tab", "tokens": 417}
{"title": "Configure With an Active PBX Server", "content": ". Here you should see a list of the existing extensions in Asterisk: Extensions Also enabling the AMI debug you may see connections coming and the RC AMI user connected: Rocket .Chat connected to the Asterisk\u2019s AMI If you see it, your Rocket.Chat is connected to Asterisk\u2019s AMI. Rocket.Chat needs a WebSocket connection to forward calls from Asterisk to Rocket.Chat . The parameters for a FreePBX connection are: Websocket connection Change them according to your Asterisk server conditions. Then in the Settings tab, assign at least one extension to a Rocket.Chat user. When that user logs in to Rocket .Chat the webphone will try to connect to Asterisk. To test the WebSocket Connection, you just need to log in with a user associated with an extension and check if the extension registers successfully . WebSocket not connected The phone icon with a slash over means that the WebSocket connection is possible, Rocket.Chat could send a SIP Options packet to Asterisk, and it was successfully answered. Click on the phone icon, and it will turn green . Now the user is ready to receive calls, and in Asterisk, you should have received a SIP register packet, and the extension should be properly registered. Validate it with: pjsip show endpoints Rocket .Chat configured with Asterisk Congratulations! You have successfully configured Rocket.Chat with Asterisk! The next step now is to associate your Rocket.Chat agents with Asterisk extensions.", "tokens": 326}
{"title": "Associate Agents With Extensions in Rocket.Chat", "content": "An extension is simply a named set of actions in Asterisk. Asterisk will perform each action in sequence when that extension number is dialed. As a Rocket.Chat administrator, you can associate one agent with one extension. This extension can be part of multiple queues. Extensions in Asterisk are assigned to queues. The extensions and queues are both created and managed in Asterisk by the Asterisk manager. An agent needs to associate with one of these extensions to be able to take calls in a queue. You, as a Rocket.Chat admin can take one of these extensions and associate it with an agent. Both extensions and queues are managed in Asterisk by the Asterisk manager. To associate and an agent to an extension: Go to Administration > Workspace > Settings > Omnichannel voice channel (VoIP) > Extension tab Click Associate Agent Select the agent name and associate it with a free extension, as shown below: Agent to extension association Following are some essential points to know: An extension becomes unavailable after it has been associated with an agent. An extension can be associated with multiple queues. Extensions and agents have a one-to-one relationship. Extension and queue have a one-to-many relationship. Once this call center agent makes themselves available for VoIP, the incoming calls in that queue will be forwarded to them based on the routing system configured in Asterisk. To reduce the scope of this project, the only available administration feature is the ability to connect Rocket.Chat agent with the existing Asterisk extensions. In future releases, you'll be able to create new extensions and queues from Rocket.Chat, and many other cool administration capabilities will roll out. Now your agents can start using voice-as-channel on Rocket.Chat.", "tokens": 371}
{"title": "Voice Channel Technical Specification", "content": "Voice over Internet Protocol refers to the standards that facilitate voice-based phone calls using an Internet connection instead of a local telephone company. Through VoIP technologies, Rocket .Chat is able to incorporate telephony-based communication protocols into its applications, promoting the transition between analog and digital technologies. Voice over IP converts your voice into a digital signal, compresses it, and sends it over the internet . A VoIP service provider sets up the call between all participants. The digital data is then uncompressed into the sound you hear through your handset on the receiving end. In a contact center environment, Voice is an essential and influential channel . Agents using an omnichannel stack should be able to make audio/video calls to external PSTN networks, cellphone networks, and VoIP endpoints supporting SIP protocol. After configuring Rocket .Chat voice-as-channel or VoIP in your workspace, subscribe to any of Rocket.Chat's premium plans and explore the various Voice Channel features . Here we try to describe in detail the technical and architectural aspects of bringing in a telephony protocol \u201cSIP\u201d on the client side in order to enable Voice calls on the platform . We also describe Automatic Call Distribution, by which the calls will be distributed to different agents. In a contact center environment, voice is an essential and powerful channel . Agents using Omnichannel should be able to make and receive audio/video calls from external PSTN networks, cellphone networks, and VoIP endpoints supporting SIP protocol . SIP is an application protocol used to carry all forms of digital media, including voice messages\u2014so SIP is a specific technology that supports VoIP calls. Web clients are built using browser-based WebRTC technology. This technology does not enforce any signaling protocol . SIP is chosen for the signaling because there are existing systems that support WebRTC over SIP, and hence there is no need to define any custom signaling protocol. Also, enabling SIP on the agent side would allow us to connect to enterprise telephony infrastructure", "tokens": 419}
{"title": "Voice Channel Technical Specification", "content": ". Asterisk is the first PBX provider implemented. We have plans to add new providers as we go. The agent connects to Opensource SIP PBX Asterisk. Using the agent configuration, an agent registers to the partner\u2019s/customer\u2019s SIP Server . Agent endpoint operates as any SIP endpoint and is able to receive or make a call via customer PBX. To achieve this, there is an association made between the Rocket.Chat agent and the SIP identity . ACD (Automatic Call Distribution) queues, wait-treatment, etc, are managed by the customer\u2019s/Partner\u2019s PBX . Reaching out to external networks (PSTN/Mobile Network/Another SIP Server, is handled at the customer\u2019s/Partner\u2019s PBX . ACD Queues When Omnichannel endpoints log in as SIP agents, the problem of call distribution has to be handled. You can not expect the customer to know the agent\u2019s identity . If they happen to know the agent's identity, there is a possibility of multiple customers trying to reach the same agent. This can increase the abandonment rate (As a particular agent will remain busy serving) . Which can reduce the overall effectiveness of the agents in the organization (As some agents will always be busy, and some will be relatively free). This overwhelms the agents because of the activity on their console . A typical call center solves this problem by using ACD (Automatic Call Distribution queues). Agents are partitioned into different queues on the PBX. These queues represent different departments in the organization. The customer does not dial the agent\u2019s number . They dial the ACD number, and ACD forwards the call to the available agent based on the algorithm being used. PBX Connectors Admins and managers use Rocket.Chat's UI to configure and monitor the customer-managed PBX . To receive real-time PBX events, Rocket.Chat\u2019s backend has to connect to the PBX manager interface. The customer is responsible for creating the configuration on PBX so that the management APIs/interface is accessible from Rocket.Chat\u2019s backend.", "tokens": 464}
{"title": "Voice Channel Agent GuidesHow to Make Myself Available to Accept Calls?How to Take a Call in Rocket.Chat Voice Channel?", "content": "In this section, we'll explore how agents can use the voice channel in the workspace once it has been successfully configured by the administrator. How to make myself available to accept calls? How to take a call in Rocket.Chat voice channel? How to initiate an outbound call as an agent? To make yourself available for accepting call center calls, click the phone button on your Rocket.Chat home screen, as shown below: An incoming call will now be forwarded to you according to the queue and the routing system being used. After you make yourself available to receive/make calls, you can start taking inbound calls. As an agent, you can handle the following call operations: Click the Accept button to accept the call. The ongoing call appears as shown below: Please note that messages are not available on a phone call room. You have controls to mute/unmute calls. If your workspace is subscribed to any of Rocket.Chat's premium plans, you can hold and resume calls according to your workflow needs. Switching devices during an ongoing call is available to workspaces subscribed to any of Rocket.Chat's premium plans. After the call ends you can leave your notes in the call wrap-up. This feature is only available to workspaces subscribed to any of Rocket.Chat's premium plans.", "tokens": 282}
{"title": "How to Initiate an Outbound Call as an Agent?", "content": "After you make yourself available to receive/make calls, you can start making outbound calls. To make an outbound call, you can either dial from the dial pad or navigate to the contact center and call a contact from there.", "tokens": 49}
{"title": "Close Livechat Room by Visitor", "content": "If you are a visitor, use this endpoint to close the livechat room. The room ID. The visitor token. Bad Request", "tokens": 30}
{"title": "Get List of Livechat Rooms", "content": "Retrieves a list of Livechat rooms. You can use the available query parameters to filter the response. At least one of the following permissions is required: The authToken of the authenticated user. The userId of the authenticated user. A list of agent IDs The department ID If it should filter by open/closed rooms An object representing when the room was created (can also be filtered only with start or end) An object representing when the room was closed (can also be filtered only with start or end) A list of tags An object with custom fields to be filtered (previously created and populated at custom fields endpoints) The room's name Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, sort = {\"value\": -1, \"_id\": 1} This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields = {\"username\": 1} OK Unauthorized Forbidden", "tokens": 280}
{"title": "Get or Create Livechat RoomsJoin Livechat RoomUpdate Livechat RoomTransfer Livechat Room", "content": "Get the data of an existing room of a visitor. If a room doesn't exist for the visitor, a new room is created. The visitor token. The room ID. The agent ID. OK Bad Request Call this endpoint to join a Livechat room. Permission required: view-l-room The authToken of the authenticated user. The userId of the authenticated user. The room ID that you want to join. OK Bad Request Unauthorized Forbidden Edit a Livechat room. Update the topic, tags, and other details of a Livechat room. Permission required: view-l-room The authToken of the authenticated user. The userId of the authenticated user. The guest ID. The name of the guest. The email of the guest. The contact of the guest. Custom fields information. The room ID. The topic of the room. An array of tags to be associated with the room. The priority ID of the room. The SLA priority ID of the room. Custom fields information. OK Bad Request Unauthorized Forbidden This endpoint has been deprecated in the 7.0.0 release. Use the Forward Livechat Room endpoint instead. Transfer an omnichannel conversation to another department. The room _id. The visitor token. The new department. To get the department ID, call the Get Livechat Configurations endpoint. Note that the endpoint only returns public departments. OK Bad Request", "tokens": 309}
{"title": "Forward Livechat RoomGet Department Transfer HistorySurvey Livechat RoomPut Livechat Room on Hold", "content": "The chatbot agent forwards the chat to a human agent. The authToken of the authenticated user. The userId of the authenticated user. The room ID. The new agent ID. The new department ID. OK Bad Request Unauthorized Retrieve the conversation transfer history from one department to another. Permission required: view-livechat-rooms The authToken of the authenticated user. The userId of the authenticated user. The room ID The number of items to return. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, sort = {\"value\": -1, \"_id\": 1} OK Unauthorized Forbidden Provide feedback on a Livechat room. The room ID. The visitor token. An array of object with name and value to provide feedback. OK Bad Request Put an active Livechat conversation on hold. The userId of the authenticated user. The authToken of the authenticated user. Active Livechat room ID. OK Bad Request Unauthorized", "tokens": 267}
{"title": "Upload Files to RoomSet Livechat Room PriorityRemove Livechat Room PriorityClose Livechat Room", "content": "Upload files to a Livechat room. The visitor token The room ID. The file to be uploaded. The file description. OK Forbidden Set the priority of a Livechat room. Permission required: view-l-room The authToken of the authenticated user. The userId of the authenticated user. The room ID. The ID of the priority to set. OK Bad Request Unauthorized Forbidden Remove the priority set to a Livechat room. Permission required: view-l-room The authToken of the authenticated user. The userId of the authenticated user. The room ID. OK Unauthorized Forbidden If you are an Omnichannel user (agent, manager), use this endpoint to close the livechat room. The authToken of the authenticated user. The userId of the authenticated user. Enter the livechat room ID. Add a description for closing the room. Add tags. Enter whether you want to generate a conversation transcript PDF. Enter whether you want to send the livechat transcript to the visitor. Enter the visitor's email ID to whom you want to send the transcript. Enter a subject for the email. OK Bad Request Unauthorized", "tokens": 257}
{"title": "Get Livechat ConfigurationsGet Livechat IntegrationsGet Livechat QueueLivechat SMS Incoming (Twilio)Livechat Widget API", "content": "Get Livechat widget configuration information and additional visitor data. The visitor token. The visitor's department. OK Retrieves a list of integration settings. Permission required: view-livechat-manager The authToken of the authenticated user. The userId of the authenticated user. OK Unauthorized Forbidden Permission required: view-l-room The authToken of the authenticated user. The userId of the authenticated user. The department ID. The agent ID. Whether you want to include offline agents or not. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, sort = {\"value\": -1, \"_id\": 1} OK Unauthorized Forbidden Receive SMS. Only the server twilio is accepted at moment. OK The Livechat Widget API allows developers to integrate Livechat widget functionalities into their apps seamlessly. The code must be after the Livechat Widget Installation script and wrapped as a callback of RocketChat(); function . You can call multiple Livechat Widget APIs on the same page. The Widget API information is stored in the local storage of the browser", "tokens": 311}
{"title": "Livechat Widget API", "content": ". To set a custom field for a visitor, you can use the following: To change the color of the online status on the Livechat widget, use the following: The following theme options are exclusively available to workspaces subscribed to any of Rocket .Chat's premium plans: agentBubbleBackgroundColor guestBubbleBackgroundColor background hideAgentAvatar hideGuestAvatar position To remove the theme options, set the field value as undefined. Note that omitting the field itself does not remove the customization value . To automatically assign a Livechat widget to a specific department (for example, to use a unique Livechat widget on more than one website), use the following : To transfer an ongoing chat to another department, use the following: To set an external token for a visitor, use this: To set the visitor name field, use this: To set the visitor email field, use this: To register the visitor without using the registration form, use this: To determine a list of attributes and their corresponding values for a guest: This method is essential when using an external service to send livechat trigger messages . To select a language for the widget, use this: See supported languages here. Set a specific agent before the conversation starts . Use this to set up: To configure all the settings in just one method, use this: It is recommended that you use either the registerGuest or the setToken property at once . Using both properties at the same time can cause intermittent issues in registering the visitor properly. You can either hide or show widgets in your application. To hide the widget use this: To show the widget, use this: . You can either open or close the widget on your website . To open the widget by default, use this: To close the widget, use this: Assign a business unit to a widget instance so that the widget will only allow the visitors to select departments connected to that particular business unit on the widget's registration form", "tokens": 429}
{"title": "Livechat Widget API", "content": ". Enterprises need to deal with hundreds of business units in the same workspace, and each business unit represents a specific website where Livechat is installed . Therefore, once a BU is set, only departments associated with the current BU set should be available on the Livechat registration form . To clear any connected business unit on the widget, use this: You can hide specific system messages in the livechat widget conversation. Use the method as follows: Used when the chat widget is maximized. Used when the chat widget is minimized . Used when the chat is started (when the first message is sent). Used when the chat is ended either by the agent or the visitor. Used when the pre-chat form is submitted. Used when the offline form is submitted . Used when the widget is hidden. Used when an agent is assigned to the chat. Used when the widget is shown. Fired when the status of the current agent changes . Fired when a visitor tries to start a new conversation and the Livechat service is offline. Version Description 6.7.0 Added setGuestMetadata method. 3.1.0 Added setAgent and initialize methods . Also, improved the setTheme method adding more options to customize the widget 3.0.0 Added onServiceOffline callback 2.2.0 Added maximizeWidget and minimizeWidget methods. 1.3 .0 Added onAssignAgent and onAgentStatusChange methods. 1.1.0 Added showWidget and hideWidget methods along with onWidgetHidden and onWidgetShown events 1.0.0 Added setLanguage method 0.66 .0 Added setGuestToken, setGuestName, setGuestEmail and registerGuest methods. 0.53 .0 Added callback events and the ability to pass a flag to setCustomField so the value passed does not get wrote if there is already an existing value. 0.36.0 Added setTheme method 0.26 .0 Added setCustomField method", "tokens": 441}
{"title": "Introduction to IntegrationsIntroduction to NotificationsIntroduction to Content ManagementIntroduction to StatisticsIntroduction to Settings", "content": "The following endpoints provide integration support for your Rocket.Chat workspaces: Integration: Create and manage integrations. WebDAV: Manage WebDAV. OAuth Apps: Create and manage OAuth apps to authenticate users. The Rocket.Chat notifications endpoints are as follows: Banners: Get and dismiss banners. Push token: Create and manage push tokens. The following endpoints are used to manage workspace resources: Assets: Set and unset various assets to customize your workspace. Custom Emoji: Create and manage custom emojis. Custom Sounds: View custom sounds. Custom User Status: Create and manage custom user status. View your Rocket.Chat workspace statistics. Get the following workspace engagement details: Channels Messages Users View and manage channel subscription information. Configure your Rocket.Chat workspace with the following endpoints: Settings: Manage public and private settings. Cloud: Register your workspace on Rocket.Chat Cloud. DNS: Resolve DNS text and URL records. E2E: Create and manage E2E keys. Import and Bulk user import: Import users, rooms, and other details to your workspace. Instances: View details of your instances. Federation: Add and manage federated servers. Moderation: View and manage reported messages. Device management: Manage user sessions on the workspace.", "tokens": 288}
{"title": "Introduction to Marketplace AppsInstall Private Apps", "content": "The following marketplace app endpoints are available: WhatsApp: Send a template WhatsApp message. Rasa: Close a Rasa app chat or perform a handover. Install a private app via URL. Permission required: manage-apps The authToken of the authenticated user. The userId of the authenticated user. You can use either the app or url parameter to upload the file. The app URL where the zip file is located. The zip file containing the app. An array of the permissions required for your app. This is required if permissions are defined in your app.json file. OK Unauthorized", "tokens": 137}
{"title": "Shield SVG", "content": "A simple method, requires no authentication, that returns the shield svg(badge) to add in your website. It must have API_Enable_Shields enabled. Can either be online, user, channel Name of the channel Name to show OK", "tokens": 51}
{"title": "SpotlightGet stdout queueExecute a Meteor method call", "content": "Searches for users or rooms that are visible to the user. It will only return rooms that user didn't join yet. The authToken of the authenticated user. The userId of the authenticated user. The term to be searched. Supports '#' for channels and '@' for users OK Unauthorized Retrieves last 1000 lines of server logs Permissions required: view-logs The authToken of the authenticated user. The userId of the authenticated user. OK Unauthorized Execute a realtime API method. The authToken of the authenticated user. The userId of the authenticated user. The Metoer method The method call message.", "tokens": 145}
{"title": "Realtime API", "content": "The Rocket.Chat real-time API allows developers to integrate Rocket.Chat\u2019s real-time messaging and collaboration features in their applications. It utilizes WebSockets, a technology that enables real-time communication between a client (your application) and the Rocket.Chat server. By leveraging this API, you can create dynamic, interactive experiences within your application, enabling users to send and receive messages, participate in live chats, and access various collaboration features. To get started with the Rocket.Chat real-time API, point your client to the WebSocket of the server you want to connect to: For localhost, use ws://localhost:3000/websocket. The API encompasses two integral components: Method Calls and Subscriptions, seamlessly supported within the WebSocket connection. To ensure streamlined functionality within a single connection, we leverage RPC (Remote Procedure Call) using the following format: The type-of-communication is defined based on its purpose: Method Calls: method Subscriptions: sub Before requesting any method calls and subscriptions, you must send a connect message. This connect message is an initial step to establish the connection and prepare for subsequent requests. The server periodically sends a ping message, and it's essential to respond with a pong message to maintain the connection. Failure to respond appropriately will result in the server closing the connection. rocketchat-ddp-listener: A basic example script that uses the 'ddp' NodeJS package to subscribe to the real-time API stream of a Group/Channel. Rocket.Chat.RealTime.API.RxJS: Abstraction for utilizing Rocket.Chat's real-time API Methods with RxJS. rocketchat-async: asyncio-based Python wrapper for the Rocket.Chat real-time API.", "tokens": 384}
{"title": "Method Calls", "content": "Method calls are used to perform actions based on given data. The response to these calls is asynchronous, meaning they don't occur in a specific order. To track the outcome of a call, it's essential to use a unique ID. This ID will be used in the response, allowing the client to identify and retrieve the result of the corresponding call. Here is an example of a method call and response for creating a channel: The id is the only way to recognize which method call a response belongs to. You can also perform a method call via REST API using the Execute a Meteor method call endpoint.", "tokens": 129}
{"title": "Register User (Realtime)", "content": "Register a user to your workspace. Argument Example Required Description email test@test.com Required The email of the channel. pass [\"rocket.12\"] Required The password. name Test Required The name of the account. If there are any errors during registration, here is a sample response format to expect: You can use customFields as extra fields for user registration. To register with custom fields, add Accounts_CustomFields encoded as JSON:", "tokens": 93}
{"title": "Login (Realtime)", "content": "Rocket.Chat supports various methods of authentication. The list of supported auth services (and their configurations) are in the meteor_accounts_loginServiceConfiguration collection. To ensure the security of the user's account, it is important not to submit the user's password as plain text. Instead, apply a hashing algorithm (for example - sha-256). The digest must be lowercase. Argument Example Required Description user { \"username\": \"doe.jon\" } Required The user object containing either the username or email. password { \u201cdigest\u201d: \u201c79cos9ejfs9j\u201d, \u201calgorithm\u201d: \u201csha-256\u201d } Required The password object containing the hashed password and the hash algorithm. Success Error You can use a previous user authentication token or a Personal Access Token to log in as a user. Argument Example Required Description resume 5BwhTeEXiTmU_8uKxGuy4pqWRHRP73QpJYmoSWfBpc Required A personal access token or previous authToken of the user. This success response format remains the same irrespective of the login method used. If the auth-token is expired, send another login request to get a new authToken with a new expiration date. OAuth is used to support additional auth providers.", "tokens": 290}
{"title": "Realtime Two Factor Authentication", "content": "To learn more about Two Factor Authentication(2FA) in Rocket.Chat, see Two Factor Authentication and REST Two Factor Authentication . Name Requires Auth callWithTwoFactorRequired Yes Argument Example Required Description code 56830 Required The 2FA code ddpMethod pinMessage Required The initial method for the request you're trying to make . method email Required The method of the 2FA, for example -email params { \"_id\": \"298gMs93982Le9A7pZjo2D2iB\", \"rid\": \"64a1f373376181965ab77f54\", \"msg\": \"Whats 4* !\" } Required An array of parameters used for the initial method; If the two factor was not accepted the error totp-invalid will be returned; When a request that requires 2FA is made without a 2FA code, it returns a TOTP-Require error . The error also details the 2FA method required (email or authenticator app). method: The method selected by the server. It is useful to inform the user where to look for the code. codeGenerated: Email only . Used to inform if the code was generated or if there are tokens available already. codeCount: (optional) Email only. The number of available codes already sent via email. codeExpires: (optional) Email only . A list of expiration dates of the tokens. availableMethods: The list of available 2FA methods for Two Factor. It is useful in deciding the method to use when making a request", "tokens": 348}
{"title": "Realtime Two Factor AuthenticationGet Rooms (Realtime)", "content": ". If the user didn't receive the 2FA code, you can request to send a new code via email by calling the DDP Method sendEmailCode passing the user's email or username . It's required to pass the email or username because this Method can be called when the user is not logged in . success: array of emails to where the code was sent; error-parameter-required: The parameter emailOrUsername was not provided; error-invalid-user: The user was not found with the provided emailOrUsername; It's possible to enable the email check by calling the method 2fa:enable-email . The two factor via email will only work if the user has at least one verified email. success: true is returned. error-not-authorized if the user is not logged in . To disable the 2FA, call the method 2fa:disable-email. This method requires 2FA to be executed. success: true is returned. error: A 2FA error is returned. Get all rooms a user belongs to. Argument Example Required Description date { \"$date\": 1480377601 } Required A timestamp with the latest client update time in order to just send what changed since last call. If it's the first time calling, send a 0 as date. The result is an object with two fields: update and remove. The remove field is a collection of room IDs identifying the rooms that were removed from the server. The update field is a collection of room and its content varies according to the room type.", "tokens": 332}
{"title": "Get Room by ID (Realtime)Get Room Name by ID (Realtime)Archive Rooms (Realtime)Unarchive Rooms (Realtime)Favorite/Unfavorite a Room (Realtime)", "content": "Get room details by room ID. Method Requires Auth getRoomById Yes Argument Example Required Description rid siyr2oWQJBjQjhLwru Required The room id. Get room name by room ID. Method Requires Auth Permission getRoomNameById Yes view-c-room Argument Example Required Description rid siyr2oWQJBjQjhLwru Required The room ID. When a room is archived, it is designated as read-only and removed from the channel list on the left sidebar. Method Requires Auth Permission archiveRoom Yes archive-room Argument Example Required Description roomId 64a1f373376181965ab77f54 Required The room ID. Unarchiving a room reverses its read-only status and returns it to the channel list on the left sidebar. Method Requires Auth Permission unarchiveRoom Yes unarchive-room Argument Example Required Description roomId 64a1f373376181965ab77f54 Required The room ID. Mark or unmark a room as favorite. Method Requires Auth toggleFavorite Yes Argument Example Required Description roomId 64a1f373376181965ab77f54 Required The room ID. favorite false Optional: Default: true true - Mark as favorite\nfalse - Remove from favorite", "tokens": 283}
{"title": "Hide Rooms (Realtime)Open Rooms (Realtime)Leave Rooms (Realtime)Create Direct Message (Realtime)Create Private Room (Realtime)", "content": "When a room is hidden, it no longer appears in the channel list, and the \"open\" property is set to false in the user's subscription for that room. Method Requires Auth hideRoom Yes Argument Example Required Description roomId 64a1f373376181965ab77f54 Required The room ID. When a room is opened, it becomes visible in the channel list on the sidebar, and the \"open\" property in the user's subscription for that room is set to true. Method Requires Auth openRoom Yes Argument Example Required Description roomId 64a1f373376181965ab77f54 Required The room ID. You can leave any room except for direct messages, and you cannot leave rooms where you are the last owner. Method Requires Auth leaveRoom Yes Argument Example Required Description roomId 64a1f373376181965ab77f54 Required The room ID. Create a direct message. Method Requires Auth createDirectMessage Yes Argument Example Required Description username testrc Required The usernames to be added to the direct message. Create a private group. Method Requires Auth Permission createPrivateGroup Yes create-p Argument Example Required Description name testrc Required The name of the channel/group. members [\"test.queue\"] Optional An array containing the usernames of users to be included in the channel. readonly true Optional A Boolean to indicate if the room is read-only or not. customFields { \u201cpriority\u201d: \u201clow\u201d } Optional Custom fields for the channel. extraData Optional Any extra data to associate with the channel. Version Description 0.38.0 Added", "tokens": 359}
{"title": "Notify Room Stream (Realtime)Load History (Realtime)", "content": "Notify a room about some specific events. Typing user-activity You can notify a room about a user typing on the keyboard. Argument Example Required Description room-id/typing 64a1f373376181965ab77f54/typing Required The room ID followed by /typing. username testrc Required The username. flag true Required A boolean indicating if the user is typing (true) or it's not typing (false). You can notify a room about user activity like typing on the keyboard. Argument Example Required Description room-id/user-activity 64a1f373376181965ab77f54/typing Required The room is followed by /user-activity username testrc Required The username. events [\"user-typing\"] Required A boolean indicating if the user is typing (true) or it's not typing (false). args {} Load room history. After the initial load, you can stream room messages. Argument Example Required Description roomId 64a1f373376181965ab77f54 Required The room ID. timestamp null Required The newest message timestamp date (or null) to only retrieve messages before this time. quantity 50 Required The quantity of results to be returned. date { \"$date\": 1480377601 } Required The date of the last time the client got data for the room. Request of the latest 50 messages: Request of the latest 50 messages, using pagination: The response consists of the message and unreadNotLoaded. The unreadNotLoaded counts the number of unread messages not loaded by the call.", "tokens": 354}
{"title": "Add Room Leader (Realtime)Add Room Moderator (Realtime)", "content": "Set a user as room leader. Method Requires Auth Permission addRoomLeader Yes set-leader Argument Example Required Description roomId 64a1f373376181965ab77f54 Required The room ID. userId 5fRTXMt7DMJbpPJfh Required The user ID to be set as room leader. User not in the room: This occurs when the userId doesn't belong to any user in the room. Invalid User: This occurs when the userId doesn't belong to any user in the workspace. User is already a Leader: This occurs when user is already a leader in that room. No Permission: This occurs when the authenticated user does not have the set-leader permission. User not in the room Invalid User User is already a Leader No Permission Set a user as room moderator. Method Requires Auth Permission addRoomModerator Yes set-moderator Argument Example Required Description roomId 64adb09baa5ad4273bfc0cbf Required The room ID. userId rbAXPnMktTFbNpwtJ Required The user ID to be set as room moderator. User not in the room: This occurs when the userId doesn't belong to any user in the room. Invalid User: This occurs when the userId doesn't belong to any user in the workspace. User is already a Moderator: This occurs when user is already a leader in that room. No Permission: This occurs when the authenticated user does not have the set-moderator permission. User not in the room Invalid User User is already a Moderator No Permission Invalid Room", "tokens": 340}
{"title": "Add Room Owner (Realtime)Mute User in a Room (Realtime)", "content": "Set a user as room owner. Method Requires Auth Permission addRoomOwner Yes set-owner Argument Example Required Description roomId siyr2oWQJBjQjhLwr Required The room ID. userId 5fRTXMt7DMJbpPJfh Required The user ID to be set as room owner. User not in the room: This occurs when the userId doesn't belong to any user in the room. Invalid User: This occurs when the userId doesn't belong to any user in the workspace. User is already a Owner: This occurs when user is already a owner in that room. No Permission: This occurs when the authenticated user does not have the set-owner permission. User not in the room Invalid User User is already an Owner No Permission Invalid Room This method has been deprecated and is scheduled for removal in the 8.0.0 release. Use the /rooms.muteUser endpoint instead. Mute a user in a room. Method Requires Auth Permission muteUserInRoom Yes mute-user Argument Example Required Description data { \"rid\":\"siyr2oWQJBjQjhLwr\", \"username\": \"test.funke\" } Required An object containing the room ID and username of the user to be muted. User not in the room: This occurs when the username doesn't belong to any user in the room. No Permission: This occurs when the authenticated user does not have the mute-user permission. User not in the room No Permission", "tokens": 323}
{"title": "Unmute User in a Room (Realtime)Add User to a Room (Realtime)", "content": "This method has been deprecated and is scheduled for removal in the 8.0.0 release. Use the /rooms.unmuteUser endpoint instead. Unmute a user in a room. Method Requires Auth Permission unmuteUserInRoom Yes mute-user Argument Example Required Description data { \"rid\":\"siyr2oWQJBjQjhLwr\", \"username\": \"test.fun\" } Required An object containing the room ID and username of the user to be unmuted. User not in the room: This occurs when the username doesn't belong to any user in the room. No Permission: This occurs when the authenticated user does not have the mute-user permission. Invalid Room: This occurs when the rid is not a valid room ID in the workspace. User not in the room No Permission Invalid Room Add a user to a room. Method Requires Auth addUserToRoom Yes Argument Example Required Description data { \"rid\": \"64f0f82c21c26843a68c1f7ba\", \"username\": \"rodriq\" } Required An object of the roomid and userId Any of the following errors can occur on the endpoint. Authorization: Requires an authentication token for the request to be made.", "tokens": 278}
{"title": "Save Room Settings (Realtime)Get Room Roles (Realtime)Create Channels (Realtime)", "content": "Name Requires Auth saveRoomSettings Yes Argument Example Required Description roomId 64a1f373376181965ab77f54 Required The message object. setting joinCode Required The room settings. Setting Accepted values roomName String roomTopic String roomDescription String roomType c or p readOnly Boolean systemMessages Boolean default Boolean joinCode String Get a collection of users and their roles per room. You can send a collection of room IDs (at least one). The user roles per room object is defined as: rid: The room ID this user and role belong to. u: A simple user object with the user ID and username. roles: The collection of roles of the user in the room. _id: the ID of this object. Create a public channel. Method Requires Auth Permission createChannel Yes create-c Argument Example Required Description name channelname Required The name of the channel. members [\"rocket.cat\"] Optional; Default: [] An array of usernames, represented as strings, for the users designated to be included in the channel. If the array is empty, only the user making the request to this method will be added to the channel. readOnly true Optional; Default: false Set if the channel is read-only or not. The value must be boolean.", "tokens": 286}
{"title": "Create Private Groups (Realtime)Join Channels (Realtime)Send Message (Realtime)", "content": "Create a private channel. Method Requires Auth Permission createPrivateGroup Yes create-p Argument Example Required Description name channelname Required The name of the channel. members [\"test.rc\"] Optional; Default: [] An array of usernames, represented as strings, for the users designated to be included in the channel. If the array is empty, only the user making the request to this method will be added to the channel. You can only join yourself to public channels, private groups are not joinable. Some public channels require you to enter a joinCode. Method Requires Auth Permission joinRoom Yes view-c-room Argument Example Required Description roomId jfs9sjcoiown Required The room ID to join. joinCode 4456 Required, if the room requires a code to join. The code to join the room. The response from calling the method will return a result of whether the user joined the channel or not. Send a message to a room. Method Requires Auth sendMessage Yes Argument Example Required Description message Required The message object. The message object contains the following properties: _id 8gMsLe9ApZjo2D2iB The message ID. rid 64a1f373376181965ab77f54 The room ID where the message should be sent. msg Hello World The message content to be sent. To send a file, use the Upload File to a Room endpoint.", "tokens": 303}
{"title": "Get Single Message (Realtime)Star/Unstar Message (Realtime)Set/Unset Reactions (Realtime)", "content": "Get a single message by the message ID. Method Requires Auth getSingleMessage Yes Argument Example Required Description message_id 8gMsLe9ApZjo2D2iB Required The message ID. Starring messages enables users to save them easily for future reference or personal use. Method Requires Auth Setting starMessage Yes Message_AllowStarring Argument Example Required Description message Required The message object. The message object contains the following properties: _id 8gMsLe9ApZjo2D2iB Required The message ID that you want to star or unstar. rid 64a1f373376181965ab77f54 Required The room ID. starred true Required It can only be true or false. true: Star the message. false: Unstar the message. Reacting to messages provides a convenient means of expressing reactions through emojis, offering various options for integrations, inquiries, and other creative purposes. Method Requires Auth setReaction Yes Argument Example Required Description emoji :nerd: Required The emoji. message_id 8gMsLe9ApZjo2D2iB Required The ID of the message you want to react to. setReaction true Required It can only be true or false. true: Set the emoji reaction to the message. false: Remove the emoji reaction from the message.", "tokens": 284}
{"title": "Pin Message (Realtime)Unpin Message (Realtime)Update Message (Realtime)Set User Presence (Realtime)", "content": "Pin a message. Method Requires Auth Setting pinMessage Yes Message_AllowPinning Argument Example Required Description messageObject Required The message object Unpin a message. Method Requires Auth Setting unpinMessage Yes Message_AllowPinning Argument Example Required Description messageObject Required The message object. Update a message. Method Requires Auth Permission Settings updateMessage Yes edit-message You need to consider two essential settings when deleting messages: Message_AllowEditing: It is represented as a boolean (true/false), which determines whether message editing is permitted. Message_AllowDeleting_BlockDeleteInMinutes: It is represented as an integer and offers more control over the edit functionality. When set to 0, editing is allowed without any time restrictions. However, if the value is greater than 0, there is a time-based restriction where editing is blocked/disabled after the specified duration has passed. Argument Example Required Description textMessageObject Required The Message Object containing only the updated msg. Set the user presence status. By default, there are four different statuses available in your workspace: online busy away offline Method Requires Auth UserPresence:setDefaultStatus Yes Argument Example Required Description status online Required The user presence status to be set as default. To set a temporary status, send a request to UserPresence:{status} with empty parameters. It only accepts either of these two status options: away and online. It is particularly useful when the client detects that the user is currently not actively using the application (thus \"away\") and when the user returns, indicating they are \"online\" again. Method Requires Auth UserPresence:away Yes", "tokens": 364}
{"title": "Set User Password (Realtime)Get User Roles (Realtime)Fetch My Keys (Realtime)Get Users of Room Without Key (Realtime)Set Room Key ID (Realtime)", "content": "Method Requires Auth setUserPassword Yes The workspace administrator must enable the Require password change field for the user. Argument Example Required Description password pass123 Required The new password. Same password: This occurs when the new \u00a0password is same as the current password. Not Allowed: This occurs when the user does not have Require password change enabled. Same password Not allowed Get the role(s) of a user in a room. It can be used to identify key users in the workspace. Method Requires Auth getUserRoles Yes This method returns the user's private and public keys stored on the server. Method Requires Auth e2e.fetchMyKeys Yes Version Description 0.70.0 Added This method returns all users of an encrypted room who don't yet have the E2E key on their subscription. Method Requires Auth e2e.getUsersOfRoomWithoutKey Yes Argument Example Required Description rid hifepo89jncls Required The room ID to get the users from. Version Description 0.70.0 Added This method marks an existing room as encrypted. Method Required Auth e2e.setRoomKeyID Yes Argument Example Required Description rid kjfospmc9d Required The room ID that is being updated. keyID uriejscjsroencz Required The key ID to add to the room. Version Description 0.70.0 Added", "tokens": 304}
{"title": "Set User Public and Private Keys (Realtime)Update Group Key (Realtime)Add OAuth Service (Realtime)", "content": "This method changes the user's private and public keys on the server. Method Requires Auth e2e.setUserPublicAndPivateKeys Yes Argument Example Required Description public_key, private_key Required An object containing the private key and public key attributes, both of them strings. Version Description 0.70.0 Added This method has been deprecated and is scheduled for removal in the 8.0.0 release. This method updates the user subscription to save the E2E key. Method Requires Auth e2e.updateGroupKey Yes Argument Example Required Description rid joqpjkmcsw Required The room ID of the subscription. uid uisocs93ndsal Required The user ID of the subscription. key klsosnaca Required The key that will be saved on the subscription. Version Description 0.70.0 Added Add an OAuth service for users to log in to your workspace. Method Requires Auth Permission addOAuthService Yes add-oauth-service Argument Example Required Description name okta Required The name of the OAuth service you want to add. Any of the following errors can occur on the endpoint. No Permission: Occurs when the authenticated user doesn't have the add-oauth-service permission. Version Description 0.51.0 Added", "tokens": 283}
{"title": "Remove OAuth Service (Realtime)Refresh OAuth Service (Realtime)Get Permissions (Realtime)", "content": "Remove an OAuth service. Method Requires Auth Permission removeOAuthService Yes add-oauth-service Argument Example Required Description name okta Required The name of the OAuth service you want to remove. Any of the following errors can occur on the endpoint. No Permission: Occurs when the authenticated user doesn't have the add-oauth-service permission. Refresh the OAuth services in a workspace. Method Requires Auth Permission Setting refreshOAuthService Yes add-oauth-service None Any of the following errors can occur on the endpoint. No Permission: Occurs when the authenticated user doesn't have the add-oauth-service permission. Version Description 0.48.2 Added List all the permissions in this workspace. Each permission is associated with a role. You can use this information to customize your UI based on user permissions. Method Requires Auth permissions/get Yes The permission object describes permission as: _id: The permission's ID. roles: A collection of roles that this permission applies to. _updatedAt: (Optional) The last time this permission object was updated in the database. meta: Metadata about the permission. $loki: An internal property that can be ignored (it is removed on the web client before being added to the web client's database).", "tokens": 292}
{"title": "Assign Permission to Role (Realtime)Remove Permission from RoleGet Public Settings (Realtime)Restart Server (Realtime)Get Subscriptions (Realtime)", "content": "Assign a permission to a role in the workspace. Method Requires Auth authorization:addPermissionToRole Yes Argument Example Required Description permission-id archive-room Required The id of the permission to assign role-id 679398c4f7ca7be1b5fcf5b7 Required The id of the role that the permission will be assigned to Remove a permission from a role in the workspace. Method Requires Auth removeRoleFromPermission Yes Argument Example Required Description permission-id archive-room Required The id of the permission to remove role-id 679398c4f7ca7be1b5fcf5b7 Required The id of the role that the permission will be removed from Retrieve all public settings. Method Requires Auth public-settings/get Yes Argument Example Required Description date { \"$date\": 1480377601 } Optional Filters the results to contain the updated and removed settings after the provided time. It accepts timestamps. Restart your workspace server. Method Requires Auth Permission restart_server Yes restart-server Returns a user's subscription collection. Method Requires Auth subscriptions/get Yes Argument Example Required Description date { \"$date\": 1480377601 } Optional Filters the results to contain the updated and removed subscriptions after the provided time. It accepts timestamps.", "tokens": 292}
{"title": "Spotlight Search (Realtime)Livechat Realtime API", "content": "Search for rooms or users. Method Requires Auth spotlight Yes Argument Example Required Description searchString test Required The term to be searched for. exclude test.rc Optional Any items to exclude from the results (e.g. users you already know about). options { \"users\": true, \"rooms\": false } Required The kind of fields to search for. This API is intended to be used for having a Livechat conversation. First, you need to generate a visitor token (it can be any random string) . Call livechat:getInitialData passing visitorToken as the first argument, the response will be an object containing a Livechat configuration object with the following properties: Field Type Description enabled Boolean Whether Livechat is enabled for that workspace or not", "tokens": 167}
{"title": "Livechat Realtime API", "content": ". title String The Livechat widget title. color Hexadecimal The hexadecimal color of the Livechat widget title bar when Livechat is online. registrationForm Boolean If the registration form should be displayed or not. . room Object The current conversation room for the current guest user visitor Object The current guest user. triggers Array Array of Livechat triggers. departments Array Array of Livechat departments. allowSwitchingDepartments Boolean If client-side department switching is allowed . online Boolean If there are Livechat agents online. offlineColor Hexadecimal The hexadecimal color of the Livechat widget title bar when Livechat is offline. offlineMessage String The message that will be displayed on the Livechat offline form . offlineSuccessMessage String The message that will be displayed after sending a message using the offline form. offlineUnavailableMessage String The message that will be displayed when Livechat is offline . displayOfflineForm Boolean If the offline form will be displayed when Livechat is offline. videoCall Boolean If the VideoCall feature is available. conversationFinishedMessage Boolean The system message that will be sent to the current guest user when the conversation is closed . nameFieldRegistrationForm Boolean If the name field is displayed on the Livechat registration form. emailFieldRegistrationForm Boolean If the email field is displayed on the Livechat registration form. offlineTitle String The title of the widget when Livechat is offline . language String The default user language to be set in the Livechat widget. transcript Boolean If the Livechat widget will ask the current guest user if they would like a transcript after the conversation is closed . transcriptMessage String The message to be displayed when asking about the transcript. agentData Object The current agent attending the chart. Call livechat:registerGuest to register guests and get the response containing the visitor's data . Before sending the first message, you have to generate a random room _id. Now you can send messages to the method sendMessageLivechat. Subscribe to: stream-room-messages and stream-livechat-room . Get agent info by calling livechat:getAgentData.", "tokens": 513}
{"title": "Send Livechat Message (Realtime)Subscribe to Livechat Room (Realtime)", "content": "The property _id should be generated randomly before sending the message. This is the room messages stream. You need the room ID to subscribe. To unsubscribe from a room, send \"unsub\", along with the ID of the previous subscribe message. If you want to subscribe to a user's messages stream, pass __my_messages__ as the room ID.", "tokens": 88}
{"title": "Subscriptions", "content": "Streams are a way of plugging into a continuous source of updates (changes). Any subscriber registered will receive the latest changes as they occur. To subscribe to a stream, you must send a message with msg as sub, a unique ID, the stream name, and the parameters to be applied on the stream. You must be logged in before you send any subscription request. Recent changes to the stream API aim to notify subscribers about changes more selectively, which could cause issues with existing drivers. To ensure compatibility, the back-compatibility boolean parameter is suggested as the last option. If set to true, subscribers will receive an \"add\" event whenever something new is created. This parameter allows subscribers to decide if they need to be notified about all changes or only specific ones, keeping things compatible with older drivers. To unsubscribe from a room, send this request: The response will look like this: When you make a call to an invalid or non-existent subscription_id, the response will not produce an error. Instead, it will respond with at least a \"msg\" field set to \"nosub\" and include the provided id value. If no id was provided, the id field will be omitted from the response.", "tokens": 258}
{"title": "Notify Logged-In Users (Realtime)Notify Room Users (Realtime)Room Stream (Realtime)Stream Room Messages (Realtime)Notify User (Realtime)Notify All Users (Realtime)", "content": "Stream for logged-in users. Users:NameChanged Users:Deleted updateAvatar updateEmojiCustom deleteEmojiCustom roles-change user-status Event about user status changes. The args property will always be an array with the following values: Argument Example Description user_id uNqJeFuag2344i62k The user ID. username rocket.cat The username. status 1 The indicator of the user status. The integers represent the following: 0 - offline, 1-online, 2 - away, 3 - busy. Stream for users in a room. It is used to notify about WebRTC calls. webrtc Stream for a room. deleteMessage typing user-activity Stream room messages. Argument Example Required Description roomId 64a1f373376181965ab77f54 Required The room ID. back-compatibility false Required Boolean to set back compatibility. Stream for a user. message otr (Off the Record message) webrtc notification rooms-changed subscriptions-changed General user-wide stream. roles-change updateEmojiCustom deleteEmojiCustom updateAvatar public-settings-changed permissions-changed", "tokens": 264}
{"title": "Schema DefinitionUser", "content": "This section provides an overview of the structure and fields used in Rocket.Chat schema. It aims to assist developers in understanding the data models and their relationship within the system. User: Schema structure for Rocket.Chat user data. Room: The schema structure for all Rocket.Chat rooms. Message: Structure of a Rocket.Chat message object. Subscription: The structure of how users relate to rooms. The IUser interface represents the User object defining the properties and their types that can be associated with a user. User information is stored in the users collection on MongoDB . Main Interface For more information and details on the Interface and sub-Interfaces, see the code here Rocket.Chat/IUser.ts at develop \u00b7 RocketChat/Rocket.Chat Example object The User object has these fields with the following data types", "tokens": 171}
{"title": "User", "content": ". Parameter Data type Description _id String The unique identifier for the user. createdAt Date The date and time when the user was created. roles Array of strings An array of role IDs associated with the user. E.g . \"user\", \"admin\", \u201clivechat-agent\u201d type String The type of user. E.g. \u201cuser\u201d, \u201capp\u201d or \u201cbot\u201d active Boolean Indicates whether the user is active or not. username String The username of the user . nickname String The user\u2019s nickname. name String The user\u2019s name. services Object Additional services associated with the user. emails Array of objects An array of email objects associated with the user. status String The user\u2019s status . statusConnection String The status connection of the user. lastLogin Date The date and time of the user's last login. bio String The user\u2019s biography or description. avatarOrigin String The origin of the user's avatar . avatarETag String The ETag of the user's avatar. avatarUrl String The URL of the user's avatar. utcOffset Number The UTC offset of the user's timezone. language String The user\u2019s language preference . statusDefault String The default status of the user. statusText String The custom status text of the user. oauth Object OAuth information associated with the user. _updatedAt Date The date and time when the user object was last updated . e2e Object End-to-end encryption information associated with the user. requirePasswordChange Boolean Indicates whether the user needs to change their password. customFields Object Additional custom fields associated with the user. settings Object User-specific settings . defaultRoom String The ID of the user's default room. ldap Boolean Indicates whether the user is an LDAP user. extension String The extension associated with the user. inviteToken String The token for inviting the user . canViewAllInfo Boolean Indicates whether the user can view all information. phone String The phone number associated with the user. reason String The reason associated with the user. federated Boolean Indicates whether the user is a federated user . federation Object Federation information associated with the user. banners Object Banner information associated with the user. importIds Array of strings An array of import IDs associated with the user.", "tokens": 495}
{"title": "Room", "content": "The room object represents any form of communication between two or more users. There are at least two fields on the room object . _id: The room/user ID (depends on the room type) t: The room type The IRoom interface represents the Room object defining the properties and their types that can be associated with a Room . Room information is stored in the rocketchat_room collection on MongoDB. See the IRoom interface here. Rocket.Chat/IRoom.ts at develop \u00b7 RocketChat/Rocket .Chat Example object The Room object has these fields: Field Data type Description _id String The room ID. t String The room type. E .g c = channel, d = direct message, l = livechat, p=private chat name String The room\u2019s name. fname String The full name of the room. msgs Number The number of messages in the room . default Boolean Indicates if the room is the default room. broadcast Boolean Indicates if the room is a broadcast room. featured Boolean Indicates if the room is featured. announcement String The announcement or summary of the room . joinCodeRequired Boolean Indicates if a join code is required to enter the room. announcementDetails String Additional details about the room announcement, such as the style. encrypted Boolean Indicates if the room is encrypted. topic String The topic of the room . reactWhenReadOnly Boolean Indicates if reactions are allowed when the room is read-only. sysMes MessageTypesValues[] | Boolean Indicates whether system messages are enabled or an array of allowed system message types . u String Information about the user who created the room (_id: string, username: string, name: string). uids Array of string Array of user IDs in the room. lastMessage Object The last message sent in the room . lm Date Timestamp of the last message. usersCount Number The number of users in the room. callStatus CallStatus The status of a call in the room. webRtcCallStartTime Date The start time of a WebRTC call in the room . servedBy String Information about the user who served the room (_id: string)", "tokens": 475}
{"title": "Room", "content": ". streamingOptions String Options for streaming content in the room (id?: string, type?: string, url?: string, thumbnail?: string, isAudioOnly?: boolean, message?: string). prid String The primary room ID (for threads) . avatarETag String The ETag for the room avatar. teamMain Boolean Indicates if the room is the main room for a team. teamId String The ID of the team the room belongs to . teamDefault Boolean Indicates if the room is the default room for the team. open Boolean Indicates if the room is open. autoTranslateLanguage String The language used for automatic translation in the room . autoTranslate Boolean Indicates if automatic translation is enabled for the room. unread Number The number of unread messages in the room. alert Boolean Indicates if there is an alert in the room. hideUnreadStatus Boolean Indicates if the unread status is hidden . hideMentionStatus Boolean Indicates if the mention status is hidden. muted Array of string An array of user IDs who are muted in the room. unmuted Array of string An array of user IDs who are not muted in the room . usernames Array of string An array of usernames in the room. ts Date Timestamp of when the room was created. cl Boolean Indicates if the room is a channel. ro Boolean Indicates if the room is read-only . favorite Boolean Indicates if the room is marked as a favorite. archived Boolean Indicates if the room is archived. description String Description or summary of the room . createdOTR Boolean Indicates if the room was created as an OTR (off-the-record) room. e2eKeyId String Key ID for end-to-end encryption in the room . federated Boolean (Deprecated) Indicates if the room is federated. customFields Object (Deprecated) Custom fields for additional room information. channel { _id: string } Information about the channel the room belongs to", "tokens": 438}
{"title": "Room", "content": ". d: Direct messages c: Public channel p: Private channel discussions: Team or channel discussions teams: Workspace teams l: Livechat v: Omnichannel VoIP rooms The information that comes with the room object changes according to its type . Direct chat Chat Private chat A direct chat between two users. In this case, the room object only has two fields: _id: The room id t: The room type (in this case d) Example: An open chatroom . A chat contains more information about the room as it follows: _id: The room id t: The room type (in this case c) name: The room name u: The room creator (it may return a null user) topic: (Optional) The room topic muted: (Optional) A collection of muted users by its username jitsiTimeout: (Optional) Example: A private chatroom . This type of room resembles the open chat room with an addition . _id: The room id t: The room type (in this case p) name: The room name u: The room creator (it may return a null user) topic: (Optional) The room topic muted: (Optional) A collection of muted users by its username jitsiTimeout: (Optional) ( ?) ro: Flags if the room is read-only Example:", "tokens": 285}
{"title": "Deprecated Endpoints", "content": "The following methods and endpoints of the REST API and Realtime API have been deprecated. According to the version listed, they have either been replaced, removed, or are scheduled for removal . Endpoint Release deprecated Release removed Description /livechat/office-hours 5.0.0 /v1/info 1.0.0 1.12.0 /emoji.custom 1.0.0 1.12 .0 /permissions.list 0.73.0 1.11.0 /permissions 0.66.0 0.69.0 /channels.cleanHistory 0.64.0 0.67.0 /user .roles 0.63.0 0.66.0 /livechat/room.transfer 5.2.0 7.0.0 The endpoint is replaced by /livechat/room.forward /licenses.get 6.5 .0 7.0.0 The endpoint is replaced by /licenses.info /licenses.isEnterprise 6.5.0 7.0.0 The endpoint is replaced by /licenses.info /livechat/room.visitor 5 .2.0 7.0.0 The endpoint will be removed. /livechat/inquiries.queued 5.4.1 7.0.0 The endpoint is replaced by /livechat/inquiries.queuedForUser pw .getPolicyReset 6.3.0 7.0.0 The endpoint is replaced pw.getPolicy channels.images 6.8.0 7.0.0 The endpoint is replaced. rooms.images /users.createToken 6 .8.0 8.0.0 The endpoint will be removed. The following endpoints have been replaced: Endpoint Renamed endpoint Release /livechat/business-hours.list /livechat/business-hours 5.0", "tokens": 409}
{"title": "Deprecated Endpoints", "content": ".0 /livechat/departments.available-by-unit/:unitId /livechat/units/:unitId/departments/available 5.0.0 /livechat/departments .by-unit/:unitId /livechat/units/:unitId/departments 5.0.0 /livechat/monitors.list /livechat/monitors 5.0.0 /livechat/units .getOne /livechat/monitors/:username 5.0.0 /livechat/priorities.list /livechat/priorities 5.0.0 /livechat/priority .getOne /livechat/priorities/:priorityId 5.0.0 /livechat/tags.list /livechat/tags 5.0.0 /livechat/tags.getOne /livechat/tags/:tagId 5.0 .0 /livechat/units.list /livechat/units 5.0.0 /livechat/units.getOne /livechat/units/:unitId 5.0.0 /livechat/unitMonitors .list /livechat/units/:unitId/monitors 5.0.0 Method Release deprecated Release removal reportMessage 6.2.0 7.0.0 - Use the chat.reportMessage endpoint instead . livechat:getDepartmentForwardRestrictions 5.2.0 7.0.0 livechat:getFirstRoomMessage 5.2.0 7.0.0 cleanChannelHistory 0.64.0 0 .67.0 canAccessRoom 4.1.1 5.0.0 Method Release deprecated Release removal Description muteUserInRoom 6.8.0 8.0.0 Replaced by the /rooms .muteUser endpoint. unmuteUserInRoom 6.8.0 8.0.0 Replaced by the /rooms.unmuteUser endpoint. inserOrUpdateUser 6.7.0 8.0", "tokens": 451}
{"title": "Deprecated Endpoints", "content": ".0 Users upsert won't be allowed anymore (the method will be completely removed). createToken 6.8.0 8.0.0 This method will be removed. livechat:removeTrigger 6.5 .0 7.0.0 Replaced by the /livechat/triggers/:_id (DELETE) endpoint. livechat:discardTranscript 6.4.0 7.0 .0 Replaced by the /livechat/transcript/:rid (DELETE) endpoint. livechat:getAgentOverviewData 6.4.0 7.0.0 Replaced by the /livechat/analytics/agent-overview endpoint . livechat:getAnalyticsOverviewData 6.4.0 7.0.0 Replaced by the /livechat/analytics/overview endpoint. livechat:requestTranscript 6.4.0 7.0 .0 Replaced by the /livechat/transcript/:rid endpoint. livechat:saveAppearance 6.4.0 7.0.0 Replaced by the /livechat/appearance endpoint. livechat:saveTrigger 6 .4.0 7.0.0 Replaced by the /livechat/triggers endpoint. livechat:getAgentData 6.4.0 7.0.0 Replaced by the /livechat/agent .info/:rid/:token endpoint. livechat:resumeOnHold 6.3.0 7.0.0 Replaced by the /livechat/room.resumeOnHold endpoint. deleteMessage 6.2.0 7 .0.0 Replaced by chat.delete endpoint. livechat:saveIntegration 6.2.0 7.0.0 Replaced by the /omnichannel/integrations (POST) endpoint . addOauthApp 6.2.0 7.0.0 Replaced by the oauth-apps.create endpoint. livechat:closeRoom 6.0.0 7.0 .0 Replaced by the /livechat/room.close or /livechat/room.closeByUser endpoints. listEmojiCustom 5.4.3 7.0.0 Replaced by emoji-custom.list endpoint", "tokens": 506}
{"title": "Deprecated Endpoints", "content": ". getAvatarSuggestion 5.4.0 7.0.0 Replaced by the users.getAvatarSuggestion endpoint. refreshClients 5.4.0 7.0.0 This is now triggered by assets .setAsset and assets.unsetAsset. eraseRoom 5.4.0 7.0.0 Replaced by rooms.delete endpoint. checkUsernameAvailability 5.4.0 7.0.0 Replaced by users .checkUsernameAvailability endpoint. Mailer:unsubscribe 5.4.0 7.0.0 Replaced by the mailer.unsubscribe endpoint. Mailer.sendMail 5.4.0 7.0 .0 Replaced by the mailer endpoint. sendConfirmationEmail 5.4.0 7.0.0 Replaced by users.sendConfirmationEmail endpoint. livechat:changeLivechatStatus 5.4.0 7 .0.0 Replaced by the /livechat/agent.status endpoint. livechat:webhookTest 5.4.0 7.0.0 Replaced by the /livechat/webhook.test endpoint . livechat:saveInfo 5.3.0 7.0.0 Replaced by the /livechat/room/save.info endpoint. livechat:addAgent 5.2.0 7.0 .0 Replaced by the livechat/users/agent (POST) endpoint . livechat:addManager 5.2.0 7.0.0 Replaced by livechat/users/manager (POST) endpoint . livechat:getCustomFields 5.2.0 7.0.0 Replaced by the /livechat/custom-fields endpoint. livechat:getNextAgent 5.2.0 7.0", "tokens": 422}
{"title": "Deprecated Endpoints", "content": ".0 Replaced by the /livechat/agent.next/:token endpoint. livechat:getTagsList 5.2.0 7.0.0 Replaced by the /livechat/tags endpoint. livechat:loadHistory 5 .2.0 7.0.0 Replaced by the /livechat/messages.history/:rid endpoint. livechat:loginByToken 5.2.0 7.0 .0 Replaced by th /livechat/visitor/:token endpoint. livechat:pageVisited 5.2.0 7.0.0 Replaced by the /livechat/page.visited endpoint . livechat:registerGuest 5.2.0 7.0.0 Replaced by the /livechat/visitor endpoint. livechat:removeAgent 5.2.0 7.0 .0 Replaced by the /livechat/users/agent/:_id endpoint. livechat:removeDepartment 5.2.0 7.0.0 Replaced by the /livechat/department/:_id endpoint . livechat:removeManager 5.2.0 7.0.0 Replaced by the /livechat/users/manager/:_id endpoint. livechat:saveDepartmentAgents 5.2.0 7.0 .0 Replaced by the /livechat/department/:_id/agents endpoint. livechat:saveSurveyFeedback 5.2.0 7.0.0 Replaced by the /livechat/room.survey endpoint . livechat:searchAgent 5.2.0 7.0.0 Replaced by the /livechat/users/agent/:_id endpoint. livechat:sendOfflineMessage 5.2.0 7.0 .0 Replaced by the /livechat/offline.message endpoint. livechat:setCustomField 5.2.0 7.0.0 Replaced by the /livechat/visitor endpoint. livechat:setDepartmentForVisitor 5 .2.0 7.0.0 Replaced by the /livechat/visitor endpoint. livechat:transfer 5.2.0 7.0.0 Replaced by the /livechat/room.forward endpoint . roomNameExists 5.1.0 7.0.0 Replaced by rooms.nameExists endpoint. removeWebdavAccount 5.1.0 7.0.0 Replaced by webdav .removeWebdavAccount endpoint. getPasswordPolicy 5.1.0 7.0.0 Replaced by the pw.getPolicy endpoint.", "tokens": 604}
{"title": "Deprecated Parameters", "content": "This document outlines the parameters deprecated in Rocket.Chat\u2019s REST API endpoints and Realtime API methods. Some of these parameters have already been removed, while others are scheduled for removal in upcoming releases . To ensure continued functionality, adopt the recommended alternatives as specified for each affected parameter. The table below shows the deprecated parameters in our REST API endpoints: Parameter Endpoints affected Release deprecated Release removal Description role roles.getUsersInRole 4.6 .0 7.0.0 This parameter will no longer accept roleName as a fallback. Use only roleId instead. roleName roles.addUserToRole 4.6.0 7.0.0 This parameter will no longer be accepted . Use roleId instead. roleName roles.removeUserFromRole 4.6.0 7.0.0 This parameter will no longer be accepted. Use roleId instead. appId oauth-apps.get 6.0.0 7.0 .0 The parameter will stop being accepted (use the clientId or _id parameters instead). The query and fields parameters have been deprecated since version 5.0.0 across all supported endpoints to prevent malicious queries . They are disabled by default from version 7.0.0 and can only be enabled by setting the ALLOW_UNSAFE_QUERY_AND_FIELDS_API_PARAMS: true environment variable in your deployment configuration . Enabling these parameters may expose your workspace to security risks, and Rocket.Chat is not responsible for any resulting vulnerabilities. Proceed with caution and ensure proper security measures are in place . When enabled, a deprecation message is included in the response header as X-Deprecation-Message. These parameters are scheduled for removal in version 8.0.0, after which enabling them will no longer be an option", "tokens": 383}
{"title": "Deprecated Parameters", "content": ". The following endpoints are among those affected: Endpoint query parameter fields parameter settings.public \u2713 \u2713 statistics.list \u2713 \u2713 custom-sounds.list \u2713 \u2713 emoji-custom.list \u2713 x integrations.history \u2713 \u2713 integrations.list \u2713 \u2713 users.list \u2713 \u2713 users .info x \u2713 chat.getThreadsList \u2713 \u2713 chat.getThreadMessages \u2713 \u2713 im.files \u2713 \u2713 im.list.everyone \u2713 \u2713 im.messages \u2713 \u2713 im.messages.others \u2713 \u2713 email-inbox .list \u2713 \u2713 spotlight \u2713 x omnichannel/agents/available \u2713 x livechat/rooms (GET) x \u2713 canned-responses (GET) x \u2713 voip/rooms x \u2713 channels.anonymousread \u2713 \u2713 channels.files \u2713 \u2713 channels.list .joined \u2713 \u2713 channels.list \u2713 \u2713 channels.messages \u2713 x channels.getIntegrations \u2713 \u2713 rooms.getDiscussions \u2713 \u2713 teams.list \u2713 x groups.online \u2713 x groups.getIntegrations \u2713 \u2713 groups.listAll \u2713 \u2713 groups.messages \u2713 \u2713 groups .files \u2713 \u2713 channels.online \u2713 x directory \u2713 \u2713 rooms.info x \u2713 dm.messages \u2713 \u2713 custom-user-status .list \u2713 x The table below outlines the deprecated parameters in our Realtime API methods: Method Parameters affected Release deprecated Release removal Description apps (POST) downloadOnly 6.6.0 7.0.0 The parameter will stop being accepted . authorization:removeUserFromRole role 4.6.0 7.0.0 This parameter will no longer accept roleName as a fallback. Use only roleId instead. authorization:deleteRole role 4.6.0 7 .0.0 This parameter will no longer accept roleName as a fallback. Use only roleId instead. authorization:addUserToRole role 4.6.0 7.0.0 This parameter will no longer accept roleName as a fallback . Use only roleId instead.", "tokens": 424}
{"title": "Get Users of a RoleCreate RoleUpdate Role", "content": "Gets the users that belong to a specific role. Permission required: access-permissions The authenticated user ID. The authenticated user token. The role name or the role ID. For custom roles, use the role ID. The room ID. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. How many items to return. OK Bad Request Unauthorized Create a new role in the workspace. See Custom Roles for further information. The authenticated user ID. The authenticated user token. Enter the new role's name. The new role's scope. The default value is Users. Enter a description for the new role. Whether the role should have a mandatory 2FA. The default value is false. OK Bad Request Unauthorized Update a role in the workspace. Permission required: access-permissions The authenticated user ID. The authenticated user token. The role ID that you want to update. The updated name of the role. The updated scope of the role. The default value is Users. Updated description for the role. Whether the role should have a mandatory 2FA. The default value is false. OK Bad Request Unauthorized", "tokens": 251}
{"title": "Assign Role to UserGet RolesGet Updated RolesDelete RoleRemove Role from User", "content": "Assign a role to a user. Optionally, you can set this role to a user for a specific room. The authenticated user ID. The authenticated user token. By default, the three major room roles are available in Rocket.Chat are Owner, Leader, and Moderator. Creating custom roles is exclusively available on the Enterprise plan. Refer to Roles for more information. The role name. Alternatively, use the roleId parameter. Note: The user name. The ID of the room where the user should be assigned a role, if it is a room role. OK Bad Request Unauthorized Gets all the roles in the workspace. The authenticated user ID. The authenticated user token. OK Unauthorized Gets all the roles in the workspace which are updated after a given date. The authenticated user ID. The authenticated user token. Date as ISO string. OK Bad Request Unauthorized Permission required: access-permissions The authenticated user ID. The authenticated user token. The ID of an existing role. OK Bad Request Unauthorized Permission required: access-permissions Remove a role from a user. Optionally, you can remove this role from a specified scope. The authenticated user ID. The authenticated user token. The ID of an existing role. The username for which you want to remove the role. OK Bad Request Unauthorized", "tokens": 280}
{"title": "Get OAuth AppCreate OAuth AppUpdate OAuth App", "content": "Retrieves an OAuth app by ID or client ID. Permission required: manage-oauth-apps. The endpoint can be accessed even without this permission, but sensitive information (such as client secrets) will be filtered out. The authorization token of the user. The user ID of the user. The app ID. This value is required if clientId is not used. The parameter will stop being accepted from 7.0.0 (use the clientId or _id parameters instead). The client ID. This value is required if appId is not used. The app ID. This value is required if clientId is not used. Bad Request Unauthorized Permission required: manage-oauth-apps The authorization token of the user. The user ID of the user. Name of the app that you want to create. The URL to redirect the OAuth app. Whether the app will be active or not. Enter a boolean value, true or false. Bad Request Unauthorized Permission required: manage-oauth-apps The authorization token of the user. The user ID of the user. Name of the app that you want to create. The URL to redirect the OAuth app. Whether the app will be active or not. Enter a boolean value, true or false. The app ID. Bad Request Unauthorized", "tokens": 283}
{"title": "Get List of OAuth AppsDelete OAuth AppGet Public SettingsGet OAuth Settings", "content": "Permission required: manage-oauth-apps The authorization token of the user. The user ID of the user. Unauthorized Permission required: manage-oauth-apps The authorization token of the user. The user ID of the user. The OAuth app ID that you want to delete. OK Bad Request Unauthorized List all public settings. Learn how this can be used in configuring your workspace in this guide. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. How many items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } Filter by the _id of the settings. OK List all the OAuth services. enabled in the workspace. OK", "tokens": 260}
{"title": "Get Private SettingsAdd Custom OAuth", "content": "List all private settings. Learn how this can be used in configuring your server in this guide. The user ID. The authentication token. When set to true, it fetches both the current value and the default value (packageValue) of the settings Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. How many items to return. OK Unauthorized Add a custom OAuth integration to your workspace. The user ID. The authentication token. The 2FA code from the authentication method. If the method is password, encrypt it as SHA256. The desired method to get the 2FA code. It can be email, totp, or password. The name of the custom OAuth method that you want to add. OK Bad Request Unauthorized", "tokens": 177}
{"title": "Update Setting", "content": "Permission required: edit-privileged-setting The _id of a setting is the first argument of the RocketChat.settings.add method used in Rocket.Chat/packages/rocketchat-lib/server/startup/settings.js (among other files). For example, the following code in settings.js file: This means that the setting labeled Allow anonymous read in the section Accounts has _id equal to Accounts_AllowAnonymousRead. The second argument is the default value (false). The third argument specifies the variable's type and whether it is public, hidden, and so on. To set a color, you can send: And also to trigger a action-button, use: The user ID. The authentication token. The 2FA code from the authentication method. If the method is password, encrypt it as SHA256. The desired method to get the 2FA code. It can be email, totp, or password. The unique ID of the setting that you want to update or fetch. The value to update the setting. The color code to update the setting. The editor key, with color value. Required, if color was set. To trigger a action-button. OK Unauthorized", "tokens": 258}
{"title": "Get SettingGet OAuth Service ConfigurationGet Statistics List", "content": "Get details of a setting by ID. Permission required: view-privileged-setting The user ID. The authentication token. The unique ID of the setting that you want to update or fetch. OK Unauthorized List out all the active OAuth services configured with details. OK Get statistics about the Rocket.Chat workspace. Permission required: view-statistics The token of the authenticated user. The user ID of the authenticated user. The number of items to return. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \"g\": query={ \"name\": { \"$regex\": \"g\" } } OK Bad Request Unauthorized", "tokens": 286}
{"title": "Get Last StatisticsList Custom Sounds", "content": "Statistics about the Rocket.Chat workspace. Permission required: view-statistics The token of the authenticated user. The user ID of the authenticated user. Refresh the statistics. OK Bad Request Unauthorized List all custom sounds. The authToken of the authenticated user. The userId of the authenticated user. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \"g\": query={ \"name\": { \"$regex\": \"g\" } } This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } OK Unauthorized", "tokens": 264}
{"title": "Get Updated List of Custom EmojisList All Custom EmojisCreate an EmojiDelete a Custom EmojiUpdate a Custom Emoji", "content": "Get a list of updated and removed emojis. The authToken of the authenticated user. The userId of the authenticated user. Date since the emojis were updated. Format: ISO string. When you provide the updatedSince query parameter in the URL then the update and remove in the response will contain only those updated and removed since this date and time. Filter list by custom emoji id. Unauthorized List all custom emojis. The authToken of the authenticated user. The userId of the authenticated user. OK Unauthorized Create a custom emoji. The authToken of the authenticated user. The userId of the authenticated user. The image file to use as the new custom emoji. The name of the new custom emoji. The alias of the new custom emoji. OK Unauthorized Delete a custom emoji. The authToken of the authenticated user. The userId of the authenticated user. The id of the emoji to delete OK Unauthorized Update a custom emoji. The userId of the authenticated user. The authToken of the authenticated user. If you are updating the image, provide the image file as form data. The image file to use as custom emoji, as form data. The ID of the custom emoji. The name of the custom emoji. The alias of the custom emoji. OK Unauthorized", "tokens": 317}
{"title": "Get Integration History", "content": "Any of the following permissions is required: The endpoint returns the integration history based on the user permissions. The authorization token of the user. The user ID of the user. The integration ID. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \"g\": query={ \"name\": { \"$regex\": \"g\" } } This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } Bad Request Unauthorized", "tokens": 238}
{"title": "Create Integration", "content": "Permissions required to create incoming integrations: Permissions required to create outgoing integrations: The authorization token of the user. The user ID of the user. The type of integration to create. The possible values are: The username to post this the messages as. The channel, group, or @username. The value can also be all_public_channels, all_private_groups, or all_direct_messages. Comma separated for more than one. Whether the script should be enabled. The script that is triggered when this integration is triggered. The name of the integration. Whether this integration should be enabled or not. The alias which should be applied to messages when this integration is processed. The logo to apply to the messages that this integration sends. For example, http://res.guggy.com/logo_128.png The emoji which should be displayed as the avatar for messages from this integration. Required for outgoing integrations. The type of event can be any of the following: Required for outgoing integrations. The urls to call whenever this integration is triggered. This is an outgoing integration parameter. Specific words, separated by commas, that should trigger this integration. This is an outgoing integration parameter. If your integration requires a special token from the server (API key), use this parameter. Bad Request Unauthorized", "tokens": 278}
{"title": "Get Integration", "content": "Get the information of a specific integration. The authorization token of the user. The user ID of the user. The integration ID. The user ID who created the integration. Bad Request Unauthorized", "tokens": 39}
{"title": "Get List of Integrations", "content": "Any of the following permissions is required: The endpoint returns the integrations based on the user permissions. The authorization token of the user. The user ID of the user. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \"g\": query={ \"name\": { \"$regex\": \"g\" } } This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } Filter list by the name of the integration. Filter list by the type of the integration. It can be webhook-outgoing or webhook-incoming. Unauthorized", "tokens": 265}
{"title": "Update Integration", "content": "Update an existing integration. Permissions required: The authorization token of the user. The user ID of the user. The type of integration. The possible values are: The name of the integration. Whether this integration should be enabled or not. The username to post this the messages as. Whether the script should be enabled. The channel, group, or @username. The values can also be all_public_channels, all_private_groups, or all_direct_messages. Comma separated for more than one. The integration ID. The urls to call whenever this integration is triggered. This field is required only for outgoing integrations. The type of event can be any of these: sendMessage, fileUploaded, roomArchived, roomCreated, roomJoined, roomLeft, userCreated. Specific words, separated by commas, which should trigger this integration. The alias which should be applied to messages when this integration is processed. The logo to apply to the messages that this integration sends. The emoji which should be displayed as the avatar for messages from this integration. If your integration requires a special token from the server (API key), use this parameter. Script triggered when this integration is triggered. The channel where messages will be sent to. The target url to set. Bad Request Unauthorized", "tokens": 277}
{"title": "Remove Integration", "content": "Remove an integration from the workspace. Any of the following permissions is required: The authorization token of the user. The user ID of the user. The integration ID to remove. The type of integration. The possible values are: Bad Request Unauthorized", "tokens": 52}
{"title": "Get Users List", "content": "Gets all of the users in the system and their information, the result is only limited to what the request sender has access to view. To view direct message rooms of a user, you need the view-d-room permission . To view the complete user information (such as account creation date and last login), you need the view-full-other-user-info permission. The authenticated user token. The authenticated user ID . This parameter allows you to use MongoDB query operators to search for specific data . For example, to query users with a name that contains the letter \"g\": query={ \"name\": { \"$regex\": \"g\" } } This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response . For example, to only retrieve the usernames of users: fields={ \"username\": 1 } Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items . List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending", "tokens": 258}
{"title": "Get Users List", "content": ". For example, {\"value\": -1, \"_id\": 1} How many items to return. OK Unauthorized Note: The success response does not return the custom fields for users . To view the custom field information, you must add the query and fields parameters. For example, you want to view the users having the custom field clearance with the value High . To do this, update the request URL as follows: curl -H \"X-Auth-Token: 9HqLlyZOugoStsXCUfD_0YdwnNnunAJF8V47U3QHXSq\" \\ -H \"X-User-Id: aobEdbYhXfu5hkeqG\" \\ http://localhost:3000/api/v1/users .list?query={\"customFields .clearance\" : \"High\"}&fields={\"customFields\" : 1} The response looks something like this: { \"users\": [ { \"_id\": \"ebKHhqGzw3Mu4KeBw\", \"username\": \"ciel\", \"emails\": [ { \"address\": \"example@test .com\", \"verified\": false } ], \"type\": \"user\", \"roles\": [ \"user\" ], \"status\": \"offline\", \"active\": true, \"name\": \"Ciel\", \"customFields\": { \"clearance\": \"High\", \"team\": \"Queen\" }, \"nameInsensitive\": \"ciel\" } ], \"count\": 1, \"offset\": 0, \"total\": 1, \"success\": true } To save and view the custom fields, you must first define the Custom Fields in the admin panel of your workspace (Administration > Workspace >\u00a0Settings > Accounts > Registration > Custom Fields) . See the Create User and Update User endpoints to add custom fields for new and existing users, respectively.", "tokens": 437}
{"title": "Create User", "content": "Create a new user in your workspace. This endpoint is typically used by admins to create user accounts in the workspace. Permission required: create-user The authenticated user ID. The authenticated user token. The display name of the user. The email address for the user. The password for the user. The username for the user. Set the users' active status. If the user is deactivated, they can not login. By default, the user is active. The nickname for the user. The bio for the user. Select whether users should automatically join default channels once they are created. By default, it is set to true. The status text of the user. The roles to be assigned to this user. If it is not specified, the user role is assigned by default. Note: Should the user be required to change their password when they login? It is set to false by default Should the user be assigned a random password once they are created? It is set to false by defualt. Should the user get a welcome email? It is set to true by default. Should the user's email address be verified when created? It is set to false by default. A valid JSON object of key-value pairs consisting of additional fields to be added during user registration. By default, the value is undefined. To save custom fields, you must first define them in the workspace admin settings. For information on how to view the custom fields, see the Get Users List endpoint. OK Bad Request Unauthorized", "tokens": 319}
{"title": "Register User", "content": "The username for the user. The email for the user. The password for the user. The name of the user. The value can be an empty string if Require Name For Signup is disabled in account registration. String appended to secret registration URL. OK", "tokens": 56}
{"title": "Update User Details", "content": "The authenticated user ID. The authenticated user token. The 2fa code. See Introduction to Two-Factor Authentication. The desired method to get the 2FA code. It can be email, totp, or password. The user ID to update. This value must not be empty. The object that includes the user information to update with the following parameters. Note: If you provide an empty object, the user details are returned. The name of the user. The email ID of the user. The password for the user. The username for the user. Whether the user is active, which determines if they can login or not. The roles the user has been assigned. Whether the user should be required to change their password when they login. Whether the user should get a welcome email. Whether the user's email address should be verified. Any custom fields the user should have on their account. To save custom fields, you must first define the custom fields in the admin panel (Administration > Settings > Accounts > Registration > Custom Fields). For details on how to configure this field, see Custom Fields. For information on how to view the custom fields, see the Get Users List endpoint. OK Bad Request Unauthorized", "tokens": 254}
{"title": "Update Own Basic InformationGet User's InfoList Users by Status", "content": "The authenticated user ID. The authenticated user token. The 2fa code. See Introduction to Two-Factor Authentication. The desired method to get the 2FA code. It can be email, totp, or password. An object of user data to be updated with the following parameters. Email ID of the user. The new password of the user. The password for the user encrypted in SHA256. The nickname of the user. The bio of the user. The username of the user. Name of the user. The status type of the user. It can be online, busy, away, or offline. The status text of the user. Any custom fields the user should have on their account. You must define the custom fields in the workspace settings. OK Unauthorized The authenticated user token. The authenticated user ID. The userId of the user. Alternatively, you can use the username parameter and value. This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } OK Bad Request Unauthorized Returns a list of filtered users based on activation status, first-time log-in, and type of users to be returned. Permissions required: The authenticated user token. The authenticated user ID. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} How many items to return. Filter users based on their activation status. It can either be active or deactivated Filter the users who have logged into their accounts for the first time. Filter the type of users to be returned. For example, 'bot', 'user', 'app', etc. Filter the users returned based on a list of roles. Filter the list of users returned based on a search term OK", "tokens": 460}
{"title": "Set User AvatarGet User AvatarReset AvatarSet User Status", "content": "Permission required: edit-other-user-avatar, if the AllowUserAvatarChange setting under Accounts is enabled. The authenticated user ID. The authenticated user token. You have 2 options to set the user avatar: Enter the image URL you want to set as the user avatar. The ID or username of the user. If not provided, the avatar of the user who is sending the request is updated. Alternatively, you can enter the username parameter. OK Bad Request Unauthorized The user ID. Alternatively, you can enter the username parameter. OK Bad Request Permissions required, if the setting AllowUserAvatarChange is enabled: The authenticated user ID. The authenticated user token. The user ID. Alternatively, you can enter the username parameter. OK Bad Request Unauthorized You can set the status for yourself or another user. To change another user's status, the AllowUserStatusMessageChange setting must be enabled, and you must have the edit-other-user-info permission. According to your workspace settings (under Accounts), you will only be able to set the invisible or offline status if the Allow Invisible status option setting is enabled. The authenticated user ID. The authenticated user token. The user's status message. The user's status like online, away, busy, or offline. The user ID for which you want to set the status. You don't need to add this if you are setting the status for yourself. The user name for which you want to set the status. You don't need to add this if you are setting the status for yourself. OK Unauthorized", "tokens": 349}
{"title": "Get StatusSet User's Status ActiveDeactivate Idle UsersGet Specific User's Presence", "content": "Gets a user's status in your workspace. The userId of the user. Alternatively, you can use the username property and value. If the value is not provided, the authenticated user is used. OK Unauthorized Any one of the following permissions are required: The authenticated user ID. The authenticated user token. If activeStatus=false & confirmRelinquish=true and the user is the last remaining owner of a room, the oldest member of that room will be chosen as the new owner. The value of the active status. The user ID whose status value is to be changed. Allows the user to be deactivated even if it is the last owner of a room. If activeStatus=false & confirmRelinquish=true and the user is the last remaining owner of a room, the oldest member of that room will be chosen as the new owner. Bad Request Unauthorized Permission required: edit-other-user-active-status The authenticated user ID. The authenticated user token. The number of days that the user is idle. The user role. Bad Request Unauthorized Forbidden The authenticated user ID. The authenticated user token. The user ID. Alternatively, you can enter the username parameter. If not provided, the user who sending the request is retrieved. Unauthorized", "tokens": 278}
{"title": "Get Users PresenceDelete UserDelete Own Account", "content": "If the Presence_broadcast_disabled setting is true, the endpoint returns an empty array. You can find this setting under Administration > Settings > Troubleshoot. The authenticated user ID. The authenticated user token. The last date when the status was changed. Format: ISO 8601 datetime. Timezone, milliseconds and seconds are optional. If you don't pass from parameter, you'll get a list of all users' presence and the result will have a full field with value true . The user IDs whose status you want. Unauthorized Deletes an existing user from your workspace. Permission required: delete-user The authenticated user token. The authenticated user ID. The userId of the user. Alternatively, you can use the username property and value. Deletes user even if it is the last owner of a room. By default, it is set to false. OK Bad Request Unauthorized Forbidden Deletes your own user account. Requires the Allow Users to Delete Own Account setting enabled. Access this setting from Administration > Workspace > Settings > Accounts. The authenticated user token. The authenticated user ID. The password of user (encrypted in SHA256). Deletes own account even if user is the last owner of a room. OK Bad Request Unauthorized", "tokens": 279}
{"title": "Create Users TokenGet User's PreferencesSet User Preferences", "content": "This endpoint has been deprecated and is scheduled for removal in the 8.0.0 release. As a workspace admin, you can create temporary authentication tokens for users. This is the same type of session authentication token a user gets via login and expires the same way. For example, if you use Snaps to deploy, set the environment variable as shown below: The authenticated user token. The authenticated user ID. The user ID. Alternatively, you can use the username parameter and enter the user name value. (For example, test.user) Bad Request Unauthorized Gets all the preferences of the authenticated user in the workspace. The authenticated user token. The authenticated user ID. OK Unauthorized If you want to edit another user's preferences, you need the permission edit-other-user-info. The authenticated user ID. The authenticated user token. The user ID whose preferences you want to change . If an ID is not provided, the preferences will be set for the user who is sending the request. The object with the following preference details. The preferred language for the user. New room notification sound. New message notification sound", "tokens": 247}
{"title": "Set User Preferences", "content": ". A boolean value that indicates whether the user has enabled the option to mute focused conversations. The valid display formats for the clock. You can enter the values 0, 1, or 2 . A boolean value that indicates whether the user has enabled the option to use emojis. A boolean value that indicates whether the user has enabled the option to convert ASCII emojis. A boolean value that indicates whether the user has enabled the option to save mobile bandwidth . A boolean value that indicates whether the user has enabled the option to collapse media by default. A boolean value indicates whether the user has enabled the option to load images automatically. The preferred mode for email notifications . The options are: A boolean value indicates whether the user has enabled the option. The sound volume for notifications. The type of desktop notifications. The type of push notifications . A boolean value that indicates whether the user has enabled the option to update the status as away after a certain amount of idle time. The message highlights section. You will be notified when someone mentions a word or phrase that you add here . Highlight words are not case-sensitive. The preferred view mode for the messages. The available options are: A boolean value that indicates whether the user has enabled the option to hide usernames . A boolean value that indicates whether the user has enabled the option to hide roles. A boolean value that indicates whether the user has enabled the option to display user avatars. A boolean value that indicates whether the user has enabled the option . Set how you want the Enter key to behave when sending messages. The time limit that is to be considered as idle time. A boolean value that indicates whether the user has enabled the option to show favorites on the sidebar . A boolean value that indicates whether the user has enabled the option to show unread messages in the sidebar. To sort the messages in the sidebar alphabetically or by activity. The values can be: The view mode of the sidebar . The values can be: A boolean value that indicates whether the user has enabled the option to display avatars in the sidebar. A boolean value that indicates whether the user has enabled the option to show the grouped values in the sidebar . This field stores all the \"warnings\" a user opted not to be displayed again. An example where this works is when hiding a room. \"dontAskAgainList\":[{\"action\":\"hideRoom\",\"label\":\"Hide\"}]\" OK Bad Request Unauthorized", "tokens": 531}
{"title": "Forgot PasswordGet Username SuggestionGenerate Personal Access Token", "content": "Send an email to reset your password. Ensure that you have completed the configuration of the email; otherwise, your users will not receive the mail normally. Access this from Administration > Workspace > Settings > Email. The email to send password reset link. Bad Request Get a username suggestion for the authenticated user. The authenticated user token. The authenticated user ID. OK Unauthorized Permission required: create-personal-access-tokens. This endpoint requires two-factor authentication. Note that the generated access tokens are irrecoverable, so storing them safely is essential. If a token is lost or forgotten, it can be regenerated or deleted. When making calls to the API that mandate authentication, include the generated token in the X-Auth-Token header and your user ID in the X-User-Id header to authenticate the requests. Visit the Personal Access Token user guide for more details. The authenticated user token. The authenticated user ID. The 2fa code. See Introduction to Two-Factor Authentication. The desired method to get the 2FA code. It can be email, totp, or password. The name of the token. If 2FA requirement should be ignored when using this token. OK Bad Request Unauthorized", "tokens": 262}
{"title": "Regenerate Personal Access TokenGet Personal Access TokensRemove Personal Access TokenRequest Data DownloadLogout Other ClientsAutocomplete User", "content": "Permission required: create-personal-access-tokens. This endpoint requires 2FA. The authenticated user token. The authenticated user ID. The 2fa code. See Introduction to Two-Factor Authentication. The desired method to get the 2FA code. It can be email, totp, or password. The name of the token. OK Bad Request Unauthorized Permission required: create-personal-access-tokens The authenticated user ID. The authenticated user token. OK Bad Request Unauthorized This endpoint requires 2FA. The authenticated user token. The authenticated user ID. The 2fa code. See Introduction to Two-Factor Authentication. The desired method to get the 2FA code. It can be email, totp, or password. The name of the token. OK Bad Request Unauthorized The authenticated user token. The authenticated user ID. Whether you want a full export or not. By default, the value is false. Unauthorized The authenticated user token. The authenticated user ID. Unauthorized List the users whose names match a given pattern. The authenticated user token. The authenticated user ID. Filter the response with the parameters. Bad Request Unauthorized", "tokens": 252}
{"title": "Remove Other TokensReset Users E2E KeyReset Users TOTP", "content": "The authenticated user token. The authenticated user ID. OK Unauthorized Reset the E2E key for a user in the workspace. The authenticated user token. The authenticated user ID. The 2fa code. See Introduction to Two-Factor Authentication. The desired method to get the 2FA code. It can be email, totp, or password. The userId of the user whose e2e key you want to reset. You can also use the username. If you don't enter a value, the sender's E2E value is reset. OK Bad Request Unauthorized Reset 2FA via TOTP for a user in the workspace. Make sure that the Enable Two Factor Authentication setting is enabled under Administration > Settings > Accounts > Two Factor Authentication. The authenticated user token. The authenticated user ID. The 2fa code. See Introduction to Two-Factor Authentication. The desired method to get the 2FA code. It can be email, totp, or password. The userId of the user whose TOTP you want to reset. You can also use the username. If you do not enter a value, the sender's TOTP is reset. OK Bad Request Unauthorized", "tokens": 255}
{"title": "List User's TeamsReport UserGet AvatarsCheck Username AvailabilitySend Welcome Email to User", "content": "The teams returned by the endpoint depends on your permissions. To view all teams, you need the view-all-teams permission. The authenticated user token. The authenticated user ID. The userId of the user. OK Bad Request Unauthorized The authenticated user token. The authenticated user ID. The ID of the user to be reported. The reason for reporting the user. OK Bad Request Unauthorized Note: Name of the user or channel. Channels are always preceded by an @ symbol. Rooms that are DMs are always represented by the other participant's user avatar. Format of the image requested. The values can be one of: jpg, jpeg, png. Width and height of the image. Default: 200 User ID for authenticating is only required if Accounts_AvatarBlockUnauthenticatedAccess is enabled. User auth token for authenticating is only required if Accounts_AvatarBlockUnauthenticatedAccess is enabled. OK The authenticated user token. The authenticated user ID. OK Bad Request Unauthorized Ensure that you have configured the email settings in your workspace to send emails. Permission required: send-mail The authenticated user token. The authenticated user ID. The user's email address to which you want to send the welcome email. OK Bad Request Unauthorized", "tokens": 279}
{"title": "Introduction to Two-Factor Authentication", "content": "Rocket.Chat offers various methods for two-factor authentication in a workspace. Refer to the Two-Factor Authentication guide for more details. To enable email two-factor authentication (2FA), ensure that SMTP is configured in your workspace. If you don't have the necessary permissions, contact your workspace administrator. When making requests to endpoints that require two-factor authentication, add the following headers to the request: x-2fa-code: (string) The 2FA code. x-2fa-method: (string) The desired method to check for the 2FA code, usually returned in the 2FA error (it can be email, totp, or password). If you attempt to send a request to certain endpoints without the appropriate 2FA headers, you receive an error of type totp-required. The error message includes a details object, that specifies the required 2FA method. It's useful for informing the user how to obtain their 2FA code. The parameters of the details object are as follows: method: The required 2FA method for the user selected by the workspace. codeGenerated: Used to inform if the code was generated or if there are tokens available already. It is specific to 2FA by Email. codeCount: (optional) The number of available codes already sent via email. It is specific to 2FA by email. codeExpires: (optional) A list of expiration dates of the tokens. It is specific to 2FA by email. availableMethods: The list of available 2FA methods for the user's account. The following example shows a 2FA error: If the 2FA code is wrong, a totp-invalid response is returned: It's important to note the required TOTP method returned in the error response when making requests that require 2FA. If the method is password, add the hashed password of the user as the X-2fa-Code header parameter. If it's email, add the 2FA code sent via email as the X-2fa-Code header parameter. If it's totp, add the code from your authenticator app as the X-2fa-Code header parameter.", "tokens": 465}
{"title": "Enable 2FA via EmailSend 2FA Email CodeDisable 2FA via EmailRegister or Update Omnichannel Contact", "content": "Enable email two-factor authentication for your account. This endpoint only works if the user has at least one verified email. The authToken of the authenticated user. The userId of the authenticated user. OK Unauthorized The authToken of the authenticated user. The userId of the authenticated user. Enter the email or username. OK Bad Request Unauthorized Disable two-factor authentication via email. The 2FA code is required. The authToken of the authenticated user. The userId of the authenticated user. The 2FA code. The 2FA method. It can be email, totp, or password. OK TOTP Required The 2FA code is passed as the X-2fa-Code query parameter. It's important to note the required TOTP method returned from the response. Note: This endpoint will be replaced. Refer to the new API documentations for registering and updating contact for updated usage and features. Register a guest user as a new omnichannel contact. Permission required: view-l-room The authToken of the authenticated user. The userId of the authenticated user. The contact token. Enter a random unique string as the value. Use this same token to update the contact. The contact name. The contact email. The contact phone number. The contact manager's user name. OK\nTo update a contact, use the contact token created in the response. Bad Request Unauthorized Forbidden", "tokens": 311}
{"title": "Search ContactsGet channels grouped by contact nameGet Contact History", "content": "Note: This endpoint will be replaced. Refer to the new API documentation for updated usage and features. Find contacts by name, email, phone number, or any custom field values stored in the database. Permission required: view-l-room. The authToken of the authenticated user. The userId of the authenticated user. The contact's email address. The contact's phone number. The defined custom fields. OK Forbidden Unauthorized Get channels grouped by contact name. Permission required: view-livechat-contact. The authToken of the authenticated user. The userId of the authenticated user. The contact's ID. OK Bad Request Unauthorized Get contact's history. Permission required: view-livechat-contact-history. The authToken of the authenticated user. The userId of the authenticated user. The contact's ID. The source of the contact's interaction with your organization. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. OK Bad Request Unauthorized Forbidden", "tokens": 277}
{"title": "Update Omnichannel ContactRegister Omnichannel ContactsGet Omnichannel Contact", "content": "Update omnichannel contact. Permission required: update-livechat-contact. The authToken of the authenticated user. The userId of the authenticated user. The contact's ID. The contact's name. An array of the contact's phone number(s). An array of the contact's email address(es). The contact manager's ID. Object defining the custom fields to be updated. Boolean to determine whether conflicts impacting contacts should be automatically resolved. OK Bad Request Unauthorized Forbidden Register a new omnichannel contact. Permission required: create-livechat-contact The authToken of the authenticated user. The userId of the authenticated user. The contact's name. An array of the contact's phone number(s). An array of the contact's email address(es). The custom fields. The contact manager's ID. OK Bad Request Unauthorized Forbidden Retrieve a single omnichannel contact by providing either a contactId or a visitor object. Note: You must provide only one of these parameters in the request.\nRequired permission: view-livechat-contact. The authToken of the authenticated user. The userId of the authenticated user. The contact's unique ID. Provide this parameter if fetching the contact directly by its ID. Visitor association for the contact. Provide this object as JSON with the required fields: The unique ID of the visitor. The source of the visitor. The type of the source (e.g., \"widget\"). The source's unique ID. OK Bad Request Unauthorized Forbidden", "tokens": 347}
{"title": "Search Omnichannel Contacts", "content": "Retrieve a list of omnichannel contacts based on search criteria like name, email or phone number. Permission required: view-livechat-contact. Note: Ensure to URL-encode special characters such as @, +, /, and * in query parameters to prevent issues with the endpoint. For example, encode email addresses as mail%40example.com instead of mail@example.com. The authToken of the authenticated user. The userId of the authenticated user. Text to search for in contact details. Filter by contact's unknown status. Number of results to return per search. Number of results to skip for pagination. JSON string defining the sort order of results. OK Bad Request Unauthorized Forbidden", "tokens": 159}
{"title": "Jenkins", "content": "Jenkins is an open-source automation server designed to streamline Continuous Integration (CI) and Continuous Delivery (CD) processes through plugins and automation. It facilitates efficient software development by automating builds, tests, and deployments. Integrating Jenkins with Rocket.Chat ensures a more efficient, collaborative, and productive development environment. Here are some key benefits: Real-time notifications: Receive instant updates in Rocket.Chat on build statuses\u2014whether a build starts, succeeds, or fails\u2014improving responsiveness. Quick build status insights: Check the current build status without navigating Jenkins, saving time. Error tracking and resolution: Immediate alerts for failed builds allow the team to address issues promptly. Access control: Restrict Jenkins notification access to specific team members for better security. There are two ways to integrate Jenkins with Rocket.Chat: Jenkins app via Rocket.Chat marketplace Jenkins app via Jenkins plugins Both options enable effective collaboration and automation tailored to your team's specific needs.", "tokens": 199}
{"title": "Jenkins App via Rocket.Chat Marketplace", "content": "Follow these steps to receive Jenkins notifications in Rocket.Chat using the Jenkins app from the Rocket.Chat marketplace: Go to Administration > Apps > Marketplace, and search for Jenkins Install the app Click the Settings tab and configure the following: Enter a name in the Jenkins Integration Username Alias field Add a user avatar in the Jenkins Integration Avatar field Save the changes After installing the Jenkins app, you can connect your Rocket.Chat workspace to Jenkins using slash commands: Ensure you have a Jenkins job set up Navigate to the channel where you want to receive Jenkins notifications Run the /jenkins slash command to view available actions with the Jenkins app Run the following command in the channel: Copy the job URL you created earlier in Jenkins and substitute it for <project URL>. Once executed, the Jenkins app will provide additional steps, including a webhook URL for completing the integration. Log in to your Jenkins dashboard Navigate to Dashboard > Manage Jenkins > Plugins and install the Outbound Webhook for Build Events plugin In the already-created job: Go to the Post-Build Actions section Select Outbound Webhook Notification and add the webhook URL provided by the Jenkins app in the Rocket.Chat channel Choose the types of notifications you want to receive in the Rocket.Chat channel. Save the changes. You'll receive build status notifications when the configured Jenkins job runs in the designated Rocket.Chat channel. Notifications will include updates on build success or failure, helping your team stay informed and responsive.", "tokens": 313}
{"title": "Jenkins App via Jenkins Plugins", "content": "Follow these steps to integrate Jenkins with Rocket.Chat using the Rocket.Chat Notifier plugin: Before setting up notifications, ensure you have already created a Jenkins job. Log in to your Jenkins dashboard Navigate to Dashboard > Manage Jenkins > Plugins In the Available plugins tab, search for Rocket.Chat Notifier and install it Navigate to Dashboard > Manage Jenkins > System Scroll down to find the Global Rocket.Chat Notifier Settings and fill in the required fields: Rocket.Chat Server URL: Enter your Rocket.Chat server URL Login Username and Password: Provide the login credentials of the user who will post the notifications Channel: Specify the channel(s) in Rocket.Chat where notifications should be sent Save the configuration Open the Jenkins job you created earlier Navigate to the Post-Build Actions section Click Add Post-Build Action and select Rocket.Chat Notifications Choose the types of notifications you want to receive, such as build success, failure, or other events Once the integration is complete, changes to the connected GitHub repository of the Jenkins job will trigger notifications which will be sent to the specified Rocket.Chat channel(s) based on the events you selected.", "tokens": 245}
{"title": "Jira Cloud App", "content": "The Rocket.Chat Jira Cloud app enhances collaboration for project teams by integrating Jira Cloud with Rocket.Chat. This app lets users receive real-time notifications about issue updates, track project progress, and stay informed on task statuses\u2014all directly within the Rocket.Chat workspace . This document covers how to integrate the Rocket.Chat Jira Cloud app with your Jira Cloud account to improve team collaboration. Admin access on Jira Cloud is required to set up this integration . To install the Jira Cloud app, Navigate to Administration > Apps > Marketplace Search for the Jira Cloud app Click Install and accept the permissions needed to install it To configure the Jira Cloud app, follow these steps: Go to the Rocket .Chat channel where you want to use the Jira Cloud app Run the /jira command in the channel to see the list of available Jira commands Next, run the jira install. This will display the steps for connecting your Rocket .Chat instance to Jira, along with a URL you\u2019ll need for the connection . Copy this URL Now, follow these steps to install the Jira app in your Jira Cloud instance: Log in to Jira as an administrator Go to Apps > Manage apps Under \"User-installed apps,\" click on Settings Check the Enable development mode checkbox and click Save Click Upload app In the Enter the app descriptor URL field, paste the URL you copied from Rocket", "tokens": 309}
{"title": "Jira Cloud AppWebdav Integration", "content": ".Chat Click Upload After a successful upload, uncheck the Enable development mode checkbox to complete the installation Once the Jira Cloud app is installed, follow these steps to connect it to your Rocket.Chat workspace: Go back to your Rocket .Chat channel and run /jira connect. This will list all the available projects in your Jira Cloud. Connect to a specific Jira project by running: Upon successful connection, you\u2019ll receive a confirmation message . After connecting, any updates made to the Jira project will trigger notifications in your Rocket .Chat channel To view details for a specific issue, run: To get help with the Jira Cloud app, run: To disconnect the app, run: By following these steps, you\u2019ve successfully integrated the Jira Cloud app with Rocket .Chat, enabling seamless communication and real-time notifications for your Jira projects. If you encounter any issues, you can use the troubleshooting commands to manage the app or reconnect as needed. Happy collaborating! A framework for users to create, change and move documents on a server. You can use this setting to link WebDAV servers such as Nextcloud. To access this setting, go to Administration > Workspace > Settings > Webdav Integration. Webdav Integration Enabled: When set to true, WebDAV is available on the server, Navigate to the \u2795 button on the right side of your message composer inside any chat or room Click \u2795 Add Server To integrate a WebDAV server, follow this guide on Nextcloud and WebDAV integrations", "tokens": 325}
{"title": "WebRTC", "content": "WebRTC (Web Real-Time Communication) is a technology that allows Web apps and sites to record and potentially broadcast audio and/or video material and transmit arbitrary data between browsers without the need for a middleman. To access this setting, go to Administration > Workspace > Settings > WebRTC. Enabled: Set to true to enable WebTRC for your workspace and access other available WebTRC settings. Enable for Public Channels: WebRTC will be enabled for all public channels if set to true. Enable for Private Channels: When enabled, private channels will have WebRTC. Enable for Direct Messages: If set to true, direct messages will have WebRTC. STUN/TURN Servers: A list of STUN and TURN servers separated by a comma. Username, password, and port are allowed in the format username:password@stun:host:port or username:password@turn:host:port.", "tokens": 197}
{"title": "Update MessageDelete Chat MessageReact to MessageReport Message", "content": "Update a specific message. The authToken of the authenticated user. The userId of the authenticated user. The room ID where the message is. The message ID to update. Updated text for the message. An array to define which URL previews should be retrieved from each message. You can add custom fields for messages. For example, set priorities for messages. You must enable this option and define the validation in the workspace settings. See the Message settings for further information. OK Bad Request Unauthorized Delete a chat message. The authToken of the authenticated user. The userId of the authenticated user. The room ID The message ID Should the message be deleted as the user who sent it? It is false by default. OK Bad Request Unauthorized React or unreact to a chat message. The authToken of the authenticated user. The userId of the authenticated user. The emoji doesn't have to contain :. However, the emoji must exist. The message ID to react to. The emoji to react with. Boolean to specify if the reaction should be added or removed. OK Bad Request Unauthorized Report a specific message. The userId of the authenticated user. The authToken of the authenticated user. The message ID to report. The description of report. OK Bad Request Unauthorized", "tokens": 289}
{"title": "Follow MessageUnfollow MessageGet MessageList Threads", "content": "Follow a message to receive notifications. The authToken of the authenticated user. The userId of the authenticated user. The message ID to follow. OK Bad Request Unauthorized Unfollow a message. The authToken of the authenticated user. The userId of the authenticated user. The message ID to unfollow. OK Bad Request Unauthorized Get a single chat message. You must have permission to access the room where the message resides. The authToken of the authenticated user. The userId of the authenticated user. The message ID. OK Bad Request Unauthorized Get the thread conversations in a room. The authToken of the authenticated user. The userId of the authenticated user. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, { \"value\": -1, \"_id\": 1 } This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \"g\": query={ \"name\": { \"$regex\": \"g\" }} This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } The room ID. OK Unauthorized", "tokens": 359}
{"title": "Get Deleted MessagesGet Discussions of A RoomGet Mentioned Messages", "content": "Get deleted messages from a specific date. The authToken of the authenticated user. The userId of the authenticated user. A valid ISO date format from which you want to search the deleted messages. The room ID. OK Bad Request Unauthorized Gets the discussions in a room. The authToken of the authenticated user. The userId of the authenticated user. The room ID. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, { \"value\": -1, \"_id\": 1 } OK Bad Request Unauthorized Get the messages in which you are mentioned (users are mentioned with the @ symbol). The authToken of the authenticated user. The userId of the authenticated user. The room ID. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, { \"value\": -1, \"_id\": 1 } OK Bad Request Unauthorized", "tokens": 318}
{"title": "Get Message Read ReceiptsGet Pinned MessagesGet Snippeted Messages", "content": "Get the read receipts of messages. The authToken of the authenticated user. The userId of the authenticated user. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. The message id OK Bad Request Unauthorized Get the pinned messages of a room. The authToken of the authenticated user. The userId of the authenticated user. The room ID. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. OK Bad Request Unauthorized Retrieve snippeted messages. The authToken of the authenticated user. The userId of the authenticated user. The room ID. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, { \"value\": -1, \"_id\": 1 } OK", "tokens": 264}
{"title": "Get Snippeted Message By IdGet Starred MessagesGet Thread Messages", "content": "Retrieve snippeted message by Id. The authToken of the authenticated user. The userId of the authenticated user. The message id OK Get the starred messages of the authenticated user in a room. The userId of the authenticated user. The authToken of the authenticated user. The room ID. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, { \"value\": -1, \"_id\": 1 } OK Bad Request Unauthorized Get thread messages. The authToken of the authenticated user. The userId of the authenticated user. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, { \"value\": -1, \"_id\": 1 } This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \"g\": query={ \"name\": { \"$regex\": \"g\" }} This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } The thread message ID. OK Bad Request Unauthorized", "tokens": 395}
{"title": "Ignore UserPin Message", "content": "Ignore or unignore a user in chat. The authToken of the authenticated user. The userId of the authenticated user. The room ID. The user ID. If the user is to be ignored or not, default is true. OK Bad Request Unauthorized Pin a chat message to the channel. The authToken of the authenticated user. The userId of the authenticated user. The message ID that you want to pin. OK Bad Request Unauthorized", "tokens": 101}
{"title": "Post Message", "content": "Send messages to channels. Note: You only can send alias and avatar properties if your user has the bot role. We implement this rule to avoid users to impersonate other users. The authToken of the authenticated user. The userId of the authenticated user. This will cause the message's name to appear as the given alias, but your username will still be displayed. If provided, the avatar will be displayed as the provided image URL. If provided, the avatar will be displayed as an emoji. The room ID where the message is to be sent. You can use channel name or username. The channel name must have the # prefix. @ refers to username. The message text to send, it is optional because of attachments. Audio file to attach. See the HTML audio element for information. Displays a tiny icon to the left of the author's name. Providing this makes the author's name clickable and points to the provided link. Name of the author. Causes the image, audio, and video sections to be displayed as collapsed when set to true. See background-css for the supported colors.' Whether this field should be a short field. The title of this field. The value of this field, displayed underneath the title value. The image to display, will be big and easy to see. Only applicable if the ts field is provided, as it makes the time clickable to this link. The text to display for this attachment, it is different than the message's text. An image that displays to the left of the text, looks better when this is relatively small. Title to display for this attachment, displays under the author. Providing this makes the title clickable, pointing to this link. When this is true, a download icon appears and clicking this saves the link to file. Displays the time next to the text portion. Video file to attach. See the HTML video element for information. The message ID of the original message to reply to or to create a thread on. Defaults to true when the tmid parameter is specified. Message will also be shown in the room if the value is true. You can add custom fields for messages. For example, set priorities for messages. You must enable this option and define the validation in the workspace settings. See the Message settings for further information. OK Bad Request Unauthorized", "tokens": 489}
{"title": "Unpin a messageSearch Message", "content": "Remove a pinned message from the channel. The authToken of the authenticated user. The userId of the authenticated user. The message ID you want to to unpin. OK Bad Request Unauthorized Search for messages by room ID and text message. The authToken of the authenticated user. The userId of the authenticated user. The number of items to return. The room ID. The text to search for in messages. OK Bad Request Unauthorized", "tokens": 99}
{"title": "Send Message", "content": "The difference between chat.postMessage and chat.sendMessage is that chat.sendMessage allows for passing a value for _id and the other one doesn't. Also, chat .sendMessage only sends it to one channel whereas the other one allows for sending to more than one channel at a time. Note: You can only send alias and avatar properties if your user has the message-impersonate permission . We implemented this rule to avoid users impersonating other users. By default, only the bot role has this permission, but that can be changed in Administration -> Permissions -> message-impersonate. The authToken of the authenticated user . The userId of the authenticated user. Some important things to note about the previewUrls parameter include: URLs that include the same text as the Site URL are referred to as Internal URLs. The message type e.g . e2e The room ID where the message is to be sent. The message text to send, it is optional because of attachments. This will cause the message's name to appear as the given alias, but your username will still be displayed . Requires the impersonate-other-user permission If provided, the avatar will be displayed as the emoji. If provided, the avatar will be displayed as the provided image url. Requires the impersonate-other-user permission", "tokens": 298}
{"title": "Send Message", "content": ". The attachment is an array of objects with any of the following properties. One attachment can have many sections, including: Audio file to attach. See HTML audio element for information. Displays a tiny icon to the left of the author's name . Providing this makes the author name clickable and points to this link. Name of the author. Causes the image, audio, and video sections to be displayed as collapsed when set to true. See background-css for the supported format . Whether this field should be a short field. The title of this field. The value of this field, displayed underneath the title value. The image to display, will be big and easy to see . Only applicable if the ts parameter is provided, as it makes the time clickable to this link. The text to display for this attachment, it is different than the message's text . An image that displays to the left of the text, looks better when this is relatively small. Title to display for this attachment, displays under the author. Providing this makes the title clickable, pointing to this link . When this is true, a download icon appears and clicking this saves the link to file. Displays the time next to the text portion. Video file to attach. See the HTML video element for information. The message ID to create a thread . Used when replying in a thread. Message will be sent in channel also if value is true A message block is an array of objects with any of the following properties. Blocks can have many sections: You can add custom fields for messages . For example, set priorities for messages. You must enable this option and define the validation in the workspace settings. See the Message settings for further information. An array to define which URL previews should be retrieved from each message. OK Bad Request Unauthorized", "tokens": 371}
{"title": "Star MessageUnstar MessageSync Thread List", "content": "Star a message. The authToken of the authenticated user. The userId of the authenticated user. The message ID to star. OK Bad Request Unauthorized Unstar a message. The authToken of the authenticated user. The userId of the authenticated user. The message ID to unstar. OK Bad Request Unauthorized The authToken of the authenticated user. The userId of the authenticated user. The room ID. It is required if the roomName is not provided. The room name. It is required if the roomId is not provided. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, { \"value\": -1, \"_id\": 1 } Date as an ISO string. When you provide the updatedSince query parameter, then the update and remove parameters in the response will contain only those updated and removed since this date and time. OK Bad Request Unauthorized", "tokens": 258}
{"title": "Sync Thread Messages", "content": "The authToken of the authenticated user. The userId of the authenticated user. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, { \"value\": -1, \"_id\": 1 } Date as an ISO string. When you provide the updatedSince query parameter, the update and remove parameters in the response will contain only those updated and removed since this date and time. Thread's message ID. OK Bad Request Unauthorized", "tokens": 159}
{"title": "Sync Messages", "content": "The authToken of the authenticated user. The userId of the authenticated user. The room ID. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, { \"value\": -1, \"_id\": 1 } The date as an ISO string. You cannot use this parameter if you are using the next or previous parameter. This indicates whether the query should retrieve items from a later point in time. The value must be the number of milliseconds, as it follows Date getTime(). Note that you can use either next or previous at the same time. This indicates whether the query should retrieve items from an earlier point in time. The value must be the number of milliseconds, as it follows Date getTime(). You must specify whether you want to retrieve DELETED (for deleted messages) or UPDATED (for updated messages, which is the default use case). This parameter is required if you are using the next or previous parameter. Note: offset, sort, and count are optional parameters. By default, the endpoint returns 20 items if you don't specify a value for count. According to the remaining query parameters you use, this endpoint returns the messages in two ways: OK Bad Request Unauthorized", "tokens": 322}
{"title": "Upload File to a RoomSet Room Notifications", "content": "This endpoint has been deprecated and is scheduled for removal in the 8.0.0 release. Use the rooms.media endpoint instead. Post a message with the attached file to a dedicated room. The authToken of the authenticated user. The userId of the authenticated user. The room ID to which you want to upload the file. For some file types, when uploading via curl, you may need to set the mime type. With some file types, curl will upload the file as application/octet-stream. You can pass a custom mime type like this: -F \\\"file=@file.wav;type=audio/wav\\\" to specify the type. The file to upload A message text to be sent with the file. A description of the file. The thread message ID (if you want to upload a file to a thread). You can add custom fields for messages. For example, set priorities for messages. You must enable this option and define the validation in the workspace settings. See the Message for further information. OK Bad Request Unauthorized Set the notifications settings of a specific room. The authToken of the authenticated user. The userId of the authenticated user. The channel's id The object that contains the following parameters. The value for desktop notifications. The options are: The value to disable/enable channel's notifications. The options are: The value for email notifications. The options are: The value for audio notification sound. The value for desktop notification duration. The value for audio notifications. The options are: The value for unread alerts notifications. The options are: The value to disable/enable number of unread messages. The options are: The value for mobile push notifications. The options are: OK Unauthorized", "tokens": 391}
{"title": "Get All Room AdminsClear Room History", "content": "Retrieves all rooms and admin information. Permission required: view-room-administration The authToken of the authenticated user. The userId of the authenticated user. The room types. The possible room types are: The rooms name The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. OK Unauthorized Cleans up a room, removing messages from the provided time range. The authToken of the authenticated user. The userId of the authenticated user. The room ID. The end of time range of messages. The start of the time range of messages. Whether messages which land on the latest and oldest dates should be included. By default, the value is false. Whether pinned messages should be deleted. By default, the value is false. Whether to only delete files and keep messages intact. By default, the value is false. Specific set of users whose content to delete. By default, the value is [], that is, everyone. The amount of messages to prune. By default, the value is 0 (all). Determines if messages from discussions should be pruned. By default, the value is true. Determines if messages from threads should be pruned. By default, the value is true. OK Unauthorized", "tokens": 340}
{"title": "Get Room Information", "content": "Retrieves the information about the room. The userId of the authenticated user. The authToken of the authenticated user. The room id. It is required if the roomName is not provided. The room name. It is required if the roomId is not provided. This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } OK The response includes the following objects: Bad Request Unauthorized", "tokens": 120}
{"title": "Get Room Discussions", "content": "Get all discussions of a room. The authToken of the authenticated user. The userId of the authenticated user. The room name. It is required if the roomId is not provided. The room id. It is required if the roomName is not provided. This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \"g\": query={ \"name\": { \"$regex\": \"g\" } } The number of items to return. This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} OK Unauthorized", "tokens": 253}
{"title": "Get RoomsLeave RoomDelete RoomFavorite/Unfavourite a RoomAutocomplete Room Name for Team", "content": "Get all opened rooms (all joined public & private channels and all DMs) of the authenticated user. The authToken of the authenticated user. The userId of the authenticated user. A date as an ISO string. When you provide the updatedSince query parameter, then the update and remove in the response will contain only those updated and removed since the specified date and time. OK Unauthorized Leave a room. The authToken of the authenticated user. The userId of the authenticated user. The room ID that you want to leave. OK Unauthorized Delete a room from the workspace. The authToken of the authenticated user. The userId of the authenticated user. The room ID that you want to delete. OK Unauthorized Mark/Unmark a Room as favourite The authToken of the authenticated user. The userId of the authenticated user. The room ID. Alternatively, enter the roomName parameter and provide the room's name as the value. A boolean to mark the room as favourite or not. OK Unauthorized Autocompletes room name available for conversion to team. The authToken of the authenticated user. The userId of the authenticated user. The name of the room OK Unauthorized", "tokens": 272}
{"title": "Autocomplete Room Name for Private and Public RoomsGet Room Images", "content": "List the public and private rooms whose names match a given string, excluding discussions, DMs, and omnichannel rooms. The endpoint is valuable when performing search operations. It returns only rooms that the user belongs to. The authToken of the authenticated user. The userId of the authenticated user. The term to be completed. It only applies to room name. OK Bad Request Unauthorized Retrieves the images of a room that you are a member of. The authToken of the authenticated user. The userId of the authenticated user. The room ID. Filter images using the file ID. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. OK Bad Request Unauthorized", "tokens": 169}
{"title": "Save Room Settings", "content": "The authToken of the authenticated user. The userId of the authenticated user. The room ID. The name of the room. The description of the room. The base64 image. Whether the room is featured or not. The topic of the room. The announcement of the room. An object of the custom fields of the room. The type of the room. It could be c for public rooms or p for private rooms. Whether the room is read-only or not. Whether users can react when the room is read-only. The system messages that the room supports. Whether the room is the default room or not. The join code of the room. The streaming options of the room. Whether retention is enabled for the room or not. The maximum age (in days) of messages to be retained in the room. Whether to exclude pinned messages from retention or not. Whether to retain only files in the room or not. Whether to ignore threads when retaining messages or not. Whether to override the global retention settings for the room or not. Whether the room is encrypted or not. The favorite settings of the room. Whether the room is marked as favorite and whether it is set as the default room. List the team's channels or discussions to be displayed in the sidepanel. The options are discussions and channels. OK Bad Request Unauthorized", "tokens": 280}
{"title": "Change Room Archive State", "content": "Change archive state of a room. The authToken of the authenticated user. The userId of the authenticated user. The room Id. It can either be archive or otherwise unarchived. OK Bad Request Unauthorized", "tokens": 49}
{"title": "Export Room", "content": "Export room to a file or email. When exporting to a file, the ZIP file is stored in the /tmp directory on the Rocket.Chat server, and its details are recorded in the rocketchat_user_data_files collection in MongoDB. Permission required: mail-messages The authToken of the authenticated user. The userId of the authenticated user. The room Id. How you want the room to be exported. The type of export selected determines the remaining required parameters. It can be either email or file. Start date to begin fetching. Use dateFrom if the type is file. By default, it selects the oldest possible date. End date for fetching. By default it selects the current date. Use dateTo if the type is file. The file type to export as. It can either be html or json. Use format if the type is file. An array of users that should recieve the export. ecieve the export. It is required if type is email. An array of any additional emails that should recieve the export. It is required if type is email. An array of messageId for the messages that should be exported. It is required if type is email. The subject of the email. It is required if type is email. OK Bad Request Unauthorized Forbidden", "tokens": 277}
{"title": "Create DiscussionCheck if Room Name ExistsMute User in RoomUnmute User in Room", "content": "Creates a new discussion for the room. It requires at least one of the following permissions: start-discussion OR start-discussion-other-user, AND must be with the following setting enabled: Discussion_enabled. The authToken of the authenticated user. The userId of the authenticated user. Parent room ID of the discussion. Discussion name. Array of users to join in the discussion, if not provided, it will be an empty array. (Note: if provided, it must be an array). Parent message ID (if the discussion comes from a message). The reply of the discussion. OK Unauthorized Check if the room name exists The authToken of the authenticated user. The userId of the authenticated user. Enter the room name that you want to check. OK Bad Request Unauthorized Mute a particular user in a room. The authToken of the authenticated user. The userId of the authenticated user. The user that you want to mute. Alternatively, use the username parameter and enter the username as the value. The room ID. OK Bad Request Unauthorized Unmute a particular user in a room. The authToken of the authenticated user. The userId of the authenticated user. The user that you want to unmute. Alternatively, use the username parameter. The room ID. OK Bad Request Unauthorized", "tokens": 290}
{"title": "Admin Autocomplete Room Name for Private and Public RoomsAudit and Get Room Members", "content": "List public and private rooms whose names match a given string, excluding DMs, and omnichannel rooms. This endpoint is valuable when performing search operations. Only workspace administrators can use it. The authToken of the authenticated user. The userId of the authenticated user. The term to be completed. It applies to room name and display name. OK Bad Request Unauthorized Audit any public or private room and view the room members. You don't need to be a member of the room. Permission required: view-members-list-all-rooms The authToken of the authenticated user. The userId of the authenticated user. Enter the room ID that you want to audit. Filter the results using the text that you want to view. The number of items to return. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} OK Bad Request Unauthorized Forbidden", "tokens": 258}
{"title": "Upload Media Files to a Room", "content": "Upload media files to a room. The authToken of the authenticated user. The userId of the authenticated user. The id of the room. The file to upload The text to be added to the file message. OK", "tokens": 52}
{"title": "Get Room Members Ordered by Role", "content": "Get room members ordered by their roles. This endpoint sorts the members according to their role in the room in the order Owners > Moderators > all other members. This can be reversed using the query paramter sort={\"rolePriority\":-1}. You need not be a member of the room. If the room is a broadcast room, you need the view-broadcast-member-list permission to view the room members. The authToken of the authenticated user. The userId of the authenticated user. Enter the room ID. Instead of using the room ID, you can enter the room name. Filter the results by using the text that you want to view. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} Enter the user status for which you want the results. For example, online, away, offline. OK Bad Request Unauthorized", "tokens": 261}
{"title": "Google Drive", "content": "The Google Drive app is currently in Beta, and some features may not function as expected. The Rocket.Chat Google Drive app brings a seamless Google Drive experience into your Rocket.Chat workspace . It gives users the ability to: Open and view your Google Drive files and their details. Share files and manage sharing permissions. Create new files directly from Rocket.Chat. Before setting up the Google Drive app, here are some essential things to note . Your workspace must be on a publicly available domain. A Google Cloud project is required to obtain the OAuth2 credentials. To install the Google Drive Rocket.Chat app, Go to Administration > Apps > Marketplace. Search for the Google Drive app and select it . Click Install and Agree to accept the required permissions. On the Google Drive App Info screen, navigate to Details > APIs and copy the GET google-drive-app-callback URL. After installing, you will receive a direct message from google-drive .bot with instructions on how to get started. Click Setup to view the instructions. You can find the callback URL for your workspace from the instructions. Go to the Google Cloud console and create a new project or select an existing one . From the sidebar, Navigate to API & Services > OAuth consent screen and fill in the required fields to Create a consent screen. Navigate to Credentials, Click Create Credentials, then select OAuth client ID . Select Web application as the application type, then fill in the required details. Add the Authorized redirect URIs given by the google-drive.bot. Click Create. Copy the client secret and client ID. You need them to configure the app", "tokens": 351}
{"title": "Google Drive", "content": ". To enable Google DriveAPI on your project, From the sidebar, Navigate to Library. Search for Google Drive API, select and Enable it. On the Google Drive App Info screen, navigate to Settings . Paste the client secret and client id from the Google Cloud console. Click Save changes. Go to a room on your workspace and type the slash command /google-drive help to return a list of commands you can use with the Google Drive app . /google-drive help: shows the help list. /google-drive connect: starts the process to link your Google Account. /google-drive disconnect: remove your linked Google Account . /google-drive create: creates a new Google File and saves it on your Google Drive. /google-drive files: opens the contextual bar with your Google Drive files list. After installation, users can access the Google Drive app using the slash command . They can click the Kebab menu in the room header and select Google Drive. Your Rocket.Chat workspace must be running from at least version 5.1.0 for users to access the Google Drive app from the room header . For workspaces below this version, only admins have access. After the workspace administrator has installed and configured the Google Drive app, users can connect their Google accounts and access the files in their Drive . Users can request for the Google Drive app at Administration > Apps > Marketplace. To see if the Google Drive App is installed on your workspace, type the slash command /google-drive and watch out for any related information . To connect your Google account, Type the slash command /google-drive connect. You receive a message from the google-drive.bot. Click Authorize to authorize your account . Select the Google account you want to authorize, and click Allow for all the account permissions. After a successful connection, the google-drive.bot message notifies you of a completed authentication . With your account linked, you can now view, create and share files directly from Rocket.Chat. You may be required to re-authenticate periodically whenever the authentication token expires.", "tokens": 439}
{"title": "PollAnonymizer App", "content": "Polls are a great way to drive engagement from your team members and receive quick feedback. The Poll app allows you to create polls inside a room. To install the Poll app, Go to Administration > Apps > Marketplace. Search for the Poll app and click on it. Click on the Install button. To create a Poll, To create a poll, type /poll in the message box of the room you want the poll Then, click Enter to execute. A pop-up form is triggered for you to create the poll. The form details include the following: Insert your question: The poll question. Insert your options: The reply options for the poll. Add a choice: Add more reply options for the poll. Choice type: Select if the poll will be multiple choice or single choice. Vote visibility: Select if the poll will have \"open vote\" or \"confidential vote.\" Always Show Vote: Select when to show poll results. After creating the poll, it is available in the room for the users to vote. To finish the poll, Select the Kebab menu top of the poll. Then, click Finish poll. The Anonymizer app ensures confidentiality in your organization by enabling users to forward messages to rooms in your workspace anonymously. This tool maintains sender anonymity, fostering a secure environment for open expression, feedback, suggestions, and discussions without fear of reprisal . To install the Anonymizer app, follow these steps: Go to Administration > Apps > Marketplace. Search for the Anonymizer app. Click Install and agree to the needed permissions . To configure the Anonymizer app after installing it, follow these steps: On the Anonymizer App Info screen, go to the Settings tab", "tokens": 362}
{"title": "Anonymizer App", "content": ". Update the following mandatory fields: Field Description Example Members Room Name* The Anonymizer app is only enabled for members of this room. Messages from users who aren't members of this room are ignored. This field is case-sensitive . general Room Name* The room where the anonymous messages are posted. This field is case-sensitive. test-team Bot username* The bot username that forwards the message . Users send a DM to this bot user in your workspace, which anonymously forwards the message to the configured room. The app uses rocket.cat by default. rocket.cat Bot Alias* The display name of the bot . It's displayed as the sender with the forwarded message. Anonymous Bot Avatar (emoji)* The emoji that represents the bot's avatar . :bust_in_silhouette: If you create a custom bot, ensure that it's a member of the room where the anonymous messages are posted. Otherwise, the message won\u2019t be forwarded . Now that you've successfully set up the Anonymizer app, the next section guides you on how to use the app in your workspace . After installing and configuring the Anonymizer app in your workspace, inform the users of the configured members' room that they can send anonymous messages through the bot. Whenever they send a DM to that bot (for example, rocket .cat), the bot anonymously forwards the message to the specified room without revealing the sender's identity. If a user is not in the configured members' room, any message they send to the bot is ignored . If your custom bot isn't forwarding the anonymous messages, try disabling and enabling the Anonymizer app after updating the settings", "tokens": 370}
{"title": "ChatGPT App", "content": "Your conversational search engine within Rocket.Chat The ChatGPT app is currently in Beta, and some features may not function as expected. ChatGPT app will only be available to workspaces running version 6.3.0 and higher . The Rocket.Chat ChatGPT integration is an AI chatbot that enhances text-based communication within organizations. It supports content creation, coding assistance, and summarizes complex reports. The app also offers real-time multilingual translation, adding to its business utility . Key capabilities include: Threaded Interactions: Manages and responds to inquiries within conversation threads. Proofreading: Corrects spelling, punctuation, and grammar in user messages. Summarization: Creates brief overviews of extensive documents . Tone Customization: Adjusts communication tone to suit formal or informal contexts. Conversation Indexing: Keeps track of threaded discussions for contextually relevant responses . The current ChatGPT app version does not support summarizing large threads or conversations, but future updates will include this feature. However, ChatGPT can currently summarize extensive content such as articles, news, and novels", "tokens": 230}
{"title": "ChatGPT App", "content": ". To install the ChatGPT app, Go to Administration > Apps > Marketplace. Search for the ChatGPT app and click on it. Click Install and accept the needed permissions to install. To update the app, Go to Administration > Marketplace . Search for the ChatGPT app and click on the item. You will find the Update button right below the app name and description. Click on the Update button and click Save Changes . The ChatGPT app requires API keys to authenticate your OpenAI account on Rocket.Chat and make requests. Your OpenAI account must have active billing with credits. For a more detailed guide on billing, refer to OpenAI's billing questions . To get your OpenAI API key, Log into your OpenAI account and click on your profile icon at the top-right corner of the screen. From the profile dropdown, select View API Keys . If you don't have any API keys, click + Create new secret key button to create a new API key. Copy the API key to your clipboard. You'll need it for configuring the app in your workspace . To configure the ChatGPT app after installing it, On the ChatGPT App Info screen, navigate to Settings. Update the required fields: OpenAI API Key: Paste the Open AI API key you copied earlier . Model: Select the OpenAI model to be used. GPT-4 offers advanced reasoning capabilities, creative collaboration, and improved safety and alignment, but comes with higher usage costs. GPT-3 .5 Turbo is the best choice for most use cases. We now support the GPT-4 model, giving you flexibility to choose between two AI models based on your business needs. Click Save Changes . The API key used when configuring the app is applied to the entire workspace. Users in your workspace don't need to get their own API keys . Now that you've successfully installed and configured your ChatGPT app, proceed to explore Using the ChatGPT App.", "tokens": 426}
{"title": "Using the ChatGPT App", "content": "Upon successfully installing and configuring the ChatGPT app, users can seamlessly engage with ChatGPT in their workspace through real-time conversations, substantially boosting productivity and efficiency . You can access the ChatGPT app in your workspace via the following methods: From the message box in a room, click the + icon. Under Apps, select ChatGPT . After you send the prompt and message, the app creates a direct message with the chatgpt.bot. Here the bot responds to your prompts. You can send messages with your prompts directly in the direct message . You can also create multi-user DMs with the chatgpt.bot and other users in your workspace. On the Rocket.Chat menu bar, click the Create New icon, then select Direct messages . Select the ChatGPT bot and the other users that you want to create a DM with. Click Create. A new DM is created with the ChatGPT bot and the users you selected. In the DM, send @chatgpt .bot <prompt>. The bot responds to your prompt in a thread. You can continue the conversation with the bot in the thread. All users and administrators on your workspace can use the ChatGPT app without restrictions . To use the ChatGPT app using the message box, you'll need to provide both a prompt and a message. The prompt serves as instructions for the message you're sending, and each query response is organized into a thread . This allows you to manage multiple simultaneous conversations with the ChatGPT app. Selecting the right prompts is essential to achieve desirable results with the ChatGPT app. Consider using more detailed instructions when basic commands are insufficient . Here are some prompt suggestions for getting started with ChatGPT: Example: I want to learn about (insert specific topic). Explain (insert specific topic) to me like I'm 11 years old . Example: (Insert article/book/news) Summarize this entire text into five sentences. Example: Help me stay updated on the latest developments and trends in (topic) . What are some trustworthy resources I can follow to stay informed? Example: Proofread the below for spelling and grammar without changing the wording at all (Insert text) . Example: Adjust the tone of the paragraph below to make it more professional (Insert paragraph) . Example: Can you help me translate this paragraph (insert paragraph) from (source language) to (desired language)? You can do a lot more with the Rocket.Chat ChatGPT app . These prompt examples are just to stimulate your creativity and help you get started with the app in your workspace.", "tokens": 561}
{"title": "Content Moderation Apps", "content": "Content moderation is vital for maintaining a safe and inclusive digital workspace. It serves to uphold user safety by filtering harmful content like spam and hate speech, preserving brand reputation as a secure platform, and complying with legal regulations. Manual moderation of messages in all the rooms can be impractical, especially if you have a large number of users and conversations. Rocket.Chat offers two content moderation automation apps for premium workspaces: The Mod Assist app is powered by OpenAI's ChatGPT for effective content moderation. The Mod Perspective app employs Google Jigsaw's Perspective API to streamline content moderation for human moderators. Streamline the moderation process: The apps detect harmful content based on pre-defined rules, flag the messages, and report them, which can be reviewed further by moderators. The reports contain contextual details such as sender information, rooms, and timestamps. AI-powered moderation engine: The moderation apps use machine learning models that analyze text content within the chat messages to identify violations. Customizable moderation rules: The apps provide various settings to select the filters and define thresholds that will be considered violations. User notifications: When a message is flagged as a violation of the guidelines, the user responsible for the message receives a notification, providing transparency and an opportunity to appeal, if required. Let's look at the installation steps and the features of the content moderation apps in detail. You can then opt for the app that best suits your requirements to have a safe and enjoyable Rocket.Chat environment for your users.", "tokens": 328}
{"title": "Mod Assist App", "content": "The Mod Assist app is a content moderation app that automates the message reporting process using OpenAI API. This offers an efficient solution when manual reporting becomes unfeasible . It detects harmful content based on predefined rules, flags and reports these messages for moderator review, and enriches reports with contextual details like sender information, room location, and timestamps. This helps moderators make informed decisions . Learn how to install and use the app to successfully leverage its features for a safe workspace. The app will only be available to workspaces running version 6.3.0 and higher . To install the Mod Assist app, Go to Administration > Apps > Marketplace. Search for the Mod Assist app and click it. Click Install and accept the permissions needed to install it . The Mod Assist app requires API keys to authenticate your OpenAI account on Rocket.Chat and make requests. Your OpenAI account must have active billing with credits. For a more detailed guide on billing, please refer to OpenAI's billing questions . To get your OpenAI API key, Log in to your OpenAI account and click on the dashboard via the menu in the navigation bar In the dashboard, select API Keys from the menu on the left If you don\u2019t have any API keys, click the \u201c+ Create new secret key\u201d button to generate one Copy the API key to your clipboard . You'll need it to configure the app in your workspace To configure the Mod Assist app after installing it, On the Mod Assist App Info screen, navigate to Settings . Update the required fields: AI Moderated Rooms: Select the rooms where the moderation app should automatically screen for inappropriate content. Exclude Roles: Select and whitelist trusted roles whose messages can bypass moderation. It does not support custom roles . Moderate accounts created in the past (number in days): This setting enables the app to moderate messages from accounts created within a specific number of days . For example, if you set a 30-day period, the app will moderate the message if the sender's account was created within the last 30 days. Messages from accounts created prior to this timeframe will bypass moderation . OpenAI API Key: Paste the Open AI API key you copied earlier. Moderation Categories: Select the types of inappropriate content you want the app to moderate", "tokens": 490}
{"title": "Mod Assist App", "content": ". Natural language processing techniques are used to detect all types of inappropriate content such as profanity, toxicity, etc. Toxicity: Any message that is harsh, disrespectful, negative, malicious, harmful, or hateful is toxic in nature . Profanity: Any message where the language is bad, abusive, foul, vulgar, or obscene is deemed as profanity type . Financial risk: Scam messages sent by fraudsters and imposters tricking users into divulging sensitive personal information or financial details, which can lead to identity theft, financial loss, or unauthorized access . Flirtation: Messages that are indecent, intimate, unwanted, and inappropriate can be deemed as a flirtatious content type. Click Save Changes. The API key used when configuring the app is applied to the entire workspace . Users in your workspace don't need to get their own API keys. Now that you've successfully installed and configured your Mod Assist app, proceed to explore Using the Mod Assist App . Note on private room access Due to privacy considerations, the app will not report messages or operate in private rooms by default. If you want to enable content moderation in private rooms, follow these steps: Add the modassist .bot app user to the private room that you want to moderate. Use the slash command /invite modassist.bot From the installed Mod Assist App, navigate to Settings > AI Moderated Rooms and select the private room This gives the app access to private rooms .", "tokens": 318}
{"title": "Using the Mod Assist App", "content": "After installing and configuring the app, it will start screening the selected channels and moderating the contents based on the rules you have defined. If an inappropriate message is detected, the following actions will be performed: The app will display a warning message that's only visible to the sender. The message will automatically get reported. You can view the reports in the moderation dashboard. All the details of the reported message, such as sender, date, etc., will also be displayed in the Moderation Reports automatically. The workspace administrator and the moderator can take appropriate actions from the Moderation Dashboard. For more details on the supported actions, please refer to the Moderation guide . The Mod Assist app only detects, reports, and notifies users of inappropriate content. From the reports, the workspace moderators and administrators can carry out the appropriate moderation actions like deleting the reported messages, deactivating the reported user, etc.", "tokens": 197}
{"title": "Mod Perspective App", "content": "The Mod Perspective app uses the Perspective API to streamline content moderation for decision-makers. Based on defined settings, harmful messages are automatically reported, and moderators can take further action according to organizational guidelines . Learn how to install and use the app to fully leverage its capabilities for a safe workspace. Get the API key: Before you install and configure the app, you need the free-to-use Perspective API key . Follow the steps from Get Started with Perspective API till you generate the API key. Take note of the API key. You will need this to configure the app in your Rocket.Chat workspace . Set quota limit Depending on your requirements, you will also need to set a quota limit for the Perspective API in your Google Cloud console. By default, the Perspective API checks one query per second (QPS) . This is enough for testing the API in developer environments, but if you have a large number of conversations, it may not be sufficient. Let's consider that you have 50 rooms with 100 messages per second in each of the rooms . This means that there are 5000 messages per second. If the quota limit is only one QPS, processing one second of traffic will take 5000 seconds (or 83 minutes) . While this does not affect the server, as the app handles this in the background, it has a negative impact if you want to block offensive messages as soon they are sent. This is why you may need to update the API quota limit . To request a quota increase, fill out this Quota Increase form. For further information on updating the quota limit, see Limits and Errors. To install the app in your workspace, follow these steps: Go to Administration > Apps > Marketplace . Search for the Mod Perspective app from the marketplace and select it. Click Install. Accept the required permissions. In your Rocket.Chat workspace, on the Mod Perspective App Info page, go to the Settings tab", "tokens": 402}
{"title": "Mod Perspective App", "content": ". Set values for the following settings according to your requirements: AI Moderated Rooms: Select the rooms from the list for which you want to enable content moderation . Exclude Roles: Select the roles for which you want to bypass moderation, for example, admin or moderator. Messages of users with these roles will not be considered for moderation. Keep in mind that custom roles are not supported . Moderate accounts created in the past (number of days): Moderate messages from accounts created within a specific number of days . For example, if you set the value as 30, the app will moderate the message if the sender's account was created within the last 30 days. Messages from accounts created prior to this timeframe will bypass moderation . Perspective API key: Paste the API key you got from the prerequisites. Block flagged messages delivery: Automatically block the delivery of flagged messages. When disabled, messages get reported after they are sent . The expected response time from the Perspective API is around 100ms. Delete flagged message: Automatically delete flagged messages once they are sent. Deleted messages cannot be retrieved. Deactivate user: Automatically deactivate the sender of a flagged message . Deactivated users cannot log in to the workspace. Moderation categories: Select the types of inappropriate content to moderate, such as toxicity and profanity. Learn about each of these types from here . Moderation threshold: Set a number between 1 and 99 to control the likelihood of moderation, where higher values indicate greater tolerance . For example, a value of 90 flags messages has a 90% or higher chance of fitting into the selected moderation categories. Click Save Changes . You have now successfully installed and configured the app to help maintain a good environment! Next, learn more about using the app's features to review the flagged messages and take further action . Note on private room access Due to privacy considerations, the app will not report messages or operate in private rooms by default. If you want to enable content moderation in private rooms, follow these steps: Add the mod-perspective .bot app user to the private room that you want to moderate. Use the slash command /invite mod-perspective.bot. Select the private room under the app Settings > AI Moderated Rooms. This gives the app access to private rooms.", "tokens": 480}
{"title": "Using the Mod Perspective appGitHub App", "content": "After you have installed and configured the app, it starts screening the rooms that you have selected and moderating the messages based on the settings. If an inappropriate message is detected, the following actions will be performed: The app will display a warning message that's only visible to the sender. The message is blocked or deleted if the settings are enabled. The message gets reported automatically. View the reports from the Moderation dashboard. The message and the sender's details are displayed in the reports. The app only detects, reports, and notifies users of inappropriate content. The workspace administrator or moderators can take appropriate actions according to the organization's guidelines, like deleting the messages or deactivating the user from the moderation dashboard. The GitHub app enhances developer collaboration by seamlessly integrating GitHub and Rocket.Chat . This app enables users to perform various tasks, such as searching and sharing issues and pull requests, subscribing to repository events, creating new issues, reviewing and merging pull requests, and more directly from the Rocket.Chat workspace", "tokens": 226}
{"title": "GitHub App", "content": ". To install the GitHub app in your workspace, follow these steps: Navigate to Administration > Apps > Marketplace. Search for the GitHub app. Click Install and accept the needed permissions to install . On the GitHub App Info screen, navigate to Details > API and note the GET github-app-callback URL. GitHub OAuth apps allow your workspace users to easily authenticate their GitHub accounts on the GitHub app . The OAuth app provides access to GitHub data, such as user profiles and repository information, and helps integrate GitHub functionalities. To manage your GitHub PRs, you will need to create an OAuth app and authenticate yourself . To create a GitHub OAuth app, follow these steps: Log in to your GitHub account. Click your avatar from the menu bar. Select Settings and navigate to Developer settings > OAuth Apps. Click New OAuth App to create a new app . Fill in the required information. Application name: Set the application name. Homepage URL: Fill in the URL of your GitHub application homepage. Application description: Add a description of the app . Authorization callback URL: Paste the GET github-app-callback URL you copied from the GitHub App. For example, https://test-workspace.rocket .chat/api/apps/public/826f0d95-9e25-48a6-a781-a32f147230a5/github-app-callback Click Register Application . After registering the app, click Generate a new client secret to create a new client secret for the app. Copy the Client ID and the newly created Client Secret. You'll need them to configure the Rocket.Chat GitHub app . To configure the GitHub app in your Rocket.Chat workspace, follow these steps: On the GitHub App Info screen, go to the Settings tab . Paste the Client ID and Client Secret you copied earlier in github-app-oauth-client-id and github-app-oauth-client-secret respectively. Click Save Changes. After installing and configuring the app, you can proceed to explore Using GitHub App.", "tokens": 503}
{"title": "Using GitHub App", "content": "After installing the GitHub app, users in your workspace can start interacting with GitHub using the slash commands. The /github slash command is used to initiate actions with the GitHub app . To execute any GitHub command, the user must first authenticate by using /github login. To login to your GitHub account on the workspace, Enter the /github login slash command You receive a message from the github.bot with a GitHub login button . Click the button to authenticate with your GitHub account. Authorize the GitHub app to access your account. The github.bot sends a message once authentication is successful . To log out your GitHub account from the workspace, Enter the /github logout slash command This removes the currently authenticated user . To display your GitHub profile details and view issues assigned to you, Enter the /github me slash command Click Issues to see a list of issues assigned to you. Click on Share Profile to select and share your profile details within a chat . To search for issues or pull requests in a specific repository, Enter the /github search slash command Specify the search parameters and click Search . To create a new issue in a GitHub repository, Enter the /github issue slash command Enter the Full Repository Name in this format: Owner/Repository. Click Next and fill in the details of the issue. Click Create Issue . The issue gets created and github.bot sends a message with a link to the issue . To assign and share issues in a repository, Enter the /github issues slash command Enter the Full Repository Name in this format: Owner/Repository, and click Next A list of issues on the repository is displayed . You can perform the following actions on an issue: View the issue directly on GitHub Assign to issue to someone Add the issue When you subscribe to a repository event, you receive a message in the Rocket.Chat room whenever each event gets triggered . To manage repositories subscriptions on your workspace, Enter the /github subscribe slash command to view the repositories and events you're subscribed to . Click Add Subscriptions to add a new subscription Enter the Full Repository Name, select the events to subscribe to, and click Subscribe. You get a message confirming the subscription. Click Delete Subscriptions to delete existing subscriptions . Select the subscription and click Unsubscribe. You receive a message about the unsubscription. Click Refresh to refresh the list of subscriptions", "tokens": 553}
{"title": "Using GitHub App", "content": ". To get an interactive interface to fetch repository data, Enter the /github <username>/<repository name> slash command Click Overview to see the repository overview. Click Issues to get all the open repository issues . Click Contributors to get a list of all the top contributors. Click Pull Requests to see the open pull requests . To get a detailed overview of a repository, Enter the /github <username>/<repository name> repo slash command To list open issues in a repository, Enter the /github <username>/<repository name> issues slash command A list of open issues in the repository is displayed . Click on any issue to open. To get contributors in a repository, Enter the /github <username>/<repository name> contributors slash command Click on a user to open their GitHub profile on a new tab . To view recent open pull requests in a repository, Enter the /github <username>/<repository name> pulls slash command Click a pull request to open it in a new tab To review a specific pull request using its PR number, Enter the /github <username>/<repository name> pulls <pull number> slash command Click View Changes to see the changes made by that pull request Click View File to see the file(s) affected by the pull request . Click Comments to view the comments under the PR or Add a Comment. Click Merge to submit the merge request details and Merge the PR . To subscribe to all the events of a repository and receive messages in that room when an event gets triggered, Enter the /github <username>/<repository name> subscribe slash command To unsubscribe from all events of a repository, Enter the /github <username>/<repository name> unsubscribe slash command With the GitHub app, users can easily collaborate on GitHub repositories, track issues, and receive notifications directly from the workspace .", "tokens": 421}
{"title": "Using the Google Drive App", "content": "When the Google Drive app is installed, you can perform various actions, including creating files, sharing files, editing file permissions, etc . To see a list of files on your connected Google Drive account, open Google Drive from the room kebab menu or use the slash command /google-drive files . A list of all the files in your Drive is displayed, including those you created and shared with you. These files are listed with their respective file name, file type, Last modified date and Owner . You can search for a specific file using the search bar. You can filter the type of files displayed by selecting the file type. The list of files can be sorted in ascending or descending manner . To create a new file on your connected Google Drive account, open Google Drive from the room kebab menu and click +New or use the slash command /google-drive new. Fill in the File name, select the File type, and click Create . The File type options are Google Docs, Google Sheets, Google Slides, and Google Forms. The google-drive .bot sends you a message with a link to the new file you just created Before sharing a file, you can open it to view and verify its content . To open a file in the browser, From the list of files, click the Kebab menu across the file, and select Open in browser. It opens the file on your browser's tab . You can share files in your Google Drive within any room in your workspace. To share a file, From the list of files, click the Kebab menu across the file, and Share in room . This shares a link to the file in that room. Clicking on Details and sharing opens up a modal to edit the sharing permissions of the file . To view file details, From the list of files, click the Kebab menu across the file, and select File Information. This shares a link to the file in that room . It returns the following details of the file: File name: The name of the file Manage Access: Where to set the file-sharing permissions. Type: The file type. Size: The size occupied by the file in Google Drive . Location: The location of the file in Drive. Owner(s): List of people owning the file. Modified: The last modified date of the file. Created: When the file was created", "tokens": 492}
{"title": "Using the Google Drive App", "content": ". Managing file permissions allows you to restrict the action anyone can perform on a file. A file's permission can be set when sharing the file or viewing the file information . The various permissions you can set to a file include the following: Share to room members and allow them to view: Restricts viewing of the file only by the member(s) of the room . Share to room members and allow them to comment: All room members can view and comment on the file. Share to room members and allow them to edit: Gives edit access to the member(s) of the room . Share to anyone at Organization and allow them to view: Allows anyone in your organization to view the file. Share to anyone at Organization and allow them to comment: Allows anyone in your organization to view and comment on the file . Share to anyone at Organization and allow them to edit: Allows anyone in the organization to edit the file. Share to anyone with the link and allow them to view: Allows anyone having the link to view the file . Share to anyone with the link and allow them to comment: Allows anyone having the link to comment on the file. Share to anyone with the link and allow them to edit: Allows anyone having the link to edit the file . You can only delete files you created. To delete a file, From the list of files, click the Kebab menu across the file you want to delete. Select Delete file, then click Delete forever.", "tokens": 305}
{"title": "Google Calendar", "content": "Some of the supported functionalities are only available for workspaces running version 6.2.0 and higher. The Rocket.Chat Google Calendar app connects your Google Calendar with Rocket.Chat to stay organized and get a daily rundown of your events . It gives users the ability to do the following : Manage meeting invites and respond to invites directly from Rocket.Chat. Get a daily digest of the events you have scheduled for the day. Receive reminders 10 minutes before every meeting . Change your user status automatically while in a meeting. Receive an email with your daily summary at a preferred time in your timezone. Before setting up the Google Calendar app, here are some essential things to note . Your workspace must be on a publicly available domain. A Google Cloud project is required to obtain the OAuth2 credentials. To install the Google Calendar Rocket.Chat app, Go to Administration > Apps > Marketplace. Search for the Google Calendar app and select it . Click Install and Agree to accept the required permissions. On the Google Calendar App Info screen, navigate to Details > APIs and copy the GET google-calendar-app-callback URL. You need it to create the OAuth Client Id . After installing, you receive a direct message from the google-calendar.bot with instructions on how to configure the app. Run the slash command /google-calendar setup in the message box to view setup instructions . You can find the callback URL for your workspace from the instructions. Go to the Google Cloud console and create a new project or select an existing one . From the sidebar, Navigate to API & Services > OAuth consent screen and fill in the required fields to Create a consent screen. Navigate to Credentials, Click Create Credentials, then select OAuth client ID . Select Web application as the application type, then fill in the required details. Add the Authorized redirect URIs given by the google-calendar.bot. Click Create. Copy the client secret and client ID. You need them to configure the app . To enable Google Calendar API on your project, From the sidebar, Navigate to Library. Search for Google Calendar API, select and Enable it. On the Google Calendar app Info screen, navigate to Settings", "tokens": 465}
{"title": "Google Calendar", "content": ". Paste the client secret and client ID from the Google Cloud console. Click Save changes. Type the slash command /google-calendar help to give you a list of commands you can use with the Google Calendar app . /google-calendar help: Shows the list of slash commands. /google-calendar setup: Shows the steps to set up. /google-calendar connect: Starts the process to link your Google Account. /google-calendar disconnect: Removes your linked Google Account . /google-calendar settings: Opens a contextual bar to manage your Google Calendar settings. /google-calendar events: Returns all events in the calendar for today . After the workspace administrator has installed and configured the Google Calendar app, users can connect their Google accounts and access the Google Calendar app features. Users can request for the Google Calendar app at Administration > Apps > Marketplace . To see if the Google Calendar app is installed on your workspace, type the slash command /google-calendar and watch out for any related information. To connect your Google account: Type the slash command /google-calendar auth . You receive a message from the google-calendar.bot. Click Authorize to authorize your account. Select the Google account you want to authorize, and click Allow for all the account permission. After a successful connection, the google-calendar .bot message notifies you of a completed authentication. With your account linked, you can now change the settings, list your events, and get notifications on meeting hours. You may be required to re-authenticate periodically whenever the authentication token expires.", "tokens": 327}
{"title": "Using the Google Calendar App", "content": "When the Google Calendar app is installed, you can perform various actions, including changing your app settings, listing your events, and receiving notifications on meeting hours. To change the functionality of the Google Calendar app for your account, Type in the slash command /google-calendar settings. It opens up the Google Calendar Settings bar. Now you can perform any of the following actions: Notifications: Activate or Remove the ability to receive meeting notifications. If you activate notifications, you receive an event message reminder 10 minutes before the event's scheduled time. Daily summary: This lets you set when to get a daily event overview. You receive a message summarizing all your events for the day. OAuth Authentication: Authorize or Revoke your connected Google account. To see the list of events on your calendar for the day, Run the slash command /google-calendar events.A list of all the events scheduled for the day is displayed. An event has details, including the title, date, and time. Clicking on an event title takes you to the Google Calendar page showing its details. You can see the status of your availability for meetings you are invited to. Use these quick action buttons to respond to meeting invites: Accept, Decline, and Maybe. Click on Join to join an event you got invited to.", "tokens": 268}
{"title": "Microsoft Teams Bridge", "content": "Microsoft Teams Bridge is an app that connects collaborators across Rocket.Chat and Microsoft Teams. It acts as a bridge between Teams and Rocket.Chat to enable cross-platform messaging among users in an organization . This way, users can send and receive messages from their workspace or Teams account. It supports other message formats, such as emojis, files, and links. Furthermore, operations like editing or deleting a message are also supported . The Microsoft Teams Bridge app is only available for workspaces on version 6.1 and above. As an administrator, ensure you have access to the Rocket.Chat admin account and Teams admin account for your organization before installing . To install Microsoft Teams Bridge, Go to Administration > Apps > Marketplace. Search for the Microsoft Teams Bridge app. Click Install. Confirm that the app is enabled . On the Microsoft Teams Bridge App Info screen, navigate to Details > API and copy the GET auth endpoint URL. If it's a localhost URL, exposing the localhost port to the internet requires a tunnel service like Ngrok . Azure active directory is now Microsoft Entra ID. See the official documentation for more details. To set up Microsoft Entra ID for your organization, Login to Microsoft Azure portal with your organization's Teams admin account. Find and click Microsoft Entra ID . Click Add. Then, select App registration. Give the app a name. Select Accounts in this organizational directory only as the Supported account type. Select Web as the Redirect URI platform . Paste the GET auth endpoint URL you copied from the Microsoft Teams Bridge App Info as the value. Click Register. Copy the Application (client) ID and Directory (tenant) ID shown on the overview page . Click Add a certificate or secret > New Client Secret. Fill in the description and expiration timeline. Then, click Add. After the client secret is created, copy the Client Secret Value . Navigate to API permissions > Select Add a permission > Select \"Microsoft Graph\". Add the set of required permissions. The table below outlines the required permissions you'll need to set. Name Type Description Requires Admin Consent ChannelMessage.Read", "tokens": 454}
{"title": "Microsoft Teams Bridge", "content": ".All Application Read all channel messages Yes ChannelMessage.Send Delegated Send channel messages No ChannelMessage.UpdatePolicyViolation.All Application Flag channel messages for violating policy Yes Chat.Create Delegated Create chats No Chat.Create Application Create chats Yes Chat.Read .All Application Read all chat messages Yes Chat.ReadBasic Delegated Read names and members of user chat threads No Chat.ReadBasic.All Application Read names and members of all chat threads Yes Chat.ReadWrite Delegated Read and write user chat messages No Chat .ReadWrite.All Application Read and write all chat messages Yes ChatMember.Read Delegated Read the members of chats Yes ChatMember.Read.All Application Read the members of all chats Yes ChatMember.Read .WhereInstalled Application Read the members of all chats where the associated Teams application is installed. Yes ChatMember.ReadWrite Delegated Add and remove members from chats Yes ChatMember.ReadWrite.All Application Add and remove members from all chats Yes ChatMember.ReadWrite .WhereInstalled Application Add and remove members from all chats where the associated Teams application is installed. Yes ChatMessage.Read Delegated Read user chat messages No ChatMessage.Read.All Application Read all chat messages Yes ChatMessage .Send Delegated Send user chat messages No email Delegated View users' email address No Files.Read Delegated Read user files No Files.Read.All Delegated Read all files that user can access No Files.Read .All Application Read files in all site collections Yes Files.ReadWrite Delegated Have full access to user files No Group.ReadWrite .All Delegated Read and write all groups Yes offline_access Delegated Maintain access to data you have given it access to No openid Delegated Sign users in No profile Delegated View users' basic profile No ServiceMessage.Read .All Application Read service messages Yes User.Read Delegated Sign in and read user profile No User.Read.All Delegated Read all users' full profiles Yes User.Read.All Application Read all users' full profiles Yes User.ReadWrite .All Application Read and write all users' full profiles Yes After setting all permissions, click on Grant admin consent for org. Navigate to Microsoft Teams Bridge App Info > Settings", "tokens": 488}
{"title": "Microsoft Teams Bridge", "content": ". Update the Microsoft Entra Directory (tenant) ID, Microsoft Entra Application (client) ID, and Microsoft Entra Client Secret with the values you copied earlier. Then, click Save Changes . Ensure you use the correct credentials and set the appropriate API permissions on the Microsoft Entra ID. With the Microsoft Teams Bridge, you can exchange up to 500 messages per month across Rocket.Chat and MS Teams at no additional cost . If you surpass this limit, you can no longer exchange messages between Rocket.Chat and Teams. If you intend to exchange more than 500 messages, here are some important details to note: Check if the API is metered . Microsoft Teams has free and metered APIs that are billed based on usage. Know the metering unit to estimate API costs. There's a limit of 500 messages per month. Exceeding this limit means Teams messages won't show in Rocket .Chat, but it can still be sent. Read the documentation to learn more about the pricing models and licensing requirements. To monitor message count, set up an Azure budget to track messages against the threshold . Configure alerts to ensure you stay within the 500 messages monthly spending limit. For example, your organizational spending limit is 500 messages per month; email notifications are sent if the budget threshold is exceeded . See the official guide to understand how to create and manage Azure budgets. This app was developed in partnership with Yuqing Bian during Google Summer of Code 2022.", "tokens": 305}
{"title": "Using Microsoft Teams Bridge", "content": "Before using Microsoft Teams Bridge, you must have your organization's Teams account or Guest Account. Without your authorization, no one can access your Teams data or send/receive messages for you. Log in to your Microsoft Teams account to allow Microsoft Teams Bridge to synchronize your messages. To use Microsoft Teams Bridge in a channel or DM, Using the slash command, type /teamsbridge-login-teams to log in to your Teams account and Send. Click the Login Teams button from the message returned. It redirects you to log in to your Teams account. You can also log out by typing /teamsbridge-logout-teams. A bot is created for all team users in the workspace. Communication with users in Microsoft Teams Bridge is via bots. After a successful login, type /teamsbridge-provision-teams-bot-user and click Send to create a bot user in the workspace for all users in your Teams organization. To add a user from your Teams organization to a room on your workspace, Adding a Teams Bot user is only supported for private channels, private teams, and private discussions. Using the slash command, type /teamsbridge-add-user and Send. An Add Teams users screen is shown. Select all the users in your Teams organization you want to add to the room. Click Add users. Since communication on Rocket.Chat with Microsoft Teams Bridge uses bots; click the user's bot from the room, and send a message. They will receive the messages in their Teams account as direct messages. To create a direct message from the menu bar, Click the Create New icon in the Rocket.Chat menu bar, then select Direct Message. Select the bot of the user you want to start a DM with. Then, click Create and send a message.", "tokens": 372}
{"title": "Poll Plus", "content": "The Poll Plus app allows you to create advanced Polls in Rocket.Chat . To install the Poll Plus app, Go to Administration > Apps > Marketplace Search for the Poll Plus app and click on it Click on the Install button To create a Poll with Poll Plus, After installing the app, go to the room you want to create the poll and run the /poll slash command Then, click Enter to execute . A pop-up form is triggered for you to create the poll . The form details include the following: Insert your question: The poll question Insert your options: The reply options for the poll Add a choice: Add more reply options for the poll Choice type: Select if the poll will be multiple-choice, single-choice, or\u00a0template-based Vote visibility: Select if the poll will have an Open, Confidential, or Mixed Visibility Vote User-defined options: Allow/disallow the user from adding their options to the poll Word Cloud:\u00a0Enable/disable the word cloud feature After creating the poll, it is available in the room for the users to vote . To finish the poll, Select the Kebab menu at the top of the poll. Then, click Finish poll The Poll Plus app offers some customization settings on the app settings screen. Go to Administration > Apps > Poll Plus . Select the Settings tab. Update the settings. Then click Save Changes. The Poll Plus app allows you to display the voter's identity as their full name or username. Since Rocket .Chat is used globally; everyone may not be comfortable with Coordinated Universal Time (UTC). The Poll Plus App allows you to choose which timezone to display the poll finish time. The default value for this setting is the UTC timezone", "tokens": 350}
{"title": "Poll Plus", "content": ". The word cloud feature uses an API link to fetch word clouds. The free version of Quickchart word cloud API can be used for small servers. Moreover, it is also the default value for this setting . Quickchart comes with the following restrictions: Requires Internet access. Enforces rate-limiting of 60 requests per minute per IP. In this case, you are hosting your Rocket .Chat on-premise or need more customization than Quickchart, we've open-sourced an internally developed word cloud API. It comes with the following features: No Internet access is required. No rate-limiting. It is free . If the Wordcloud API endpoint is blank and Word Cloud is enabled on the poll, the poll summary is displayed when the poll is finished.", "tokens": 160}
{"title": "Poll Plus Features", "content": "The Poll Plus app provides some pre-filled template polls. These are some of the most commonly used polls, and pre-filling them saves you from manually typing all the options . This poll provides options including Overrated/Underrated, Approprately Rated, Never Tried , Underrated. For example, you can use it to get feedback about the publicity of a particular feature in your company . This poll allows users to rate a particular subject between the numbers 1-5. This poll allows users to rate a particular subject between the numbers 1-10 . The Poll Plus app provides the option to allow or disallow users from adding options to an already created poll. When creating a poll, select the option to allow or disallow users from adding options to the poll . If you allow users to add choices, an Add Choice button is displayed below during the poll. To add a new choice, Click the Add Choice button. A modal form is displayed. Enter the new option and click Add . The new option is now added to the poll. In addition to the generated bar graph, the Poll Plus app provides users with the option to summarize the poll results in a word cloud. The word cloud feature uses a word cloud API for fetching these . Learn more about setting up a word cloud API from the configuration settings guide. The Poll Plus app allows users to set some reply options as confidential while others are open. This means that users who select the anonymous option will have their identities hidden . To enable mixed visibility, Set the visibility to \"Mixed Visibility Vote\" when creating the poll. On clicking Create, the Mixed Visibility modal pops open. Select the options you would like to be \"Anonymous\" . Once the poll is created, options that were selected to be \"Anonymous\" will conceal the voter identities with the \"Anonymous\" label . Votes casted on the options marked as \"Anonymous\" would still be counted within the total votes", "tokens": 399}
{"title": "Poll Plus Features", "content": ". Live polls are an array of regular polls. A Live poll is a multi-question, timed poll. Live polls can be triggered with the /poll live <number of polls> command . Here <number of polls> denotes the number of polls you want to be included within the Live poll. Each poll within a Live poll has a time limit to vote upon after which the current Poll ends and the next one is posted . Poll creators can also click on the \u201cNext Poll\u201d button to trigger a pre-scheduled finish of the current Poll. The \"Time limit to vote\" each poll is set as the number of seconds you want that poll to be active . Some excellent use-cases for the Live poll are stand-up and retro meetings. An additional use case is by teachers wanting to conduct timed quizzes on Rocket.Chat. Here is how the Live poll looks in action . The time at which the poll will end is shown in the below figure. If you're outside of the UTC timezone, you can configure the Poll Plus app to use your timezone. Refer the configuration doc for more information . Live polls include an additional feature called Late Retrieval. This allows Live polls to be posted at a later time in the future . To use the Late Retrieval feature make use of the save subcommand in the format: /poll live save <number of polls> where <number of polls> denote the number of polls you want to be included within the Live Poll . Post-creation of the Live poll, a message along with the poll id to retrieve it will be visible only to the poll creator. Make use of the /poll live load <id> command to \"play\" the Live Poll . Here <id> is the poll id that was visible to the poll creator. In case the user enters a wrong or non-existent Live poll ID a notification message, only visible to the user, is sent within the room . Speaking of teachers using Rocket.Chat for exams, the Live poll Late Retrieval features proves an excellent tool for teachers to create quizzes even weeks before and then schedule the quiz on D-day with ease . All this while having control over the time limit to answer each question.", "tokens": 455}
{"title": "Rocket.Chat AI App", "content": "The Rocket.Chat AI app is currently in beta. For feedback, reach out to us on the AI app channel. For setup details, refer to the AI app setup repository. Contact our sales team to enable the app after installation. The Rocket .Chat AI assistant app is powered by the Retrieval-Augmented Generation (RAG) technique. This technique allows large language models (LLMs) to connect with external resources, giving users access to the latest, most accurate information. To use the Rocket .Chat AI app, you need a self-hosted LLM of your choice. This allows for greater information accuracy while keeping it secure. Key features of the Rocket.Chat AI app Get answers to your general or business-specific queries . Get a summary of thread messages to stay up-to-date on important conversations quickly. Get a summary of livechat messages. This helps agents understand the context of an ongoing customer conversation . In this document, you will learn about the app installation, configuration, and usage details. Follow these steps in your workspace: Go to Administration > Apps > Marketplace and search for Rocket.Chat AI. Click Install and accept the required permissions . By default, the app will be disabled. To enable it, contact our sales team. Before you configure the app settings, ensure that your workspace admin has set up the LLM. Follow the Rocket .Chat AI App Setup Guide for details and further examples for the settings. In the app Settings tab, update the following: Field Description Language model Model Selection* Enter the name of the AI model. You can refer to your LLM provider for this . For example, llama3-8b, gpt-3, or gpt-4. Model URL* Enter the model URL. For example, http://localhost:8020/v1 . Don't include the slash / at the end of the URL . If no value is provided, the default value for Llama 3 8B is http://llama3-8b, and for Llama 3 70B is http://llama3-70b", "tokens": 444}
{"title": "Rocket.Chat AI App", "content": ". Model API key Enter the API key if your LLM provider requires it to make calls. For example, cloud providers such as OpenAI and Gemini require an API key. Assistant personalization Assistant Name* Provide a name for the AI Assistant . By default, the name is Rocket.Chat Assistant. This name is used to greet the user if asked for a name. For example, \"Hi, I am AI Assistant. How can I help you?\" . Custom instructions Customize how the bot responds to prompts. For example, you can add instructions to include the users involved in conversation summaries. Vector database Vector database selection* Select the vector database to be used for the RAG . The vector database retrieves the relevant documents from the knowledge base. Currently, only Milvus is supported. Vector database URL* Enter the URL of the vector database. For example, http://localhost:19530 . Vector database collection* Enter the name of the collection in the vector database. For example, milvus_collection . If you are using the Rubra AI Assistant, you can enter the URL as http:{{RUBRA_API_SERVER_URL}}?name={{ASSISTANT_NAME}} . The {{RUBRA_API_SERVER_URL}} and {{ASSISTANT_NAME}} will be replaced with the actual values once you save the configuration. If there are any errors, the values will not be replaced and will be reverted to the original values . Vector database API key* Enter the API key for the vector database. This is required for authentication. For Milvus, you should use a colon (:) to concatenate your username and password to access your Milvus instance . For example, root:Milvus. Vector database text field* Enter the field's name in the vector database containing the text data. For example, text . Number of relevant results (top k)* Configure the number of top relevant results from the knowledge base you want to send to the LLM to answer a query. By default, the value is ten . Instead of retrieving only the top ten relevant paragraphs to answer a question, you can configure it to 15 or 20. Higher values provide more context but may increase token usage and risk overwhelming the LLM", "tokens": 485}
{"title": "Rocket.Chat AI App", "content": ". Lower values keep the context concise and focused. Keep in mind that if the data is not relevant, the LLM may return irrelevant or conflicting information. Embedding model Embedding model selection* Select the embedding model to be used for the RAG . The embedding model is used to convert the text data into vectors. Currently, only the locally deployed model is supported. Embedding model URL* Enter the URL of the embedding model. For example, http://localhost:8020/embed_multiple . AI agent Agentic pipeline* Enable this option if you are implementing an agentic RAG system. By default, this option is disabled. When this option is disabled, the app uses the vector database configuration . When this option is enabled, the app ignores the settings under Vector database and the Embedding model, and they are not required. Agentic pipeline config* Enter the agentic pipeline configuration in the JSON format . Refer to the Agentic pipeline configuration details. Note that the embedding model inference server must have a fixed format of payload and response as input and output, respectively . Below is the format of the input and output: The elements in the JSON configuration string are as follows: endpoint (required): Enter the endpoint to execute an agent query . For example, headers (required): An object of key-value pairs required for the endpoint, such as authentication tokens. For example, body (required): Enter the request body that is required by the endpoint, as per the API specifications . For example, Here, {{user.message}} is a variable representing the templates that can be used to pass additional information when calling the endpoint. The app internally replaces the templates with the actual values", "tokens": 378}
{"title": "Rocket.Chat AI App", "content": ". Currently, the following values are available: Keep in mind that the app expects a response to the prompt from the API, so the API must return a text answer which will be sent to the user . You can use the app in any of the following ways: From your workspace menu, click Create New > Direct messages. In the DM, send a prompt with your query and the bot responds in the thread . In any room, click the AI Actions button  from the room actions menu. Select Summarize unreads to receive conversation summaries from the app bot in the same room . In any discussion, click the AI Actions button  from the room actions menu. Select Summarize room to receive conversation summaries from the app bot in the same discussion room and in the DM . In any channel, hover over the message in the thread you want to summarize. Click the AI Actions button  from the message actions menu. Click Summarize until here . The AI Assistant will summarize the thread in the thread itself and in the DM. Note that thread summary is not supported in DMs. In any livechat room, click the AI Actions button  from the room actions menu . Click Summarize chat. The AI Assistant will summarize the livechat conversation in the same room. According to the conversation, the bot provides information about the users, the issue, the agent's response, and any follow-up to the conversation . Currently, the app summarizes up to a 100 messages. The app will always show a default error message if there is an error: An unexpected error occurred, please try again . If you are an admin, go to the App Info page and click on the Logs tab to see the different sections of the logs. The logs will help you debug the issue . If the interaction was a UI interaction, the logs will be listed under the jobProcessor section. The following screenshot shows an example: The logs will be listed under the\u00a0executePostMessageSent\u00a0section for any other type of interaction . The following screenshot shows an example:", "tokens": 442}
{"title": "Rocket.Chat AI App Setup Guide", "content": "The Rocket.Chat AI app enables you to integrate open-source models like Llama3 with your own knowledge base (using Retrieval Augmented Generation) with your Rocket.Chat instance . This allows the LLMs to generate responses based on the context of the docs in the knowledge base, which helps generate more accurate responses. The Rocket.Chat AI app provides features like thread and omnichannel conversation summarization . This document guides you through the LLM deployment and app configuration steps. The project is in beta, and we are working on improving the setup process. If you face any issues or have any feedback, please reach out to us on the Rocket .Chat AI channel . Here is a high-level overview of the app workflow: Docker An instance with a GPU NVIDIA GPU(s) with CUDA support CPU: x86_64 architecture OS: Any Linux distros that are supported by the NVIDIA Container toolkit and have glibc >= 2 .35 (see the output of ld -v). CUDA drivers: Follow the installation guide here. Note that we only support the cuda and versions 12.5, 12.2 and 12.1 . Please upgrade or downgrade to the supported versions if you have a different version. Otherwise, you can reach out to the Rocket.Chat team for feedback on supporting the version you have . NVIDIA Container Toolkit Docker with GPU support: To test if the GPU is accessible in the docker container, follow the steps listed in the Compose GPU Support. Rocket.Chat License (Starter, Pro, or Enterprise) . The Starter license is free for small teams. For more information, refer to our plans. Test on an AWS EC2 instance with the following configuration: Instance type: g5 .2xlarge vCPUs: 8 Memory: 32 GB GPU: NVIDIA A10G VRAM: 24 GB Storage: 450 GB The minimum requirements are as follows: vCPUs: 4 Memory: 12 GB GPU VRAM: For the Llama3-8B model: 8 GB For the Llama3-70B model: 40 GB Storage: For the Llama3-8B model: 100 GB For the Llama3-70B model: 500 GB Access the sample files from the Rocket", "tokens": 487}
{"title": "Rocket.Chat AI App Setup Guide", "content": ".Chat AI app setup repository. Clone or init the repository if you are using https: For a zip download, unzip using the following command: Change the directory: Modifying the configuration files is optional . The pipeline will work without modifications, but certain features will be disabled. For more information, see the About the config files section . Start Rubra using the following command: If you're using a newer version of Docker (Docker CLI versions 1.27 .0 and newer), you may need to use the following command: To verify that every service is running, run the following command: It should return the following services: In case you don't see any of the services listed above, reach out to the Rocket .Chat team for support. If everything is running, you can now access the Rubra UI at http://localhost:8501. Now, move on to the next step to start the LLM service. localhost is the default hostname . If you are using a different hostname, replace localhost with your hostname. We support two methods to run LLM, one with Docker and the other with Helm. For the Docker method, follow the steps below . For scaling and production use cases, we recommend using our optimized Docker and Helm deployments. For access, reach out to us at customersuccess@rocket.chat . Run the following command to check the CUDA version on your machine: The output should look like this: Additionally, to confirm the version of the CUDA compiler driver, use the following command: The output should look like this: In this example, the CUDA version is 12 .5 and the CUDA compilation tools version is also 12.5. If the versions are different, it is recommended that you align your system's CUDA version with the supported versions by either upgrading or downgrading . You can use this version (by removing the dot .) to set the PLATFORM_TAG value in the .env file. For example, if the CUDA Version is 12.5, the PLATFORM_TAG value is cuda125 . The supported CUDA versions are 12.5, 12.2 and 12.1. If your system's version does not match any of the supported versions, consider updating your CUDA installation", "tokens": 496}
{"title": "Rocket.Chat AI App Setup Guide", "content": ". Alternatively, for assistance with unsupported versions, contact the Rocket.Chat team for guidance on compatibility. Start with defining the environment variables in the .env file. You can copy the .env.llm.example file from the repository and rename it to .env . Then modify the following variables as required: Run the LLM container using the following command: If you're using a newer version of Docker (Docker CLI versions 1.27 .0 and newer), you may need to use the following command: Once the Docker container is running, you can call the LLM API using the following command: localhost and 1234 are the default hostname and port, respectively . If you are using a different hostname and port, replace localhost and 1234 with your hostname and port. If you get a response, the LLM service is running. Great! You have successfully set up Rocket.Chat AI on your local machine . You can now integrate it with your Rocket.Chat instance. Ensure that you replace the service names with the actual hostname and port if you are using a different hostname and port. Go to your Rocket.Chat instance. Install the Rocket .Chat AI app from the marketplace. You can find the app by searching for Rocket.Chat AI under Administration > Marketplace > Explore . It's a premium app, so you need to have a valid license (Starter, Pro, or Enterprise) to install the app. After installing the app, go to the Rocket.Chat AI app Settings page . Enter the Model URL with the LLM API URL. For example, http://llama3-8b:1234/v1 (don't include the /chat/completions part) . For the Vector database URL setting, enter the milvus service URL with port 19530. For example, http://milvus:19530 . For the Text embedding API URL setting, enter the text-embedding-api service URL with port 8020. For example, http://text-embedding-api:8020/embed_multiple", "tokens": 454}
{"title": "Rocket.Chat AI App Setup Guide", "content": ". To set up the knowledge base, refer to the knowledge base setup video. For details about the other settings, see Configure the app . For the Vector database collection setting, you have two options: Call the endpoint http://api-server:8000/assistants and search for the assistant you want to integrate with . An example response looks like: Now copy the assistant ID you want to integrate with the Rocket.Chat AI, from the field id in the example, we have the value asst_226796. Once copied, enter the value in the Rocket .Chat AI app settings page in the field Vector database collection setting. You can directly enter http://api-server:8000?name=Demo Assistant in the field Vector database collection in the Rocket.Chat AI app settings page . If the assistant exists, it will automatically fetch the assistant and replace the settings with asst_XYZ where XYZ is the assistant ID . If the field didn't change, it means the assistant doesn't exist, or there is an issue with the API. http://api-server:8000 is the default hostname and port . If you are using a different hostname and port, replace http://api-server:8000 with your hostname and port. Once you have integrated the Rocket.Chat AI with your Rocket.Chat instance, you can start using the AI features in your Rocket .Chat instance. For details, see Use the Rocket.Chat AI app. If you have your own Milvus vector database, you can use it with the Rocket.Chat AI. Follow the steps below to integrate your Milvus vector database with the Rocket .Chat AI: Go to your Rocket.Chat instance. Install the Rocket.Chat AI app from the marketplace. You can find the app by searching for Rocket.Chat AI under Administration > Marketplace > Explore . It's a premium app, so you need to have a valid license (Starter, Pro, or Enterprise) to install the app. After installing the app, go to the Rocket.Chat AI app Settings page", "tokens": 438}
{"title": "Rocket.Chat AI App Setup Guide", "content": ". Enter the Model URL with the LLM API URL. For example, http://llama3-8b:1234/v1 (don't include the /chat/completions part) . For the Vector database URL setting, enter the milvus service URL with port 19530. For example, http://milvus:19530. Enter your API key in the Vector database API key setting . In the Vector database text field setting, enter the text field where the text data is stored in the collection schema. Enter your embedding model (used when ingesting the data) in the Embedding model URL setting . Make sure your Embedding Model URL follows a certain format for request payload and response, such as: llm-config.yaml: This file contains the configuration for Rubra AI's LLM service. You can modify it according to your requirements . milvus.yaml: This file contains the configuration for the Milvus service of Rubra AI. For more information, refer to the Milvus documentation . Once the files are modified, you need to restart the services for the changes to take effect. Use the following command: If you get the following error: Make sure you have logged in with the GitHub Container Registry (ghcr .io) using the following command: Replace $CR_PAT with your personal access token (PAT) and YOUR_GITHUB_USERNAME with your GitHub username . If you get the following error: This error occurs when the NVIDIA GPU architecture is less than the sm_80. Refer to this website for the supported GPU with architectures sm_80 and above . Once your deployment and app configuration is successful, go to the Rocket.Chat AI App guide to learn how to install and use the app. You can also find details about other app configuration settings.", "tokens": 406}
{"title": "Trello", "content": "Trello app allows you to receive notifications about your Trello activities, including creating cards and comments, completing checklist items and uploading attachments, etc. A publicly accessible Rocket.Chat server A Trello account with active boards. To install the Trello Rocket.Chat app, Go to Administration > Apps > Marketplace. Search for the Trello app. Click Install and accept the needed permissions. A direct message is then received from the trello.bot to assist you with setting up the app. To configure the Trello app, Go to the trello.bot chat. Run the slash command /trello setup in the chatbox. It displays a set of instructions to follow for setting up Trello. Log in to your Trello account. Go to Power-Up Admin portal. Create a new or select an existing Power-Up. Then, navigate to API key to copy or generate a new API key. Copy the server's URL displayed by the trello.bot and add it to the Allowed Origins field of your API key. Now, copy the API Key and OAuth Secret from the Trello page. You need it to configure Trello in Rocket.Chat. On the Trello App Info screen, navigate to Settings. Paste the Trello API key and Trello API secret from the Trello App. Next, you authorize your Trello account to connect and interact with the app. To authorize your Trello account, Go to the trello.bot chat. Run the slash command /trello authorize. Click the Authenticate button. All users must authorize their Trello account before using Trello in the workspace. Click Allow in the prompt to grant all the permissions needed to run the Trello App integration smoothly. If authentication is successful, you get a confirmation message from the trello.bot. Now, your Trello app is ready to use.", "tokens": 399}
{"title": "Using the Trello App", "content": "To get help with Trello in your workspace, Run the slash command /trello help After configuring the Trello app, link your Trello boards for monitoring in any Rocket.Chat channel of your choice. You can only link Trello boards to channels. Other rooms are not supported. To link your Trello board to a channel, Navigate to the channel where you want to receive your Trello board notifications. Run the slash command /trello link to link a Trello board. A list of Trello boards linked to your account is displayed. Select a board and click Link to connect that board to the channel. After linking, you receive notifications in the channel for any activity on that Trello board. To view the card on your Trello board, click the Go to card button on the notification message.", "tokens": 172}
{"title": "Zapier App", "content": "The Rocket.Chat Zapier app provides integration between Rocket.Chat and Zapier, a popular automation tool that allows users to automate tasks and workflows by creating triggers and actions. The Zapier app makes it possible for Rocket .Chat and many other external services and tools to be connected thus providing several benefits: Automating tasks: The app allows users to automate tasks and workflows by creating triggers and actions, reducing the need for manual intervention and increasing efficiency . Integration with other applications: Integrates with other applications and services, such as project management tools, social media platforms, email services, etc . Streamlining workflows: The app streamlines workflows by providing a simple and intuitive interface for creating triggers and actions, making it easy to customize the app to meet specific needs and requirements . Improved productivity and real-time communication: Reduces the time and effort required to perform routine tasks and provides notifications and alerts when specific events occur. allowing teams to respond quickly to changing circumstances . See the guide below on installing the Zapier app on your workspace as an Administrator. Install Zapier App Rocket.Chat Zapier actions and triggers are events that are triggered from and within Rocket.Chat when an action occurs", "tokens": 258}
{"title": "Zapier App", "content": ". Below is a list of available triggers and actions. Trigger Description New channel Triggers when a new Channel is created. New message posted anywhere Triggers when a new message is posted to any public Channel . New message posted on public channel Triggers when a message is posted to a specific public Channel. New message posted on private channel Triggers when a message is posted to a specific private Channel . Message pinned anywhere Triggers when a message is pinned in any public room. New private channel Triggers when a new private Channel is created. Starred message anywhere Triggers when a message is starred in any public room . New user Triggers when a new user is created. Mentioned on public channel Triggers when a user is mentioned on a public channel. Action Description Create channel Creates a new Channel . Invite user to channel Invites an existing user to an existing public channel. You must be a member of the channel in order to invite someone. Create private channel Creates a new private channel. Send channel message Post a new message in a channel . Send direct message Sends a direct message to a user. Send private channel message Sends a message to a specific private channel. Add reminder Adds a new reminder. Set status Sets user status. Find channel Searches for a channel . It creates a new channel if none is found. Find private channel Searches the workspace for a private channel. Creates a private channel if none is found. Find user by username Finds a user by their username . See how to use the Zapier app and some common examples below. Using Zapier App", "tokens": 309}
{"title": "Install Zapier App", "content": "You are required to have your workspace on a secured publicly available domain. To install the Zapier Rocket.Chat app, Go to Administration > Marketplace Search for the Zapier app and click on the item Click Install and accept the needed permissions to install After installing, you receive a message from zapier.bot. Then, proceed to Using Zapier App to begin using the integration.", "tokens": 84}
{"title": "Using Zapier App", "content": "With the Zapier app installed on your workspace by the workspace administrator, you can start using the integration by simply going to the Zapier platform and creating Zaps with the Rocket.Chat app. To verify the installation of the app, navigate to Administrator > Apps > Installed The Rocket.Chat app on the Zapier platform can function both as a trigger and an action in creating your Zap. For a comprehensive list of available actions and triggers, refer to this list Rocket.Chat Zapier actions and triggers. To illustrate the integration's functionality, we have provided some example Zaps: Using Rocket.Chat trigger to Rocket.Chat Action Rocket.Chat trigger to External Action External trigger to Rocket.Chat Action This example makes use of the Rocket.Chat New channel trigger and the Send direct message action. This sends a direct message to a user when a new channel is created. Zapier Send a direct message when a new channel is created This example makes use of the Rocket.Chat New message posted on public channel trigger and the Google Sheets Create Spreadsheet Row in Google Sheets action. This creates a Google Sheet row to an existing sheet when a message is posted in any public Rocket.Chat channel. Zapier Create Google Sheet row when a message is posted in a public channel This example makes use of the New Message Posted to Channel in Slack trigger and the Send private channel message Rocket.Chat action. This forwards any message sent in a Slack channel to a private channel in Rocket.Chat. Zapier forward Slack Messages to Rocket.Chat channel", "tokens": 320}
{"title": "Zoom", "content": "Zoom integration with Rocket.Chat allows users to create and join virtual meetings with audio and video capabilities, facilitating \"face-to-face\" collaboration when in-person meetings are impossible . This integration enhances user engagement and streamlines communication, enabling more efficient and rapid collaboration within Rocket.Chat. The Zoom app integration in Rocket.Chat enables users to manage meetings\u2014including initiation, scheduling, joining, recording, and sharing\u2014directly within a channel . It also allows for participant and duration tracking, automated or custom reminders for upcoming meetings, and seamless recognition of Zoom URLs pasted into channels, eliminating the need to switch between applications. The new Zoom app version 2.3 .0 now supports multi-meeting capabilities and can be set as the default video-conferencing provider. Ensure you are using Rocket.Chat v6.3.0 or higher to utilize these features. Integrate Zoom with Rocket .Chat to: Initiate Zoom calls within channels, rooms, discussions, or direct messages. Join Zoom meetings directly through Rocket.Chat. Use /zoom slash commands to create new meeting rooms. Paste Zoom URLs in channels for direct rendering in the Zoom interface . Prerequisites for integration For multiple users to create Zoom meetings in the workspace, a paid Zoom account is required. Users must have same email accounts on both Rocket.Chat and Zoom to enable meeting creation . Users must be in the same organization on Zoom to enable meeting creation. Here is the official guide that teaches you how to add users to your Zoom account. A Server-to-Server OAuth app must be created on the Zoom marketplace prior to integration . To create a new Server-to-Server OAuth app from the Zoom marketplace, follow the instructions mentioned below: Sign in to Zoom Marketplace. From the top navigation bar, select Develop > Build App . From the available list of app types, choose Server-to-Server OAuth and click Create. Enter a name for the app and click Create. From the App Credentials section, copy the app's Account ID, Client ID, and Client Secret . Click continue to proceed to the Information section. Provide the basic information of your app, such as the name, description, and company name. This will show on the app listing card. Update your developer's contact information and continue to Feature", "tokens": 478}
{"title": "Zoom", "content": ". Define the features of your app. Then, head to the Scopes section. Click on Add Scopes button and search for this scope: View and manage all user meetings . In the provided view, select the option that shows meeting:write:meeting:admin with the label \u201ccreate a meeting for a user.\u201d After adding this scope, continue to the last step for Activation. Your app will now be ready for activation . Once activated, your app can invoke the selected Zoom APIs. Now that you've created the server-to-server OAuth app at Zoom marketplace, visit the Rocket.Chat marketplace in your workspace to install the Zoom app . To install the Zoom app, Go to Administration > Marketplace. Search for the Zoom app and click on the item. Click Install and accept the needed permissions to install. To update the app, Go to Administration > Marketplace . Search for the Zoom app and click on the item. You will find the Update button right below the app name and description. Click on the Update button to update to the latest version of the Zoom app . To configure the Zoom app, Navigate to the Zoom App Info screen > Settings tab. Paste the Account ID, Client ID, and Client Secret of the server-to-server OAuth app you created at Zoom marketplace. Click Save Changes . Now that you've installed and configured the Zoom app, the next section will guide you through Using the Zoom App.", "tokens": 305}
{"title": "Using the Zoom App", "content": "To use the Zoom app in a room, Run the slash command /zoom start to generate a new Zoom meeting link. It generates a Zoom meeting link, and anyone in that room can click the link to join the meeting. You can also run /zoom start <topic> to add a title to the meeting. For example, /zoom start Designers Daily Standup. No one can join the call until the host signs in and admits others.", "tokens": 91}
{"title": "App Storage Location", "content": "Rocket.Chat's version 4 introduced npm packages as dependencies of apps. Since npm dependencies could account for a hefty portion of an app package's final size, we have a more flexible storage solution for your apps' packages. To access the configuration, go to Administration > Workspace > Settings > General > Apps. The settings are as follows: Number of days to keep logs from apps stored: Select the number of days that you want to store the app logs. The options are 7 days, 14 days, and 30 days. Note that depending on the size of the logs collection, changing this setting may cause slowness for some moments. Apps' Source Package Storage type: Currently, we have two storage methods, GridFS at MongoDB (the default option) and Filesystem at the host's box. GridFS: When using GridFS (default), your app package is stored in the database as a file, and you don't have to manage configuration to make it work. Filesystem: When setting the storage to the filesystem, you have full control of the package's storage location and access control. There are a few requirements to make it work. You must provide the absolute path of the directory where the packages will be stored in the configuration. The Rocket.Chat server must have read and write permissions to the path so it can manage the packages. Directory for storing apps source package: If you select Filesystem as the app source storage type, enter the absolute path in the filesystem for storing the apps' source code (in .zip file format). It is not recommended to change storage configuration when apps are installed. Currently, there is no migration mechanism to move packages between different storage methods. Doing so will result in apps not working properly.", "tokens": 373}
{"title": "Translation Contribution Guidelines", "content": "We appreciate your interest in contributing to the translation of Rocket.Chat. Our aim is to make Rocket.Chat accessible to users worldwide, and your help in this endeavor is invaluable. Rocket.Chat utilizes Lingohub, a leading platform for collaborative translation projects. Currently, we have translations in over 80 languages, a testament to the global reach and diversity of our user base. If you're interested in joining this global effort, here's how you can contribute: Express your interest: Send an email to translations@rocket.chat indicating your desire to contribute to the translation project. Please include the language(s) you are proficient in and any previous experience you have with translation work. Join the project: Once we receive your email, we will send you an invitation to join the translation project on Lingohub. This platform allows for collaborative work, ensuring that translations are accurate and contextually appropriate. Start translating: After joining the project, you can start translating. Whether you're helping to translate a new language or improving existing translations, your contribution will make a significant impact. By contributing to the translation of Rocket.Chat, you're not just translating words; you're helping to break down language barriers and making this platform more accessible to users around the world. Thank you for your interest, and we look forward to your contribution. For more information about our language tiers, we encourage you to visit our Localization FAQ.", "tokens": 295}
{"title": "Promote Rocket.Chat", "content": "If you are not a developer (or even if you are), you can still contribute to the project a lot by helping us promote it. As we are a free, open-source project, the community is our most important asset, so here are some ways that you can help the project continue to grow. Please use this as a to-do list, as they are important: Follow us: Please follow us on as many social networks as you can. Facebook Twitter Google+ CrunchBase Wellfound LinkedIn Vote, recommend, favorite, and star us: And vote for us on all these various polls and contests. GitHub ProductHunt Slant StackShare Reddit StackExchange DockerHub AlternativeTo Blog about us: Here are some nice blog posts about our project for you to get some inspiration. http://www.thehacktoday.com/how-to-install-rocket-chat-make-your-own-chatting-website https://sameroom.io/blog/self-hosted-team-chat-options-and-alternatives https://obviate.io/2015/09/26/why-slack-when-you-can-rocket-chat/ https://www.rosehosting.com/blog/install-rocketchat-on-an-ubuntu-14-04-vps/ https://thishosting.rocks/how-to-install-rocket-chat-on-ubuntu-and-use-it-on-your-wordpress/ https://linuxstans.com/install-configure-rocket-chat-centos-8/ Presentations: http://slides.com/gabrielengel/meteordevshop#/", "tokens": 379}
{"title": "Contribute to Rocket.Chat FAQs", "content": "I am just getting started with my open source journey. Should I try contributing to Rocket.Chat? Where should I get started from for contributing to Rocket.Chat? I am stuck with the codebase. Where should I get help from? I am not sure whether I am writing the code in the expected style. What should I do?", "tokens": 70}
{"title": "Rocket.Chat Apps-Engine", "content": "The Rocket.Chat Apps-Engine is a solution designed to streamline app development and enhance delivery speed. This platform empowers developers to create and operate applications within Rocket.Chat's infrastructure, leveraging pre-built components for ease and efficiency. It offers a comprehensive framework, enabling the development of secure, scalable apps that seamlessly integrate with Rocket.Chat functionalities. Security compliance: Rocket.Chat ensures the highest standards of data privacy, security, and ownership for the apps developed on its platform. Robust server support: Utilizing the same infrastructure as Rocket.Chat, the Apps-Engine ensures effective traffic management and access to the latest features and updates. Apps run in a JavaScript runtime environment, ensuring compatibility and performance. Reduced launch time: The platform simplifies the development process by providing pre-built components to create various app features. This guide provides a comprehensive overview of creating Rocket.Chat apps using the Apps-Engine. It covers the basics of app creation, extending functionalities with slash commands, HTTP requests, event handlers, and interactive UI elements. Additionally, it delves into app configuration, data persistence, and other advanced features. Developers also have the opportunity to submit their apps to the Rocket.Chat Marketplace for public use or keep them private for their workspace. The Rocket.Chat Marketplace serves as a hub for users to integrate various apps into their workspace, offering a platform for both publishing and installing developed apps. For more information on installing and enabling apps in your workspace, refer to the Rocket.Chat Marketplace resources. Rocket.Chat Marketplace Docs", "tokens": 322}
{"title": "Getting Started with Apps-Engine", "content": "Throughout the entire process, an active internet connection is required. Before beginning, the following must be installed on your machine: Git Node.js (version 12 and above) Rocket.Chat Apps-Engine CLI A code editor . We recommend Visual Studio Code (VSCode). A local development instance of Rocket.Chat must be running on your system. To develop a Rocket.Chat App, you must write TypeScript code . Although the Apps-Engine CLI manages the majority of definitions, you must grasp where the code guides you to comprehend how your application interacts with the Rocket.Chat server and external APIs. To test your applications, you will need an active server . Ideally, this would be a test environment so as not to impact the production environment. The following components are related to the Rocket .Chat server and there is no action required from your end: Server management and package manager: To develop a full-stack JavaScript application, a server-side JavaScript runtime, and a package manager are required. Node .js can be used as the server environment, as it can serve files and connect to the database using JavaScript. For the package manager, we recommend using Yarn due to its faster library installation, better security features, and reliability in managing dependencies . Database: You need a database to store your application data. The Rocket.Chat server uses MongoDB as a database to store all chat messages, user information, and other system configurations and related data. Node .js is a cross-platform, open-source JavaScript runtime environment extensively used to develop server-side and networking applications. Node.js is designed on top of Chrome's V8 engine, allowing developers to run Javascript programs exceptionally quickly by compiling them directly to machine code . The virtual machine (VM) module is a fundamental feature of Node.js that allows developers to execute programs in a VM context. The VM module provides access to APIs for compiling and executing code within the context of a V8 VM. The Rocket .Chat Apps-Engine is built on top of the Node.js VM module; therefore, most of the environment configuration will involve launching the VM module within your Rocket.Chat workspace", "tokens": 460}
{"title": "Getting Started with Apps-Engine", "content": ". About context With the help of the VM module, a context is an alternative environment that is created. This environment consists solely of key-value pairings, each of which runs directly on top of the V8 engine. The aim of using the Node .js VM module was to isolate each app on its own scope, preventing them from interacting directly with the host Rocket.Chat server or other apps, so they couldn't inject data and disrupt the system or expose data from other sources . In addition, it is also to avoid the complication of spawning, controlling, and managing the communication of external processes to execute these logics. Note: The app doesn't have direct access to the VM's APIs. This information is for your understanding .", "tokens": 161}
{"title": "Apps-Engine CLI", "content": "The Rocket.Chat Apps-Engine CLI is a command-line interface with which you can develop Rocket.Chat applications. Using the Apps-Engine CLI, you can create new applications, deploy them on your deployment environment, and package your application for shipping and future deployment on other installations. It also provides a set of commands to compile and deploy a basic app structure to your Rocket.Chat Server, generate boilerplate code for various functions, display autocomplete installation instructions, submit an app for review in the marketplace, and more. The CLI is hosted on GitHub and distributed via NPM. It provides an easy interface for developing extensions. Before installing the CLI, you must ensure that Node.js is installed\u00a0on your system. Use the following command in your terminal to verify the installation of Node.js. This returns a valid version of Node.js, for example, v10.15.3: After installing Node.js, run the following command in your terminal to deploy the CLI globally. Troubleshooting tip Error: While attempting to execute the preceding command, if your operating system rejects the operation, it is likely that you do not have permission to access the file as the current user. If you suspect a permissions issue, please double-check your NPM installation, or rerun the command as root/administrator. Resolution: Prefix the command with sudo and execute as follows: sudo npm install -g @rocket.chat/apps-cli After executing this command, enter the system user's password. This will grant the application all necessary permissions, as this command must be executed as an administrator. After installation, run the following command to verify the installation. Note that the response may differ depending on your system and environment, but it should have a similar appearance. For example, @rocket.chat/apps-cli/1.4.0 darwin-x64 node-v10.15.3 You are now all set to develop your first Rocket.Chat app. To do that, run the command below: This command will guide you through a brief setup process by asking for details about your app. On providing this information, a basic Rocket.Chat app structure will be created in the current working directory. For more information on customization and packaging options, visit the official Rocket.Chat Apps-Engine GitHub repository.", "tokens": 493}
{"title": "Create an App", "content": "In this document, you will learn about the Apps-Engine commands and create a basic app. rc-apps is a command-line interface (CLI) utility that provides commands to rapidly develop a Rocket.Chat application . Initiate rc-apps in your terminal to view the list of commands that you can execute as needed. Here is a list of commands that Rocket.Chat Apps-Engine supports: Command Description Example autocomplete Displays installation instructions . Note: This command is not supported on Windows. rc-apps autocomplete create Simplifies the process of creating an app. rc-apps create deploy Deploys an app to the server . rc-apps deploy --url <server_url> -u <user> -p <pwd> generate Creates boilerplate code files in the current directory for the following: API extension: Enter the name and path of the endpoint. The .ts file is created in a new endpoints folder. Slash command extension: Enter the name of the command class that you want to create. The .ts file is created in a new slashCommands folder. Settings extension: A settings.ts file is created . rc-apps generate help Displays the CLI tool for helping with Rocket.Chat Apps. rc-apps help login Provides the steps for logging into Rocket.Chat Cloud. rc-apps login logout Revokes the Rocket.Chat Cloud credentials . rc-apps logout package Packages the app for distribution. rc-apps package submit Submits an app to the marketplace for review. rc-apps submit watch Monitors app changes and redeploys the modified app to the server . rc-apps watch Now that you've understood the basic concepts of the Apps-Engine and installed the CLI, let's build our initial app Hello World. Make sure that you have the setup environment ready . To create a new app, in the command line, execute rc-apps create . Enter the following app details: App Name: Hello World App Description: A basic app that prints Hello World! Author\u2019s Name: John Author\u2019s Home Page: rocketchat.com Author\u2019s Support Page: support.rocketchat", "tokens": 452}
{"title": "Create an App", "content": ".com A folder with the app name is created in the current working directory (in this case, hello-world). The hello-world folder contains a simple app that will only compile and be packaged in the dist folder . Troubleshooting tip If you receive the error message 'TypeError: Cannot read properties of undefined [reading 'message']', do not be alarmed . You can disregard this and use the cd <folder-name> command to determine if a folder for your application was created. Launch Visual Studio and select Open Folder from the sidebar on the left. Select the app folder that was created in the previous step . Once the folder has been uploaded, its contents will be displayed in the sidebar. The app manifest file app.json contains basic details about the app: A Rocket .Chat app is a TypeScript project that contains a main file with a class extending the main App class from the Apps-Engine. The identity of this file can be found in the classFile property of your app.json file . For this example, locate and open the HelloWorldApp.ts TypeScript file. The following code snippet shows the class in the HelloWorldApp.ts file: Observe that the class name and filename are identical. This is intentional . You can either use the same name for the class and the file for the application to compile successfully, or export the primary app class by default as shown below: For a functioning app, you must define a constructor to access a large number of parent properties", "tokens": 329}
{"title": "Create an App", "content": ". The constructor accepts three arguments: An IAppInfo object: This object contains fundamental information about your application, such as its name, version, description, etc. It is private to the App class, but its properties are accessible through multiple GET methods . An ILogger object: This object is the interface for logging. The getLogger() method allows access to this object from within a child class. An IAppAccessors object: This object contains all app accessors . This can be accessed via the getAccessors() method in the child class. Learn more about the module details from the Rocket.Chat Apps Typescript definition. For this example, the app records \"Hello, World!\" in the Rocket.Chat administration interface . To log data, you must first have access to the logger, that is, an object of type ILogger. The parent class logs data to the administration interface using an ILogger object. We only require access to this object . Since the logger object is private to the App class, the this keyword cannot be used to access it directly. To resolve this, use the getLogger method provided by the App class . You need to store the logger as a separate object that can be reused whenever necessary. Modify the class in the HelloWorldApp.ts file as follows: We have just stored the accessor for the log file in the appLogger variable", "tokens": 297}
{"title": "Create an App", "content": ". Now, we can record anything with it. Add the line shown below to the constructor and save the file. In the command line, go to the hello-world app folder that was created in Step 1: Execute the create command . To deploy the app, run: Replace <server_url> with the URL of your Rocket.Chat workspace. Replace <user> and <pwd> with your username and password, respectively . After executing this command, your application will be deployed to the server. To explore alternative authentication options for deploying your app, such as using 2FA codes or personal access tokens, run the \u00a0rc-apps deploy --help \u00a0command . Packaging your app Alternatively, you can execute the rc-apps package command. This gives you a compressed zip file of your app that you can upload as a private app to your Rocket.Chat server. To test your app, you need a Rocket .Chat server running locally on your machine and the credentials of an administrator user. In older versions of Rocket.Chat, you might need to enable apps development mode for manual installations to be allowed. To enable apps development mode: Go to Administration > General > Apps . Click True next to Enable development mode. To run Rocket.Chat in develop mode, see the development environment setup guide. In this example, the function of the application is to log Hello, World! to the console . To test the app's functionality, we must examine the app logs. Follow these steps to examine the logs: Login to your Rocket.Chat workspace as an admin. Navigate to the Administration Panel. Under Apps, select Marketplace . Select Private Apps from the left-hand menu. You should see the Hello World app. Click on the three dots icon on the right-hand side of the app. From the menu, click on View Logs . The App Info page opens on the Logs tab. Scroll down until you see the \"constructor\" expandable section. Select it and you can see the message \"Hello, World!\" logged in the console . Congratulations, you just created your first app \u2014 a simple Hello World app! To learn how to add more functionalities to your app, proceed to the next topic. Failed to resolve module error while deploying the app.", "tokens": 469}
{"title": "Extend App Capabilities", "content": "After learning how to create and deploy a basic app, you can now extend the app to add more features such as slash commands, HTTP requests, handling events, and UI interactions supported by the Apps-Engine to expand the functionality of your app to meet business requirements. The IConfigurationExtend accessor contains methods to declare your app's configuration. It is created during app initialization. Using this, you can add new features to your app. Here is a list of accessors that Apps-Engine supports: Accessor Description api Declare API endpoints. http Configure how your app handles HTTP requests and responses. scheduler Designate tasks that can be scheduled. settings Declare the configurations of your app. slashCommands Declare the commands that your app offers. ui Register various host UI elements. videoConfProviders Declare the video conferencing providers that your app offers. In the following sections, we will learn how to implement these accessors in our apps.", "tokens": 204}
{"title": "Slash Command Examples", "content": "In this section, we'll look at two slash command examples: Update user status value and text. Extend messages to include an image attachment and custom field . To update the user status, we will create a new slash command that takes two parameters: The first parameter is the status value - online, away, busy, etc. The second contains the status text . We will refer to the status slash command as st to execute code such as: To implement this, follow these steps: Create a new class named StatusUpdateCmd.ts and place it in the same subdirectory commands that we created in the previous section . Now, add the following code for the status update: Here, we are implementing the following: Fetch the status value from the first argument. This argument is mandatory otherwise, the notifyMessage method informs the user that the argument is missing . Fetch the status message from the second argument, joining the terms with a white space. If the second argument is not passed, the status message remains an empty string. Update the status according to the value passed using modify . Notify the user about the status update. In the app's main class, register the new slash command as follows: You can only have one extendConfiguration method in your app's main class . Therefore, make sure to add all your slash commands to this method . Make sure to import the slash command class in the main class: All that remains is deployment and testing! In the command line, go to the app folder and run: The <server_url> parameter is the URL of your Rocket.Chat server . Replace the placeholders with the URL, username, and password for your server, respectively. After executing this command, your application will be deployed to the server. Packaging your app Alternatively, you can execute the rc-apps package command . This gives you a compressed zip file of your app that you can upload as a private app to your Rocket.Chat server. Send /st <status> <message> to any channel. You can see the change in the user status accordingly", "tokens": 434}
{"title": "Slash Command Examples", "content": ". If we execute /st with no input, we receive the notification: This example explains how to modify messages to include custom fields and attachments . We will construct an app that is invoked via a slash command, sends a message, and is extended to include an image and a custom field. Rocket.Chat supports numerous attachments (and applicable customizations for these attachments) . For instance, you can attach images, documents, videos, and audio files to messages. The first step in doing so is to create your own attachment class . In this approach, we will implement the ImageAttachment class in the project's root as follows: Here, we use a class attribute with the same identifier and type as in the IMessageAttachment interface, which is required for your linked media to be visible to the user . This is because only the variables in your attachment class defined in the IMessageAttachment interface will be used to retrieve the attachment's media . You can also construct your own classes for video or audio attachments, or you can group them all into a single class that can accommodate all of these possibilities. Make sure to use the same attributes described in the IMessageAttachment.d.ts file . The audio and video formats that are supported in the Rocket.Chat message attachments are identical to HTML audio and video elements. To implement this, follow these steps: Create a new class named ExtendMessageCommand .ts and place it in the same subdirectory commands that we created in the previous section", "tokens": 326}
{"title": "Slash Command Examples", "content": ". Now, add the following code: The main actions performed by the code above are: [1] Sends a message and stores the sent message's ID in the messageId variable. [2] Uses the sent message's ID . The messageExtender object is returned by the getMessageExtender method and stored in the messageExtender variable. [3] Creates the attachment object as an instance of the ImageAttachment class. Here, the attachment is an image . [4] Adds a custom field with the key 'key' linked to the value using the addCustomField method from the messageExtender object . Many more custom fields can be added to the same message by calling the same method with distinct keys (and values of your choice). [5] Adds the image attachment to the message using the addAttachment method from the messageExtender object . Many attachments can be added all at once using the addAttachments method. [6] Finishes the modifyExtender object, which is crucial to apply the extensions made to the message and make them visible to the user . Custom fields are structures linked to messages in which each field is organized as if it were an entry in a dictionary. That is, each field must contain a key and corresponding value . These elements are retained in the server's database along with the corresponding messages so that they can be retrieved later. It is beneficial to define a few additional methods within our slash command class so that our code remains concise and straightforward . Method: sendMessage The sendMessage method needs to return the message's ID after it has been sent. The method must now return a Promise<string> as opposed to a Promise<void> . The modified sendMessage method is shown below: Method: getMessageExtender After obtaining the message's ID, we can get the messageExtender object, which enables the addition of custom fields and attachments . To obtain the messageExtender object, use the following asynchronous method in the slash command class: Here, we use the message's ID returned by the sendMessage method to obtain the messageExtender object using the modifyExtender object", "tokens": 469}
{"title": "Slash Command Examples", "content": ". After creating the methods, you only need to invoke them with a slash command. We must register the slash command in the app's main class, the project's root . Here, we import our new slash command class and register it in the app's configuration. To deploy the app, follow the deployment steps highlighted in the previous example . After the app has been deployed, execute the slash command /extend-message in any channel. When you execute the registered slash command, a message is sent to the current channel and altered to include an image attachment and a custom field . The attached image is visible in the message after editing. In addition, the created custom fields are accessible from any database client of your choosing.", "tokens": 152}
{"title": "Event Interfaces and Handlers", "content": "An app can listen to certain events and react according to your requirements. You can implement an event interface to listen to an event and handle its payload. The Rocket.Chat Apps-Engine provides various event interfaces . Typically, each interface contains methods that will be called before or after a Rocket.Chat event. Here we will learn some concepts about event interfaces and handlers in Rocket.Chat. Event interfaces are the mechanism by which apps can connect to the events on Rocket.Chat . For instance, when a message is sent, when a room or channel is created, or when a file is uploaded, the app can take some actions . For each of these events, there are respective interfaces that the app needs to use to connect to the events properly. Let's consider an example, an app implements the post-room creation interface with the PostRoomCreate method . This tells Apps-Engine that the app wants to connect to that event. Whenever a room is created, Apps-Engine executes this method in the app . You need to define the parameters for the method and the actions that you want the app to perform. Typically, there are two fundamental methods for each interface: A method to check: This signals the Apps-Engine whether the event handler should be executed . A method to execute the defined actions: This is the event handler. We will deprecate check* methods and won't add check* methods to event interfaces anymore. Please avoid using them as much as possible . For interfaces: \u2018 I\u2019 is prefixed to the event name. For the two interface methods: \u2018check\u2019 is prefixed for the method that\u2019s called for checking whether or not the event has occurred . \u2018execute\u2019 is prefixed for the method that\u2019s called for defining the actions that need to be performed by the app at the occurrence of the event . For example, for the event PreRoomCreatePrevent, the corresponding nomenclature looks like this: Interface: IPreRoomCreatePrevent Check method: checkPreRoomCreatePrevent Execute method: executePreRoomCreatePrevent This is the basic structure followed for most of the event interfaces supported by Rocket", "tokens": 443}
{"title": "Event Interfaces and Handlers", "content": ".Chat. There are various ways to handle an event. When an event occurs, there are pre-handlers and post-handlers. The set of pre-handlers is executed before the event is completed . The set of post-handlers is executed when the event is completed. We recommend using pre-handlers to modify, extend, or change the data used for the event . If you want to listen for an event and not modify anything, use the post-handlers. Here is an explanation of the handlers: Prevent: Determines whether the event should be prevented or not . Extend: Allows extending the data without being destructive of the data (adding an attachment to a message for example). Modify: Allows for destructive changes to the data (change any data) . IPreEvent: Handlers that are called before an event happens. IPostEvent: Handlers that are called after an event happens. In the main class of your app, the class name extends App . This tells the Apps-Engine that App is the main class. To use events, the app must implement the event interfaces and this is done by using the keyword implements and the name of the events, comma separated . In the following sections, you will find the event interfaces supported by Rocket.Chat. The event interfaces are grouped based on the events such as \u2014 email, livechat, messages, rooms, users, and so on . You will also find examples of how these interfaces can be implemented. You can find the supported interfaces and the methods on the TypeScript definition page.", "tokens": 329}
{"title": "Email - Event InterfacesLivechat - Event Interfaces", "content": "The table below contains the email-related events, as well as the purpose of each event. If you want to execute actions based on email events, you can use any of the events mentioned below as an event interface. Interface Description IPreEmailSent The event interface allows apps to register as a handler of the IPreEmailSent event. This event is triggered before the mailer sends an email. To prevent the email from being sent, you can throw an error with a message specifying the reason for rejection. The table below contains the livechat-related events, as well as the purpose of each event. If you want to execute actions based on livechat events, you can use any of the following events and methods: Interface Description IPostLivechatAgentAssigned The handler called after the assignment of a livechat agent. IPostLivechatAgentUnassigned The handler called after the livechat agent is unassigned. IPostLivechatGuestSaved The handler called after the guest's information is saved. IPostLivechatRoomClosed The handler called after a livechat room is closed. IPostLivechatRoomSaved The handler called after the room information is saved. IPostLivechatRoomStarted The handler called after a livechat room starts. IPostLivechatRoomTransferred The handler called after a livechat room is transferred. You can find additional interfaces and details on the Apps TypeScript definition page.", "tokens": 321}
{"title": "Message - Event Interfaces", "content": "The table below contains the message-related events, as well as the purpose of each event. If you want to execute actions based on message events, you can use any of the events mentioned below as an event interface. Interface Description IPostMessageDeleted The handler after a message is deleted. IPostMessageFollowed The handler after a message has been followed or unfollowed. IPostMessagePinned The handler after a message is pinned or unpinned. IPostMessageReacted The handler after a message gets a reaction or a reaction is removed. IPostMessageReported The handler after a message is reported. IPostMessageSent The handler after a message is sent. IPostMessageSentToBot The handler after a DM is sent to a bot. IPostMessageStarred The handler after a message has been starred or unstarred. IPostMessageUpdated The handler after a message is updated. IPreMessageDeletePrevent The handler used to determine whether a user is allowed to delete a message or not. IPreMessageSentExtend The handler called when an app wants to extend a message. IPreMessageSentModify The handler called when an app wants to modify a message. IPreMessageSentPrevent The handler which is called to determine whether a user is allowed to send a message or not. IPreMessageUpdatedExtend The handler called when an app wants to extend a message update. IPreMessageUpdatedModify \u200b\u200bThe handler called when an app wants to modify a message update. IPreMessageUpdatedPrevent The handler which is called to determine whether a user is allowed to update a message or not.", "tokens": 373}
{"title": "Room - Event Interfaces", "content": "The table below contains the room-related events, as well as the purpose of each event. If you want to execute actions based on room events, you can use any of the events mentioned below as an event interface. Interface Description IPostRoomCreate Handler after a room is created. IPostRoomDeleted Handler after a room is deleted. IPostRoomUserJoined Event interface that allows an app to register as a handler of the IPostRoomUserJoined event. This event is triggered after a user successfully joins a room. This event does not allow an app to prevent any action from happening. For that, see the IPreRoomUserJoined interface. IPostRoomUserLeave Event interface that allows an app to register as a handler of the IPostRoomUserLeave event. This event is triggered after a user successfully leaves a room. This event does not allow an app to prevent any action from happening. For that, see the IPreRoomUserLeave interface. IPreRoomCreateExtend Handler called when an app wants to extend a room. IPreRoomCreateModify \u200b\u200bHandler called when an app wants to modify a room. IPreRoomCreatePrevent Handler called when an app wants to prevent the creation of a room. IPreRoomDeletePrevent Handler called when an app wants to prevent the deletion of a room. IPreRoomUserJoined Event interface that allows an app to register as a handler of the IPreRoomUserJoined event. This event is triggered prior to a user successfully joining a room. To prevent the user from executing such an action, an app should throw the UserNotAllowedException. This event is not triggered before a room has been created. For that, check the IPreRoomCreate event. IPreRoomUserLeave Event interface that allows an app to register as a handler of the IPreRoomUserLeave event. This event is triggered prior to a user successfully leaving a room. To prevent the user from executing such an action, an app should throw the UserNotAllowedException. This event is not triggered before a room has been created. For that, check the IPreRoomCreate event. Check out the examples for some of the event interfaces here.", "tokens": 471}
{"title": "Settings - Event InterfacesUploads - Event Interfaces", "content": "The table below contains the settings-related events, as well as the purpose of each event. If you want to execute actions based on settings events, you can use any of the events mentioned below as an event interface. Interface Description ISetting Interface that represents a setting and fetches details of the setting such as ID, type, value, and so on. ISettingUpdateContext The context of execution for the event - ISettingUpdate. SettingType Interface that represents the setting type and fetches details of the type of setting configured for the app. The table below contains the upload-related events, as well as the purpose of each event. If you want to execute actions based on upload events, you can use any of the events mentioned below as an event interface. Interface Description IPreFileUpload Event interface that allows an app to register as a handler of the IPreFileUpload event. This event is triggered prior to an upload successfully being saved to the database, but only after all its contents have been retrieved by Rocket.Chat. To prevent the upload from completing, an app should throw a FileUploadNotAllowedException with a message specifying the reason for rejection.", "tokens": 256}
{"title": "Users - Event Interfaces", "content": "The table below contains the user-related events, as well as the purpose of each event. If you want to execute actions based on user events, you can use any of the events mentioned below as an event interface. Interface Description IPostUserCreated Event interface that allows an app to register as a handler of the IPostUserCreated event. This event is triggered after the user is saved to the database. IPostUserDeleted Event interface that allows an app to register as a handler of the IPostUserDeleted event. This event is triggered after the user has been removed from the database. IPostUserLoggedIn Event interface that allows an app to register as a handler of the IPostUserLoggedIn event. This event is triggered after the user logs into Rocket.Chat. IPostUserLoggedOut Event interface that allows an app to register as a handler of the IPostUserLoggedOut event. This event is triggered after the user logs out from Rocket.Chat. IPostUserStatusChanged Event interface that allows an app to register as a handler of the IPostUserStatusChanged event. This event is triggered after the user changes his status on Rocket.Chat to online, away, busy, or offline. It is not triggered when the custom status is changed. IPostUserUpdated Event interface that allows an app to register as a handler of the IPostUserUpdated event. This event is triggered after the user is saved to the database.", "tokens": 313}
{"title": "Event Interface Examples", "content": "Now that we have learned about the event interfaces, let's go through some examples to implement them . On this page, we will follow three examples: Messaging governance Notify messages Content inspection In this example, we will use the IPreMessageSentPrevent interface to control whether a particular message should be sent to a channel . We are using our Hello World app to test this. Open your app folder in Visual Studio and select the main app file, in this case, HelloWorldApp.ts . To the HelloWorldApp class, add the IPreMessageSentPrevent interface as follows: As soon as we add the indication of implements IPreMessageSentPrevent we see that Visual Studio displays an error that it cannot find the interface and shows the option to quickly fix it in a tooltip . Click it to display different import options that would fix the issue. Import the following interface: Now Visual Studio will display an error that a certain method part of the interface has its implementation missing with the option to fix it quickly. Accept the suggested fix . Visual Studio adds two methods of the interface that are not implemented. The methods will throw an error when executed", "tokens": 242}
{"title": "Event Interface Examples", "content": ". But now, we have a skeleton code to work with: With the checkPreMessageSentPrevent method, we will only check the messages from channels other than general . Visual Studio helps you navigate through the APIs of the classes of the objects by suggesting the available methods. For this example, you can see that the method variable message has a room attribute which has a slugifiedName string attribute . Update the method as follows: Now Visual Studio displays an error that the method signature is not compatible with returning a Promise<boolean>. To fix this issue, add async to the method signature. Next, implement the executePreMessageSentPrevent method . If the message equals \"test\", we prevent it from being published. Your main app file should look something like this: Save the file and deploy your app . If we send the test message in a channel other than general, it should not be published (it will appear grayed out). If the message is something different it will get sent . As for the room general, all messages will be sent, including test as shown in the following screenshots: In this example, we will notify the general channel whenever a message is sent anywhere else. Here we will implement the IPostMessageSent interface . Like the previous example, in the main app file (in this case, HelloWorldApp.ts), we will add the check and execute methods from the IPostMessageSent interface as shown in the code below . The check method confirms that the general channel exists and fetches it. In the execute method, for the general channel, we create a message containing information about the message published, the room, and the sender by getting the values from sendMessage . The messageBuilder allows us to define richly formatted messages. Now save, deploy, and test the app. You should be able to see the warning messages posted to the general channel when writing to any other channel", "tokens": 409}
{"title": "Event Interface Examples", "content": ". A typical use case of the previous two examples is to control the content of the information being exchanged. For instance, we could use regular expressions matching inappropriate words to flag them . Some apps that implement content inspection are: Data Loss Prevention (DLP) Antivirus (ClamAV) Word Replacer For our Hello World app, let's look into inspecting file attachments . In our main app file, we will implement IPreFileUpload and print a message notifying the user that the attached file is inspected. If the file type is text/plain, we will log the file's content also . Save the file and deploy the app. Send an attachment to a room to test the app. The notification is like a temporary private message visible only to the user who sent the attachment (if you refresh the page, the notification is gone) . Great! With these examples, you have learned how to implement event interfaces and react to certain events . You have made significant progress in expanding your app! In the upcoming sections, we will look at another way to extend your app's capabilities by creating interactive user experiences with the Apps-Engine UIKit.", "tokens": 243}
{"title": "Email Bridge", "content": "The Apps Engine Email Bridge expands your app\u2019s communication capabilities by enabling email interactions without requiring external integrations. With this feature, your Rocket.Chat app can send emails directly to users, simplifying the process of managing notifications and updates . In this guide, we will create a slash command in our Hello World app that sends an email to a user. Before starting, ensure that a Rocket.Chat server is available for app deployment . The following code registers the slash command in the app\u2019s main class, located at the root of the project: Here, we import our new slash command class and then register it in the app's configuration . If you haven't created a separate directory for slash commands, it is recommended to create a commands directory at the root of the project. Create the EmailCommand.ts file in this directory . Then enter the code shown below: This code implements the following: The slash command is registered with the name email. When the command is executed, it expects an email address as an argument. If no argument is provided, the command throws an error . The fromEmail address is retrieved from the Rocket.Chat server\u2019s environment settings (From_Email). The send() function builds the email, setting the to, from, subject, text, and html fields . The email is then sent to the specified user. A confirmation message (\"Email Sent!\") is logged to the console upon successful execution. Instead of logging the output to the instance's console, you can send a message directly to the chat room . To do this, add the following private method to the EmailCommand class: This function implements the following: Gets the user who invoked the command (in this case, you). Identifies the room where the command was executed . Sets the provided string (message) as the content of the message to be sent . Sends the constructed message to the specified room Next, append the following line to the end of the executor method: Once the email is successfully sent, a confirmation message (Email Sent) is sent back to the chat room where the command was invoked . Note: To learn more about messaging, see the IMessageBuilder documentation. To send emails successfully using the Email Bridge, your app must have the email.send permission. Add this permission to your app\u2019s manifest file (app", "tokens": 493}
{"title": "Email Bridge", "content": ".json), alongside any other permissions required for your app. For example: Note: To learn more about permissions, see the App Permission System documentation. To deploy the app, run: The <server_url> parameter is the URL of your Rocket.Chat server . Replace the placeholders with the URL, username, and password for your server, respectively. After executing this command, your application will be deployed to the server. Packaging your app Alternatively, you can execute the rc-apps package command . This gives you a compressed zip file of your app that you can upload as a private app to your Rocket.Chat server. Before testing the app, ensure that SMTP is enabled and functional in your Rocket.Chat workspace . Once the app is deployed, follow these steps to test the email functionality: Open any room and input the following slash command: /email <email-address>. Replace <email-address> with the recipient's email address. Press Enter. If successful, the message \"Email Sent\" will appear in the channel, confirming that the email has been sent . The email sent to the user will look like this: Similarly, you can customize this concept to send different kinds of emails from your app.", "tokens": 262}
{"title": "HTTP Requests", "content": "HTTP requests are the next feature we will look at to expand your app functionality. If you want to connect your app to the outside world, the HTTP property enables users to invoke an external web service . In this topic, we will create a slash command get for our Hello World app. This command executes a GET HTTP request based on the given URL. You can also use our tester app or any app of your choice. Make sure that a Rocket .Chat server is ready to deploy the app. The slash command must be registered in the app's main class, at the root of the project. Here, we import our new slash command class and then register it in the app's configuration . If you haven't created a separate directory for slash commands, it is recommended to create a commands directory at the root of the project. Create the HTTPRequestCommand.ts file in this directory . Then enter the code shown below: This code implements the following: The slash command is called get. When executed, it uses the argument that the user passed after the command as the URL. The argument is mandatory . If no argument is provided, an error is thrown. Perform the GET request using the provided argument. Optionally, you can store the GET request in a console constant. When the command is executed, it is logged . Now, instead of logging console output to the instance's log, let's output it to the conversation. Add the following private method to HTTPRequestCommand.ts . This function implements the following: Gets the user who invoked the command (in this case, you). Selects the room where the command was executed. Sets the received string as the message. Sends the message to the room . Then, append the following code to the end of the executor method: Instead of simply sending the request and not capturing the response, we store the response in a constant, format its content as a string, and transmit it using our new sendMessage method", "tokens": 421}
{"title": "HTTP Requests", "content": ". Note: To learn more about messaging, see the IMessageBuilder documentation. To deploy the app, run: The <server_url> parameter is the URL of your Rocket.Chat server . Replace the placeholders with the URL, username, and password for your server, respectively. After executing this command, your application will be deployed to the server. Packaging your app Alternatively, you can execute the rc-apps package command . This gives you a compressed zip file of your app that you can upload as a private app to your Rocket.Chat server . After deploying the application, enter /get <some_url> in any channel and the app will send a GET request to the specified URL . In this example, we will use JSONPlaceholder to obtain dummy data to test our app: Enter /get https://jsonplaceholder.typicode.com/todos/1 in a chat . You receive the following response in the chat: Similarly, you can apply this feature to connect with any domain of your choice. Next, let's gain an understanding of events and the Apps-Engine-supported features to handle Rocket.Chat events.", "tokens": 252}
{"title": "Apps-Engine User Interface", "content": "Along with using slash commands and handling events, another way to extend an app's functionality is to add user interactions, such as buttons or menus, to perform some action . Apps-Engine's UIKit is a set of components that allow apps to interact with Rocket.Chat's UI. It provides a series of block objects that you can use and map to the components that will be displayed on the screen . In this section, you will find information about the building blocks and elements with sample code snippets to help you create user interactions for your app Rocket.Chat provides limited components for the app interface to be built and one component adheres to the Rocket .Chat design specifications. So, it will look just like Rocket.Chat, without breaking the UX continuity for users. Most of the interactions can also be mobile responsive, without any additional coding. This is one of the benefits of using the UIKit provided by Rocket .Chat. All you have to do is define the interaction and call the components as needed. After you build the block objects, they will interact with the UI via the UI controller which is inside the modify accessor called getUiController() . openSurfaceView has the methods for calling the contextual bar and the modal. You just have to build your view \u2014 either the modal or contextual bar. Apps-Engine and Rocket .Chat will be able to tell which one you\u2019re trying to display to the user. This will be defined in UIKitSurfaceType", "tokens": 319}
{"title": "Apps-Engine User Interface", "content": ". Some of the user interactions that you can define are as follows: For an app to interact with the UI, we need user consent . TriggerID\u2014Whenever a user interacts with the app, the app can get a trigger ID, which is like a password required in all the methods in the UI controller so that the UI components will be shown . It will only work if the app has a valid trigger ID issued by Rocket.Chat. User interactions will provide a valid trigger ID. If a valid trigger ID is not provided, the method call will fail silently and the desired action will not take place . When a user interacts with any UI components, it triggers other interactions. The IUIKitInteractionHandler is a handler for after a message is sent. All the methods then become available to the app . Based on the UI component, the app receives an interaction of the specified type, and the app gets the context of what the interaction was, what data was filled, the inputs provided by the user, and so on . Depending on the app\u2019s functionality and flow, the user might have to input some data \u2014 such as filling out a form. IUIKitInteractionHandler helps you handle user interactions by capturing the data in the backend . Apps can register action buttons in different places in the UI \u2014 in the room menu, the kebab menu, the message options, the message composer box options, and so on . The UIActionButtonContext helps you place the action block contextually across several places within Rocket.Chat. Read the upcoming topics for further details on each component of the UIKit and how you can leverage them for your app.", "tokens": 347}
{"title": "Building Blocks", "content": "Apps-Engine\u2019s UIKit framework contains blocks, block elements, and objects that you can use to create UI surfaces and interactions for your apps. The components are built using structured JSON . These UI elements need to be triggered by an action or condition, such as sending a message, using slash commands, or using action buttons. Let\u2019s look at each of these components in detail", "tokens": 80}
{"title": "Building Blocks", "content": ". Blocks are the components you will use to create the base of the UI layout. Within blocks, you can add block elements and objects. Field Type Required? Description blockId String No A unique identifier for the block . type String Yes The type of the block, in this case, section. text Object Yes The text that is to be displayed on the button. The value can either be plain_text or mrkdwn . accessory Object No A section can contain many block elements, for example, text, images, actions, etc . Example For examples on how to use section blocks, see the topics Using UIKit Blocks, Create Contextual Bar, Create Modal, and Create Action Buttons. Field Type Required? Description blockId String No A unique identifier for the block . type String Yes The type of the block, in this case, divider. Example See how to use the divider block in the Using UIKit Blocks and Create Modal topics. Field Type Required? Description blockId String No A unique identifier for the block . type String Yes The type of the block, in this case, image. imageUrl String Yes The URL of the image. altText String Yes A text describing the image being displayed. title Object No The text to be displayed as the image's title . The value can either be plain_text or mrkdwn. Example See how to use the image blocks in the Using UIKit Blocks and Create Contextual Bar topics. Field Type Required? Description blockId String No A unique identifier for the block . type String Yes The type of the block, in this case, actions. elements Array Yes A list of interactive block elements. Example Learn how to use the action block in the Create Modal topic . Field Type Required? Description blockId String No A unique identifier for the block. type String Yes The type of the block, in this case, context. elements Array Yes A list of block elements. Allowed elements are plain text object and image element . Example Field Type Required? Description blockId String No A unique identifier for the block. type String Yes The type of the block, in this case, input", "tokens": 450}
{"title": "Building Blocks", "content": ". element Object Yes The input element, that can be plain text input, static select menu, and multi static select menu. label Object Yes The label for the block. Example See how you can add an input block in the Create Modal topic . Field Type Required? Description blockId String No A unique identifier for the block. type String Yes The type of the block, in this case, preview description Array Yes Enter the type and text for the preview description . title Array Yes Enter the type and text for the preview title. Example Block elements are components that you can add to the blocks to enhance user interaction . Field Type Required? Description type String Yes The type of the block element, in this case,button. text Object Yes The text that is to be displayed on the menu. The value can either be plain_text or mrkdwn . value String No A value sent along with the button information when an action is made upon the element. url String No A URL that the button points to. style String No The style of the button. The value can either be primary or danger . actionId String Yes A unique identifier for an action made upon the element. Example For an example on how to use buttons, see the Using UIKit Blocks topic . Field Type Required? Description type String Yes The type of the block element, in this case, image. imageUrl String Yes The URL of the image. altText String Yes The text describing the image being displayed", "tokens": 310}
{"title": "Building Blocks", "content": ". Example Field Type Required? Description type String Yes The type of the block element, in this case, overflow. options Array Yes An array with the possible options (the options object) . actionId String Yes A unique identifier for an action made upon the element. Example See the Create Contextual Bar topic for an example on how to add an overflow block element . Field Type Required? Description type String Yes The type of the block element, in this case, plain_text_input. actionId String Yes A unique identifier for an action made upon the element . placeholder Object Yes A placeholder text for the input (plain text object). initialValue String No The initial value of the field. multiline Boolean No A flag that indicates whether the field should be a single line (default) or a larger text area . Example Field Type Required? Description type String Yes The type of the block element, in this case, static_select. actionId String Yes A unique identifier for an action made upon the element . placeholder Object Yes A placeholder text for the input (plain text object). initialValue String No The initial value selected (value field from the options object). options Array Yes An array with the possible options (the options object) . Example Learn how to use the static menu block element in the Using UIKit Blocks topic. Field Type Required? Description type String Yes The type of the block element, in this case, multi_static_select . actionId String Yes A unique identifier for an action made upon the element. placeholder Object Yes A placeholder text for the input (plain text object). initialValue Array of strings No The initial values selected (value field from the options object) . options Array Yes An array with the possible options (the options object). Example Field Type Required? Description blockId String Yes A unique identifier for the block element . type String Yes The type of the block element, in this case, radio_button actionId String Yes A unique ID for the action element to trigger further interactions. options Array Yes The options for the radio buttons", "tokens": 441}
{"title": "Building Blocks", "content": ". Example Field Type Required? Description type String Yes The type of text object that you want to add. The available values are plain_text and mrkdwn. text String Yes The actual text. emoji Boolean No Works with the plain_text type . Example Field Type Required? Description text Object Yes The text that is to be displayed on the menu. The value can either be plain_text or mrkdwn. value String Yes The actual value that the option represents . Example When you are defining UI elements, you will have to add some common parameters. The parameters are as follows: blockId: Set a unique ID for each block and element that you define . This ID can be used to determine which block interaction to handle. actionId: Set a unique ID for each action block and element. This has a similar purpose to blockId as it is used to determine the interaction . appId: This determines which app is going to receive any potential interaction that might be generated by the user within a block. Depending on the block and element, any of these parameters may be mandatory or optional . Now that we have the information on the various UI blocks, let\u2019s see how to use them in our apps in the next topics.", "tokens": 259}
{"title": "Using UIKit Blocks", "content": "This document covers various examples to help you use the Apps-Engine UI blocks so you can create meaningful user interactions in your apps. The UI blocks are triggered by an action or a condition. In these examples, the UI blocks will be triggered when a message is starred. First, we will see how to create a single block and then we will add more elements to create complex visual layouts. Let\u2019s create a basic section that contains some text. This will be displayed in a room when a message is starred. The main app class looks like this: Whenever a message is starred, the app bot returns the text message as shown in this screenshot: In the same example, we are going to add more blocks and elements to demonstrate how you can create complex UI layouts. Now, instead of the image, we will add a divider and an action block. The action block contains a button element. The following screenshot shows the UI: We will define an input block containing the static menu element type: The following screenshot shows the blocks returned by the app bot: To the previous code snippet, we will add a context block definition as follows: The following screenshot shows what the context block looks like: To this example, we will now add a preview block as follows: The following screenshot shows how the preview block appears in the UI:", "tokens": 277}
{"title": "Using UIKit Block Elements", "content": "In the previous document, we went through examples of how to use UI blocks. Here, we will look at some examples of using block elements. Block elements are defined inside blocks. In the following examples, the UI elements will be triggered when a message is followed and unfollowed. The main app class looks like this: In the workspace, the following screenshot shows the response returned by the sample app bot when a message is followed: To this example, we will now add an overflow menu element after the radio buttons. Add the following definition to the messageCreator.setBlocks parameter. The following screenshot shows how the overflow menu is displayed in the UI: To this example, we will add a plain text input element contained in an input block. Add the following code to the messageCreator.setBlocks parameter: The following screenshot shows the plain text input in the UI: A linear scale element is defined in an action block. Add the following code to the messageCreator.setBlocks parameter: The following screenshot shows how the linear scale element looks like in the workspace: A checkbox element is defined in an action block. Add the following code to the messageCreator.setBlocks parameter: The following screenshot shows the checkbox element displayed on the UI: Add the following code to the messageCreator.setBlocks parameter: The following screenshot shows what the date picker element looks like on the UI: The following screenshot shows the time picker element:", "tokens": 313}
{"title": "Create Contextual Bar", "content": "A contextual bar is a sidebar displayed on the screen after the user triggers it. In this document, we will see how to use the UIKit components to create a contextual bar containing blocks and elements. Defining contextual bars and modals is a little different from the UI blocks we saw in the previous document. To create and update contextual bars and modals, use the following methods: For details on these methods, see the IUIController interface TypeScript definition. Let\u2019s look at a basic app to open a contextual bar that is triggered with a slash command using the openSurfaceView method. In your app folder, create a file to define the slash command and the context bar. For example, OpenCtxBarCommand.ts. Import the following: Now, in the class OpenCtxBarCommand, define the slash command as follows: Next, in the same class, define the context bar in the async executor method as follows: See Building blocks for details on how to use the blocks. Update the main app class to call the OpenCtxBarCommand.ts file. Deploy and test the app. In any channel, send the slash command /contextualbar. The following screenshot shows the contextual bar called test with the content that we defined in the blocks. Great! We have created a contextual bar for our app. You can now define additional UI elements for the contextual bar. For example, let\u2019s add an image to this. To add an image block, we can modify the OpenCtxBarCommand.ts as follows: The contextual bar looks like this:", "tokens": 348}
{"title": "Create Modal", "content": "The UI modal element is displayed in front of the page content. It is a pop-up window that can contain text or user interaction elements. The window is triggered by an action or condition. In this document, we will create a basic app that triggers a modal using a slash command. In your app folder, create a file to define the slash command and the modal. For example, OpenModalCommand.ts. Import the following: In the OpenModalCommand class, define the slash command as follows: This slash command will trigger the modal on the screen. In the same class, define the modal as follows: In this case, we have stacked two blocks - the section with text and a divider block. Update your main app class to call the OpenModalCommand class. Deploy and test the app. In any room, send the slash command /openmodal. The following screenshot shows the modal with the content that we defined in the blocks:", "tokens": 210}
{"title": "Contextual Bar", "content": "The openContextualBarView method is deprecated. While this method can be used at this time, it is recommended to use the openSurfaceView method instead. See the Create Contextual Bar topic for details . A contextual bar is a sidebar displayed on the screen. You need to pass a BlockBuilder object containing the content you want to display and call the following methods: Let's look at a sample app to open the contextual bar . This app consists of two main parts: A slash command from where we can get a valid triggerId. The function that opens the contextual bar using thetriggerId. You can clone the app and test it in your own Rocker .Chat server: https://github.com/RocketChat/apps-contextual-bar-open-example We are importing the following files: Now we will add a class OpenCtxBarCommand that implements ISlashCommand . In this class, we are doing the following: Define the slash command to get the trigger ID. Without the trigger ID, it is not possible to open the contextual bar . Call the function to create the blocks that we will render inside the contextual bar. Call the method that opens the contextual bar . After creating the class, we will define a method called createContextualBarBlocks to implement the following: Create the blocks that will be rendered inside the contextual bar", "tokens": 303}
{"title": "Contextual Bar", "content": ". Add a section block that consists of a message that shows the current date-time and a button that refreshes the date-time shown in the message. Return the contextual bar structure containing its title and a submit button . Finally, we will modify the main app class as follows: Provide the slash command that we will use. Listen for the date-time button to be clicked. Update the contextual bar's content. Listen for the user to click the Submit button . Get the date-time data from the contextual bar. Log the data to the console. Deploy and test this app by sending \"/contextualbar <text>\" to any channel . As soon as you send this message, the contextual bar opens on the right-side of the UI. The contextual bar displays the current date-time, the refresh button, and the submit button. Click Refresh to update the current date-time . Clicking Submit logs the date-time to the app logs and closes the contextual bar. Go to the Logs section of your app to view the details . Great work! With this example, you have learned to create user interactions for your apps! While we have only used a contextual bar and buttons here, you can learn about all the building blocks that are available in the UIKit in the next section.", "tokens": 277}
{"title": "Create Action Buttons", "content": "In the previous sections, we have learned about creating contextual bars and the list of building blocks available in the UIKit. Let's add to this knowledge and see how to create interactive buttons and handle the interactions . Action buttons are UIKit elements that, when registered, can be displayed and used in different contexts within the Rocket.Chat UI to trigger or initiate a set of actions . The action button context consists of the following: MESSAGE_ACTION: The action button is displayed in the message menu. Click the kebab menu against a message to access the button. MESSAGE_BOX_ACTION: The button is displayed in the message text menu . Click the plus icon in the message box, and the button will appear under Apps. ROOM_ACTION: The button is displayed in the room menu. Click the kebab menu of a room to access the button . USER_DROPDOWN_ACTION: The button is displayed under the marketplace menu under Apps on the user panel . To demonstrate this, we will create an action button on the MESSAGE_ACTION context that will display a modal with text to let us know that the interaction was received. Action buttons are registered during the extendConfiguration lifecycle method . The code snippet is as follows: Add the following import statement to your file for UIActionButtonContext: Registering a button requires some permissions. Add the following to your app manifest file (app.json): For more information, see App Permission System . Deploy your app to test and you can see that the button gets added to the list of options against the context specified, in this case, a message . Click on the options icon across any message, and you will see the action we just created, as seen below: UI Kit new Action button After registering the button, we can see the button but cannot take any actions with it . Now whenever the user clicks the action button, we want the app to receive an interaction event. Here is an example of how to handle it: Deprecated method of defining a modal Now deploy and test the app again . You will see that when you click the action button that we had registered, a modal named Interaction received opens with the message We received your interaction, thanks!. You can also view the Logs tab of your app for details", "tokens": 476}
{"title": "Create Action Buttons", "content": ". Most of the time, you will have an action button that does something specific and should not be displayed everywhere the context is available . For that, you can use the when prop while registering the button as follows: Add the following import statement to your file for UIActionButtonContext and RoomTypeFilter: Now the button can only be seen in public and private channels and direct messages, by users that have the create-d permission and the admin role . The user must also be a moderator of the channel to see the action button for messages in that channel. Localization for your app is important to better suit different users . To add localization to your app, create an i18n folder in the project's root directory and add .json files for the various languages. For this example, let us add an en .json file with the content as follows: This code will create a reference for the English language against the labelI18n value we specified when we registered the button in the previous section . With these changes, deploy the app again and this time you will see something like the screenshot below when the button is clicked . UI Kit Action Button triggered With this example, we know how to handle interactions using action buttons and specify when the button should be displayed. We've also taken a look at defining localization files here . To create such interfaces with Apps-Engine for the Rocket.Chat UI, you need to follow some guidelines. In the next topic, you will find detailed guidelines for menus, messages, chatbots, and so on.", "tokens": 336}
{"title": "Apps-Engine UI Guidelines", "content": "With the Apps-Engine UIKit, we have seen how to create the interactions in our apps displayed on the Rocket.Chat UI. Follow these guidelines for any interface that you are creating for your Rocket.Chat app using the Apps-Engine . There are two surface types: Simple: Examples like menus that can contain only the predefined list of menu items Complex: Examples like contextual bars and modal views can use all available UIKit components to build the intended user experience . The user menu contains items specific to the user such as status and preferences. Every item on this menu should relate to a user . Do add only user-specific items to this menu The room kebab menu is located at the top-right side of any Rocket.Chat room. This menu opens up a contextual bar and not a modal . Items on this menu must relate to or affect the current room or its context in some way. Don't include icons or use emojis in item labels . The message kebab menu can be seen on the right side of a message when hovered upon on a desktop or long-pressed on a mobile device. The message kebab menu is reserved exclusively for items that affect the selected message. Only Rocket .Chat core actions can use icons. Don't include icons or emojis anywhere inside the item label. Make messages very clear and brief. Do use an emoji if only they help get the intended message across. Don't send messages on a user's behalf . Don't over-communicate or use emojis excessively. Slash commands are usually the simplest ways users can interact with installed apps. Slash command descriptions should appear next to the command when typed in the message composer . Commands must have hyphens between words and include a description. All apps using a slash command must have a /help command showing the possibilities of the app and its commands", "tokens": 396}
{"title": "Apps-Engine UI Guidelines", "content": ". Apps can utilize the contextual bar surface to offer information and actions to the user. Contextual bars must contain a corresponding item in the room kebab menu . Contextual bar titles must use sentence case capitalization eg: Google Calendar settings, not Google Calendar Settings. Don't use images, such as app icons, inside the contextual bar header. Don't use the title case in the contextual bar header . Do use sentence case in contextual bar header. Apps utilize modal dialogs to present information and actions to the user. Use contextual bars for more complex and involved interactions . As a default setting, the app logo asset will be presented in the modals that are linked to the corresponding app. Don't use modals without the app name in the tagline. Do use the app name in the modal tagline . If your app has an associated bot user, the username of that user must be identical to the app name except with a hyphen replacing any spaces in the app name . For example, if the app is a Google Calendar app, the bot username must be @google-calendar, not @google-calendar.bot or any other variation . With these guidelines in mind, you can create functional apps that leverage the UIKit components and provide helpful user interactions . To fully apply these functionalities, you need to define the configuration and permissions for your app so that it can perform actions such as sending messages or modifying settings. Let's move on to the next sections to understand the configuration details.", "tokens": 324}
{"title": "App Configuration", "content": "In this section, you can find information on how to configure your app using the following ways: App Settings: Add settings for your app for which users need to provide values. App Internationalization: Adapt your app to different languages. App Permission System: Set permissions for your app. App Development Lifecycle: Learn about the phases of a Rocket.Chat app.", "tokens": 78}
{"title": "App Settings", "content": "Your app may need settings that users must configure after installing it, such as tokens. The settings are displayed on the administration interface for the workspace admin to configure and launch the app. Everything under the Settings menu of the app belongs under the app configuration . This tab contains various fields and instructions that can be filled out. If you have a workspace, you can look at the Settings tab of existing apps on the Marketplace to see different app settings . In this section, we will look at the available configuration details. Here are some key terms you need to familiarize yourself with: ID - for identifying the settings. Type - the type of value that will be saved . Required - whether or not configuring the app is required. Package value - the default value before the administrator can configure anything. I18n label - the translated name or description of an app . You can find further details for these properties in the ISetting interface. Additionally, here are some categories of configurations that Rocket.Chat supports. Each of these will appear differently within the Settings tab of the app in the marketplace . Boolean Code Color Font Number Select String Multi-select You can create a distinct file containing the configuration settings, in which everything is defined as a basic object. In this file, define each setting separately . In the configurationExtend method, you simply read the file. For each setting, call the provideSetting method, so that each defined setting is read, called, and displayed in the user interface . This is equivalent to executing the command: Since your app may have multiple settings, it is preferable to organize them all in a separate file and reference them as required in the app's main file . Every time the administrator modifies the app's configuration via the Settings panel, the onSettingUpdated method is invoked each time. The method will use the new value to make adjustments as necessary . For instance, you can inform an external service that the parameters have changed and the values have been updated. With onPreSettingUpdate, you will receive both the old and updated settings values. Let\u2019s use an example to see how this works", "tokens": 454}
{"title": "App Settings", "content": ". We will add settings to a sample app. First, we will create a folder called config at the app\u2019s root level. In this folder, we will create a TypeScript file called Settings.ts. In this file, we will define the app settings . In the settings file, we will begin by defining the list of settings we want the app to have in an enumeration . The file looks something like this: After this, we will add the settings definition, including the type, descriptions, and other properties for each setting. Refer to the ISetting interface definition . Here, you will find details on additional properties and whether they are required. Once we have defined the settings, we will call this file from the app\u2019s main class like this: Now deploy the app and access it on your workspace . Go to the App Info page and select the Settings tab. You will find the settings that we defined. Additionally, check the logs after updating any settings and saving the changes . Each time a setting is updated, you will find the\u00a0onSettingUpdated\u00a0and\u00a0onPreSettingUpdate\u00a0methods in the logs. By default, the logs show the debug method for an instance . We can also use the onSettingUpdated and onPreSettingUpdate methods in our app to modify the logs as necessary . After the main class, add the method as follows: Now, when a setting is updated, the logs will include the messages we have added. In this example, we have defined the success, info, debug, warn, and error methods . The logs will list all these under the onSettingUpdated tab for the same instance. This shows how you can modify your app's settings and logs according to your needs. Additional example for your reference: Consider the Jitsi app for Rocket.Chat . The settings.ts file contains the various app settings. These settings are called iteratively in the main app file with extendConfiguration. Here, the onSettingUpdated method is also used to update the app configurations", "tokens": 431}
{"title": "App Settings", "content": ". It is common in integrations to transmit certain security protocols for API requests. In the case of the Rocket.Chat REST API, these headers are X-Auth-Token and X-User-Id. See the authentication endpoints for more information . It would be desirable if these headers were always set when making API queries. In such situations, it is customary to generate a personal access token in Rocket.Chat and adding configuration parameters to the app makes sense . These are configured in the extendConfiguration method of the app's primary class. The client ID and client secret are routinely generated by one of the mechanisms for the app settings . You can see this implemented in the settings file of the Notion app integration with Rocket.Chat. Furthermore, along with defining the app configurations, you can create internationalization files for different languages. Let's look at the details in the next topic.", "tokens": 191}
{"title": "App Internationalization", "content": "You can build your app in such a way that it can be adapted to different languages. Here's what you need to do: Create a folder named i18n at the root and create .json files with the abbreviation of each language you want your app to support. For example, en.json, pt.json. You can call the same file to translate the content across several app interactions. In the JSON files, provide the corresponding text in the chosen language against each key. This text is displayed on the UI. Define the keys that you want to create translations for. You can add these keys for functions such as slash commands, UIKit elements, or app settings. The following points illustrate some examples to show how you can use app internationalization for your apps: While creating action buttons, in Register a button, we use the labelI18n parameter to name the action button with a key. Then in the Add localization section, we provide the value for this key which is displayed on the UI. submit.send is a key to send a message to the channel with values as shown below: i18n/en.json i18n/pt.json The i18n folder of the Jitsi app contains the keys and values for the supported languages.", "tokens": 267}
{"title": "App Permission System", "content": "Each feature available in the Apps-Engine is mapped to a permission. Adding the permission in the app's manifest ( app.json file) will unlock said feature to be used by the app . For example, if you add the send messages permission to your app's manifest, your app can send messages in the Rocket.Chat server . If your app tries to send a message without having the send messages permission listed in the manifest, Apps-Engine will block the feature, and the app will not be able to perform the desired action . When installing an app, be it via the Marketplace or installing it manually via zip file, a window asks the user to review the permissions that the app requires to work properly . The user installing the app can either accept and install the app or deny the permissions and not install it. In your app's manifest file ( app.json), add the field permissions. It receives a list containing all the permissions that you are asking for . For example: Here is a list of the permissions that you need to add to your app: Permission Description user.read Access user information user.write Modify user information upload.read Access files uploaded to the server upload.write Upload files to the server server-setting", "tokens": 262}
{"title": "App Permission System", "content": ".read Access settings in the server server-setting.write Modify settings in the server room.read Access room information room.write Create and modify rooms role.read Access user roles role.write Modify user roles message.read Access messages message.write Send and modify messages moderation .read Access to read moderation dashboard information moderation.write Modify moderation dashboard information threads.read Access threads. Effectively allows the app to read all messages in a thread livechat-status.read Access Livechat status information livechat-custom-fields .write Modify Livechat custom field configuration livechat-visitor.read Access Livechat visitor information livechat-visitor.write Modify Livechat visitor information livechat-message.read Access Livechat message information livechat-message.write Modify Livechat message information livechat-message .multiple Access to read multiple messages at once livechat-room.read Access Livechat room information livechat-room.write Modify Livechat room information livechat-department.read Access Livechat department information livechat-department .write Modify Livechat department information livechat-department.multiple Access to read multiple departments at once env.read Access minimal information about the server environment cloud.workspace-token Access to request the workspace access token to interact with Rocket.Chat's Cloud Systems ui .interact Interact with the UI (UIKit) ui.registerButtons Use UIKit buttons scheduler Register and maintain scheduled jobs networking Register and maintain scheduled jobs persistence Store internal data in the database slashcommand Register new slash commands video-conference .read Access to read video conference information video-conference.write Modify video conference information video-conference-provider Act as a video conference provider in Rocket.Chat api Register new HTTP endpoints oauth-app.read Access OAuth information oauth-app .write Modify OAuth information For an example of how these permissions are used in apps, refer to the Action Buttons topic . Out of the permissions listed above, the following permissions are present by default to ensure backward compatibility for apps that were developed before the permission system was introduced. Once an app is on the Rocket.Chat workspace, it goes through several lifecycle phases unique to Rocket .Chat. The phases depend on the capabilities that your app has. To learn about the app lifecycle, head over to the next page.", "tokens": 510}
{"title": "App Development Lifecycle", "content": "Now that we know how to create Rocket.Chat apps and extend their functionalities, let's learn about the lifecycle of the apps. For Rocket.Chat apps, app lifecycle refers to the processes involved in enabling an app and the phases it may undergo . The app goes through the lifecycle phases during runtime in a Rocket.Chat server. To add an app to a Rocket.Chat workspace, you must either download it from our Marketplace or manually upload it to the server. Once an app is introduced to Rocket .Chat, it goes through several phases. Apart from the typical app development phases such as the design, QA, and release phases, additional Rocket.Chat-specific phases include: App logging App deployment App installation App testing In the Rocket .Chat UI, two statuses are displayed for apps, enabled and disabled. In the Logs section of an app, you can see additional statuses and their details which give developers an insight into the app's lifecycle phases . You can control various aspects of the app's lifecycle using the extendable methods from the App class. Let's learn about these methods that represent the various states of a functioning app: Constructed: The app has just been created or instantiated . There is little an app can do at this point. Initialize: During this phase, the app is initialized. Here, the app can obtain configuration from the Apps-Engine, register objects, and extend functionality", "tokens": 299}
{"title": "App Development Lifecycle", "content": ". It indicates that the app's initialize() function was invoked and returned true. This enables the app to govern its internal initialization procedure and override the default one. extendConfiguration: This method is executed as part of the app's default initialization procedure . The configuration accessor enables the app to provide robust functionality such as API Endpoints and Slash Commands using the configuration accessor. Enable: The app will be enabled if the app parameters are configured correctly. This method is executed during the app's activation process . If it returns false, the Apps-Engine stops the enabling process and unloads the app's resources configured during initialization . Auto_enabled: the app\u2019s onEnable() function is called, returns true, and the app is enabled automatically (at system startup) . Manually_enabled: the app\u2019s onEnable() function is called, returns true, and the app is enabled by the user (such as installing a new app) . Disable: The app can be disabled, either automatically in response to a system interaction or manually through the marketplace . For instance - when Community workspaces have limitations, the apps will be disabled automatically depending on the limit on the number of apps that can be installed per workspace. If the app is a subscription app, it will be disabled when the subscription expires . Several additional app phases associated with disable are as follows: App Phase Description compiler_error_disabled An error occurred while attempting to compile the app, which rendered it inoperable. Attempts to re-enable it will fail, as it requires an update . invalid_license_disabled The app was disabled because its license was invalid. invalid_installation_disabled The app was disabled due to an invalid installation or signature validation. error_disable The app was disabled due to an unrecoverable error . manually_disabled A user manually disabled the application. invalid_settings_disabled The app was disabled due to invalid configuration settings. Install: This is only when the application is manually uploaded as a private app or installed through the marketplace. It only occurs once during installation", "tokens": 439}
{"title": "App Development Lifecycle", "content": ". After installation, you can send messages to the admin notifying them about the availability of the app or send configuration steps and instructions on how to get started to the user who is installing the app . Uninstall: This phase occurs when a user manually uninstalls an app. This is not feasible to occur automatically . Upon uninstallation, you can use this status to perform housekeeping, notify the server or an external service, or send a message to the user . SettingUpdated: For instance, the settings for an app can include tokens to authenticate with third-party services. When a change is made to such settings, the app can respond accordingly . The onSettingUpdated method is executed when an administrator modifies a setting provided by the app via the app administration page. This occurs following the update of a configuration. You can now retrieve the modified value . PreSettingUpdate: This retrieves a modified parameter's before and after values. For example, if the user modifies a server URL, the app can attempt to connect to the new server to perform validations or seamlessly react to the change . We have now taken a look at the various states of an app and the methods that represent them. With these methods, you can perform different actions for the states of the apps.", "tokens": 281}
{"title": "App Data Persistence", "content": "When you are developing apps, you can apply data persistence on object variables. By doing so, the variables are stored on the server and remain intact between sessions. You can save the data at the user level or the app level. For example, at the app level, if a comment text box is included in an app for users to provide feedback, the data entered in this box can be saved and remains persistent throughout the app for all users. For Rocket.Chat apps, storing an app's state in the memory inside of an app is not recommended at all because Rocket.Chat servers can have several instances and each server has its own instance of an app. If the data is stored in the memory between different instances, it can lead to issues. To solve this problem, two approaches are suggested here: IPersistence interface (recommended): Apps-Engine provides the interface as an additional layer to store data as a compound key-value pair. An app only has access to its own persistent storage. Custom fields: This is a public way of storing data related to a message. You can attach some custom attributes (called customFields) to a message by creating or modifying the message. You should only use custom fields if you're okay with potentially having your data read and overwritten by someone else! Let's look at further details of the IPersistence interface. The Persistence object uses associations to create records of compound key-value pairs. It's like an array of data that you are associating to a specific key. The IPersistence interface is used to create or update records in the persistence storage. The IPersistenceRead interface is used to read records. You can create association records for data such as users, rooms, files, and so on. The available association models are defined in the Enumeration RocketChatAssociationModel TypeScript definition. These association records can then be read and updated. We can get persistenceRead: IPersistenceRead through the following way: For persistence: IPersistence writer object, you can only obtain it using parameters, which means you can not persist data within a method if the method doesn't have a persistence: IPersistence parameter (typically it is an event handler that you are going to implement). In the upcoming sections, we will look at examples of implementing data persistence using the Persistence object.", "tokens": 493}
{"title": "Increment Number Example", "content": "In this example, we will create an app that increments the value of a number. Users will send a slash command with a number as an argument. Initially, the number\u2019s value is incremented from 0 and stored . After that, each time the slash command is used, the new stored value is incremented with the specified number. Create a TypeScript slash command file in your app folder . You can use the following command to generate a template file: Select the Slash command extension option and provide a name for the file, for example numberPersis . The file is automatically created in a slashCommands folder located at the root of your app folder. First, we will give a name to the slash command and create an association using the MISC enumeration model . The class looks like this initially: In this class, we will add a function called getValue to read the value of the number: From the IRead interface, the getPersistenceReader method is used to read the number . If a valid number exists in the record, it is stored in the variable result. Otherwise, the result is zero. Now we will add an executor function . In this, we will add subcommands to the slash command so that we can get the number from the user or reset its value to zero. We will also add a help subcommand to display the slash command options . The number calculation will be carried out within this function. The updateByAssociations method is used to update the record. For details, see the IPersistence interface", "tokens": 333}
{"title": "Increment Number Example", "content": ". Finally, we will define the sendMessage and sendNotification functions to send messages to the channel. These functions are added after the numberPersis class. Next, we will update the app\u2019s main class to call the slash command class . Deploy the app to your workspace or package the app and upload it to the workspace. In any channel, send the slash command /numberPersis. Try sending it without arguments . The app bot should send a message like this: Now send the slash command with numbers. For example, /numberPersis 5, and then again with /numberPersis 6 . The app bot will return the updated values: If you send /numberPersis r or /numberPersis reset, the value will be reset to 0: If you send /numberPersis h or /numberPersis help, the help menu will be displayed: With this example, we can see how the value is stored and updated using associations .", "tokens": 205}
{"title": "Count Number of Messages Example", "content": "In this example, we are creating an app that records the number of messages sent on the server using the Persistence object. All messages sent are associated with one record. The app will save the number of messages, which can be viewed from the app logs. To store the message count, we can write an executePostMessageSent event handler. The app\u2019s main class looks something like this: Here, MISC enumeration is used as the association model for the number of messages. The count variable temporarily stores the number of messages sent. It is initialized to zero and updated based on data retrieved from persistent storage. When the executePostMessageSent handler is called, it retrieves the current message count using the readByAssociation method. If a record exists, the count variable is updated accordingly. See the IPersistenceRead interface for details. Next, the count is incremented by one to account for the newly sent message. Finally, the updated count is saved back to persistent storage using the updateByAssociation method, ensuring the count is preserved across different handler executions. See the IPersistence interface for details. Deploy the app to your workspace and test it by sending some messages to any channel. Then, check the app logs. The app:executePostMessageSent tabs show the number of messages. In this way, even in a cluster environment, your app in each Rocket.Chat instance can share data from a single data source, the Rocket.Chat persistence storage and maintain data consistency.", "tokens": 319}
{"title": "Storing User Input Example", "content": "This example will show how to manage the persistence of message-related data using Rocket.Chat Apps-Engine. Doing this involves creating a class MessagePersistence in the Apps root folder that interacts with Rocket.Chat persistence layer. This class will host static methods to add, remove, and query data associated with messages, rooms, and specific IDs. The following was achieved from the code block above: The persist method adds or updates a record in the persistence layer and associates it with a specific room and message ID. findAll method fetches all records associated with message and returns an array of their IDs. The findByRoom method retrieves all message IDs associated with a specific room. removeByRoom method removes all records associated with a specific room within the message scope. It returns true if successful and false otherwise. removeById deletes all records associated with a specific message ID within the message scope. clear Deletes all records in the message scope. The executePostMessageSent class can be modified to the code below: Here, the MessagePersistence class is imported, and the methods persist, findAll, and removeByRoom are called to store the message ID, get all the messages stored in the message scope, and delete all the messages associated with the room. Send a few messages in a channel to observe the code in action. Then, navigate to Marketplace > Private Apps. Select the app you deployed and access the logs. Among the various logs, locate the one labeled executePostMessageSent. Open it, and you should find a message that resembles the following: The image above shows the logs after sending messages to the general channel.", "tokens": 344}
{"title": "Advanced Features", "content": "In this section, you will learn about some more features that you can add to your apps. OAuth2 Client: Handle OAuth2 authentication for your apps directly within Rocket.Chat. Scheduler API: Schedule tasks in your app. Registering API endpoints: Receive data from external HTTP requests. NPM Package Support (Experimental): Apps include a subset of NPM packages as dependencies to be used at runtime.", "tokens": 90}
{"title": "OAuth2 Client", "content": "OAuth2 is an open standard that allows applications to access user information without exposing passwords. Rocket.Chat OAuth2 Client simplifies this process by handling the OAuth2 flow with third-party services like Google, GitHub, and others directly within Rocket.Chat . This document demonstrates using OAuth2 to interact with Google APIs in a Rocket.Chat app. Ensure you have the following: Create and deploy the app: Start by creating a new Rocket.Chat app . For this example, name it OAuth, and then deploy the app to your workspace. Set up Google API credentials: In the Google API Console, create authorization credentials to obtain your Client ID and Client Secret . Configure authorized URLs: In the project\u2019s Google API console, configure the following: Authorized JavaScript origins: Set the authorized JavaScript origins to the URL of your Rocket.Chat workspace . Authorized redirect URIs: Set the authorized redirect URIs to the app's API URL. You can find this URL by navigating to the app within your Rocket.Chat workspace, select\u00a0Details, and then view the APIs section . To set up the OAuth2 client in the Rocket .Chat app, start by importing the necessary modules into the app's main class: The code above defines the OAuth2 configuration, which includes the authorization, token endpoints, client ID, client secret, and scopes . The code also imports two files which will be created in the project root folder. These files each have two methods: OAuth2Service which manages the OAuth2 operations. OAuthCommand registers the user commands that interact with the OAuth2 service . Next, create the OAuth2Service.ts file and implement the service that will handle OAuth2 operations: Here, the createOAuth2Client method takes in two parameters: app: The app itself . options: An object with props as configuration - see the definition documentation for more details. The setup() method configures the OAuth2Client which is used to access multiple methods like getAccessTokenForUser, revokeUserAccessToken etc", "tokens": 480}
{"title": "OAuth2 Client", "content": "., that will handle user-specific OAuth2 operations. getAccessTokenForUser: Gets the token information for a specific user, if available. This receives the user instance as a parameter and returns data about the authenticated user . getUserAuthorizationUrl: Returns the authorization URL to which the user must be redirected to authorize access to the application refreshUserAccessToken: Refreshes the user's access token. This is useful when the user access token has expired . revokeUserAccessToken: This function revokes the user's access token in the service provider. When successfully executed, users must be authenticated again before using the service . To enable users to interact with the OAuth2 setup, create a new file named OAuthCommand.ts and define the following slash command: The slash command here is oauth which accepts different arguments (token, refresh, revoke) to perform corresponding actions . To see this app in action, deploy the app and try using these slash commands in the workspace: /oauth to authorize the app. /oauth token to get the authorization token. /oauth refesh to refresh the token . /oauth revoke to revoke the access. When the application is successfully authorized, you can verify the app through the third-party apps connected to your Google account. Likewise, when you revoke this access, the app should be subsequently removed.", "tokens": 317}
{"title": "Scheduler API", "content": "The Scheduler API allows apps to create tasks that run in a defined schedule. These tasks can be one-time events or recurring tasks.\u00a0It uses agenda.js as the backend, so the schedule syntax and internal processes are all according to its documentation . The API details are in the\u00a0Module scheduler\u00a0definition and this\u00a0example app\u00a0can also be used as a guide. Check the app logs to see the example in action . As per the permission system, the Schedule API needs the following permission in your app's manifest ( app.json file): To use the Scheduler API you'll need two things: The functions to be run as jobs (we call them processors) . The schedule in which they run. This is configured using the app's extendConfiguration method. The processors are registered during the app's startup to make them available for scheduling. The processor is an async function and can receive arguments ( jobData) . The arguments are passed during scheduling. To trigger the registered processor as a job, you must provide: The id of the processor. The type of job it will be . The available types are scheduleRecurring (the job runs in an interval) and scheduleOnce (the job runs once using the when keyword) . Starting a job can be done when running a slash command, for example: You can also trigger a job as soon as it gets registered without manual or automated triggering . When you register your processor in the extendConfiguration method, you can pass a prop called startupSetting in the processor's object: This indicates that you want that particular processor to be scheduled as soon as it is registered . You can define the \"immediate scheduling\" as a recurring job ( StartupType.RECURRING) or a one-time job ( StartupType.ONETIME). You can also pass data using the data object . It will work just like when you schedule a task using the modify accessor. Here, data is not something that's passed to the processor or a function as a living object or executable code . This data is a static piece of data that is passed to the processor's first argument . The signature of the processor function is as follows: The first argument is the data object you're passing when actually scheduling the job; ( [k: string]:any). The rest of the arguments are passed when the function is run . To stop a job, all you have to do is pass the ID of the job you want to stop: It will stop the running job (if any). To stop all the current running jobs from the app:", "tokens": 547}
{"title": "Register API Endpoints", "content": "This document will show how to register a public API endpoint that receives data from external HTTP requests. The data received from the endpoint will then be forwarded to the #general channel. Create a new Rocket.Chat app from scratch using the command rc-apps create and name it RocketChatTester. If the response indicates that rc-apps is an unrecognized command, refer to the getting started document to use Rocket.Chat Apps-Engine. Once the app is created, open it in your preferred code editor. In the main class, RocketChatTesterApp.ts, implement the extendConfiguration method. This method uses configuration.api.provideApi to register a new API endpoint new Endpoint(this). Add the following code to achieve this: The code above imports an Endpoint class from another file. Now, create this file in the root folder of the app and name it endpoint.ts. The code above sets up the Endpoint class in the RocketChatTesterApp folder. In this endpoint.ts file, the Endpoint class is created by extending the base class ApiEndpoint. The API endpoint's path is defined by assigning the value api to the public path property. Next, the post method is implemented and executed whenever the API endpoint receives an HTTP POST request from an external service. To forward the received data to the #general channel, the \u201crequest\u201d content is accessed via request.content. A message containing this content is then created and sent to the #general channel. Start by deploying the app. In the App Info > Details > APIs > POST api section, check the complete endpoint URL you registered for the app. The POST API will be different depending on your app ID and the endpoint URL on which the app is deployed. Open the terminal and use curl to post some data to the endpoint. For example, use the following command snippet: Substitute the ENDPOINT_URL and APP_ID with the appropriate values. Running the command above will return a response with a messageId. The app bot will also send the \u201cdata\u201d attached to HTTP Request as a message to the general channel, as shown below:", "tokens": 460}
{"title": "Video Conferencing Apps", "content": "Rocket.Chat provides flexibility and control over your video conferencing capabilities with apps in the marketplace, such as Jitsi , BigBlueButton , Pexip , and Google Meet . You can integrate with a video conferencing provider of your choice and according to your organizational needs. You can also configure video conferencing options for your app using the Apps-Engine event interfaces provided for video conferencing . In this topic, we will consider the Jitsi Meet app for Rocket.Chat as an example to understand how you can implement the video conferencing functionality . Here, we are only going through the IVideoConfProvider interface methods that are implemented in the Jitsi app. Refer to the complete Jitsi app code files here. In the videoConfProvider .ts file, the TypeScript class JitsiProvider is defined which implements the IVideoConfProvider interface from the Apps-Engine definition. This class serves as the provider for integrating the Rocket.Chat app with the Jitsi video conferencing service . Let's break down its key functionalities: Configuration settings Various settings are defined as follows, including the Jitsi domain, title prefix, suffix, Chrome extension ID, token settings, and the Jitsi app ID and secret: videoConfProvider .ts We also have the following capabilities property that indicates whether the microphone, camera, and title are enabled: videoConfProvider .ts Constructor The following constructor takes an instance of the JitsiApp class as a parameter, indicating that the JitsiProvider is associated with a specific instance of the Rocket.Chat app. videoConfProvider .ts Verify configuration settings Next, in this code file, we are using the following isFullyConfigured method to check the configuration of the integration by verifying the Jitsi domain", "tokens": 404}
{"title": "Video Conferencing Apps", "content": ". Also, if token authentication is enabled, it checks for the Jitsi application ID and secret: videoConfProvider.ts Generate URL The following generateUrl method generates the URL for joining a Jitsi conference room . It includes the protocol and domain from the configuration settings. The room identifier is retrieved from the getRoomIdentification method. videoConfProvider.ts Customize URL To customize the Jitsi meeting room URL, additional settings are configured in this section of the code . It includes the Chrome extension ID, the custom title of the call or the default title, audio/video settings, and token generation. All these configurations are combined, and the URL string is generated . This method uses the IVideoConferenceOptions interface to configure the audio/video properties and the IVideoConferenceUser interface to get the user details. videoConfProvider.ts The videoConfProvider.ts file is imported into the main JitsiApp .ts file to integrate the video conference configuration. This is an example of how you can use the video conference event interfaces to implement this feature in your app . You can also refer to the Big Blue Button app code for another example of a video conferencing app.", "tokens": 273}
{"title": "NPM Package Support (Experimental)", "content": "Starting from Apps-Engine v1.28.0 (released in Rocket.Chat v4.0), Rocket.Chat Apps include a subset of NPM packages as runtime dependencies. While the exact list of supported packages cannot be specified due to the vast number of options available, here are some general guidelines: Utility packages that are not dependent on NodeJS' native modules should work (for example, lodash, momentjs, etc). Packages that create any server, be it HTTP, TCP, UDP, or IPC, will not work (for example, express, hapi, etc). Packages that interact with the fs and os modules will not work. If a package that should be compatible is not working as expected, open an issue in the Rocket.Chat.Apps-engine repository and the team will check it out. When using NPM packages in your app, make sure to use the latest rc-apps version - it is responsible for bundling the code of the packages along with the app's source code.", "tokens": 218}
{"title": "App Submission to the Marketplace", "content": "Now you have finished creating your Rocket.Chat app, and successfully tested it locally. Now, you are ready to submit your app to the marketplace for users to explore . There are two ways to begin the process of submitting your app, via the Apps-Engine CLI and via the Marketplace publisher portal. For both these methods, you must have a Marketplace Publisher portal account and a Rocket.Chat Cloud account . Go to https://cloud.rocket.chat/register to create your Rocket.Chat Cloud account. Enter your name, email address, and password. Make sure to accept the Rocket.Chat terms and conditions\u00a0and privacy policy. Click Next . You are notified that an email has been sent with the confirmation link to sign in to your cloud console. Next, go to your inbox and confirm your email address by clicking the link we sent . Your cloud account has been created and is ready to use! Go to https://marketplace.rocket.chat/publisher/register to sign up for your publisher account . After signing up, your publisher developer account is created, as shown below: Now let's look at the steps to submit your app via the CLI and the Publisher portal. Submission through the CLI sends the app in a draft state . The publisher must access the publisher portal to submit the app. In the command line, in your app's directory, enter rc-apps submit. This packages your app and starts the process of submitting your app for review . The following questions are displayed on the command line: Have you logged into our publisher portal? (Y/n) : Enter Y. On your browser, the Rocket.Chat Cloud tab is opened. Click Authorize to allow Rocket .Chat Apps CLI to log in with your Rocket.Chat Cloud Account. You can close the tab that opens after the authorization is complete", "tokens": 379}
{"title": "App Submission to the Marketplace", "content": ". Is this a new app? (Y/n) : Enter Y if your app is new and enter n if it is not a new app. If you enter n, the question What changes were made in this version? is displayed . Enter the description of the changes to your app. Is this app free or will it require payment? (Y/n) : Enter Y if your app is free. If your app is a paid app, you must add it via the publisher portal . Please select the categories which apply to this app? : Select the categories your app belongs to, such as Design, Communication, Analytics, and so on. Are you ready to submit? (Y/n) : Enter Y to submit the app . Once your app is submitted, go to the Marketplace Publisher portal. Select Apps from the left-hand menu and you can find your app in the Draft status. To view your app details, click the Actions drop-down menu and select View Details . You can also edit the app details and upload an updated version of the app. Enter the details about the Public Changelog and the Internal Changelog. Now, enter the app details and then follow the next steps from that section . Before submitting your app, you need to package it. Currently, the Rocket.Chat servers and Marketplace allow the submission of .zip files . In your app's directory, run the following command: This command will package your app and create a zip file in the dist folder . Keep in mind that --no-compile is necessary because you need to submit the source code of the app to the Marketplace for us to evaluate the code, instead of the compiled code that is used to execute the app in the workspace . To add your app, go to Apps > New App. Drag and drop your app package or browse your app package .zip file and click Next. Add the required information for the app: Set your app's name under App Name . Select a category for your app in the Categories drop-down. Select a Language for your app in the Languages drop-down. Click Next", "tokens": 434}
{"title": "App Submission to the Marketplace", "content": ". After entering your app information, the next step is to define the pricing plan and how the users can purchase your app. Purchase Type - You can choose how you plan to distribute your app . The pricing model has three types, One-time purchase, Subscription, and Free. Price - Enter the price (USD) that you want to set. Click Next. For a paid app, you must connect with a Stripe account before submission . You can find more information at https://docs.stripe.com/payouts. One-time Purchase: Select One-time Purchase when you want your app to have a one-off payment. Your users are allowed to use it forever after that payment . Price: Enter the price (USD) you want to set. Your users are allowed to buy the app per workspace. They must purchase the app separately if they have two workspaces and want to use the app in both . Subscription: Select the Subscription purchase type when you want your app to be subscription-based. Click Add pricing plan. A New Pricing Plan pane appears. Choose a monthly or yearly subscription. Enter the price (USD) you want to set . Set the number of days for the trial plan. Click Save Plan. Once done, click Next. Free: Choose this pricing type when you want your app available to your users for free", "tokens": 278}
{"title": "App Submission to the Marketplace", "content": ". Screenshot: Upload some images of your app (1200x600 px, maximum of 5 images). Short description: Provide your app's description . Privacy policy summary: Provide your app users with a summary of the app's privacy and data handling policies. Documentation URL: Provide a link to your app's documentation. Your app is almost ready to submit for review . Once you have added the required information, click Submit for Review. Our team will review your code and send you a status update via email . When you upload and submit your app, the app status flow in the portal is as follows: Draft: After you upload your app, a new submission is created in the Draft status. You will receive a status update via email . Compiling and Compiled: After the publisher fills in the required forms mentioned above, the status changes to Compiling and Compiled. You will receive a compiled status update via email. The status remains this way until an admin approves or reviews the app . Approval: Once your app is approved, you will receive an approved status update via email, as shown below: Reviewed: In some cases, the app might not be approved and instead receive a review . The publisher receives an email with the app status and the reasons why the app has been reviewed by the admins of the Marketplace . Once approved, you can go to the portal and publish your app for users! To successfully publish an app, you need to follow some guidelines. In the following sections, you can learn about the content and graphic guidelines . You can also see how to register a webhook endpoint link to get updates about your apps.", "tokens": 341}
{"title": "Content Guidelines", "content": "Before an app can be listed in the Rocket.Chat Marketplace, it must undergo a thorough review process. This process includes a comprehensive investigation into the app's authenticity, accuracy, and technical proficiency . Thus, it is crucial to ensure that your app contains high-quality content, appropriate screenshots, and optional videos that accurately describe its functionality. To successfully navigate the publishing process, adhering to a specific set of guidelines regarding app content is essential . Note: Please keep in mind that these guidelines are subject to change. If you have any questions or concerns about our review process, please contact us at marketplace@rocket.chat . Our review team utilizes the following guidelines to evaluate the written content of your app and determine if it meets our standards for marketplace uploads. Adhering to these guidelines will help you avoid potential rejection or delays in the app review process . Additionally, following these guidelines will enable users to better comprehend the purpose, significance, and app usage, ultimately enhancing their experience with your app. The Rocket .Chat Marketplace offers a platform for your app to be featured alongside others, allowing users to easily search and filter through different categories of apps to find an app that caters to their business needs . This guide will provide you with information on how to make your app stand out in the Marketplace with the help of app content. To learn more about the visual guidelines for your app icon and images, please refer to our documentation on the graphics guidelines . Choosing a well-thought-out name for your app is crucial in helping potential users understand its purpose and discover it in the Marketplace. Before finalizing a name, it is recommended to search the Marketplace for any existing apps with similar names . Keep the name as concise as possible, limiting it to two words . Keep it concise, straightforward, and distinctive Avoid lengthy and complex titles or abbreviations Avoid adding descriptive words to the app name Ensure that the app name is relevant and easy to remember Select from a curated list of app categories that are specific to your app . This will improve the searchability and refine the app filtering process. You can refer to the comprehensive list of supported app categories in our Marketplace. Avoid categorizing your app into too many categories, as it may dilute its value", "tokens": 458}
{"title": "Content Guidelines", "content": ". If your app doesn't fit into any existing categories, reach out to us at marketplace@rocket.chat. List the languages that your app supports. The author's name and website link should be provided as the publisher details . If the publisher is an individual without a website, they can provide a link to their user profile page on GitHub. Support information, such as the support link or email address, should be included in this section . Users can be directed to the support desk portal if needed. If the publisher is an individual without a website or support email address, they can provide a link to the Issues page from the app repository on their GitHub account", "tokens": 139}
{"title": "Content Guidelines", "content": ". The App description page is where potential users can get a detailed understanding of what your app can do. It's a crucial space that can influence their decision. To maximize its impact, make sure to showcase your app's features and use relevant visuals . Here are some sections you can leverage to accentuate your app capabilities. Clearly explain your app's core function and the unique benefits it provides to users. You can address the question of what your app brings to the table . So, capture the essence of your app's magic concisely . Here\u2019s an example description of our Zapier app: \"Focus on what matters, while Zaps do the work for you !\" Character limit: 1000 characters (ideally 500 - 600) The long description should offer a concise overview of your app and its ability to address pain points . Its purpose is to convince users of the benefits of integrating with your app. To effectively resonate with your target audience, the integration should highlight its unique selling points. Use keywords that accurately describe your app's function and ensure the description effectively communicates its highlights . Approach the long description as a comprehensive FAQ, addressing any potential user queries about your app and its usage. Essentially, this section allows users to fully grasp the unique value your application brings to their workspace . When crafting the long description, make sure to: Highlight the most significant features and benefits of your app to ensure quick comprehension by users. Clearly articulate the specific problems your app addresses, enabling users to understand its potential use cases . Elaborate on the additional features and benefits, showcasing the versatility of your application through various use cases. It is important to note that the description should be concise, as most users only read between 300 and 500 characters . It is advised to avoid using technical jargon and to refrain from generically discussing the app or product. You can refer to the long descriptions of our apps in the Marketplace. Use any one of them as your reference", "tokens": 405}
{"title": "Content Guidelines", "content": ". Having clear and easily understandable technical documentation is crucial for the effective usage of your app. This documentation should make the app user-friendly and help users navigate it smoothly. Well-crafted instructions will assist end users in installing and using the app without any difficulties . So, it is important to note that user-facing support documentation will need to go through a review process. To ensure a smooth installation process for users, it is important to incorporate the following recommended guidelines . Include detailed instructions that are easy to follow, while avoiding any steps related to internal testing. Provide links to other informative articles and frequently asked questions where necessary . To enhance user experience, be sure to include explicit instructions on how to utilize the app's features. This can be further clarified through the use of visual aids such as images or videos", "tokens": 165}
{"title": "Content Guidelines", "content": ". Lastly, convey the value of the app and specify the purposes for which user data will and will not be utilized. You can follow the structure suggested in the table below. Feel free to tweak the structure based on how it relates to your app . Section Description About the app Give a brief introduction to your app. Summarize what it offers in about 50-70 characters. How does the app work Provide details about what the app does, and how it does it in simple words . Pricing model / compatible versions State the pricing model of your app, if applicable. Mention the versions of your product the app is compatible with. Who can use the app Cover the aspects of access here . Provide details about who can use the app, and which roles have what access. How will the app integrate with Rocket.Chat A detailed section outlining how the app integrates with Rocket.Chat, meaning what is the expected behavior of the app within Rocket.Chat . Capabilities of the app Mention the entire list of your app capabilities concerning the Rocket.Chat integration, and highlight the benefits as well. How to install the app Step-by-step instructions for installing your app. Include screen captures or videos for any tricky steps . How to configure the app If your app has different settings, explain what they are in detail, and how to configure them. How to get started with the app Give a brief overview of the primary purpose of your app . Emphasize covering multiple use cases or the most significant ones to your users. How to uninstall the app Provide instructions for uninstalling your app . It's important to be fully aware of the consequences of uninstalling your app, particularly if it may cause data loss or other potential issues. FAQ Answer any frequently asked questions about the app that you anticipate or receive . As an example, check out our ChatGPT technical document and the format we use as a benchmark for our app documentation.", "tokens": 407}
{"title": "Graphics Guidelines", "content": "These guidelines help ensure that the app assets meet the technical requirements for uploading to the marketplace, avoiding potential rejection or delays in the app review process. Download Figma template App icons create the first impression potential users get from your app. A well-designed icon can lead to more downloads by conveying the app's purpose and capturing users\u2019 attention. The app icon is displayed on: App listing App detail Rocket.Chat sidebar Dimensions: 960x540px Format: JPG, PNG (without transparency) Ensure that your app icon is unique by searching the Marketplace for existing apps with similar icons before designing it. Do design an unique app icon that stands out from competitors. Don\u2019t design an app icon identical to the icon of an existing app. Do use a simple and recognizable design that conveys the app's purpose. Do follow the visual guides so the app icon can be read in different contexts. Don't use a complicated or cluttered design that may be difficult to recognize or distinguish. Don't include the name of your app inside the app icon. Do use a background color. Don't use transparent backgrounds, as the app icon may not have enough contrast to be properly displayed on different themes of Rocket.Chat. Do use the visual guides to center your logo within the frame manually. Don't automatically center your logo within the frame; its shapes may require manual adjustments to optimize its optical balance. App screenshots help potential users understand what the app does and how it works, which can increase the likelihood of installs. High-quality screenshots can enhance the app's overall branding and improve its perceived quality. Dimensions: 960x540px Format: JPG, PNG (without transparency) Do use clear, high-resolution images showcasing the app's features and functionality. Don't use low-quality, blurry, or stretched images that do not present the app accurately or attractively. Display the most important information and features first, using a descriptive and compelling headline highlighting the app's benefits. Don't crowd the screenshots with too much information or use vague or generic headlines.", "tokens": 443}
{"title": "Publisher Webhooks", "content": "A marketplace publisher can register a webhook endpoint link to receive news and updates regarding their marketplace apps. Setting webhook during publisher registration: During your publisher registration, you can input a link in the optional webhook link field. For already registered publishers: This webhook information can be added or edited on their own dashboard in the Publisher Information section. The payload when an event occurs is of this format. The fields are: type: The type of event. Possible events are compile, adminAction and purchaseOrSubscription. appName: The name of the app the event is related to. appID: The id of the app the event is related to. extra: String with extra information related to the event. Field topology is {who did the event}-{event specific description}. when: Timestamp for when the event happened.", "tokens": 180}
{"title": "Contribute to Apps-Engine", "content": "Being open source, we always welcome contributors to help us develop the ultimate chat platform. Contribute to our open source Apps-Engine framework, increasing the world of possibilities of integrations around the Rocket.Chat ecosystem. You can check out our Apps-Engine repository here. GitHub - RocketChat/Rocket.Chat.Apps-engine: The Rocket.Chat Apps engine and definitions. An excellent place to start looking at is our open issues and determining if you can help us with them. When developing new functionalities, you need to integrate the local version of the Apps-Engine with your local version of Rocket.Chat. To start, clone the Apps-Engine repository and navigate into the directory by running the following commands: Next, install all the required packages and compile the changes since that is what Rocket.Chat itself will execute. Setup your Rocket.Chat environment following the guide on server environment setup. After setting up, go to the directory and run the following command: Here PATH_TO_APPS_ENGINE is the path to the Apps-Engine repo you cloned earlier. You can now start your Rocket.Chat with the meteor command, it will use your local Apps-Engine instead of the one on NPM. Whenever you make changes to the engine, run npm run compile again - meteor will take care of restarting the server due to the changes. Sometimes, when you update the Apps-Engine code and compile it while Rocket.Chat is running; you run into errors similar to these: Restart the meteor process, and it should be fixed. Sometimes using meteor npm install PATH_TO_APPS_ENGINE causes the following error: Here PATH_TO_ROCKETCHAT is the path to the main Rocket.Chat server repo in your system. To fix this, we reinstall the package once again and delete the previous package.", "tokens": 382}
{"title": "Bots Development Environment Setup", "content": "Developing bots on RocketChat requires you to get and customize our boilerplate code. To do that, you need to have the following on your machine. Git Node.js Regardless of bot type, the Rocket .Chat SDK requires you to create a configuration with some variables for your environment. This configuration can be stored in a .env file, for local development, while in production, they would need to be set on server startup . The following is a list of all the environmental variables you can use in your project. Variables marked with an asterisk (*) are mandatory. Environment variable Description ROCKETCHAT_URL * URL of the Rocket.Chat instance to connect to . Can be specified as host:port, http://host:port or https://host:port. ROCKETCHAT_USE_SSL Force bot to connect with SSL. If unset, it will try and detect from URL protocol . ROCKETCHAT_AUTH Authorization method for a bot. Default: password. Set to ldap to enable LDAP login for bot users. ROCKETCHAT_USER * The bot's username (account name users will summon the bot with) . Must be registered on your Rocket.Chat server and granted bot role. ROCKETCHAT_PASSWORD * The bot user's password. ROCKETCHAT_ROOM Stream callbacks receive messages from the listed channel name/s. Default: GENERAL. Accepts a comma-separated list . Allows the bot to listen and respond to messages from all newly created private groups where the bot's user has been added as a member . Should be empty if LISTEN_ON_ALL_PUBLIC=true Responding to channels and DMs RESPOND_TO_LIVECHAT Stream callbacks receive messages from Livechat (true/false). Default: false . RESPOND_TO_DM Stream callbacks receive DMs with bot (true/false). Default: false. RESPOND_TO_EDITED Stream callbacks receive edited messages (true/false). Default: false", "tokens": 430}
{"title": "Bots Development Environment Setup", "content": ". SDK development ROOM_CACHE_SIZE Size of cache (LRU) for room (ID or name) lookups. ROOM_CACHE_MAX_AGE Max age of cache for room lookups. DM_ROOM_CACHE_SIZE Size of cache for Direct Message room lookups . DM_ROOM_CACHE_MAX_AGE Max age of cache for DM lookups. INTEGRATION_ID ID applied to message object to integration source. Default: js.SDK ADMIN_USERNAME Admin user name for API calls used in SDK tests . ADMIN_PASS Admin user password for API calls used in SDK tests. Hubot specific HUBOT_NAME Name of the bot. Hubot listeners can respond to this. HUBOT_ALIAS Another name to respond to . If unset, the adapter sets the ROCKETCHAT_USER as an alias, to ensure bots respond when addressed using their username. EXTERNAL_SCRIPTS Hubot scripts to require as NPM modules. Used only in some Docker instances . HUBOT_LOG_LEVEL debug, info, warning or error. Default: info . The common set for the majority of bots is to listen and respond to direct messages and all new public channels and private groups: RESPOND_TO_DM=true ROCKETCHAT_ROOM='' Note that you must add the bot's user as a member of a channel before the bot can respond .", "tokens": 307}
{"title": "Bots Architecture", "content": "The above diagram illustrates the general concepts of how a Rocket.Chat server communicates with a chatbot framework or platform. These concepts are applicable to external bots. Bots architecture consists of two main parts: Rocket.Chat host and bot host . These two parts are connected with each other via Rocket.Chat SDK methods. Bot host runs externally to the Rocket.Chat host, and consists of the bot infrastructure and, typically, external services . The bot infrastructure in turn, consists of SDK, adapter, and framework. A bot, being subscribed to a room's messages (all or specific ones) handles these messages and responds back to the user in an interactive manner . The conversational model can be designed and managed by tooling and frameworks on the bot host. Today, many bots are created using bot frameworks or platforms based on popular programming languages, such as NodeJS and Python . Bot creators design the bot's logic with the help of their favorite framework. This logic defines behavioral interaction with users, giving the bot ability to recognize the context of the conversation . In this way, the bot can focus on what users want to achieve and even take a proactive approach to find the right solution and create a better user experience . With the ability to listen to and respond to messages, the bot can be integrated into the Rocket.Chat host so that it can engage with users in a conversational manner . To perform this connection, bot creators use adapters that can translate the logic defined via the framework's powers to the format that the Rocket.Chat host understands. Adapters use Rocket.Chat SDK methods to communicate with the Rocket.Chat host. Bots in Rocket .Chat requires user accounts with the bot role. Other than having a specific set of permissions, bot accounts are treated like regular user accounts within the Rocket.Chat host . However, to prevent possible user confusion, messages from online bots are marked with a default \"Bot\" label. Admins (and only admins) can create the bot account and configure role permissions . This includes setting the credentials a bot uses to connect as well as which user fields the bots have access to for privacy and security. Rocket.Chat team works on improving management views for bots and enhancing the future potential of user-activated bots", "tokens": 479}
{"title": "Bots Architecture", "content": ". A bot host is a machine where bots run. It can be a bare-metal server, a network cluster, a virtualized environment, or cloud-based. A bot host can manage and run many different bots as well as many instances of any bot . The bot host typically manages connections to external services as well. Rocket.Chat supports multiple bot frameworks and platforms, including Hubot, and Botkit. The hosting for bots depends on the platform. For example, Hubot can be launched on any Node .js environment, but you have to set it up yourself (using Heroku or Glitch services). Other bot platforms like Botkit provide their own services for hosting and provisioning bots. They just need a configuration to connect to your Rocket.Chat instance . Every user in Rocket.Chat has a collection of their messages that can be emitted by the server's streamer . Bots subscribe to the collection of messages for their own user account, creating a stream that is updated every time a message is sent either directly to them or any room they are joined in . The SDK is a low-level software module that offers an interface for external consumers to subscribe to message streams, send messages, and call methods on the Rocket.Chat server via WebSockets/DDP. Bot framework adapters are written using the SDK . An adapter (also referred to as connector or middleware) is a software component that is used to link the framework with the Rocket.Chat host . An adapter allows bot creators to design and build bot interactions according to the framework's rules and practices without dealing with the low-level programming details and methods of communication with the Rocket.Chat host. Adapters use Rocket.Chat SDK to communicate with the Rocket .Chat host. Bot frameworks (such as Hubot, Botkit, Rasa, or Botpress) provide unique approaches to creating conversational interfaces and allow developers to focus on the design and management of complex bot logic . Most frameworks can be run on your own bot host. There are also frameworks that operate as SaaS (Software as a Service), so they work in the cloud. Most of the popular frameworks have adapters created by the Rocket.Chat's community", "tokens": 473}
{"title": "Bots ArchitectureBots FAQs", "content": ". In production, hundreds or thousands of users can be carrying out conversations with a bot at the same time. The ability to scale a bot from one conversation to many concurrent ones is essential. Bot frameworks/platforms support varying degrees of scalability . To ensure that the growing number of users will not cause architectural and performance problems, you should choose your bot's framework wisely. Potential scalability issues should be considered even before starting to implement bot logic . The value of most production bots relies on their ability to access and manipulate external data and systems (services). External services, like databases, scheduling systems, CRM, and NLP can be used to provide data or conversational processing . The framework simplifies the connection of a bot with these services and ensures ease of access to them through the bot host. I am not trying to stage a denial of service attack. Why would I ever want to write a bot? The architecture of hubot-rocketchat looks interesting. Can you tell me more about it?", "tokens": 212}
{"title": "Creating Your Own Bot From Scratch", "content": "This document outlines the steps required to create your first bot with Rocket.Chat. In order to talk to your chatbot, there must be a user account pre-configured on the Rocket.Chat server that the bot can use to log in. To add user accounts, you need to have admin privileges: Navigate to Administration > Workspace > Users. Click +New to create a new user. Fill in the user information, verify the user, and assign it a bot role. Click Save Once saved, the bot's credentials can be configured with the CHAT_USER and ROCKETCHAT_PASSWORD environmental variables of your bot. To avoid creating multiple accounts for bot emails, you can use Gmail + address alias. For example: youremail+botnam@gmail.com. See this issue for further details. To make the process of coding a bot easier and faster, you may want to check our existing guides below to deploy a basic bot instance quickly. As an advanced alternative, you can create your bot from scratch using your favorite framework. Developing a Hubot can serve as a good entry point in learning chatbot principles. Develop a Rocket.Chat SDK Bot If the bot is configured to listen to direct messages RESPOND_TO_DM=true, and messages are prepended with BOT_NAME or a preconfigured BOT_ALIAS, the bot will usually respond to all messages addressed directly to the bot user (depending on the particular bot framework).", "tokens": 302}
{"title": "Develop a Rocket.Chat SDK Bot", "content": "This bot is a simple example of how you can use Rocket.Chat JS SDK methods directly. It is extremely basic and does not handle errors, different message types, server resets, and other production situations. Rocket.Chat Bot is a Node.js package that works with Node and NPM. To develop the bot, follow the steps below. Before you begin, make sure you have the following: A Rocket.Chat workspace already set up. If you haven\u2019t done this, refer to the deployment guides for assistance A bot user created and ready to use. Refer to the guide for instructions on how to create one Open the terminal in the directory where you want to develop your bot and run the following command. To proceed with the simplest setup, you need to create two files: the first one is responsible for the bot's working logic, and the other maps the responses. Create a server.js file with the following content: Create a .env file in your project root folder to add the server and user credentials. Make sure <BOT USER NAME> has a BOT role on the server. For more information on how to create a bot user please refer to this page. Create a reply.js file with the following content: After executing the last command, Rocket.Chat SDK bot tries to connect to the Rocket.Chat instance and listen to messages in the general room: On the server, log in as a regular user (not the BOT user), go to general room, and talk to your newly created bot:", "tokens": 318}
{"title": "Testing Fuselage Components", "content": "Robust testing practices are essential to ensuring the reliability, performance, and functionality of the Fuselage components. Several techniques are employed when necessary to iterate through components or packages used in our flagship project . In cases where Storybook or the local environment proves insufficient, the following approaches are implemented . It is important to note that all examples assume a directory structure where the work tree directories are organized as siblings, as illustrated below: This configuration serves as the foundation for the following techniques", "tokens": 97}
{"title": "Testing Fuselage Components", "content": ". This guide will explore the various testing techniques and best practices to test Rocket.Chat effectively Fuselage. We've created a convenient helper script to streamline the testing and deployment process for Fuselage packages . The source code of this bash script can be accessed at fuselage.sh directory. This script is designed to be used with the command, yarn fuselage -a [action] -p [package] to provide a flexible way to perform various actions . Actions are specified using the -a | --action flag, and the available options are: [link|undo|unlink|latest|latest-all] . link: Creates a symbolic link for the fuselage package undo or unlink: Removes the symbolic link for the fuselage package latest: Update dependencies with the @latest npm package version latest-all: Update ALL fuselage dependencies with the @latest npm packages version The packages that the action will be performed are specified with -p | --package flag, this option can contain multiple packages separated by a semicolon (;) like [package1;package2] Example usage Create a symbolic link in multiple fuselage packages using this command: Remove the symbolic link with this command: Update dependencies to the @rocket .chat/fuselage@latest npm package version: Update ALL fuselage dependencies with the @latest npm packages version: Run webpack in watch mode on @rocket.chat/fuselage: Add a relative-path link resolution for @rocket .chat/fuselage on the root package.json: Update yarn.lock: Run the following commands: Why not use `yarn link`? To test your Fuselage package code within the Rocket.Chat main repository, you can use this technique . Create a symbolic link (symlink) pointing to the corresponding fuselage/{package} directory within the Rocket.Chat repository. In the Rocket .Chat repository root directory, run this command to install dependencies and build packages: Create a symlink to fuselage/{package} at meteor node_moduleswith this command: Navigate back to the main repository root and start the server: After following these steps, your application should reflect the changes .", "tokens": 443}
{"title": "Monorepo", "content": "The Rocket.Chat Fuselage Design System is a collection of components for building user interfaces in Rocket.Chat. It offers flexibility, extensibility, and thorough documentation, enabling the creation of high-quality interfaces. With Fuselage, you can swiftly design custom components and themes to align with your brand's aesthetics and develop reusable components for multiple projects. This system is suitable for versatile and expandable design needs and is particularly advantageous for cost-effective projects due to its open-source nature. The term Fuselage has three distinct meanings in Rocket.Chat: The design system for all Rocket.Chat projects. The set of components and assets that make up the design system. The name of the monorepo that contains all of the above and other related resources. To avoid confusion, we will use the term \"Fuselage Monorepo\" to specifically refer to the monorepository containing all Fuselage-related components, assets, and additional elements within Rocket.Chat. From inception, Rocket.Chat adopted a strategy of splitting the codebase into multiple packages, similar to the Meteor community's approach. This segmentation was implemented to organize the codebase according to specific features, enabling a more targeted approach to development. It proved particularly effective in addressing issues arising from stagnant dependencies that lacked updates. Initially, the Fuselage Monorepo aimed to bridge the void left by old packages, while introducing a separate design system implementation. Its success is evident through the repository's diverse contents, extending beyond components and assets to include a wide array of packages beneficial for front-end development. Learn more about design systems.", "tokens": 327}
{"title": "Conventions", "content": "The code conventions for Rocket.Chat provides guidelines for writing clear, concise, and consistent code. Here are some guidelines to follow: Avoid using CommonJS features such as the require function and the module object alongside ES module constructs like import and export . Our preference lies with ES modules due to their enhanced portability and user-friendly nature. However, it's worth noting that unlike CommonJS, synchronous conditional imports aren't feasible in ES modules. Prioritize using import type over the standard import statement . While the regular import works for both JavaScript and TypeScript and has runtime implications, it can lead to the inclusion of module output code (either the original JavaScript or the transpiled TypeScript) in the bundle . This behavior might not be desired in certain cases. However, the import type construct is specific to TypeScript compilation and helps avoid unnecessary inclusion of code in the bundle . The interface construct in TypeScript bears resemblance to the class construct in JavaScript, with a key distinction: an interface serves as a type declaration, while a class functions as a class declaration. In TypeScript, the type construct is similar to an interface . Nonetheless, the type construct offers greater flexibility compared to the interface . For instance, the type construct permits the declaration of union types, as demonstrated by: While interface was indeed lighter for TypeScript Compiler (tsc), it remains beneficial to employ type when not dealing with a class . Moreover, they exhibit differences in handling generic types . For instance, the interface construct enables the declaration of a generic type: However, the type construct also supports this, and when combined with conditional types, it can radically reshape the entire type structure: This versatility empowers the type construct to offer a more adaptable approach than the interface construct . Refrain from using this pattern: When the foo singleton functions as a mere namespace housing functions and variables, opt for the following approach using the module itself as the singleton: The sole valid scenario for employing a class as a namespace is when you need to manage state within the singleton: In this context, using a class is reasonable because it provides an effective abstraction for encapsulating state and offering a controlled interface for modifying it", "tokens": 458}
{"title": "Conventions", "content": ". Refrain from using any under most circumstances. Instead, adhere to this model: unknown serves as the universal type, encompassing all potential values . any should not be seen as an actual type, but rather as a means to disable TypeScript's type checking. Using any is discouraged as it indicates a lack of awareness regarding the type of value being manipulated and implies indifference toward type safety . In contrast, working with unknown necessitates type narrowing, leading to more robust code . For instance, consider these scenarios: An important exception to this rule is when you're dealing with a generic type constraint like a function: TypeScript is an extension of JavaScript, meaning that when transitioning from JavaScript to TypeScript, you can employ the identical syntax used in JavaScript", "tokens": 158}
{"title": "Conventions", "content": ". It's worth noting that a significant portion of the errors flagged by tools like TypeScript Compiler (tsc) and eslint are intended to ensure adherence to best practices . However, some of these errors can be overlooked or ignored, especially when they don't hinder the functionality of your code. When the allowJs option is enabled in the tsconfig .json configuration file, you can harness the power of JSDoc comments to document types within your JavaScript code. This proves especially valuable during the gradual transition from JavaScript to TypeScript, particularly when TypeScript Compiler (tsc) struggles to deduce types accurately . Take the following JavaScript code as an example: Here, tsc would initially infer the type of foo as { bar: string }, inadvertently ignoring the qux property . To rectify this, you can introduce a JSDoc comment to explicitly define the type, enabling TypeScript to grasp the full structure . Alternatively, you can use the @type tag along with a syntax resembling TypeScript's type construct: Both approaches help bridge the gap between JavaScript and TypeScript, ensuring that the types are accurately documented and recognized by the TypeScript compiler . It's strongly advised to create a .d.ts file as a starting point when migrating significant JavaScript modules to TypeScript. Although this transition can be complex, having a dedicated declaration file (.d.ts) for your module is crucial . TypeScript uses these files to manage imports and exports, essentially serving as the \"interface of a module.\" A module's large size might indicate the need for decomposition into smaller, more manageable modules. Crafting a *.d .ts file simplifies the planning process and enhances your understanding of the module's structure, surpassing the utility of JSDoc comments. As a result, this approach is highly recommended for commencing the conversion of JavaScript modules to TypeScript . Here's an example of a *.d.ts file for a hypothetical module: Most of the recommendations here are based on Alex Kondov's Tao of React", "tokens": 434}
{"title": "Conventions", "content": ". Prefer functional components React initially introduced class components to leverage JavaScript class syntax for managing state and component lifecycles. However, class components have significant drawbacks: They tend to be verbose. They often involve a misuse of the inheritance mechanism through extends and super . Hooks were introduced to provide an alternative approach to declaring state and effects. They maintain the core concept of the component's render function without the need for classes, streamlining the development process . Declare one component per file While colocation is a commendable concept, it's not consistently followed for React components within a single file. The main reason is that we've noticed people misusing this approach before . It might start with something as straightforward as adding a basic modal component alongside a page component, but it can quickly lead to a confusing jumble of components that becomes difficult to manage . Name components Failing to name a component is a common mistake that can lead to prolonged debugging efforts. It results in less informative error stacks and challenges while navigating components in React Dev Tools . There are two approaches to properly name a component: By writing a non-anonymous function: By using the displayName property: Use default export at the end of file While named exports are often preferred, using default export enhances code readability, especially when dealing with Higher Order Components (HOCs) like memo and forwardRef, and it aligns neatly with code splitting using lazy . The same example based on named exports is less readable: Extract helper functions A drawback associated with the adoption of React Hooks is the tendency for individuals to define helper functions within the component . This is facilitated by the fact that there is no requirement to pass arguments; instead, variables from the encompassing scope can be directly accessed and used. Typically, effective helper functions adhere to the principle of being pure, which makes them simpler to debug . However, when you bind variables into the helper's scope, you're making it impure. Furthermore, with each rendering cycle, the function value gets redefined . While this process is efficient in terms of CPU and memory usage, it can lead to scenarios where you must rely on techniques like useCallback to prevent unnecessary re-renders of child components that receive your helper function as a prop . Here's the ideal case: By following these guidelines, you can write code that is easy to read, understand, and maintain.", "tokens": 504}
{"title": "Componentization", "content": "In Rocket.Chat, a component is a reusable piece of code that represents a single UI element. Components can be simple or complex and visual or logical. There are various guidelines governing each component type . These components can either live on the Application\u00a0or the Fuselage\u00a0library. Application components are specific to a particular Rocket.Chat application. They are not reusable across applications. Fuselage library components are reusable across all Rocket.Chat applications . They are the recommended way to create components for Rocket.Chat applications . The components rules matrix includes the table below: Combination Fuselage level Application level Simple & Visual \u2705 \u274c Complex & Visual \u2705 \u2705 Simple & Logical \u274c \u274c Complex & Logical \u274c \u2705 These are the lowest level of components . They represent a single, atomic UI element in the interface, such as a button component or a text field. Use prop names that suggest the variation of a component, rather than using style-based prop names . For example, instead of using a prop name like color with a value of blue, you could use a prop name like variation with a value of primary . This makes the code more readable and maintainable, and it also makes it easier to create consistent and reusable components. \u2705 Preferred example: Use the 'small' and 'square' props to dynamically adjust the component size . \u274c Not recommended: Defining component size using specific numeric values. Avoid the use of random CSS values and instead prioritize customization by using CSS variables. Ensure that all possible variations are documented and showcased within Storybook . This enables developers and designers to explore the full range of available options. Additionally, include descriptive explanations for variations that might not be self-explanatory. Ensure comprehensive coverage of all intended component behaviors through unit tests . It's crucial to highlight the importance of writing unit tests that cover all possible scenarios and functionalities of the component. This practice helps ensure the reliability and correctness of the codebase", "tokens": 405}
{"title": "Componentization", "content": ". The usage of Box is recommended for Simple or Complex Components mainly (save the cases when we need to quickly prototype a component) on the Application level as it's a wildcard component, for simple components, we suggest avoiding it and building the component using HTML tags Complex components are made up of multiple simple components . They can be used to create more complex UI elements, such as a modal or a table. Concentrate solely on the user interface design, ensuring it is poised to incorporate the required logic seamlessly. This facilitates the separation of logic from the user interface . \u274c Incorrect example of component composition: \u2705 Correct example of component composition: Encapsulation is a valuable software design principle that enhances code quality. By defining clear responsibilities for components, it improves understanding, maintenance, and testing . In the context of HTML elements, Box components, and Box props, encapsulation means accessing them solely through the Box component's API. This prevents unintended modifications to the Box component's internal state, ensuring predictable behavior and streamlined debugging . \u274c Incorrect example of component composition: \u2705 Correct example of component composition: In the following example, the useVideoConfControllers hook is provided as a helper to manage the state of the popup's controllers . New components typically emerge from requirements put forth by the Product Design Team. The front-end engineer holds the responsibility of assessing the genuine necessity of such components . Due to the substantial effort involved in creating a new component, it is prudent to collaborate with product managers and designers. It is advisable to explore the feasibility of employing Complex Components as an MVP to validate concepts and user flows . Subsequent to successful validation, the progression to developing a new Fuselage level component can be considered. How do I know my component should be part of the Fuselage library? Consider the VerticalBar component as a clear example . It began as a Complex Component for a single application but has now advanced to the Fuselage level. This shift is driven by its usefulness in multiple applications, like Rocket.Chat and Cloud Portal . This case demonstrates how components can grow from specific solutions to versatile tools with broader applications. Leverage the integration of child components to construct a unified and logical complex component", "tokens": 459}
{"title": "Componentization", "content": ". Provide users with the ability to customize a component's appearance or behavior by selecting from predefined variations or options. This approach enhances user experience and flexibility in adapting components to specific requirements. Refrain from applying direct styles to components . By avoiding inline styling, the code maintains a cleaner structure and promotes better separation of concerns, enhancing maintainability and readability. This approach separates your component's logic from styling, promoting better code organization and maintainability while avoiding inline CSS-in-JS styling . Define your custom styling in an external CSS file: Then, apply the class to your component: By using component states to conditionally render different complex components, you maintain a clear and organized structure in your code, enhancing readability and maintainability . Each state should render the proper Complex Component: Visual components are responsible for the appearance of a UI element. They define the element's style, layout, and other visual properties . Adhering to guidelines in the Fuselage's componentization offers the value of modular, reusable, and maintainable UI components. This approach enables efficient development, ensures consistent behavior, and supports the evolution of solutions from specific contexts to broader applications . By encapsulating logic, avoiding direct styles, and leveraging API-driven customization, developers can create a streamlined and user-centered experience.", "tokens": 274}
{"title": "Accessibility", "content": "In general, we encourage our team while developing to make sure that all focusable elements are accessible through tab navigation. There are a few elements that are focusable by default: Buttons Inputs Links Currently, we use react-hook-form library together with your visual components to help us build our forms on Rocket.Chat. But in order to achieve a good experience beyond visuals we should have some practices in mind to build accessible forms. One of the most common issues of accessibility is not adding the proper label for an input. In order to add a label to the input, make sure to use for attribute to connect them. In huge applications, it is hard to maintain unique IDs with strings, so you can use useUniqueId provided from @rocket.chat/fuselage-hooks to generate unique IDs and use them on your inputs Some inputs are not clear about what information should be entered or its necessary to give more information about it. Visually it's not enough, we have to tell screen readers that information as well, so we can take advantage of aria-describedby to add that. Some inputs are not clear about what information should be entered or its necessary to give more information about it. Visually it's not enough, we have to tell screen readers that information as well, so we can take advantage of aria-describedby to add that. We already use Playwright to run visual testing and we encourage you to add some accessibility violation testing as well", "tokens": 296}
{"title": "Color Palette", "content": "When establishing color schemes for components, it's essential to leverage Fuselage's palette system. This system provides a straightforward and meaningful approach to integrating colors through tokens. Tokens function similarly to Fuselage components, allowing updates to be made solely within the component, rather than requiring changes across the entire Rocket.Chat implementation. Additionally, the palette system facilitates the creation of diverse themes, as each theme can possess its palette implementation. For instance, a dark theme can share the same token groups while differing in token values, enabling versatile and consistent theming. On box component To enhance simplicity and mitigate the risk of token misuse, a convenient shortcut exists that automatically applies the appropriate prefixes. When using surface tokens with the bg prop and font tokens with the color prop, you have the option to exclude the surface- and font- prefixes. Alternatively, you can use the longer form: In Rocket.Chat and/or Fuselage - React components Similar to other components, you can import the Palette from the Fuselage package using: Accessing tokens from the Palette becomes straightforward. For instance: By using the Palette system, any color modifications within Fuselage are automatically managed. This system also seamlessly adapts to changes introduced by the active theme, providing a streamlined and automated approach to color management. When working within a .scss file within the Fuselage package, you can seamlessly integrate tokens into your styles using the following approach: By incorporating the tokens provided by the colors.scss file, you can easily apply color styles to your components and ensure consistency with Fuselage's color palette.", "tokens": 325}
{"title": "Third party libraries", "content": "These libraries are handpicked to complement and enhance your development process, ensuring optimal efficiency and exceptional user experiences. React A Frontend library for crafting user interfaces across web and native platforms. To explore, visit the website and GitHub repository. React Hook Form Create forms with React Hooks for efficient and reliable validation on both web and React Native applications. To learn more, see the official website and GitHub repository. TanStack Query Integrate state management with asynchronous capabilities in your application. Learn more from the website and GitHub repository. Testing Library This toolkit is designed to provide effective and efficient testing practices. Read more on the website and GitHub repository. React Virtuoso Optimize rendering of extensive lists using the most robust virtual list component for React. Get started with the website and GitHub repository. react-error-boundary Easily manage errors in your React applications using this reusable error boundary component. Check out the GitHub repository for more details. By incorporating these resources, you're set to create good user interfaces while maintaining robust and maintainable codebases.", "tokens": 231}
{"title": "Contributing to Fuselage", "content": "At Rocket.Chat, we believe great software is built through collaboration and the collective efforts of a community. As such, we're thrilled to welcome you to the Rocket.Chat Fuselage repository, where we develop the UI component library that powers the user interfaces of Rocket.Chat applications. Whether you're a seasoned developer or just starting your coding journey, your contributions play a crucial role in shaping the future of our open-source project. To contribute to the Fuselage Monorepo, follow these guidelines: Clone the GitHub repository with this command: Navigate to the packages directory to see the several existing packages. Run this command at the root directory to build your project: Running Storybook: Some packages have storybook integrated. To run it, navigate to the desired package folder (in this example packages/fuselage) and run this command: This will open up Storybook on port 6006. If you are creating a new component, you should create a story for it. Without a story, your pull request will likely not be approved or even considered ready for review. After editing components in the fuselage package, the snapshots must first be updated before opening a pull request. To do that, you must run: This command will output files named \u201c<ComponentName>.spec.tsx.snap.\u201d These must be included in the pull requests, or the continuous integration pipeline will fail. You can find additional documentation about snapshots on\u00a0Jest\u2019s snapshot docs page. Congratulations on getting your pull request merged! At the end of the Rocket.Chat release cycle, a new production version of the fuselage packages will be released. Effective testing is crucial for ensuring the reliability, performance, and user experience of the Fuselage components. Check out the Fuselage components documentation for detailed instructions and techniques. We appreciate your contributions to the fuselage package and encourage you to work on new features and bug fixes. Let's continue this journey of improvement together!", "tokens": 397}
{"title": "Version Durability", "content": "Check the table below to verify the final support date of each release version. The release numbers enclosed in brackets are the latest patches for the corresponding release . Please note that end-of-life for any version signifies the last day of the month when support for that version will be terminated. See the Support Center for details. Rocket.Chat Release Released At End of Life 7.3 (7.3 .1) Jan 2025 Jul 2025 7.2 (7.2.2) Jan 2025 Jul 2025 7.1 (7.1 .2) Dec 2024 Jun 2025 7.0 (7.0.6) Nov 2024 May 2025 6.13 (6.13 .1) Oct 2024 Apr 2025 6.12 (6.12.3) Sep 2024 Mar 2025 6.11 (6.11 .3) Aug 2024 Feb 2025 6.10 (6.10.10) Jul 2024 Jan 2025 6.9 (6.9 .7) Jun 2024 Dec 2024 6.8 (6.8.7) May 2024 Nov 2024 6.7 (6.7 .9) Apr 2024 Oct 2024 6.6 (6.6.13) Feb 2024 Aug 2024 6.5 (6.5 .9) Dec 2023 Jun 2024 6.4 (6.4.9) Sep 2023 Mar 2024 6.3 (6.3 .13) Aug 2023 Feb 2024 6.2 (6.2.12) May 2023 Nov 2023 6.1 (6.1 .8) Mar 2023 Sep 2023 6.0 (6.0.8) Mar 2023 Sep 2023 5.4 (5.4", "tokens": 372}
{"title": "Version Durability", "content": ".10) Dec 2022 Jun 2023 5.3 (5.3.7) Nov 2022 May 2023 5.2 (5.2 .2) Oct 2022 Apr 2023 5.1 (5.1.5) Sep 2022 Mar 2023 5.0 (5.0 .8) Jul 2022 Jan 2023 4.8 (4.8.7) Jun 2022 Dec 2022 4.7 (4.7 .5) May 2022 Nov 2022 4.6 (4.6.4) Apr 2022 Oct 2022 4.5 (4.5 .7) Mar 2022 Sep 2022 4.4 (4.4.5) Jan 2022 Jul 2022 4.3 (4.3 .3) Dec 2021 Jun 2022 4.2 (4.2.4) Nov 2021 May 2022 4.1 (4.1 .6) Oct 2021 Apr 2022 4.0 (4.0.6) Oct 2021 Apr 2022 3.18 (3.18 .7) Aug 2021 Feb 2022 3.17 (3.17.3) Jul 2021 Jan 2022 3.16 (3.16 .5) Jun 2021 Dec 2021 3.15 (3.15.4) May 2021 Nov 2021 3.14 (3.14 .6) Apr 2021 Oct 2021 3.13 (3.13.5) Apr 2021 Oct 2021 3.12 (3.12", "tokens": 308}
{"title": "Version Durability", "content": ".7) Feb 2021 Aug 2021 3.11 (3.11.6) Feb 2021 Aug 2021 3.10 (3.10 .7) Dec 2020 Jun 2021 3.9 (3.9.7) Nov 2020 May 2021 3.8 (3.8 .9) Nov 2020 May 2021 3.7 (3.7.4) Sep 2020 Mar 2021 3.6 (3.6 .3) Aug 2020 Feb 2021 3.5 (3.5.4) Jul 2020 Jan 2021 3.4 (3.4 .3) Jun 2020 Dec 2020 3.3 (3.3.3) May 2020 Nov 2020 3.2 (3.2 .2) Apr 2020 Oct 2020 3.1 (3.1.3) Apr 2020 Oct 2020 3.0 (3.0 .13) Feb 2020 Aug 2020 2.4 (2.4.14) Dec 2019 Jun 2020 2.3 (2.3 .3) Nov 2019 May 2020 2.2 (2.2.1) Oct 2019 Apr 2020 2.1 (2.1 .3) Sep 2019 Mar 2020 2.0 (2.0.1) Sep 2019 Mar 2020 1.3 (1.3 .5) Aug 2019 Feb 2020 1.2 (1.2.4) Jun 2019 Dec 2019 1.1 (1.1 .5) May 2019 Nov 2019 1.0 (1.0.5) Apr 2019 Oct 2019", "tokens": 305}
{"title": "Release NotesRocket.Chat", "content": "Welcome to the Rocket.Chat release notes! Stay up to date with the newest features, improvements, and fixes to ensure you have the best communication experience possible. For detailed and to download the latest versions of the Rocket.Chat server, please refer to: Rocket.Chat release notes Rocket.Chat server Github repository Download the Rocket.Chat desktop application for Windows, macOS, and Linux for a seamless desktop experience. Desktop release notes Rocket.Chat desktop GitHub repository Stay connected on the go with the Rocket.Chat mobile app, available for both iOS and Android. Mobile release notes Rocket.Chat mobile Github repository Release Date: January 31, 2024 Support Window: Supported until July 31, 2025 The Monthly Active Contacts (MAC) calculation now uses the Contact entity instead of the Visitor entity for improved accuracy", "tokens": 172}
{"title": "Rocket.Chat", "content": ". VOIP call data is now collected in the Stats Collector to support the new VOIP feature introduced in version 7.0. Room members panel now displays user roles, allowing for clear identification and management of owners and moderators. The new endpoint rooms .membersOrderedByRole lets you view room members sorted according to their roles. The Livechat registration form now only displays departments that allow forwarding, preventing restricted departments from being selected . The mobile-upload-file permission can now be assigned to guests, allowing administrators to configure file uploads for mobile users. Permissions search has been improved to support both permission IDs and labels, making it easier to find specific permissions . Setting modifications are now logged with details including ID, values, user, and timestamp, and retained for one year. Meteor upgraded to 3.1, and Node was updated for enhanced performance and compatibility . The Livechat API now includes the departmentsAllowedToForward property in the /livechat/config endpoint for better control over department selection. Omnichannel rooms can now be force-closed by agents and managers when they become stuck in an inconsistent state . A new forceClose parameter has been added to the /livechat/room.closeByUser endpoint. Livechat conversations correctly assign to the contact manager when the relevant setting is enabled . Autocomplete suggestions function consistently across rooms, resolving previous inconsistencies in user mentions. Room role change messages display correctly. Public channel messages are hidden from users without the \"Preview public channel\" permission . SAML login correctly redirects users to the intended room when using an invite link. SlackBridge service reliably connects to multiple Slack workspaces. Room scroll position is properly restored when navigating between rooms. Room history loads as expected under all conditions . File attachments can be sent on iOS browsers, as the option has been moved to the primary composer actions. Livechat reports display correct dates for time ranges such as last week, last month, last six months, and last year . App action buttons remain responsive after a lost connection. App toolbar icons display correctly. MongoDB version reporting correctly identifies versions instead of displaying \"%s\" for deprecated but supported versions. Room file lists no longer mistakenly display incoming messages as files", "tokens": 486}
{"title": "Rocket.Chat", "content": ". Thumbnails are properly deleted from storage when a room is deleted. Application uninstallation no longer triggers the \"GUI Application error\" when accessed from the requests tab. Apps-Engine reliably reestablishes communication with subprocesses in all cases . Settings retrieval via the /settings endpoint correctly supports the includeDefaults query parameter. For more detailed information, check out our GitHub release page . Release Date: January 6, 2024 Support Window: Supported until July 31, 2025 A new contacts.checkExistence endpoint lets you check if a contact already exists using email, phone, ID, or visitor source. Rocket", "tokens": 143}
{"title": "Rocket.Chat", "content": ".Chat can now store call events for better data tracking. Added in-depth stats for Contact Identification, including metrics for total contacts, verified contacts, blocked contacts, and more. Enhanced the App Settings interface with section-based accordion groups for easier navigation . Added an option to export messages as a JSON file directly from the client. Workspace and subscription admin pages got a facelift with better font scaling, centralized elements, and improved responsiveness . A new callout on the subscription page highlights upgrade eligibility when applicable. Federation setup gets a boost: federated users display correctly as \"Active,\" invalid configurations no longer block starting DMs, and safeguards prevent accidental deletion of federated users and rooms . Fixed issues with subprocess restart retries, livechat form submissions, and federated startup errors. Improved behavior of the \"Use Full Name Initials to Generate Default Avatar\" setting, ensuring initials display as expected across features . Twitter (X) article links now properly display images using meta tags. Resolved a bug with E2EE rooms where creators were required to propagate keys, improving app-created room functionality. BigBlueButton video call \"Join\" buttons now appear consistently . Fixed unread counters showing null for users who hadn\u2019t entered a chat. Notification sounds no longer play randomly. Contact updates no longer fail when custom fields are removed or unregistered . Livechat metrics like \"first response time\" now correctly associate with the first agent. Side panel sorting and extended view special characters issues are resolved. Fixed moderation page usability on smaller screens and improved handling of infinite callbacks degrading performance . Fixed message processing for all Slack servers and Omnichannel queue misfires. The subscription admin page now displays migration numbers correctly. The videoconference ringer works seamlessly after login/logout cycles . Fixed a bug with room members menus not displaying properly in tight spaces. For more detailed information, check out our GitHub release page", "tokens": 413}
{"title": "Rocket.Chat", "content": ". Release Date: December 3, 2024 Support Window: Supported until June 30, 2025 The Single Contact ID add-on has been implemented to unify contact management and enhance security . This ensures that a contact interacting through multiple channels\u2014such as email, chat, or social media\u2014is recognized as the same individual, provided the workspace uses a verification app that allows contacts to confirm their identity . By verifying contact identity, this add-on not only eliminates silos and provides a unified customer profile but also enables high-security, privacy-focused cross-channel communication. This enhancement ensures seamless interactions while safeguarding sensitive information . The search endpoint now retrieves known contacts by default and includes an option to search specifically for unknown contacts. Thread metrics got a refresh! They now feature user avatars, improved titles, and repositioned elements for a cleaner, more intuitive layout . The Apps-Engine runtime now supports the APPS_ENGINE_RUNTIME_TIMEOUT variable, allowing custom timeouts for requests to the Deno subprocess . Pre-app event methods now adhere to this global timeout, which has been increased from 1 second to 30 seconds to better support environments with longer processing times. Fixed an issue where dismissing the \"New version 6 .12 available\" banner caused the admin panel to crash. Resolved an error where agents attempting to take chats in the queue encountered undefined error messages. Addressed issues with custom emojis not displaying correctly . Fixed a bug where newly created teams were mistakenly displayed as channels in the sidebar when the DISABLE_DB_WATCHERS environment variable was enabled. The Waiting Queue feature now correctly queues rooms and provides accurate status updates. Fixed missing translations in the Setup Wizard's forms . Resolved several issues in the Apps-Engine runtime for better performance. Fixed multiple issues affecting team voice calls. For more detailed information, check out our GitHub release page", "tokens": 400}
{"title": "Rocket.Chat", "content": ". Release Date: October 31, 2024 Support Window: Supported until April 30, 2025 Rocket.Chat now supports Add-ons for the Enterprise plan, allowing users to enhance their platform with extra capabilities . Initial add-ons include RC AI, VoIP integration, and WhatsApp 360 Dialog. These add-ons offer advanced functionality, enabling teams to customize further and scale their collaboration experience . The Starter Plan now supports up to 50 users (previously 25). Users can upgrade from the Community Edition (CE) to the Starter Plan via the Cloud Portal . The Compatible Sandbox (vm2) for integration scripts is gone in version 7.0 due to security risks. All scripts now run in the Secure Sandbox (isolated-vm). \u00a0Review your scripts for compatibility . Optimized omnichannel system with reduced database calls, resulting in a 46% reduction in new visitor processing time and a 39% reduction for returning visitors. ACH Debit is now available as a payment method . We\u2019ve added a new VoIP for Team Collaboration beta feature that enhances communication by enabling direct calls within the platform . This premium add-on integrates with your VoIP server through a FreeSWITCH deployment or can be used as a standalone solution, providing a seamless and scalable way to boost team collaboration. Support for MongoDB 7.0 has been added . Official support for MongoDB 4.4 was discontinued in February 2024, and MongoDB 5.0 is now deprecated. Users should upgrade to MongoDB 6.0 or later. The platform has been upgraded to Node.js 20 .x and Meteor 3.0, improving performance. Users must upgrade their Node.js version to maintain compatibility. End-to-End Encryption (E2EE) now includes a confirmation modal when enabling/disabling encryption", "tokens": 389}
{"title": "Rocket.Chat", "content": ". Additionally, you can reset the room key when all members lose their encryption keys. Uploading private apps is now restricted to premium plans (Starter, Pro, Enterprise) . Apps can still be uploaded but will be disabled by default unless verified for premium users. Rocket.Chat Community Edition no longer supports air-gapped environments (environments without internet access) . To ensure compliance with licensing agreements, only users on premium plans\u2014including the free Starter plan\u2014can run Rocket.Chat in these air-gapped setups . Our standard builds include commercial code, so restricting air-gapped environments to premium users helps maintain security and proper licensing compliance . Community users who need a fully open-source setup can use the fossify script to remove all premium code, allowing them to build their own offline solutions", "tokens": 164}
{"title": "Rocket.Chat", "content": ". Admins now have more granular control over team management, with permissions to create and delete public/private rooms within teams. Team-specific permissions will override global settings . Collapsible categories and a recent room view are coming to the main sidebar! These features are under Feature preview, so you can test them out and share feedback . Support Window restrictions are working again, ensuring that features and updates comply with the active support window. Resolved an issue where E2EE rooms would freeze when the room state changed . Fixed a bug in LDAP sync that caused multiple cron jobs to trigger when invalid sync intervals were provided. Login service buttons now correctly apply custom color settings, and a warning has been added to inform admins about WCAG compliance for OAuth button customization . Corrected the broken translation in the \"Forgot Password\" email. Deprecated endpoints and parameters outlined in the Deprecated and phasing out features document have now been removed . For more detailed information, check out our GitHub release page and Deprecated and phasing out features . Release Date: October 10, 2024 Support Window: Supported until April 30, 2025 (6 months from release date) Mentions are now supported in end-to-end encrypted rooms, allowing users to communicate securely without sacrificing collaboration . Added more flexibility for admins managing live chat departments, with a new option to associate departments with specific units during creation and updates. A secondary navigation panel is now available for teams, allowing quick access to their associated channels and discussions . This panel appears when users click on their team in the main sidebar. Currently, this feature is in preview and will become a premium capability once fully released . A new setting allows workspace admins to disable two-factor authentication for OAuth users, simplifying the login process for verified users. Admins can now control whether visitors can close live chat conversations, preventing accidental or premature chat closures", "tokens": 410}
{"title": "Rocket.Chat", "content": ". Apps can now send emails via the built-in SMTP server, expanding the communication capabilities of marketplace apps. A new API for listing rooms and discussions within teams is now available, streamlining team room management . Fixed an issue where marking a room as unread would sometimes immediately mark it as read again. The message parser has been optimized for better performance when handling long messages with many symbols. Improved email validation to flag addresses without a top-level domain (e.g ., \"user@domain\") as invalid. Fixed an issue where conference calls would incorrectly show as \"not answered\" after they ended. For more detailed information, check out our GitHub release page . Release Date: September 5, 2024 Support Window: Supported until March 31, 2025 (6 months from release date) Affects workspaces using the Retention Policy feature: Workspaces upgrading from versions older than 6 .10 may encounter an issue with the Retention Policy feature. A race condition could reset the retention period to 30 days, potentially resulting in the immediate removal of data older than 30 days . To prevent this, we recommend disabling the Retention Policy before upgrading and re-enabling it afterward. The admin rooms table now includes a \"Created at\" column, which our community contributed to improve the tracking of room creation times . A new button has been added to validate Matrix Federation configuration, with a corresponding field in the admin settings indicating whether the configuration is 'Valid' or 'Invalid' . Federation actions, such as sending messages and reacting in federated DMs, will now be disabled if the configuration is invalid. Introduced a new Audit endpoint, /audit/rooms .members, which allows users with the view-members-list-all-rooms permission to retrieve a list of members from any room, even if they are not members themselves . Added a 'Deactivated' tab to the Users page to list users who have logged in but were subsequently deactivated. The 'Active' tab has also received a UI update", "tokens": 425}
{"title": "Rocket.Chat", "content": ". A new setting was added to enable or disable file encryption in end-to-end encrypted rooms. Resolved an issue with end-to-end encrypted file uploads . These files will now always upload successfully, even if the MIME type application/octet-stream is not whitelisted, though they will still be blocked if this MIME type is blacklisted . Addressed an issue where logging in with third-party apps failed without the \"Manage OAuth Apps\" permission. Federated users are now protected from being deleted. Non-channel members can no longer drag and drop files into channels they do not belong to . System messages are no longer counted as the first response in live chat rooms, ensuring accurate metrics for agent response times. For more detailed information, check out our GitHub release page . Release Date: August 9, 2024 Support Window: Supported until February 29, 2025 (6 months from release date) Affects workspaces using the Retention Policy feature: Workspaces upgrading from versions older than 6 .10 may encounter an issue with the Retention Policy feature. A race condition could reset the retention period to 30 days, potentially resulting in the immediate removal of data older than 30 days . To prevent this, we recommend disabling the Retention Policy before upgrading and re-enabling it afterward . Video conference persistent chat: Keep the conversation going long after the call ends! The Pexip App can now store and access chat messages long after the call ends using a unique discussion ID . This ID can be assigned by the app at the start of a conference or automatically generated by Rocket.Chat, \u00a0so users can access their chats anytime through Rocket.Chat . The ID can be reused across multiple conferences, making it easier to pick up right where you left off. We're also working on enabling this feature for other video conference apps", "tokens": 392}
{"title": "Rocket.Chat", "content": ". Omnichannel PDF transcripts upgrade: System messages now appear in Omnichannel PDF and email transcripts ! Plus, we've cut down the time it takes to generate PDF transcripts by pre-loading translations, so you'll see faster results when requesting those all-important records Experience improved navigation with size adjustments to the Header and Contextualbar, making them consistent with the sleek new global NavBar . In version 6.11, workspace administrators can reorganize and customize sidebar categories to suit their preferred workflow. AAC audio files now play smoothly on the web . Attachment handling in Omnichannel emails: We've fixed an issue where attachments were sometimes being skipped in Omnichannel email transcripts. Now, images will be properly displayed, and you'll see a clear error message if an attachment can't be supported . For more detailed information, check out our GitHub release page . Release Date: July 10, 2024 Support Window: Supported until January 31, 2025 (6 months from release date) Affects workspaces using the Retention Policy feature: Workspaces upgrading from versions older than 6 .10 may encounter an issue with the Retention Policy feature. A race condition could reset the retention period to 30 days, potentially resulting in the immediate removal of data older than 30 days . To prevent this, we recommend disabling the Retention Policy before upgrading and re-enabling it afterward. Enhanced security features with end-to-end encryption (E2EE) updates, including asynchronous key distribution, and disabled unnecessary menu items for encrypted messages . E2EE is currently in beta, with ongoing feature additions and adjustments. Improved UI with better message readability. Added a new \"Pending Users\" tab. Enhanced LDAP sync performance . We resolved several issues to make your experience smoother, such as fixing file upload settings, improving retention policy warnings, and correcting UI permission checks . Also, we addressed problems with encrypted message handling and stream recreation after login, ensuring a seamless and secure user experience. For more detailed information, check out our GitHub release page.", "tokens": 451}
{"title": "Desktop", "content": "Release Date: November 13, 2024 Version 4.1.2 is here! This update brings essential compatibility tweaks and improvements to keep things running smoothly with the latest server changes . Fixed an issue with Electron\u2019s language setup, ensuring better i18n support across different languages. Updated the API query to align with server version 7.0 and above, improving stability and compatibility . For more details, check out our GitHub release page. Release Date: September 25, 2024 Updated to Electron 31.6.0, bringing performance improvements and enhanced stability to the app . Added a back button to the settings page for easier navigation when the server list is hidden. Included latest-linux.yml in the release files to ensure smoother update processes for Linux users. For more details, check out our GitHub release page . Release Date: September 13, 2024 The user interface has been updated with Fuselage, providing a cleaner and more responsive design for a better overall experience. The workspace bar has been fully redesigned using our updated design system and color scheme . WCAG compliance: The new color scheme fully meets WCAG accessibility guidelines, improving visual accessibility. Theming: The workspace bar now aligns with the selected theme from your workspace or, in some cases, your operating system . App-level theming will be introduced in a future update. Tooltip improvements: Tooltips have been rewritten to provide clearer information about system states. MacOS traffic light: The traffic light no longer overlaps with other interface elements on Mac systems . Login page background: The background image from the login page no longer applies to the workspace bar. Accessibility enhancements: The desktop app has been updated to improve accessibility, with more improvements on the way . Pexip screen selector: A new screen selector has been added to ensure correct screen-sharing functionality. For more details, check out our GitHub release page", "tokens": 400}
{"title": "Desktop", "content": ". Release Date: August 23, 2024 The system locale now functions correctly for all languages. Links inside PDFs now open in the browser as intended, rather than redirecting. For more details, check out our GitHub release page . Release Date: July 12, 2024 We've updated to Electron 30 for a smoother, more efficient experience. Added a handy menu option to open the configuration folder directly . Set the default option to NO in the not trusted certificate dialog, keeping your decisions crystal clear. For more details, check out our GitHub release page . Release Date: June 3, 2024 Electron Upgrade: We've updated Electron to version 29. This means Windows 7 and Windows 8 have officially retired . Time to upgrade your OS and enjoy the latest security updates by Electron! For more details, check out our GitHub release page.", "tokens": 180}
{"title": "Deprecated and phasing out features", "content": "This document outlines features that are no longer supported in Rocket.Chat or are scheduled for removal in future updates (deprecated). It also serves as an early notice for workspace managers to adjust and optimize their workspaces accordingly . Please note that this information is subject to change with future releases and may not include every deprecated feature. Several outdated features will be removed in v8.0.0 to simplify the codebase, improve performance, and mitigate security risks . API endpoint replacements and removals: The following deprecated API methods and endpoints will be removed, with some being replaced by improved alternatives . Type Name Replacement Deprecated since Planned to be removed in Method insertOrUpdateUser Users upsert no longer allowed; method to be completely removed 6.7.0 8.0.0 Endpoint /users.createToken The endpoint will be removed . 6.8.0 8.0.0 Method muteUserInRoom Replaced by the /rooms.muteUser endpoint. 6.8.0 8.0 .0 Method unmuteUserInRoom Replaced by the /rooms.unmuteUser endpoint. 6.8.0 8.0.0 Method createToken This method will be removed. 6.8.0 8.0 .0 API parameters replacements and removals: The following deprecated API parameters will be removed. Type Name Parameter affected Description Deprecated since Planned to be removed in Endpoint All endpoints using this parameter fields Removed to avoid malicious queries. 5.0 .0 8.0.0 Endpoint All endpoints using this parameter query Removed to avoid malicious queries. 5.0.0 8.0.0 We have upgraded the platform to Meteor 3.0 and Node", "tokens": 367}
{"title": "Deprecated and phasing out features", "content": ".js 20, bringing in the latest security improvements, bug fixes, and performance optimizations. However, this update may require environmental adjustments, especially if your application relies on older Node.js features or Meteor packages . Developers should review their environment and ensure all dependencies are compatible with these new versions. With MongoDB 4.4 reaching end-of-life, we have discontinued its support in favor of MongoDB 7.0 . The new version offers enhanced performance, security improvements, and new features like support for multi-document ACID transactions. MongoDB 5.0 is now deprecated. If you're still using MongoDB 4.4 or 5 .0, an upgrade is necessary to maintain compatibility with our platform. It\u2019s important to test your database migration thoroughly to avoid potential data or performance issues . Removal of Compatible Sandbox (vm2) for Integration Scripts: We've fully removed the Compatible Sandbox option for integration scripts. Previously, Rocket .Chat allowed users to choose between two sandboxing libraries for script execution: vm2 (Compatible Sandbox) and isolated-vm (Secure Sandbox) . Due to critical security vulnerabilities and lack of ongoing support for vm2, it is no longer available as of version 7.0. All scripts will now run exclusively in the Secure Sandbox environment . This change may impact integration scripts that relied on vm2's behavior. Review your integration scripts to ensure they are compatible with the secure sandbox . Enhanced security for app installations: Starting with this release, the ability to upload private apps is now restricted to our premium plans (Starter, Pro, and Enterprise). This change helps us maintain the integrity of Rocket .Chat's customization options while safeguarding the exclusive features of our paid plans. By limiting private app uploads, we ensure that only licensed users can fully tailor their experience, protecting the value and security of our platform . The ability to install apps from a URL will be removed. Unused settings such as UI_Click_Direct_Message and the view-history permission have been removed to comply with security best practices and reduce clutter", "tokens": 451}
{"title": "Deprecated and phasing out features", "content": ". New permissions for room management in teams: New permissions (create-team-channel and create-team-group) have been added to enhance control over room creation within teams. These permissions integrate closely with team management functions and ensure proper visibility and control . Improved error messaging for login attempts: The login process will no longer suggest which credential is incorrect, returning a generic \"Unauthorized\" error instead to enhance security . Disabled query and fields API parameters: The query and fields parameters have been disabled and can only be enabled by setting the ALLOW_UNSAFE_QUERY_AND_FIELDS_API_PARAMS: true environment variable . Enabling them may expose your workspace to security breaches, for which Rocket.Chat is not responsible . Fixes for stuck omnichannel rooms: A migration will correct the statuses of inquiries linked to rooms that are closed but still listed as active due to systemic issues . Removed dependencies: The dependency on the meteor/check package has been removed from all v1 endpoints to avoid errors and enhance performance. Starting with this release, Rocket.Chat Community Edition will no longer support air-gapped environments (environments without internet access) . To ensure compliance with licensing agreements, only users on premium plans\u2014including the free Starter plan\u2014can run Rocket.Chat in these air-gapped setups . Our standard builds include commercial code, so restricting air-gapped environments to premium users helps maintain security and proper licensing compliance. Community users who need Rocket.Chat without commercial restrictions can use the fossify script . This tool removes all premium code, leaving a fully open-source version with no limitations (e.g., no user or MAC limits) . While this doesn\u2019t include our commercial air-gapped setup, it allows users to build their own offline solutions and customize them on top of our open-source code as they wish. For details, check out the fossify script", "tokens": 409}
{"title": "Deprecated and phasing out features", "content": ". Several outdated features have been removed to streamline the codebase and improve overall system performance: HipChat importer removed: Due to the discontinuation of HipChat, the HipChat importer is no longer supported . If you\u2019re still migrating from HipChat, consider using alternative import methods or manually migrating your data. Unused oauth settings removed: We\u2019ve pruned unused and outdated OAuth settings to simplify the configuration process . The button text color and button color settings will be removed. If your system still relies on these deprecated settings, update your configurations to avoid potential authentication issues . API endpoint replacements and removals: The following older API methods and endpoints have been deprecated in favor of newer, more efficient ones. Type Name Replacement Deprecated since Removed in version Method eraseRoom Replaced by rooms.delete endpoint 5.4", "tokens": 187}
{"title": "Deprecated and phasing out features", "content": ".0 7.0.0 Method roomNameExists Replaced by rooms.nameExists endpoint 5.1.0 7.0.0 Method deleteMessage Replaced by chat.delete endpoint 6.2.0 7.0 .0 Method checkUsernameAvailability Replaced by users.checkUsernameAvailability endpoint 5.4.0 7.0.0 Method listEmojiCustom Replaced by emoji-custom.list endpoint 5.4.3 7.0 .0 Method refreshClients Now triggered by assets.setAsset and assets.unsetAsset 5.4.0 7.0.0 Method removeWebdavAccount Replaced by webdav.removeWebdavAccount endpoint 5.1 .0 7.0.0 Method Mailer:unsubscribe Replaced by mailer.unsubscribe endpoint 5.4.0 7.0.0 Method Mailer.sendMail Replaced by mailer endpoint 5.4 .0 7.0.0 Method reportMessage Replaced by chat.reportMessage endpoint 6.2.0 7.0.0 Method getPasswordPolicy Replaced by pw.getPolicy endpoint 5.1.0 7.0 .0 Method livechat:addAgent Replaced by livechat/users/agent (POST) endpoint 5.2.0 7.0.0 Method livechat:addManager Replaced by livechat/users/manager (POST) endpoint 5 .2.0 7.0.0 Method livechat:getCustomFields Replaced by livechat/custom-fields endpoint 5.2.0 7.0.0 Method livechat:getNextAgent Replaced by livechat/agent .next/:token endpoint 5.2.0 7.0.0 Method livechat:loadHistory Replaced by livechat/messages.history/:rid endpoint 5.2.0 7.0 .0 Method livechat:loginByToken Replaced by livechat/visitor/:token endpoint 5.2.0 7.0.0 Method livechat:pageVisited Replaced by livechat/page.visited endpoint 5.2 .0 7.0.0 Method livechat:registerGuest Replaced by livechat/visitor endpoint 5.2.0 7.0", "tokens": 528}
{"title": "Deprecated and phasing out features", "content": ".0 Method livechat:removeAgent Replaced by livechat/users/agent/:_id endpoint 5.2.0 7.0 .0 Method livechat:removeDepartment Replaced by livechat/department/:_id endpoint 5.2.0 7.0 .0 Method livechat:removeManager Replaced by livechat/users/manager/:_id endpoint 5.2.0 7.0 .0 Method livechat:saveDepartmentAgents Replaced by livechat/department/:_id/agents endpoint 5.2.0 7.0.0 Method livechat:saveSurveyFeedback Replaced by livechat/room .survey endpoint 5.2.0 7.0.0 Method livechat:searchAgent Replaced by livechat/users/agent/:_id endpoint 5.2.0 7.0 .0 Method livechat:sendOfflineMessage Replaced by livechat/offline.message endpoint 5.2.0 7.0.0 Method livechat:setCustomField Replaced by livechat/visitor endpoint 5.2 .0 7.0.0 Method livechat:setDepartmentForVisitor Replaced by livechat/visitor endpoint 5.2.0 7.0 .0 Method livechat:discardTranscript Replaced by livechat/transcript/:rid (DELETE) endpoint 6.4.0 7.0 .0 Method livechat:getAgentOverviewData Replaced by livechat/analytics/agent-overview endpoint 6.4.0 7.0 .0 Method livechat:getAnalyticsOverviewData Replaced by livechat/analytics/overview endpoint 6.4.0 7.0", "tokens": 398}
{"title": "Deprecated and phasing out features", "content": ".0 Method livechat:removeTrigger Replaced by livechat/triggers/:_id (DELETE) endpoint 6.5.0 7.0 .0 Method livechat:requestTranscript Replaced by livechat/transcript/:rid endpoint 6.4.0 7.0.0 Method livechat:saveAppearance Replaced by livechat/appearance endpoint 6.4 .0 7.0.0 Method livechat:saveInfo Replaced by livechat/room.saveInfo endpoint 5.3.0 7.0 .0 Method livechat:saveIntegration Replaced by omnichannel/integrations (POST) endpoint 6.2.0 7.0.0 Method livechat:saveTrigger Replaced by livechat/triggers endpoint 6 .4.0 7.0.0 Method livechat:webhookTest Replaced by livechat/webhook.test endpoint 5.4.0 7.0 .0 Method livechat:getAgentData Replaced by livechat/agent.info/:rid/:token endpoint 6.4.0 7.0.0 Method addOauthApp Replaced by oauth-apps.create endpoint 6.2 .0 7.0.0 Endpoint pw.getPolicyReset Replaced by pw.getPolicy endpoint 6.3.0 7.0.0 Endpoint licenses.get Replaced by licenses.info endpoint 6.5.0 7 .0.0 Endpoint licenses.isEnterprise Replaced by licenses.info endpoint 6.5.0 7.0.0 Endpoint channels.images Replaced by rooms.images endpoint 6.8.0 7.0 .0 Endpoint livechat/room.transfer Replaced by licenses/room.forward endpoint 5.2.0 7.0.0 Endpoint livechat/inquiries.queued Replaced by livechat/inquiries.queuedForUser endpoint 5 .4.1 7.0.0 Endpoint livechat/room.visitor The endpoint has been removed. 5.2.0 7.0.0 The following parameters have been removed and replaced", "tokens": 480}
{"title": "Deprecated and phasing out features", "content": ". Type Name Parameter affected Description Deprecated since Removed in version Method authorization:removeUserFromRole role This parameter will no longer accept roleName as a fallback. Use only roleId instead. 4.6.0 7.0 .0 Method authorization:deleteRole role This parameter will no longer accept roleName as a fallback. Use only roleId instead. 4.6.0 7.0 .0 Method authorization:addUserToRole role This parameter will no longer accept roleName as a fallback. Use only roleId instead. 4.6.0 7.0 .0 Method apps (POST) downloadOnly This parameter will no longer be accepted. 6.6.0 7.0.0 Endpoint roles .getUsersInRole role The role parameter will still be used, but its value must now always be the role ID. Querying with the role name as value is deprecated. 4.6.0 7.0 .0 Endpoint oauth-apps.get appId This parameter will no longer be accepted (use clientId or _id instead). 6.0.0 7.0.0 Endpoint roles.addUserToRole roleName This parameter will no longer be accepted . Use roleId instead. 4.6.0 7.0.0 Endpoint roles.removeUserFromRole roleName This parameter will no longer be accepted. Use roleId instead. 4.6.0 7.0 .0 This update is critical for maintaining the operational integrity, security, and efficiency of Rocket.Chat workspaces. Workspace managers should review these changes carefully and begin preparations for a smooth transition to version 7.0.0 . For more detailed information, check out our GitHub release page.", "tokens": 374}
{"title": "Get DM Files", "content": "Get all files in a DM. The authToken of the authenticated user. The userId of the authenticated user. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, { \"value\": -1, \"_id\": 1 } This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \"g\": query={ \"name\": { \"$regex\": \"g\" }} This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } The roomId of the DM. It is required if username is not provided. The username of the user in the DM. It is required if roomId is not provided. OK Unauthorized", "tokens": 263}
{"title": "Close DMGet DM CountersCreate DMDelete DM", "content": "Removes the direct message from the user's list of direct messages. The authToken of the authenticated user. The userId of the authenticated user. The room ID. OK Bad Request Unauthorized Gets counters and information of direct messages. Permission required: view-room-administration. The authToken of the authenticated user. The userId of the authenticated user. The DM room ID The user ID to provide counters for. OK Note Bad Request Unauthorized Create a direct message session with another user or more than one user. The authToken of the authenticated user. The userId of the authenticated user. The username to open a direct message session. This parameter is required if the usernames parameter is not provided List of usernames to open a multiple direct message session. This parameter is required if the username parameter is not provided Creates the direct message session excluding the current authenticated user. The session will only be opened if the current user has the view-room-administration permission OK Bad Request Unauthorized Delete a DM. Permission required: view-room-administration. The authToken of the authenticated user. The userId of the authenticated user. The room ID of the DM. This parameter is required if you don't enter the username parameter. The username of the user in the DM. This parameter is required if you don't enter the roomId parameter. OK Bad Request Unauthorized", "tokens": 309}
{"title": "DM HistoryList All DMs", "content": "Retrieves the message history from a direct message. The authToken of the authenticated user. The userId of the authenticated user. The room ID. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. The end of time range of messages to retrieve. The start of the time range of messages to retrieve. Whether messages which land on the latest and oldest dates should be included. Whether the number of unread messages should be included. OK Bad Request Unauthorized List all DMs in the workspace. Permission required:view-room-administration. The authToken of the authenticated user. The userId of the authenticated user. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, { \"value\": -1, \"_id\": 1 } This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \"g\": query={ \"name\": { \"$regex\": \"g\" }} This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } OK Unauthorized", "tokens": 354}
{"title": "List DMsList DM Members", "content": "List all the DMs of the authenticated user. The authToken of the authenticated user. The userId of the authenticated user. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, { \"value\": -1, \"_id\": 1 } OK Unauthorized List all the members of a DM. The authToken of the authenticated user. The userId of the authenticated user. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, { \"value\": -1, \"_id\": 1 } The room ID of the DM. It is required if username is not provided. The username of the user in the DM. It is required if roomId is not provided. OK Bad Request Unauthorized", "tokens": 289}
{"title": "List DM Messages", "content": "List all the messages in a DM. The authToken of the authenticated user. The userId of the authenticated user. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, { \"value\": -1, \"_id\": 1 } This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } The room ID of the DM. It is required if username is not provided. The username of the user in the DM. It is required if roomId is not provided. Filter the messages where a user has been mentioned by the userId. For a set of userIds, use an array ([\"838ndhd79w\", \"dud0wu900\"]). Filter the messages a user have starred by userId. For a set of userIds, use an array ([\"838ndhd79w\", \"dud0wu900\"]). Filter pinned messages. OK Bad Request Unauthorized", "tokens": 308}
{"title": "Message Others", "content": "Retrieves the messages from any direct message in the server. For this method to work, navigate to Administration > Workspace > Settings > General > REST API > Enable Direct Message History Endpoint and enable it. Permission required: view-room-administration. The authToken of the authenticated user. The userId of the authenticated user. The room ID. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, { \"value\": -1, \"_id\": 1 } This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \"g\": query={ \"name\": { \"$regex\": \"g\" }} This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } OK Bad Request Unauthorized", "tokens": 273}
{"title": "Open DMSet DM TopicList Email Inbox", "content": "Adds a DM back to the user's list of direct messages. The authToken of the authenticated user. The userId of the authenticated user. The room ID. OK Bad Request Unauthorized Set the topic of a DM. The authToken of the authenticated user. The userId of the authenticated user. The room ID of the direct message. The topic of the DM. OK Bad Request Unauthorized Gets email inbox list. Permissions required:- manage-email-inbox The authToken of the authenticated user. The userId of the authenticated user. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} The number of items to return. This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \"g\": query={ \"name\": { \"$regex\": \"g\" } } This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } OK Unauthorized Forbidden", "tokens": 328}
{"title": "Set Email InboxEmail Inbox by IDDelete Email Inbox by IDSearch Email Inbox", "content": "Sets the email inbox for your server. Permissions required:- manage-email-inbox The authToken of the authenticated user. The userId of the authenticated user. Email Id The name you wish to set for your email. The email to be used Set whether or not the email is active. The description for this entry. Sender info to be attached on outgoing emails. The department to which the email will be available. An object with your SMTP credentials to be used for outgoing emails. An object having your IMAP credentials to be used for incomming emails. OK Bad Request Unauthorized Forbidden Gets email inbox by ID. Permissions required: manage-email-inbox The authToken of the authenticated user. The userId of the authenticated user. Email inbox ID OK Bad Request Unauthorized Forbidden Deletes email inbox using ID. Permissions required: manage-email-inbox The authToken of the authenticated user. The userId of the authenticated user. Email inbox ID OK Bad Request Unauthorized Forbidden Searches email inbox by email address. Permissions required: manage-email-inbox The authToken of the authenticated user. The userId of the authenticated user. Email inbox address OK Forbidden", "tokens": 273}
{"title": "Send test email to email inboxGet Available Agent Information", "content": "Send a test email to the inbox. Permissions required: manage-email-inbox The authToken of the authenticated user. The userId of the authenticated user. Email inbox id OK Unauthorized Forbidden Get information about the currently available agent. Permission required: manage-agent-extension-association The authToken of the authenticated user. The userId of the authenticated user. Use the query operator to search for specific data. For more information, see Query Parameters. The response is the data that contains this text. The voice channel extension associated with the agent. If you don't enter any extension number, the endpoint returns a list of all agents who have not been assigned any extensions. For information about extensions, see Associate agents with extensions in Rocket.Chat. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, sort = {\"value\": -1, \"_id\": 1} OK Unauthorized Forbidden", "tokens": 259}
{"title": "Get Agent InformationGet Next Agent InformationList All Canned Responses", "content": "Get the Livechat agent data according to the path variables. To get the rid and token values, call the Get Rooms endpoint to retrieve the details of all rooms. The room ID. The visitor token. OK Get information about the next available agent for an incoming conversation. This endpoint returns the available agents who have not been assigned to any chat yet. To get the token value, call the Get Rooms endpoint to retrieve the details of all rooms. The visitor token. OK Get a list of all canned responses in the workspace. Permissions required: The authToken of the authenticated user. The userId of the authenticated user. The shortcut to trigger the message snippet. The message snippet. The scope of the canned response. It can either be global, user, or department. The tags for your canned response. The department ID where the canned response belongs to. It is required if the scope is department. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, sort = {\"value\": -1, \"_id\": 1} This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields = {\"username\": 1} The user ID who created the canned response. OK Unauthorized Forbidden", "tokens": 351}
{"title": "Create or Update or Delete a Canned ResponseGet User Canned ResponsesGet a Canned ResponseGet List of Call Center Rooms", "content": "To create and update canned responses, the following permissions are required: To delete a canned response, the following permission is required: The authToken of the authenticated user. The userId of the authenticated user. Note: The shortcut to trigger the message snippet. The message snippet. The scope of the canned response. It can either be global, user or department. The tags for your canned response. The departmentId where the canned response belongs to. It is required if the scope is department. The canned response's ID. OK Bad Request Unauthorized Forbidden Get a list of all canned responses in the workspace that belong to the current user scope. Permission required: view-canned-responses The authToken of the authenticated user. The userId of the authenticated user. OK Unauthorized Forbidden Get a specific canned response. Permission required: view-canned-responses The authToken of the authenticated user. The userId of the authenticated user. The canned response's ID. OK Unauthorized Forbidden Permissions required: The authToken of the authenticated user. The userId of the authenticated user. List of agent information. The status of the room. The value can be true or false. The date and time when the room was created. The date and time when the room was closed. List of tag information. The ID assigned to the call (opaque ID). The visitor ID. The direction of the call. The name of the room. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, sort = {\"value\": -1, \"_id\": 1} This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields = {\"username\": 1} OK Unauthorized Forbidden", "tokens": 459}
{"title": "Create or Get Call Center RoomClose Call Center Room", "content": "Creates a VoIP room if the room ID is not passed; otherwise, it gets an existing room based on the room ID and token. The authToken of the authenticated user. The userId of the authenticated user. The visitor token. The agent ID. The room ID. If the room ID is not provided, a new room is created. If the room ID is provided, the room's details are returned, if the room exists. The direction of the call, inbound or outbound. OK Bad Request Unauthorized Forbidden Permission required: inbound-voip-calls The authToken of the authenticated user. The userId of the authenticated user. The ID of the open room. The visitor token. OK Bad Request Unauthorized Forbidden", "tokens": 161}
{"title": "Read Channel Messages Anonymously", "content": "Fetch the messages in a public channel to an anonymous user. You must enable Accounts_AllowAnonymousRead setting in the workspace. The room id. It is required if the roomName is not provided. The room name. It is required if the roomId is not provided. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \"g\": query={ \"name\": { \"$regex\": \"g\" } } This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } OK Bad Request", "tokens": 256}
{"title": "Create ChannelAdd all Users to a ChannelAdd Channel Leader", "content": "Create a public channel. Optionally, include specified users. The channel creator is included as a member by default. Channel naming has restraints following the regex filter [0-9a-zA-Z-_.]+ by default. See UTF8 Settings to modify regex filter for channel names. Channel names must not allow for any whitespaces. The authToken of the authenticated user. The userId of the authenticated user. The name of the channel. An array of the users to be added to the channel when it is created. Set if the channel is read only or not. It is false by default. If set to true, the user calling the endpoint is not automatically added as a member of the channel. The default value is false. If you have defined custom fields for your workspace, you can provide them in this object parameter. Enter the following details for the object: For more information, see Channels OK Unauthorized Adds all users in the workspace to a channel. The authToken of the authenticated user. The userId of the authenticated user. The channel's id. Add only active users. It is false by default. OK Unauthorized Assign the role of leader to a user in the current channel. Permission required: set-leader The authToken of the authenticated user. The userId of the authenticated user. The channel's id The userId of the user to be made leader OK Bad Request Unauthorized", "tokens": 310}
{"title": "Add Channel ModeratorAdd Channel OwnerArchive ChannelClose ChannelGet Channel Counters", "content": "Assign the moderator role to a user in a channel. Permission required: set-moderator The authToken of the authenticated user. The userId of the authenticated user. The channel's id The user ID that you want to set as the moderator. OK Bad Request Unauthorized Assign the owner role to a user in a channel. Permission required: set-owner The authToken of the authenticated user. The userId of the authenticated user. The channel's id The user ID that you want to set as the channel owner. OK Bad Request Unauthorized Archive a channel. Permission required: archive-room The authToken of the authenticated user. The userId of the authenticated user. The channel ID that you want to archive. OK Bad Request Unauthorized Remove a channel from the authenticated user's list of channels. The authToken of the authenticated user. The userId of the authenticated user. The channel ID that you want to close from your list. OK Bad Request Unauthorized Gets channel counter for the authenticated user. Permission required: view-room-administration The authToken of the authenticated user. The userId of the authenticated user. The room id. It is required if the roomName is not provided. The room name. It is required if the roomId is not provided. The user ID. OK Note", "tokens": 293}
{"title": "Delete Channel", "content": "Delete a channel. The authToken of the authenticated user. The userId of the authenticated user. Enter the room ID. This parameter is required if no roomName is provided. Enter the room name. This parameter is required if no roomId is provided. OK", "tokens": 60}
{"title": "Get Channel Files", "content": "Retrieves all the files from a channel. The userId of the authenticated user. The authToken of the authenticated user. The room id. It is required if the roomName is not provided. The room name. It is required if the roomId is not provided. This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \"g\": query={ \"name\": { \"$regex\": \"g\" } } List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} The number of items to return. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. OK", "tokens": 254}
{"title": "Get Channel HistoryGet Channel Information", "content": "Retrieves the history of a channel. The authToken of the authenticated user. The userId of the authenticated user. The room id. It is required if the roomName is not provided. The room name. It is required if the roomId is not provided. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} The number of items to return. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The end of time range of messages to retrieve. The default value is the current date and time. The start of the time range of messages to retrieve Whether messages which land on the latest and oldest dates should be included. The default value is false. Whether thread messages should be included in the response Whether the number of unread messages should be included. The default value is false. OK Retrieves the information about the channel. This does not include archived channels. The authToken of the authenticated user. The userId of the authenticated user. The room id. It is required if the roomName is not provided. The room name. It is required if the roomId is not provided. OK", "tokens": 296}
{"title": "Add Users to ChannelJoin a ChannelRemove User from ChannelLeave ChannelGet List of Joined Channels", "content": "Add a user or bulk users to a channel. For a user to invite other users, they must match at least one of the following premises: The authToken of the authenticated user. The userId of the authenticated user. The channel's ID. The user id to be invited. The channel's id An array of the userId of users to be invited You can enter the user ID of one user or add multiple users. Use any one of the objects above as the body parameters. OK Join a channel. The authToken of the authenticated user. The userId of the authenticated user. The channel's id. The join code of the room. The join code isn't needed if the user has the join-without-join-code permission. OK Remove a user from the channel. The channel's id The id of the user to be removed. OK Leave a channel. The authToken of the authenticated user. The userId of the authenticated user. The channel ID that you want to leave. OK Lists all the channels the authenticated user has joined. The authToken of the authenticated user. The userId of the authenticated user. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \"g\": query={ \"name\": { \"$regex\": \"g\" } } This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } OK", "tokens": 454}
{"title": "Get Channel ListGet Members of a Channel", "content": "Lists all of the channels on the workspace. The authToken of the authenticated user. The userId of the authenticated user. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \"g\": query={ \"name\": { \"$regex\": \"g\" } } This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } OK Unauthorized Lists all channel users. The list of elements a user can use to sort the list is limited. The current sortable element is:username The authToken of the authenticated user. The userId of the authenticated user. The room id. It is required if the roomName is not provided. The room name. It is required if the roomId is not provided. The user's status (search filter). Extra search filters to be applied to the fields defined in the Accounts_SearchFieldssetting. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} The number of items to return. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. OK", "tokens": 427}
{"title": "List Channel Members By Highest Role", "content": "Lists all channel users sorted by their room scoped roles. Room members are sorted by their most important role in the room. The following hierarchy is used: Owner > Moderator > Other roles. The information related to each user's highest role is returned in the highestRole object within each of them. The highestRole object contains a numeric level field which ranges from 0 to 2. Level 0 stands for room owners, while level 1 is assigned to moderators (that are not room owners) and level 2 is assigned to all other team members regardless of their room scoped roles. The highestRole object also contains a role field, which has three possile values: owner, moderator or member, which are assigned to levels 0, 1 and 2, respectively. The list of elements a user can use to sort the list is limited. The current sortable element is:username The authToken of the authenticated user. The userId of the authenticated user. The user's status (search filter). The room id. It is required if the roomName is not provided. The room name. It is required if the roomId is not provided. Extra search filters to be applied to the fields defined in the Accounts_SearchFields setting. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. OK", "tokens": 352}
{"title": "Get Channel MessagesGet Channel Moderators", "content": "Lists all of the channel messages. The authToken of the authenticated user. The userId of the authenticated user. The room id. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. Filter the messages where a user has been mentioned by the userId. For a set of userIds, use an array ([\"838ndhd79w\", \"dud0wu900\"]). Filter the messages a user have starred by userId. For a set of userIds, use an array ([\"838ndhd79w\", \"dud0wu900\"]). Filter pinned messages. OK Unauthorized List all the moderators in a channel. The authToken of the authenticated user. The userId of the authenticated user. The room id. It is required if the roomName is not provided. The room name. It is required if the roomId is not provided. OK Unauthorized", "tokens": 283}
{"title": "List Online Users in a ChannelAdd Channel to User ListRemove Channel LeaderRemove Channel ModeratorRemove Channel Owner", "content": "List all online users in a channel. If the channel's id is not provided, it lists all the online users of all the channels. The authToken of the authenticated user. The userId of the authenticated user. The channel's id. OK Add a channel to the authenticated user's list of channels. The authToken of the authenticated user. The userId of the authenticated user. The channel's id. OK Remove the leader role from a user in a channel. Permission required: set-leader . The authToken of the authenticated user. The userId of the authenticated user. The channel's id The user's id OK Bad Request Unauthorized Remove the moderator role from a user in a channel. Permission required: set-moderator. The authToken of the authenticated user. The userId of the authenticated user. The channel's id The user's id OK Bad Request Unauthorized Remove the owner role from a user in a channel. Permission required:set-owner. The authToken of the authenticated user. The userId of the authenticated user. The channel's id The user's id OK Unauthorized", "tokens": 261}
{"title": "Rename a ChannelGet Channel RolesSet Channel AnnouncementSet Channel Custom FieldsSet Default Channel", "content": "Change the name of a channel. The authToken of the authenticated user. The userId of the authenticated user. The channel's id The new name of the channel. It can not be the same as the current name. OK Unauthorized Lists all user's roles in the channel. The room id. It is required if the roomName is not provided. The room name. It is required if the roomId is not provided. OK Unauthorized Set an announcement for the channel. The userId of the authenticated user. The authToken of the authenticated user. The channel's id The announcement to set for the channel. OK Unauthorized Sets the custom fields for a channel. The userId of the authenticated user. The authToken of the authenticated user. The channel's ID. Alternatively, enter the roomName parameter and provide the room's name as the value. The custom fields to set for the channel. OK Unauthorized Set whether the channel is a default channel or not. The authToken of the authenticated user. The userId of the authenticated user. The channel ID. Boolean of whether the room is default or not. OK Unauthorized", "tokens": 257}
{"title": "Set Channel DescriptionSet Channel Join CodeSet Channel PurposeSet Channel ReadOnlySet Channel Topic", "content": "Set the description for a channel. The authToken of the authenticated user. The userId of the authenticated user. The channel ID. The description to set for the channel. OK Unauthorized Set the code required to join the channel. If it is set, users must use the join code to successfully join the channel. The authToken of the authenticated user. The userId of the authenticated user. The channel's id The join code that will be required for any user to join this channel. OK Unauthorized Set the purpose or description of the channel. It is the same as Set Channel Description. The authToken of the authenticated user. The userId of the authenticated user. The channel's id The description to set for the channel. OK Unauthorized Set a channel to be read-only or not. The authToken of the authenticated user. The userId of the authenticated user. The channel ID. Boolean of whether the room is read-only or not. OK Unauthorized Set the topic for a channel. The authToken of the authenticated user. The userId of the authenticated user. The channel's id The channel's topic OK Unauthorized", "tokens": 261}
{"title": "Set Channel TypeUnarchive a ChannelGet all user mentions in a channel", "content": "Set the channel type. The channel type can be either c (public) or p (private). The authToken of the authenticated user. The userId of the authenticated user. The channel's ID. Alternatively, enter the channelName parameter and provide the channel's name as the value. The channel's type. The type of room this channel should be, either c or p. c is for channel and p is for private. OK Unarchive a Channel. The authToken of the authenticated user. The userId of the authenticated user. The channel ID that you want to unarchive. OK Unauthorized Get all the mentions of the authenticated user in a channel. The authToken of the authenticated user. The userId of the authenticated user. The room id. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} OK Unauthorized", "tokens": 270}
{"title": "Get Channel Integrations", "content": "Retrieves the integrations that the channel has. The endpoint requires at least one of the following integration permissions: It will return the integrations based on the user's permission. The authToken of the authenticated user. The userId of the authenticated user. The room id. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \"g\": query={ \"name\": { \"$regex\": \"g\" } } The number of items to return. OK Unauthorized", "tokens": 258}
{"title": "Convert channel to teamLogin with Username and Password", "content": "Convert a channel to a team. Permission required: create-team The authToken of the authenticated user. The userId of the authenticated user. The channel's ID. Alternatively, enter the channelName parameter and provide the channel's name as the value. OK Unauthorized Although none of the body parameters are required, it's mandatory to include either the user AND password or only the resume parameter. To authenticate a request, you need to pass the userId and authToken values from this JSON response object as headers in the request. The authToken is passed as X-Auth-Token header, while the userId as X-User-Id header. If LDAP authentication is enabled, you must maintain the login in the same way as you normally do. Similarly, if 2FA is enabled for an LDAP user, everything stays the same. Your user name or email. Your pasword. Your previously issued authToken. The 2FA code. It is required if your account has two-factor authentication enabled .", "tokens": 225}
{"title": "Login with FacebookLogin with TwitterLogin with Google", "content": "The desired OAuth service name. In this case, facebook. Access token provided by Facebook oauth. The secret provided by Facebook. Lifetime of token (in seconds). The desired OAuth service name. In this case, twitter. Access token provided by Twitter OAuth. The access token secret provided by Twitter OAuth. The app secret provided by Twitter. The app ID provided by Twitter. Lifetime of token (in seconds). The desired OAuth service name. In this case, google. Access token provided by Google OAuth. The ID token provided by Google OAuth. Lifetime of token (in seconds). Google scopes for API.", "tokens": 146}
{"title": "LogoutGet Profile Information", "content": "Invalidate your REST API authentication token. The authorization token of the user The user id of the user Quick information about the authenticated user. The user ID of the user. The authorization token of the user. OK The customFields parameter won't be returned if it doesn't exist on the workspace.", "tokens": 67}
{"title": "Customer Terms of Service", "content": "Effective date: November 30th, 2023 This Agreement is between the corporation, company, or other business entity that accepts these terms (referred to as \"Customer,\" \u201cyou,\u201d \u201cyour\u201d) and Rocket .Chat Technologies Corp or any of its affiliated entities (\u201cRocket.Chat, \" \u201cwe, \" \u201cus,\u201d and \u201cour, \" which may vary depending on the Customer's location . The Customer represents that it is a corporation, company, or other business entity and not an individual consumer . The person accepting these terms represents that they have read and understood the terms in their entirety and possess the requisite legal authority to bind the Customer to these terms . THESE TERMS ARE EFFECTIVE AS OF THE DATE YOU FIRST CLICK \u201cI AGREE\u201d (OR A SIMILAR BUTTON OR CHECKBOX) OR USE OR ACCESS A ROCKET .CHAT SERVICES, OR SIGN AN ORDER FORM, OR SUBSCRIPTION, WHICHEVER IS EARLIER (THE \u201cEFFECTIVE DATE\u201d). THESE TERMS DO NOT HAVE TO BE SIGNED TO BE BINDING . YOU INDICATE YOUR ASSENT TO THESE TERMS BY CLICKING \u201cI AGREE\u201d (OR A SIMILAR BUTTON OR CHECKBOX) AT THE TIME YOU REGISTER FOR A CLOUD PRODUCT; CREATE A ROCKET .CHAT ACCOUNT, OR PLACE AN ORDER. FOR NO-CHARGE SERVICES, YOU ALSO INDICATE YOUR ASSENT TO THESE TERMS BY ACCESSING OR USING THE APPLICABLE NO-CHARGE PRODUCT . PLEASE READ THE CUSTOMER TERMS CAREFULLY BEFORE USING OUR SERVICES, AND NOTE THAT THESE CUSTOMER TERMS INCLUDE AUTO-RENEWAL PROVISIONS AND MAY LIMIT YOUR RIGHTS AND LIABILITIES. This Agreement governs Customer\u2019s use of Rocket .Chat's services. It consists of the following documents: Customer Terms: These contain the general legal and commercial terms that apply to the use of Rocket", "tokens": 347}
{"title": "Customer Terms of Service", "content": ".Chat Services, including Appendix 1 (Self-Hosted) and Appendix 2 (Cloud Hosting), which provide specific clauses that are applicable to the deployment method chosen by the Customer . Terms of Use and Acceptable Use Policy: These documents describe what Users can and can\u2019t do while using our Services. The Terms of Use are applicable to and bound to the End-Users . Customer's represents that it will provide the Terms of Use and Acceptable Use Policy to each of Customer\u2019s End Users, and that Customer will obtain each End User\u2019s acceptance of such terms . Service-Specific Terms: These encompass any additional terms that apply to the use of our individual Service offerings, such as cloud services (i.g marketplace, push notification, etc) support, other add-ons . Data-Specific Agreements: Depending on the location of the Customer and the applicable privacy regulations, Customer may be required to agree to a data agreement with Rocket.Chat . If you are required to agree to a data agreement with us, it will be added by reference to these terms. You can find information related to privacy agreements within Clause 6 (of this agreement) and in the Privacy Center . Ordering Documents: If applicable, any Order Forms, Subscriptions or Statements of Work (each, an \u201cOrdering Document\u201d) entered between Customer and Rocket .Chat shall be attached to and made a part of the Agreement The Terms of Use, Acceptable Use Policy, Service-Specific Terms, and Data Specific Agreement are referred to collectively as the \u201cAdditional Terms .\u201d We update the Customer Terms and Additional Terms from time to time. If you have an active Rocket.Chat subscription we will let you know when we update the terms via in-app notification (through the Workspace Admin account) or by email . Continued use of the Services after any updates become effective constitute Customer\u2019s agreement to be bound by the revised Agreement. Thus, if Customer does not accept a change to any terms, Customer should stop using or accessing the Services", "tokens": 406}
{"title": "Customer Terms of Service", "content": ". Upon acceptance of an Order Form or Subscription, Rocket.Chat will make the Services available to the Customer(s). The Services will continue for the Initial Term set forth in the Ordering Document and will be automatically renewed pursuant to Section 8 . Unless otherwise stated in the Service Specific Terms, the Customer is authorized to use the Service solely for its business purposes . Unless the parties have entered into an executed a Partner Agreement, Customer is expressly prohibited from sublicensing or reselling the Services to any third party . The Customer's right to use the Service is limited only to those expressly granted in the Agreement, including any Service Specific Terms. No other rights, except those explicitly granted in the Agreement, with respect to the Service or any related Rocket .Chat Intellectual Property shall be implied. Upon payment of all fees and subject to continuous compliance with this Agreement, Rocket .Chat hereby grants Customer a limited, non-exclusive, non-transferable license to access, use, and install (if applicable) the Services during the Term . For the avoidance of doubt, Customer may provide, make available to, or permit its End-Users to use or access the Services in whole or in part; provided that Customer shall be responsible for its End Users\u2019 use of the Service . Customer agrees that Rocket.Chat may deliver the Services to the Customer with the assistance of its Affiliates, licensors, and service providers. During the Term, Rocket .Chat may update or modify the Services to reflect changes in, among other things, laws, regulations, rules, technology, industry practices, patterns of system use, and availability of a third-party program. Rocket .Chat\u2019s updates or modifications to the Services will not materially reduce the level of performance, functionality, security, or availability of the Services during the Term. Rocket.Chat offers two deployment options for its services: Self-Hosted or Cloud Hosting . It is important to note that there are specific Appendices in these Customer Terms that apply only to one type of deployment. Furthermore, the privacy handling also varies for each deployment option . Appendix 1 covers the Self-Hosted Specific Clauses, while Appendix 2 covers the Cloud Hosting option. For more details, please refer to these appendices and the Privacy Policy. Rocket", "tokens": 462}
{"title": "Customer Terms of Service", "content": ".Chat may offer certain Services to Customers at no charge, including free accounts, trial use, and Beta Versions as defined below (collectively, \u201cNo-Charge Products\u201d) . Customer use of No-Charge Services is subject to any additional terms that we specify and is only permitted during the Subscription Term we designate (or if not designated, until terminated in accordance with this Agreement) . Specifically, \u201cStarter\u201d plans are limited to 1 workspace per organization; organizations that violate this term may be required to remediate the violation, including but not limited to, paying for a workspace license or having \u201cStarter\u201d plans restricted to only 1 active workspace . Except as otherwise set forth in these Customer Terms, the terms and conditions of these Customer Terms fully apply to No-Charge Services . We may modify or terminate your right to use No-Charge Services at any time and for any reason at our sole discretion, without liability to you . You understand that any pre-release and Beta Services and any pre-release and Beta features that we make available (collectively, \u201cBeta Versions\u201d) are still under development, may be inoperable or incomplete, and will likely contain more errors and bugs than generally available Services . We make no promises that any Beta Versions will ever be made generally available. In some circumstances, we may charge a fee in order to allow you to access Beta Versions, but the Beta Versions will still remain subject to this Section . All information regarding the characteristics, features, or performance of any No-Charge Products (including Beta Versions) constitutes our Confidential Information. To the maximum extent permitted by applicable law, and notwithstanding anything to the contrary in this Agreement, Rocket .Chat disclaims all representations, warranties, obligations or liabilities with respect to No-Charge Products, including any Support Services, warranty, and indemnity obligations . NOTWITHSTANDING ANYTHING ELSE IN THE AGREEMENT, OUR MAXIMUM AGGREGATE LIABILITY TO CUSTOMER OR ANY THIRD PARTY RELATING TO ANY NO-CHARGE PRODUCTS WILL BE US$100", "tokens": 409}
{"title": "Customer Terms of Service", "content": ". Customer may not (i) provide, make available to, or permit individuals other than its End Users to use or access the Services, the Software, or Documentation, in whole or in part; (ii) use the Services or Software to store or transmit infringing, libelous, unlawful, or tortious material or to store or transmit material in violation of third party rights, including privacy rights; (iii) use the Services or Software to violate any rights of third parties; (iv) use the Services or Software to store or transmit malicious code, Trojan horses, malware, spam, viruses, or other destructive technology (\"Viruses\"); (v) interfere with, impair, or disrupt the integrity or performance of the Services or any other third party\u2019s use of the Services or (vi) alter, circumvent, or provide the means to alter or circumvent the Services or Software, including technical limitations, recurring fees, or usage limits . Through the Rocket.Chat Services, Customer may be able to specify certain End Users as \u201cAdministrators,\u201d users who have important rights and controls over Customer\u2019s use of Rocket.Chat Services and End User accounts. This may include entering into Ordering Documents for Rocket .Chat Services; creating, de-provisioning, monitoring, or modifying End User Accounts, and setting End User usage permissions; and managing access to Customer Data by End Users or others . Administrators may also take over management of accounts previously registered using an email address belonging to Customer domain (which become \u201cmanaged accounts\u201d, as described in our Documentation). Without limiting Section 4 .5 (Responsibility for End Users), which fully applies to Administrators, Customer is responsible any acts or omissions of its Administrators. Customer agrees that Rocket.Chat\u2019s responsibilities do not extend to the internal management or administration of the Rocket", "tokens": 382}
{"title": "Customer Terms of Service", "content": ".Chat Services for Customer. Customer will provide all required disclosures to and will obtain and maintain all required consents from End Users to allow: (i) Administrators to have the access described in the Agreement and the Privacy Policy; and (ii) Rocket .Chat\u2019s provision of the Rocket.Chat Services to Administrators and End Users. Customer warrants that it has obtained all necessary consents from End Users for data collection, use, and processing. Rocket .Chat\u2019s Terms of Use will be presented to End Users during the sign-up, account creation, and registration process for Rocket.Chat Services, as well as within the product itself, which End Users must agree to before they can access the Services . Certain Customers may have the option to put forth their own terms of use in addition to Rocket.Chat\u2019s Term of Use. If Customer customizes the Rocket .Chat Services and adds terms of use on the login page, it is Customer's responsibility to ensure that each End User either (i) agrees to Rocket .Chat\u2019s Terms of Use to End Users in addition to Customer\u2019s terms of use; or (ii) to include Rocket .Chat\u2019s Terms of Use and Acceptable Use policy content within its Customer\u2019s terms of use, and to ensure that each End User agrees to Customer\u2019s terms of use . Customer may add additional requirements into it terms of use and/or acceptable use policies, as long as such terms of use and acceptable use policies also comply with (and do not conflict with) the Rocket .Chat Terms of Use, Acceptable Use Policie and applicable regulations. Customers shall be responsible for any damages that may result from Customer\u2019s failure to do so. Customer is responsible for understanding the settings and controls for each Rocket .Chat Services accessed by Customer and for controlling whom Customer allows to become an End User. Some Rocket.Chat Services may allow Customer to designate different types of End Users (for example, Rocket .Chat Software distinguishes between \u201cUsers\u201d and \u201cGuest user\u201d), in which case pricing and functionality may vary according to the type of End User . Customer is responsible for compliance with this Agreement by all End Users, including for any payment obligations, as well as for all End Users\u2019 activities of all your End Users, including Ordering Documents they may place and how End Users use or upload Customer Data, even if those End Users are not from Customer\u2019s organization or domain", "tokens": 497}
{"title": "Customer Terms of Service", "content": ". Customer may have the option to 'white label' Rocket.Chat\u2019s Services by rebranding the Rocket.Chat Services with Customer\u2019s branding. By integrating any logo, name, branding or other indicia of origin (\u201cCustomer Marks\u201d) into the Rocket .Chat Services, Customer hereby represents and warrants to Rocket.Chat that Customer is the sole and exclusive owner of all Customer Marks or that Customer has otherwise obtained all necessary rights, permissions and consents to integrate the Customer Marks in the Rocket.Chat Services . Customer shall indemnify, defend and hold harmless Rocket .Chat and its officers, directors, employees, shareholders and representatives, from and against any and all liabilities, losses, damages, causes of action or injuries, costs and expenses (including reasonable attorneys\u2019 fees) in connection with third party claims arising from or related to a claim that Customer Marks violate or infringe a third party\u2019s patent, copyright, trademark, trade secret or any other intellectual property rights . Customer must not upload or otherwise make available to Rocket", "tokens": 218}
{"title": "Customer Terms of Service", "content": ".Chat any Customer Data that: (a) constitutes an infringement, misappropriation or violation of any intellectual property rights, proprietary rights, rights of publicity, rights of privacy or any other legal rights protecting data, information or intangible property throughout the world, including, without limitation, any copyrights, trademarks, service marks, trade secrets, patent rights, moral rights, sui generis rights in databases or contract rights; (b) violates this Agreement; (c) is unlawful or violates any applicable laws, rules, promotes illegal activities or contributes to the creation of weapons, illegal materials, or is otherwise illegal in any way; (d) contains software viruses or any other computer code, files or programs designed to interrupt, destroy, limit the functionality of any computer software or hardware or telecommunications equipment; (e) interferes with or disrupts the Service or servers or networks connected to the Service;; (f) is harmful to minors in any way; (h) constitutes unsolicited or unauthorized advertising, promotional materials, junk mail, spam, chain letters, pyramid schemes, or any other form of duplicative or unsolicited messages, whether commercial or otherwise; or (g) causes Rocket .Chat to violate any applicable law, rule or regulation, including those regarding the export of technical data . Customer will use commercially reasonable efforts to detect, address, and (when appropriate) remove or otherwise remediate Customer Data that is in violation of Customer\u2019s terms of use, consistent with Customer\u2019s customary trust and safety practices and policies. Rocket", "tokens": 323}
{"title": "Customer Terms of Service", "content": ".Chat may provide Support services to Customer as purchased by Customer and subject to the Agreement and applicable Ordering Document and Documentation. Support Services are made available in accordance with the Support Level Agreement. Notwithstanding the foregoing, Rocket .Chat will have no obligation to support (a) services, hardware, or software not provided by Rocket .Chat; (b) Services issues caused by Customer\u2019s negligence, abuse, or misapplication; or (c) Customer\u2019s use of Services other than as specified in the Documentation . Moreover, any support requests or other assistance requests that are outside the scope of the services the Customer has purchased, or deemed by Rocket .Chat to be out of scope, will be chargeable as Professional Services, subject to an executed Professional Services Master Agreement and applicable Statement of Work. Rocket .Chat shall have no obligation to provide any out of scope services unless and except to the extent the parties have executed a Professional Services Master Agreement and Statement of Work for such services. While Rocket .Chat is open source and allows for Customer modifications to its software, please note that our support services only apply to the original code published by Rocket.Chat in its own repositories, as outlined in the MIT License found at https://github .com/RocketChat/Rocket.Chat/blob/master/LICENSE. Rocket.Chat will provide Professional Services to Customers in accordance with an agreed Statement of Work or any other form of documentation agreed to by the parties . The Professional Services Master Agreement will apply in addition to this Agreement and will govern the provision of the Professional Services. RocketChat regularly updates its Services. We only support the Rocket.Chat versions that are within their support period, as stated in our Support Policy . Specifically for our Cloud Hosting, we automatically upgrade Rocket.Chat servers that stay within the supported version range and do not provide versions that are beyond their End of Life term . As a result, workspaces running on unauthorized versions beyond the Support Window will be subject to restriction or cancellation of services as explained here https://docs.rocket.chat/resources/rocket.chats-support-structure/enterprise-support-and-version-durability", "tokens": 452}
{"title": "Customer Terms of Service", "content": ". Our Privacy Policy governs the collection and use of data related to the use and performance of our products and Services. It is important to note that the type of data we collect may vary depending on the Customer's selected hosting and preferences . We collect and use all such data and information strictly in accordance with our Privacy Policy, which is hereby incorporated into this Agreement by reference . We implement and maintain physical, technical, and administrative security measures designed to protect Customer Data from unauthorized access, destruction, use, modification, or disclosure. We also maintain a compliance program that includes independent third-party audits and certifications . You can find all relevant information related to security and privacy measures within our online Security Center. Rocket.Chat may handle personal data on behalf of the Customer . If Customer is subject to the General Data Protection Regulation \u201cGDPR\u201d, Customer has the right to request and receive the Rocket.Chat Data Processing Addendum . If Customer processes personal health information in the US or are subject to other privacy regulations, Customer may need to comply with specific requirements or enter into a data agreement with Rocket.Chat . Please visit Privacy Center to access the latest privacy agreement templates and to contact our Privacy team. When applicable, these agreements are incorporated by reference into this Agreement . Customer is solely responsible for ensuring that all of its End Users meet the legal age requirements as defined in Rocket.Chat\u2019s Terms of Use . In instances where the Customer's workspace involves hosting minors or processing their data, Customer represents and warrants that it has obtained parental consent for each minor who accesses the Services or whose data is processed via the Services . The Customer bears the exclusive responsibility for obtaining this consent, and Rocket.Chat holds no liability for ensuring access or compliance for minors. This obligation encompasses all aspects of data upload, access management, and any processing activities related to minors . Ensuring strict compliance with all applicable laws and regulations pertaining to the protection of minors' data is imperative for the Customer. Any failure to comply with this Section shall be the sole responsibility of the Customer . We may be required to disclose Customer Data to comply with legal obligations, subpoenas, or court orders. However, we will make commercially reasonable efforts to notify Customer if legally permitted . For more information on how we handle law enforcement requests for access to Customer Data, please refer to Guidelines for Law Enforcement. The Services, Software, and Documentation are licensed, not sold", "tokens": 495}
{"title": "Customer Terms of Service", "content": ". Use of the term \"purchase\" in conjunction with licenses of the Services, Software, and Documentation shall not imply a transfer of ownership of any Rocket.Chat intellectual property, including the Services, Software and Documentation . Except for the limited rights expressly granted by Rocket .Chat to Customer in this Agreement, Customer acknowledges and agrees that all rights, titles, and interests in and to all copyright, trademark, patent, trade secret, intellectual property (including without limitation algorithms, business processes, improvements, enhancements, modifications, derivative works, information collected and analyzed in connection with the Services) and other proprietary rights, arising out of or relating to the Services, the Software, the provision of the Services or Software, and the Documentation, belong exclusively to Rocket .Chat or its suppliers or licensors. All rights, title, and interest in and to content, which may be accessed through the Services or the Software, is the property of the respective owner and may be protected by applicable intellectual property laws and treaties . This Agreement gives Customer no rights to such content, including the use of the same. All rights not expressly granted under this Agreement are reserved by Rocket.Chat. Rocket .Chat is hereby granted a royalty-free, fully-paid, worldwide, transferable, sub-licensable, irrevocable, and perpetual license to use or incorporate into its products and Services any suggestions, enhancement requests, recommendations, or other feedback provided by Customer or End Users relating to the Services, Software or Documentation . Rocket.Chat is not obligated to hold any feedback in confidence. Rocket.Chat does not obtain ownership in Customer Data that is submitted to our Services or Software . For the purposes of this agreement, unless explicitly agreed otherwise between the Customer and the End User, the Customer acknowledges that when an End User submits content or information to the Services, such as messages or files, all such content and information is generally owned by the Customer", "tokens": 396}
{"title": "Customer Terms of Service", "content": ". The Customer also has the option to incorporate terms within its own Terms of Service, thereby granting the Customer the right to use End User data. Fees will be due and payable as set forth on the applicable Ordering Document Form. Fees due to Rocket .Chat under these Terms are non-cancellable, and the sums paid are non-refundable and non-creditable, except as otherwise expressly provided in these Terms. Rocket .Chat may (i) suspend access to and performance of the Services for which payment is overdue until the overdue amount is paid in full, or (ii) otherwise terminate an applicable Ordering Document or this Agreement . Overdue payments will be subject to a late payment charge of the lesser of one and one-half percent (1.5%) per month (19.56% per annum) or the maximum rate allowed by applicable law. Customer will reimburse Rocket .Chat for reasonable attorneys\u2019 fees and any other costs associated with collecting delinquent payments. Unless it is stated otherwise in an Ordering Document, all fees are exclusive of taxes, and Customer shall pay or reimburse Rocket .Chat for all taxes arising out of transactions contemplated by this Agreement. As reasonably requested, Customer will provide documentation to Rocket.Chat showing that taxes have been paid to the relevant taxing authority. Customer hereby confirms that Rocket .Chat can rely on the name and address that Customer provide to Rocket .Chat when Customer agrees to the fees or in connection with Customer\u2019s payment method as being the place of supply for sales tax and income tax purposes or as being the place of supply for VAT purposes where Customer has established its business . Customer may add users, increase storage limits, or otherwise increase their use of Rocket.Chat Services by placing a new Ordering Document. Unless otherwise specified in the applicable Ordering Document, Rocket.Chat will charge Customer for any increased use at Rocket", "tokens": 386}
{"title": "Customer Terms of Service", "content": ".Chat\u2019s then-current rates prorated for the remainder of the then-current Term. By default, Self-Hosted Rocket.Chat Services are configured to automatically report usage data to Rocket.Chat . In environments where automated reporting over the internet is not possible, usage data may be manually reported subject to a written agreement with Rocket.Chat, made at the time or in advance of an Ordering Document submission. Whether the Rocket .Chat Software and Services are Self-Hosted or otherwise, Rocket.Chat reserves the right to audit the Customer's usage of the Rocket .Chat Software and Services in order: (a) to verify that the Customer is in compliance with the terms of this Agreement; and/or (b) for billing purposes. Any usage data received by Rocket.Chat is solely related to the use of the Rocket .Chat Software and Services (including, but not limited to, delivering, enhancing, improving customizing, and supporting Customer's use of the Rocket.Chat Software and Services), for audit and billing purposes and is processed in accordance with the Rocket .Chat Policies and applicable data protection legislation. The Customer shall take all necessary steps to ensure that the process by which usage data is received by Rocket.Chat remains operational and shall not do anything that would interrupt, modify, or suppress data collection without Rocket .Chat\u2019s prior written approval. In the event that Rocket.Chat permits the Customer to disable the data usage setting, or in the event that the data usage setting is not functional, it is the Customer's responsibility to report monthly usage statistics to Rocket .Chat in accordance with the guidance provided by Rocket.Chat in the applicable Documentation or Rocket.Chat Policy. In the event that Rocket.Chat believes that any Rocket .Chat Software and Services dependent on the collection of telemetry data are being misused, not used in the spirit of this Agreement, or the Customer's reporting is deficient (whether deliberately or otherwise), Rocket .Chat may, depending on the severity of the breach, suspend Customer\u2019s access to the Rocket.Chat Software and Services with or without notice, and without liability to Customer", "tokens": 435}
{"title": "Customer Terms of Service", "content": ". If Customer acquires Services through a Partner, all payment-related terms will be set forth in the applicable agreement between such Partner and Customer . Any agreement(s) Customer enters into with a Partner shall be between Customer and the Partner and shall not be binding upon Rocket.Chat. Customer acknowledges that the Rocket.Chat Services referenced in an Ordering Documentare being purchased separately from any of Rocket .Chat other products or services. Payment obligations for any products or Services are not contingent on the purchase or use of any of other products (and for clarity, any purchases of Rocket .Chat Services are separate and not contingent on each other, even if listed on the same Ordering Document) . Customer agrees that purchases are not contingent on the delivery of any future functionality or features (including future availability of any Products or Services beyond the current Term) or dependent on any oral or written public comments we make regarding future functionality or features", "tokens": 184}
{"title": "Customer Terms of Service", "content": ". Customer\u2019s Ordering Document shall set forth the effective date (the \u201cEffective Date\u201d) and Initial Term of the Agreement. Unless expressly provided otherwise, the Initial Term is 12 months from Ordering Document\u2019s Effective Date . The Initial Term will automatically renew for successive one-year periods (each, a \u201cRenewal Term\u201d) at the then-current rates unless either party gives the other party written notice at least thirty (30) days prior to the end of the then-current Initial Term or Renewal Term . The Initial Term and all Renewal Terms are referred to as the \u201cTerm .\u201d to This Agreement shall be effective as of the Effective Date and will continue thereafter so long as one or more Ordering Documents remain in effect or until terminated by either party as outlined in this Section . Either party may terminate this Agreement and any associated Ordering Document immediately upon providing 30 days written notice to the other party in the event of a material breach of this Agreement, which includes, but is not limited to, failure to make timely payments or non-compliance with the restrictions outlined in this non-breaching (as detailed in Section 3) . If such a material breach is not rectified within the cure period, the terminating party reserves the right to terminate the Agreement . Additionally, either party has the right to terminate this and all associated Order Forms immediately upon written notice under the following extreme circumstances: (i) the institution of insolvency, receivership, or bankruptcy proceedings by or against the other party (unless such proceedings are resolved within one hundred twenty (120) days of initiation); (ii) the other party making an assignment for the benefit of creditors; or (iii) the other party's dissolution or cessation of business operations without a successor", "tokens": 356}
{"title": "Customer Terms of Service", "content": ". Where Rocket.Chat relies on third party providers to provide or support a Service or any function or feature relating to our Services (e.g. Apple for Apple Business Chat integrations), Rocket .Chat reserves the right to change, suspend, limit, or terminate your use of the applicable Services, function, or feature at any time immediately if (i) the third party providers revokes the status of Rocket .Chat as an intermediary to provide Customer such Service, function, or feature; or (ii) at the request of the third party provider, such requests being at the discretion of the third party provider, without notice or liability . Termination or expiration shall not relieve Customer of the obligation to pay any fees or other amounts accrued or payable to Rocket.Chat, including fees for the remainder of the then-current Term. Except for Customer\u2019s termination due to Rocket .Chat\u2019s material, uncured breach, Customer must promptly remit all due and payable amounts for the remaining Term, without limiting Rocket.Chat\u2019s other rights and remedies available under this Agreement or at law . Upon termination or expiration, Customer must cease all use of the Services, Software, and Documentation and destroy or return (upon request by Rocket.Chat) all copies of the Services, Software, and Documentation . Any obligations that have accrued prior to termination will survive termination of this Agreement . Each party represents and warrants that: (i) such party has the full power and authority to enter into this Agreement; (ii) this Agreement is duly authorized by all necessary action and has been duly executed and delivered; (iii) such party", "tokens": 340}
{"title": "Customer Terms of Service", "content": "is in compliance with all applicable law; and (iv) such party has not entered into any agreement with any other entity that contains restrictive provisions that may impair its ability to perform its obligations under this Agreement . The Customer warrants and represents all information the Customer provides to Rocket.Chat is current, complete, accurate, and any changes will be communicated to Rocket.Chat promptly . The Services, Software, and Documentation delivered to Customer under this Agreement are subject to export control laws and regulations and may also be subject to import and export laws of the jurisdiction in which it was accessed, used, or obtained, if outside those jurisdictions . Customer shall abide by all applicable export control laws, rules, and regulations applicable to the Services, Software, and Documentation . Customer represents and warrants that (i) it is not located in or are not under the control of or a resident of any country, person, or entity prohibited from receiving the Services, Software, or Documentation due to export restrictions, and (ii) that Customer will not export, re-export, transfer, or permit the use of the Services, Software, or Documentation, in whole or in part, to or in any of such countries or to any of such persons or entities . Customer will not: (a) make any unlawful payments to any government official or employee; (b) make any unlawful payment to any person or unlawfully provide anything of value (whether as property, services, or in any other form) to any person for the purpose of obtaining an improper business advantage; or (c) agree, commit, or otherwise offer to undertake any of the foregoing actions in connection with this Agreement . Further, Customer represents and warrants that all at times during the Term, Customer will comply with applicable anti-bribery and anti-corruption laws . Customer represents and warrants that all payments will be made by its legal entity as identified in the Agreement (or by its Affiliates) and that Customer will not misrepresent or attempt to conceal the identity of the party paying or any recipient(s) of the Services", "tokens": 422}
{"title": "Customer Terms of Service", "content": ". As used in this Agreement, \"Confidential Information\" means any nonpublic information or materials disclosed by either party to the other party, either directly or indirectly, in writing, orally, or by inspection of tangible objects that the disclosing party clearly identifies as confidential or proprietary . For clarity, Customer Confidential Information includes Personal Data and Rocket.Chat Confidential Information includes the Services, Software, Documentation, and any information or materials relating to such (including but not limited to pricing) . Confidential Information may also include confidential or proprietary information disclosed to a disclosing party by a third party . The receiving party will: (i) hold the disclosing party\u2019s Confidential Information in confidence and use reasonable care to protect the same; (ii) restrict disclosure of such Confidential Information to those employees or agents with a need to know such information and who are under a duty of confidentiality respecting the protection of Confidential Information substantially similar to those of this Agreement; and (iii) use Confidential Information only for the purposes for which it was disclosed, unless otherwise set forth herein . The restrictions will not apply to Confidential Information, excluding Personal Data, to the extent it (i) is (or through no fault of the recipient, has become) generally available to the public; (ii) was lawfully received by the receiving party from a third party without such restrictions; (iii) was known to the receiving party without such restrictions prior to receipt from the disclosing party; or (iv) was independently developed by the receiving party without breach of this Agreement or access to or use of the Confidential Information . The receiving party will return to the disclosing party or destroy all Confidential Information of the disclosing party in the receiving party\u2019s possession or control and permanently erase all electronic copies of such Confidential Information promptly upon the written request of the disclosing party upon the termination of this Agreement", "tokens": 385}
{"title": "Customer Terms of Service", "content": ". The receiving party will certify in writing signed by an officer of the receiving party that it has fully complied with its obligations under this Section . The receiving party may disclose Confidential Information to the extent the disclosure is required by law, regulation, or judicial order, provided that the receiving party will provide to the disclosing party prompt notice, where permitted, of such order and will take reasonable steps to contest or limit the steps of any required disclosure . The parties agree that any breach of this Section 11 will cause irreparable injury and that injunctive relief in a court of competent jurisdiction will be appropriate to prevent an initial or continuing breach of these Sections in addition to any other relief to the applicable party may be entitled . THE SERVICES, SOFTWARE, DOCUMENTATION, AND ALL OTHER PRODUCTS AND SERVICES PROVIDED UNDER THE TERMS OF THIS AGREEMENT AND/OR APPLICABLE ORDERING DOCUMENT, INCLUDING HOSTED SERVICES, ARE PROVIDED ON \u201cAS IS\u201d AND \u201cAS AVAILABLE\u201d BASIS . EXCEPT AS SET FORTH EXPRESSLY IN THE AGREEMENT, ROCKET .CHAT DISCLAIMS ALL REPRESENTATIONS AND WARRANTIES OF ANY KIND, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, NON-INFRINGEMENT, ACCURACY, RELIABILITY, SECURITY, LOSS OR CORRUPTION OF YOUR DATA, CONTINUITY, OR ABSENCE OF DEFECT RELATING TO THE SERVICES, SOFTWARE, DOCUMENTATION, ANY OTHER PRODUCT OR SERVICES, OR RESULTS OF THE SAME PROVIDED TO CUSTOMER UNDER THIS AGREEMENT .\\ ROCKET", "tokens": 298}
{"title": "Customer Terms of Service", "content": ".CHAT DOES NOT WARRANT THAT THE SERVICES OR SOFTWARE WILL MEET YOUR REQUIREMENTS OR EXPECTATIONS, THAT THE SERVICE WILL ALWAYS BE AVAILABLE ACCESSIBLE, UNINTERRUPTED, TIMELY, SECURE OR OPERATE WITHOUT ERROR, OR THAT DEFECTS IN THE SERVICES OR SOFTWARE WILL BE CORRECTED . ROCKET.CHAT DOES NOT MAKE ANY GUARANTEES REGARDING THE RESULTS THAT MAY BE OBTAINED FROM THE SERVICES OR AS TO THE ACCURACY OR RELIABILITY OF ANY INFORMATION OBTAINED FROM THE SERVICE. ROCKET .CHAT SPECIFICALLY DISCLAIMS RESPONSIBILITY OF THIRD-PARTY PRODUCTS AND SERVICES WITH WHICH YOU MAY UTILIZE THE SERVICES AND SOFTWARE, AND EACH PARTY SPECIFICALLY DISCLAIMS AND WAIVES ANY RIGHTS AND CLAIMS AGAINST THE OTHER PARTY WITH RESPECT TO SUCH THIRD-PARTY PRODUCTS AND SERVICES . TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, ( IN NO EVENT WILL ROCKET .CHAT AND ITS AFFILIATES, DIRECTORS, EMPLOYEES, OR AGENTS HAVE ANY LIABILITY, CONTINGENT OR OTHERWISE, FOR ANY INDIRECT, SPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, STATUTORY OR EXEMPLARY DAMAGES ARISING OUT OF OR RELATING TO THIS AGREEMENT, THE SERVICES, SOFTWARE, DOCUMENTATION, OR ANY OTHER PRODUCTS OR SERVICES PROVIDED HEREUNDER, INCLUDING, BUT NOT LIMITED TO LOST PROFITS, LOST OR CORRUPTED DATA, LOSS OF GOODWILL, WORK STOPPAGE, EQUIPMENT FAILURE OR MALFUNCTION, PROPERTY DAMAGE OR ANY OTHER DAMAGES OR LOSSES, EVEN IF ROCKET .CHAT HAS BEEN ADVISED OF THE POSSIBILITY THEREOF, AND REGARDLESS OF THE LEGAL OR EQUITABLE THEORY (CONTRACT, TORT, STATUTE, INDEMNITY OR OTHERWISE) UPON WHICH ANY SUCH LIABILITY IS BASED", "tokens": 304}
{"title": "Customer Terms of Service", "content": ".\\ UNDER NO CIRCUMSTANCES WILL ROCKET.CHAT\u2019S TOTAL LIABILITY TO CUSTOMER, IN THE AGGREGATE, EXCEED THE GREATER OF (I) $100 .00 OR (II) THE AMOUNTS PAID BY CUSTOMER TO ROCKET.CHAT IN CONNECTION WITH THE SERVICE IN THE TWELVE (12) MONTH PERIOD PRECEDING THE EVENT GIVING RISE TO SUCH CLAIM . THE FOREGOING DISCLAIMERS WILL NOT APPLY TO THE EXTENT PROHIBITED BY APPLICABLE LAW Rocket .Chat will indemnify, defend, and hold Customer harmless from any third-party claim brought against Customer that the Services, as provided by Rocket.Chat, infringe, or misappropriate any U.S . patent, copyright, trademark, trade secret, or other intellectual property rights of a third party (an \u201cInfringement Claim\u201d), provided (i) use of the Services by Customer is in conformity with the Agreement and Documentation; (ii) the infringement is not caused by modification or alteration of the Services; and/or (iii) the infringement was not caused by a combination or use of the Services with products not supplied by Rocket .Chat. Rocket.Chat\u2019s indemnification obligations are contingent upon Customer: (i) promptly notifying Rocket.Chat in writing of the claim; (ii) granting Rocket .Chat sole control of the selection of counsel, defense, and settlement of the claim; and (iii) providing Rocket.Chat with reasonable assistance, information, and authority required for the defense and settlement of the claim. This Section states Rocket .Chat\u2019s entire liability, and Customer\u2019s be sole and exclusive remedy, with respect to any Infringement Claim. Customer will indemnify, defend, and hold harmless Rocket .Chat and its Affiliates, and their directors, employees, and agents from and against any claims arising out of or due to: (i) any Customer Data; (ii) Customer\u2019s and any of End Users\u2019 breach of this Agreement; (iii) Customer\u2019s and its End Users\u2019 use of the Services, Software, or Documentation in violation of this Agreement, third party rights, including any intellectual property or privacy rights, or any applicable laws; or (iv) Customer\u2019s and its End Users\u2019 misuse of the Services, Software, or Documentation", "tokens": 461}
{"title": "Customer Terms of Service", "content": ". Except as otherwise specified in the Agreement, all notices related to the Agreement will be in writing and will be effective upon (a) personal delivery, (b) the third business day after mailing, or (c) the day of sending by email . All notices from Customer pertaining to contractual or legal matters (i.e., breach of contract, termination, indemnifiable claims, etc.) must clearly be identified and marked as Legal Notices to the address listed below . Billing and other service-related notices to Customer will be addressed to the relevant billing contact designated by the Customer. All other notices to Customer will be addressed to the relevant workspace administrator designated by Customer. Notice address for Rocket.Chat: Rocket.Chat Technologies Corp . Attn: Legal Department 251 Little Falls Drive, Wilmington, DE, 19808 legal@rocket.chat Unless as otherwise set forth herein, this Agreement shall not be amended or modified by Customer except in writing signed by authorized representatives of each party", "tokens": 204}
{"title": "Customer Terms of Service", "content": ". The Agreement, including the Additional Terms and Ordering Documents, constitute the complete and exclusive agreement between the Parties. This Agreement takes precedence over any prior or contemporaneous agreements, proposals, or representations, whether written or oral, related to the subject matter . In the event of any conflict between the Customer Terms and any Additional Terms or Ordering Documents, the Customer Terms shall prevail, followed by any Additional Terms and, subsequently, any Ordering Documents . This order of precedence shall apply unless expressly stated otherwise or when a signed writing by duly authorized representatives of both parties provides an alternative arrangement. The Agreement will be enforced to the fullest extent permitted under applicable law . If any provision of the Agreement is held by a court of competent jurisdiction to be contrary to law, the provision will be modified by the court and interpreted so as best to accomplish the objectives of the original provision to the fullest extent permitted by law, and the remaining provisions of the Agreement will remain in effect . No failure or delay by either party in exercising any right under the Agreement will constitute a waiver of that right . No waiver under the Agreement will be effective unless made in writing and signed by an authorized representative of the party being deemed to have granted the waiver . This Agreement and any disputes arising out of or related to this Agreement shall be governed by and construed in accordance with applicable law as below, based on the Customer\u2019s location of domicile, without regard to any conflict of law provisions: \\ Domicile of Customer Rocket .Chat Contract Entity Governing Law Venue United States and other Countries Rocketchat Technologies Corp . Delaware, United States Delaware, United States Brazil Rocketchat Tecnologia LTDA Brazil Porto Alegre, Rio Grande do Sul The Agreement, and any disputes arising out of or related hereto will be governed exclusively by the applicable governing law above", "tokens": 382}
{"title": "Customer Terms of Service", "content": ". The courts located in the applicable venue above will have exclusive jurisdiction to adjudicate any dispute arising out of or relating to the Agreement or its formation, interpretation, or enforcement. Each party hereby consents and submits to the exclusive jurisdiction of such courts . The terms of the United Nations Convention on Contracts for the Sale of Goods do not apply to this Agreement. The Uniform Computer Information Transactions Act (UCITA) will not apply to this Agreement regardless of when or where adopted . If any legal action or other proceeding is brought to enforce the provisions of this Agreement, the prevailing party shall be entitled to recover reasonable attorney fees and other costs incurred in the action or proceeding, in addition to any other relief to which the prevailing party may be entitled . In the event of any controversy or claim arising out of or relating to the Agreement, the parties will consult and negotiate with each other and, recognizing their mutual interests, attempt to reach a solution satisfactory to both parties . If the parties do not reach a settlement within a period of sixty (60) days, either party may pursue relief as may be available under the Agreement pursuant to Section to Governing Law and Jurisdiction Sections . All negotiations pursuant to this Section will be confidential and treated as compromise and settlement negotiations for purposes of all rules and codes of evidence of applicable legislation and jurisdictions . Notwithstanding the provisions of Dispute Resolution and Governing Law Sections hereunder, nothing in this Agreement will prevent Rocket .Chat from seeking injunctive relief with respect to a violation of intellectual property rights, confidentiality obligations, or enforcement or recognition of any award or order in any appropriate jurisdiction . Neither party to this Agreement will be liable for delays or failures in performance under this Agreement (other than for payment obligations or breach of confidentiality requirements) resulting from acts or events beyond the reasonable control of such party, including acts of war, terrorism, acts of God, natural disasters (fires, explosions, earthquakes, hurricane, flooding, storms, explosions, infestations), embargos, riots, sabotage, governmental acts, failure of the internet, power failures, energy interruptions or shortages, other utility interruptions, or telecommunications interruptions . The party affected by the force majeure event will provide notice to the other party within a commercially reasonable time and will use commercially reasonable efforts to resume performance as soon as practicable . Obligations not performed due to a force majeure event will be performed as soon as reasonably possible when the force majeure event concludes", "tokens": 500}
{"title": "Customer Terms of Service", "content": ".\\ This Agreement do not create a partnership, franchise, joint venture, agency, fiduciary, or employment relationship between the parties. Rocket .Chat, its personnel, agents, subcontractors, and independent contractors are not employees or agents of Customer and are acting as independent contractors with respect to Customer . Neither party is, nor will be, considered to be an agent; distributor; partner; joint venture; or representative of the other party for any purpose, and neither party will have the authority to act on behalf of, or in the name of, or to bind, the other party in any manner whatsoever . Other than as expressly provided herein, the Agreement does not create any rights for any person who is not a party to it, and no person not a party to this Agreement may enforce any of its terms or rely on an exclusion or limitation contained in it . You may not assign any of your rights or delegate your obligations under the Agreement, whether by operation of law or otherwise, without the prior written consent of us (not to be unreasonably withheld) . We may assign this Agreement in entirety (including all terms and conditions incorporated herein by reference), without your consent, to a corporate affiliate or in connection with a merger, acquisition, corporate reorganization, or sale of all or substantially all of our assets . All provisions of this Agreement relating to confidentiality, non-disclosure, intellectual property, disclaimers, limitation of liability, indemnification, payment, governing law and any other provisions which must survive in order to give effect to their meaning shall survive the termination of this Agreement . If this Agreement is translated into a language other than English and there are conflicts between the translations of this Agreement, the English version of this Agreement shall prevail and control. Paragraph headings are for convenience and shall have no effect on interpretation . Affiliates means an entity controlled by, under common control with, or controlling such party, where control is denoted by having fifty percent (50%) or more of the voting power (or equivalent) of the applicable entity", "tokens": 430}
{"title": "Customer Terms of Service", "content": ". Subject to the terms and conditions of this Agreement, Your Affiliates may use the license granted hereunder. All references to Rocket.Chat shall be deemed to be references to Rocket.Chat and its Affiliates. Authorized Partner means an authorized Rocket .Chat reseller, distributor, or managed service provider through which Customer may acquire the Subscription Services and/or Professional Services . Beta Services means the second phase of software testing in which a sampling of the intended audience samples a service prior to its general release where Customer, in return, provides Rocket.Chat feedback about the Beta Services . Customer Data or Data means data, files, or information, including data, files, or information that include Personal Data, accessed, used, communicated, stored, or submitted by Customer or End Users related to Customer or End User\u2019s use of the Services or Software . Devices means (whether physical or virtual) a server, system, workstation, computer, mobile device, or endpoint upon which or through which the Services are used and/or on which the Software is installed", "tokens": 213}
{"title": "Customer Terms of Service", "content": ". Documentation means the official user documentation prepared and provided by Rocket.Chat to Customer on the use of the Services or Software (as updated from time to time) . For the avoidance of doubt, any online community site, unofficial documentation, videos, white papers, or related media, or feedback do not constitute Documentation. End User means an individual authorized by Customer to use the Services, Software, and Documentation . Order Form means the Rocket.Chat ordering document for sales assisted purchases that specifies Customer purchase of the Services, pricing, and other related information . Personal Data means any information that can be used to identify an individual as that term is defined under applicable law, which may include EU\u2019s \"General Data Protection Regulation\" (\u201cGDPR\u201d) as and if applicable . Professional Services means any professional services, including but not limited to implementation and installation services, managed services, consultancy services, integration assistance as agreed upon by the parties and set forth in a Statement of Work or Order Form . Services means the products and Software services, including any support and application programming interface that accesses functionality, that is purchased by Customer via an Ordering Document provided to the Customer by Rocket.Chat . Software means the object code version of any software to which Customer is provided access as part of the Service, including any updates or new versions. Statement of Work means a document outlining the project's scope, objectives, tasks, and deliverables . It serves as a formal agreement between the parties for the execution of professional services. Subscription, if applicable, refers to the Customer's online order specifying Rocket.Chat's software and services, the number of users, and associated fees . Support Services means the standard support maintenance or support provided by Rocket.Chat or its designated agent as set forth in this agreement and the specific support documentation. Rocket.Chat may offer different types of support, including documentation support and specific support plan offerings . For detailed plans and documentation, please refer to the Support Level Agreement. Taxes means any sales, VAT, use, and other taxes (other than taxes on Rocket .Chat\u2019s income), export and import fees, customs duties and similar charges imposed by any government or other authority. Please also feel free to contact us if you have any questions about this Agreement. You may contact us at legal@rocket", "tokens": 470}
{"title": "Customer Terms of Service", "content": ".chat or at our mailing address below: Rocket.Chat Technologies Corp . 251 Little Falls Rd Wilmington, DE, 19808 USA Self-Hosted Terms With respect to Customer\u2019s purchase and/or use of the Self-Hosted Software, the following additional terms shall apply . Customer is responsible for maintaining and protecting backups of Customer Data directly or indirectly processed using the Services and Software. Rocket.Chat is not responsible for the exportation of, the failure to store, the loss, or the corruption of Customer Data . Customer shall inform its End Users that any Customer Data that the End User uploads to the Services should be maintained and protected in a location other than the Services . Customer hereby represents and warrants that it has received required consent, licenses and permission to upload any Customer Data to the Services. Customer agrees that Rocket .Chat and its Affiliates may process configuration, performance, usage, and consumption data about Customer and its End User's use of the Services and Software to assist with the necessary operation and function of the Services and Software and to improve Rocket .Chat products and Services (\u201cUsage Data\u201d). Rocket.Chat\u2019s use of Usage Data shall be subject to Rocket.Chat\u2019s Privacy Policy. All right, title and interest in and to the Usage Data shall be owned exclusively by Rocket.Chat . Each party shall comply with its respective obligations under applicable data protection laws. Each party shall maintain appropriate administrative, physical, technical, and organizational measures that ensure an appropriate level of security for Confidential Information and Personal Data . Customer is responsible for ensuring that the security of the Services is appropriate for its intended use and the storage, hosting, or processing of Personal Data. Information on how Rocket.Chat protects Personal Data is in Rocket.Chat\u2019s Privacy Policy . With respect to Customer\u2019s purchase and/or use of the Services on a Cloud Hosting structure, the following additional terms shall apply. Customer hereby grants to Rocket .Chat a non-exclusive, royalty-free, perpetual, worldwide license to use, host, store, reproduce, modify, create derivative works (e.g", "tokens": 430}
{"title": "Customer Terms of Service", "content": "., as translations, adaptations, or other changes we make so that the content in question works better with the Services), communicate, publish, perform, display and distribute Customer Data, to the extent reasonably necessary to carry out its obligations under the Agreement . Customer represents and warrants it has the right to grant this license and has obtained any necessary consent from its End Users and third parties regarding such Customer Data . The rights granted in this license are for the limited purpose of providing, operating, and improving the Services and developing new services. We may also access Customer accounts, End User accounts, and your Cloud Services with End User permission to respond to support requests . Customer can access, import, and export all Customer Data, including private channels and direct messages, through account preferences panel . Additionally, Customer may request the deletion of account(s), which will result in removing all Customer Data, including messages the Users have previously sent, as well as their personal information, including names and email addresses . Customer further acknowledges and agrees that Customer will retrieve its Data or copies of its Data from Rocket.Chat within thirty (30) business days of the termination or expiration of this Agreement Terms . Unless in accordance with our internal policies, contractual, legal, or other obligations, Customer acknowledges and agrees that Rocket.Chat has the right to delete Customer Data, including all copies, after such thirty-day period . Customer Data, once deleted, will not be able to be recovered. As part of our Cloud Hosting, we provide data portability to our customers in accordance with the GDPR, LGPD, and other applicable data protection laws . Please be aware that Data Migration services are not included in our Cloud Hosting and must be purchased separately as Professional Services. If you require assistance migrating data from or to another service provider or system, Rocket.Chat can provide a separate quote for these services . Please contact our customer support team (via your Zoho Desk Portal or email support@rocket.chat) for assistance or more information. We have no obligation to monitor any content uploaded to the Cloud Services", "tokens": 423}
{"title": "Customer Terms of Service", "content": ". Nonetheless, if we deem such action necessary based on your violation of this Agreement, including Our Policies, or in response to takedown requests that we receive following our guidelines for Reporting Copyright and Trademark Violations, we may (1) remove Customer Data from the Cloud Services or (2) suspend or terminate Customer access to the Cloud Services . We will use reasonable efforts to provide advance notice of removals and suspensions when practicable. Nonetheless, if we determine, in our sole discretion, that your actions endanger the operation of the Cloud Services or other users or subject Rocket .Chat to any liability; we may suspend your access or remove Customer Data immediately without notice. We have no liability to Customer for removing or deleting Customer Data from or suspending Customer\u2019s access to any Cloud Services as described in this Section . Customer, and Customer\u2019s use of Cloud Services (including use by its End Users), must always comply with this Agreement, any applicable terms of service, the Acceptable Use Policy, and all applicable laws . Customer represents and warrants that (i) Customer has obtained all necessary rights, releases, and permissions to submit all Customer Data to the Cloud Services and to grant the rights granted to us in this Agreement; and (ii) Customer Data and its submission and use as Customer authorize in these appendices will and do not violate (1) any applicable laws, (2) any third-party intellectual property, privacy, publicity, or other rights, or (3) any of Customers or third-party policies or terms governing Customer Data . Besides our express obligations under the Agreement, we assume no responsibility or liability for Customer Data. Customer is solely responsible for its Customer Data and the consequences of submitting and using it with the Cloud Services", "tokens": 360}
{"title": "Customer Terms of Service", "content": ". The Customer acknowledges and agrees that it is their responsibility to ensure that the selected deployment option is compatible with their environment and meets their security and data protection requirements. Rocket .Chat shall not be liable for any issues arising from the Customer's choice of deployment option that may result in compatibility or security concerns. The provision of Cloud Hosting is contingent upon the maintenance of active Rocket.Chat Commercial License . In the event that the Commercial license is canceled, the Customer will become ineligible for Cloud Hosting . Additionally, any changes to the Commercial license may result in the repricing of Cloud Hosting to account for those changes, such as an increase or decrease in User licenses. Rocket .Chat maintains a Recovery Time Objective (RTO) and an Incident Point Objective (IPO) as specified in the Cloud Hosting Service Level Agreement (SLA). Rocket .Chat will take reasonable measures to ensure that the Cloud Hosting will be available to the Customer under the terms and conditions of the SLA. Customer acknowledges that there may be instances where the Cloud Hosting is unavailable due to circumstances beyond Rocket .Chat's control or Force Majeure, including but not limited to acts of God, natural disasters, and service interruptions caused by telecommunications providers. Rocket.Chat will make commercially reasonable efforts to restore Cloud Hosting as swiftly as possible in the event of an outage . Rocket.Chat\u200b\u200b reserves the right to apply security patches to all workspaces operating on any Cloud Hosting without prior notice to ensure each hosted workspace's security . The Customer may integrate their own software, applications, or other technologies with the Cloud Hosting, subject to the following conditions: (a) The integration must comply with the Cloud Hosting technical requirements and specifications, as outlined in the documentation provided by Rocket.Chat . (b) The Customer is solely responsible for ensuring the compatibility and functionality of their own software, applications, and other technologies with the Cloud Hosting. (c) Rocket", "tokens": 389}
{"title": "Customer Terms of Service", "content": ".Chat is not responsible for any issues or errors arising from the Customer's integration with the Cloud Hosting, including but not limited to security breaches, data loss, or downtime. (d) The Customer agrees to indemnify and hold Rocket .Chat harmless against any damages, losses, or claims arising from their integration with Cloud Hosting. (e) Rocket .Chat reserves the right to suspend or terminate the Customer's access to the Cloud Hosting if their integration causes harm or disruption to the Cloud Hosting or other customers. The selection of Hosting Providers available to the Customer is contingent upon location and market availability. Rocket .Chat shall not be under an obligation to maintain the same Hosting Provider throughout the duration of the Cloud Hosting Term. However, in the event that Rocket.Chat determines it necessary to change the Hosting Provider, Rocket .Chat will provide the Customer with prior notice and extend reasonable assistance in migrating Customer data to the new Hosting Provider. It is important to note that any such change shall not have a material adverse impact on the Services provided by Rocket.Chat to the Customer . As outlined in the Cloud Hosting Service Level Agreement (SLA), certain usage limits within Cloud Hosting may vary depending on the contracted Service. The Customer acknowledges that they have access to these usage limits and should actively monitor them. Rocket .Chat reserves the right to charge additional fees if these limits are exceeded. The Customer also acknowledges that exceeding these usage limits may affect the availability of the Cloud Hosting provided . The Customer acknowledges that any requested deviations from the reference architecture will automatically void the uptime target SLA. Rocket.Chat reserves the right to perform automatic updates and upgrades to cloud-hosted workspaces . These automatic changes may apply to Customer's workspace(s) depending on the chosen cloud tier, which will be detailed in the applicable Ordering Document. In any case, Rocket .Chat reserves the right to perform updates and patches to all cloud-hosted workspaces within Rocket.Chat, without prior notice, to ensure the security of the workspace and the protection of Customer data. This applies to all Cloud Hosting tiers.", "tokens": 430}
{"title": "Terms of Use (aka EULA)", "content": "Effective date: November 30th, 2023 At a glance, These Terms of Use (the \u201cUser Terms\u201d, aka \u201cEULA\u201d - End User License Agreement) govern Users access and use of our software, server, and any other Services (\u201cthe Services\u201d) we may provide to you unless otherwise specified . This includes but is not limited to Rocket.Chat Software, Rocket.Chat Cloud Services, Marketplace, Support Plans, Apps, Professional Services, some Integrations (including via 3rd-party), and API", "tokens": 107}
{"title": "Terms of Use (aka EULA)", "content": ". Some of them are covered by additional terms and conditions, which may also apply to the Services we provide you. These Terms apply to all individuals utilizing Rocket.Chat Services, regardless of whether they are direct Rocket .Chat Users or have been granted access to the Services by a Rocket.Chat Customer. PLEASE READ THE TERMS OF USE (EULA) CAREFULLY. By clicking \"accept\" or installing or using the Rocket .Chat Services, you confirm your acceptance of the Services and agree to become bound by the terms of these Terms of Use (EULA). These Terms of Use form a part of a binding \"Contract\" between the User and Rocket .Chat and apply to any Services you order, subscribe to, activate, or use. Even though you are signing in to an existing workspace, these Terms of Use apply to you as a User of the Services . If you access, deploy, or register any Rocket.Chat workspaces\u2013including a community workspace or a No-Charge Service, these Terms of Use will also govern all options. Definitions \u201cRocket .Chat,\u201d \u201cwe,\u201d \u201cus,\u201d or \u201cour\u201d Rocket.Chat Technologies Corp. or its affiliates . \u201cUser\u201d, \u201cyou\u201d or \u201cyour\u201d means the individuals who are authorized by any workspace owner in accordance with the Order Form or Subscription or Rocket.Chat\u2019s Terms of Service, as applicable, to access and use the Rocket .Chat Software, Services, and Documentation in accordance with this Agreement and including any End Users. User also means the individuals who are using Rocket.Chat Open Server, Rocket.Chat\u2019s Community Edition or any trial or free plan of Rocket.Chat\u2019s Services . \u201cCustomer\u201d means an organization or entity which has separately agreed to our Customer Terms of Service or entered into a written agreement with Rocket .Chat (in either case, the \u201cTerms\u201d) that permitted the Customer to create and configure a workspace so that the User(s) could join. \u201cRocket.Chat Open Server\u201d is a dedicated workspace for Rocket .Chat admins, users, contributors, partners, and employees to collaborate and improve the experience of running a Rocket.Chat workspace . \u201cWorkspace Administrator\u201d means an individual responsible for managing a dedicated workspace(s): including user accounts, configuring settings, ensuring security, and providing technical support within the workspace, as detailed in public documentation", "tokens": 499}
{"title": "Terms of Use (aka EULA)", "content": ". Other capitalized terms in the Terms of Use shall have the same meaning as defined in the Terms of Service . These Terms of Use (EULA) refer to the following additional terms, which may also apply to your use of our Services: Please review our Privacy Policy for more information on how we collect and use data relating to the use and performance of our Services . If the User is accessing a Customer workspace, please note that the respective Customer may impose additional requirements and terms on Users when using our Services that Users should comply with. If applicable, the Customer should notify Users of such terms and conditions", "tokens": 125}
{"title": "Terms of Use (aka EULA)", "content": ". For Users utilizing the Rocket.Chat Open Server (\u200bhttps://open.rocket.chat), kindly be advised that our Code of Conduct applies to your usage. Please familiarize yourself with our Rocket.Chat Code of Conduct . When a User submits content or information to the Services, such as messages or files (\u201cUser Data\u201d), the Customer retains ownership of any intellectual property rights in that content . The Customer has many choices and control over the Customer and User-Uploaded Data shared in the workspace. Please refer to the Accounts Section to understand the Administrator tools and how they can manage Users' Data . For a better understanding of how your data is handled, you can refer to Rocket.Chat\u2019s Privacy Policy. Rocket.Chat Services can be deployed on three types, each involving different data processing activities: Workspace Cloud Hostedat Rocket .Chat, Workspace under a Self-Managed Infrastructure, Rocket.Chat Open Server. Our services can be deployed in our cloud infrastructure, meaning Rocket.Chat will store the data uploaded to the workspace with restricted access and subject to encryption and other technical and organizational measures . If you use a workspace hosted in the Cloud Infrastructure, please note that the customer administrator controls the data. For any data subject requests, please contact your Workspace Administrator directly . If you use a workspace hosted in the Customer's infrastructure, please note that we do not store User-generated content. For any data subject requests, please contact your workspace administrator directly. Rocket .Chat Open Server is a free and open platform for communication and collaboration governed by the Rocket.Chat Open Code of Conduct. As a User, it is mandatory to comply with the Code of Conduct, which defines the expected behavior on the open server . Failure to adhere to the code may result in account exclusion and other applicable penalties. For any data subject requests, please refer to Rocket .Chat\u2019s Privacy Center Our software may contain information and materials uploaded by other Users of our services, such as social media pages, video-sharing platforms, bulletin boards, discussions, and channel rooms. Rocket", "tokens": 425}
{"title": "Terms of Use (aka EULA)", "content": ".Chat does not assume any responsibility for the content generated by Users. As a User, you are solely responsible for any content you create and Rocket.Chat does not endorse or guarantee the accuracy or legality of such content in any way . Before making any decisions or taking any actions based on the content on our platform, we strongly recommend seeking professional or specialist advice . We cannot guarantee the accuracy, completeness, or timeliness of the content on our platform, and we make no representations or warranties, whether express or implied, that the content on our software is accurate, complete, or up to date . By using our Services, you agree to comply with our Acceptable Use Policy, which sets out the guidelines for expected behavior and conduct while using our Services. Failure to comply with the Acceptable Use Policy may suspend or terminate the Services . The use of our Services is only permitted if you are above the legal age, which is 13 years, or any higher age required by the applicable regulations in your jurisdiction . For Users from countries subject to the General Data Protection Regulation \u201cGDPR\u201d: You must be 16 years old or above unless your Country has enacted a regulation specifying a lower minimum age . For Lei Geral de Prote\u00e7\u00e3o dos Dados \u201cLGDP\u201d-regulated users, individuals must be 18 years of age or older unless parental consent has been obtained in accordance with our Privacy Policy . By accessing and using our services, you confirm that you meet the minimum age requirement of the relevant regulations. If you are under the legal age, please discontinue using our services . Our Services may contain links to other websites or platforms and resources provided by third parties . These links are provided for informational purposes only and should not be interpreted as our endorsement or approval of the linked sites or platforms or the information the User may obtain from them . We do not have control over the content of those sites, platforms, or resources, and therefore, we are not responsible for any content, products, services, or actions of those third-party sites or platforms . It is the User's responsibility to exercise caution and use their own judgment when accessing and using any external links provided through our services. Unless the User is provided with express written permission by Rocket.Chat, the User is not authorized to use Rocket .Chat's trademarks and any violation of this provision may result in legal action and liabilities", "tokens": 495}
{"title": "Terms of Use (aka EULA)", "content": ". If we believe that there is a violation of the Customer Terms of Service, Terms of Use, Acceptable Use Policy, or any of our other policies that can simply be remedied by removal of certain Customer Data or taking other action, we will, in most case, ask the Customer to take action rather than intervene . We may directly step in and take what we determine to be appropriate action (including disabling your account) if we believe there is a credible risk of harm to us, the Services, Users, or any third parties, including Vendors and Third Party Apps . To the maximum extent permitted by law, Rocket.Chat offers the Services and Products \u201cAS IS\u201d and \u201cAS AVAILABLE\u201d and Rocket .Chat hereby disclaims all warranties, whether express, implied, or statutory, including but not limited to any implied warranties of title, non-infringement, merchantability, or fitness for a particular purpose . You may have other statutory rights, in which case the duration of any statutory warranties will be limited to the maximum extent permitted by law . IN NO EVENT WILL WE HAVE ANY LIABILITY FOR ANY LOST PROFITS OR REVENUES OR FOR ANY INDIRECT, SPECIAL, INCIDENTAL, CONSEQUENTIAL, COVER, OR PUNITIVE DAMAGES HOWEVER CAUSED, WHETHER IN CONTRACT, TORT, OR UNDER ANY OTHER THEORY OF LIABILITY, AND WHETHER OR NOT THE PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES . UNLESS YOU ARE ALSO A CUSTOMER (AND WITHOUT LIMITATION TO OUR RIGHTS AND REMEDIES UNDER THE CONTRACT), USER WILL HAVE NO FINANCIAL LIABILITY TO US FOR A BREACH OF THESE TERMS OF USE . OUR MAXIMUM AGGREGATE LIABILITY TO THE USER FOR ANY BREACH OF THE TERMS OF USE IS ONE HUNDRED US DOLLARS (USD $100) IN THE AGGREGATE . THE FOREGOING DISCLAIMERS WILL NOT APPLY TO THE EXTENT PROHIBITED BY APPLICABLE LAW AND DO NOT LIMIT EITHER PARTY\u2019S RIGHT TO SEEK AND OBTAIN EQUITABLE RELIEF. Rocket", "tokens": 394}
{"title": "Terms of Use (aka EULA)", "content": ".Chat uses a combination of open-source and proprietary code. Rocket.Chat Community Edition (CE) is licensed under the terms of the MIT License. Rocket.Chat Enterprise Edition (EE) is licensed under \"The Rocket .Chat Enterprise Edition (EE) license,\" which has more restrictions. It is important to note that Rocket .Chat Enterprise Edition (EE) covers all non-community versions of the product, including the Free, Pro, Enterprise, or any other non-community edition version that may be derived. Rocket .Chat uses open-source software components in its platform, which are made available to users as open-source software. However, any proprietary software that is not available as open-source software is excluded . The open-source license terms can be found in the source code repository on GitHub. Our Terms of Use for any open-source software component we provide are designed to avoid any conflict with the applicable open-source license terms . In case of conflict between our terms of use and the open-source license, the open-source license will take priority. Please be aware that the Rocket .Chat Enterprise Edition (EE) is provided as a \"source available\" distribution and requires a commercial license for usage. If you are operating a derivative product under the assumption that the Rocket .Chat Software is fully open-source; you are required to remove the Enterprise Edition folder from your code base. Failure to comply with this requirement may result in legal consequences", "tokens": 298}
{"title": "Terms of Use (aka EULA)", "content": ". These Terms of Use (EULA) will remain in effect for the duration of the Terms of Service or as long as the User maintains an active account with us . If you choose to delete your account or if your account is deleted by the Workspace Administrator, the Terms of Use will no longer apply to your use of the Services, except if otherwise expressed in the Survival Section . It is important to reinforce that the responsibility for deleting User accounts lies with the Customer. If we decide to terminate or suspend the User\u2019s account on Rocket .Chat Open server, due to a violation of these Terms of Use, the Acceptable Use Policy, or the Code of Conduct of the Open Server, these terms will remain applicable to any actions or activities performed before the account termination or suspension . The Sections titled \u201cLimitation of Liability\u201d and \u201cSurvival\u201d and all of the provisions under the general heading \u201cGeneral Provisions\u201d will survive any termination or expiration of these Terms of Use . As part of our ongoing commitment to providing the User with the best experience, we periodically review and update our Terms of Use and policies. If there are any substantial modifications to the Terms of Use or other policies that directly affect the use of Rocket .Chat Services, we will ensure to provide Users with advance notice prior to the changes taking effect. If a User accesses our services through a Customer (e.g ., organization), the Customer's Workspace Administrator is responsible for receiving and relaying any updates to the Terms of Use, Service Terms, and other policies to the User. If the User is currently utilizing Rocket .Chat Open Server, trial, free plan, or any of our apps directly with us; we will communicate these changes through email using the address associated with the User account or via in-app messaging", "tokens": 365}
{"title": "Terms of Use (aka EULA)", "content": ". It is important to carefully review the Terms of Use and any additional terms that apply to the usage of our Services . By continuing to use our Services after the effective date of any changes, that use will constitute the User\u2019s acceptance of the revised terms and conditions . No failure or delay by either Party in exercising any rights under this Terms of Use, including the Acceptable Use Policy, will constitute a waiver of that right . No waiver under the Terms of Use will be effective unless it is in writing and signed by an authorized representative of the party being deemed to have granted the waiver . The Terms of Use, including the Acceptable Use Policy, will be enforced to the fullest extent permitted under applicable law . If any provision of the Terms of Use is held by a court of competent jurisdiction to be contrary to law, the provision will be modified by the court and interpreted so as best to accomplish the objectives of the original provision to the fullest extent permitted by law, and the remaining provisions of the Terms of Use will remain in effect . The User may not assign any of its rights or delegate to its obligations under these Terms of Use, including the Acceptable Use Policy, whether by operation of law or otherwise, without the prior written consent of Rocket .Chat (not to be unreasonably withheld). Rocket .Chat may assign these Terms of Use in their entirety (including all terms and conditions incorporated herein by reference) without the User's consent to a corporate affiliate or in connection with a merger, acquisition, corporate reorganization, or sale of all or substantially all of our assets", "tokens": 327}
{"title": "Terms of Use (aka EULA)", "content": ". The Terms of Use, including the Acceptable Use Policy, and any disputes arising out of or related hereto, will be governed exclusively by the same applicable governing law of the Customer Terms of Service, without regard to conflicts of laws rules or the United Nations Convention on the International Sale of Goods . The Courts located in the applicable venue of the Customer Terms of Service will have exclusive jurisdiction to adjudicate any dispute arising out of relating to the Terms of Use, including the Acceptable Use Policy or its formation, interpretation, or enforcement . Each Party hereby consents and submits to the exclusive jurisdiction of such courts. In any action or proceeding to enforce rights under the Terms of Use, the prevailing party will be entitled to recover its reasonable costs and attorney\u2019s fees . The Terms of Use (EULA), including any terms incorporated by reference into the Terms of Use, constitute the entire agreement between the User and Rocket .Chat and supersede all prior and contemporaneous agreements, proposals, or written or oral representations concerning its subject matter . To the extent of any conflict or inconsistency between the provisions in these Terms of Use and any pages referenced in these Terms of Use, these Terms of Use will first prevail, provided, however, that if there is a conflict or inconsistency between the Customer Terms of Service and the Terms of Use, the Customer Terms of Service will prevail, followed by the provisions in these Terms of Use, and then, followed by the pages referenced in these terms of use . (e.g., Privacy Policy). The Customer will be responsible for notifying Users of those conflicts or inconsistencies, and until such time, the terms set forth herein will be binding . Please also feel free to contact us if you have any questions about this Agreement. You may contact us at legal@rocket.chat or at our mailing address below: Rocket.Chat Technologies Corp . 251 Little Falls Rd Wilmington, DE, 19808 USA", "tokens": 411}
{"title": "Acceptable Use Policy", "content": "Effective date: November 30th, 2023 PLEASE READ THIS ACCEPTABLE USE POLICY CAREFULLY BEFORE USING ROCKET.CHAT SERVICES. You, a User of Rocket.Chat Services, agree to abide by this Rocket .Chat Acceptable Use Policy regarding unacceptable conduct for our Services. If Rocket .Chat, in its sole discretion, determines that a policy violation is deliberate, repeated, or presents a credible risk of harm to other Users, our Customers, the Services, or any third parties; we may suspend or terminate your access to the Services without prior notice and without any liability to you . comply with all Terms of Use applicable to You; comply with all applicable laws and governmental regulations, including, but not limited to, all intellectual property, data, privacy, and export control laws and regulations promulgated by any government agencies; upload and disseminate only data to which you own or have all proper rights or access under the law and contractual and fiduciary relationships (such as proprietary and confidential information learned or disclosed as part of employment relationships or under nondisclosure agreements) and do so only consistent with applicable law; keep Your access credentials (including passwords access keys, API keys, and tokens, .) confidential; use commercially reasonable efforts to prevent unauthorized access to or use of the Services; monitor and control all activity conducted through Your account in connection with the Services; use the proper functions that come with Your account to interact with Your workspace and subscription (e .g ., renewal and cancellation of the workspace); promptly notify us if You become aware of or reasonably suspect any illegal or unauthorized activity or a security breach involving Your accounts, including any loss, theft, or unauthorized disclosure or use of a username, password, or account; comply in all respects with all applicable terms of the third-party applications that You access or subscribe to in connection with the Services, including any that the Customer elects to integrate with the Services that You access or subscribe to in correction with the Services", "tokens": 414}
{"title": "Acceptable Use Policy", "content": ". use the Services to store or transmit any information, content or data that may infringe upon or misappropriate someone else's trademark, copyright, or other intellectual property or that may be tortious or unlawful; upload to, or transmit from, the Services any data, file, software, or link that contains or redirects to a virus, Trojan horse, worm, or other harmful component or technology that unlawfully accesses or downloads content or information stored within the Services or on the hardware of Rocket", "tokens": 109}
{"title": "Acceptable Use Policy", "content": ".Chat or any third party; attempt to reverse engineer, decompile, hack, disable, interfere with, disassemble, modify, copy, translate, or disrupt the features, functionality, integrity, or performance of the Services (including any mechanism used to restrict or control the functionality of the Services), any third party use of the Services, or any third party data contained therein (except to the extent such restrictions are prohibited by applicable law); attempt to gain unauthorized access to the Services or related systems or networks or to defeat, avoid, bypass, remove, deactivate, or otherwise circumvent any software protection or monitoring mechanisms of the Services; use the Services in any manner that may harm minors or that interacts with or targets people under the legal age stated in the Terms of Use; impersonate any person or entity, including, but not limited to, a team member of ours, an \u201cAdministrator,\u201d an \u201cOwner,\u201d or any other User, or falsely state or otherwise misrepresent your affiliation with a person, organization, or entity; use the Services to provide material support or resources (or to conceal or disguise the nature, location, source, or ownership of material support or resources) to any organization(s) designated by the United States government as a foreign terrorist organization pursuant to section 219 of the Immigration and Nationality Act or other laws and regulations concerning national security, defense or terrorism; access, search, or create accounts for the Services by any means other than our publicly supported interfaces (for example, \"scraping\" or creating accounts in bulk); send unsolicited communications, promotions or advertisements, or spam; place any advertisements within the Rocket .Chat Services; send altered, deceptive, or false source-identifying information, including \"spoofing\" or \"phishing\"; use contact or other user information obtained from the Services (including email addresses) to contact Users outside of the Services without their express permission or authority or to create or distribute mailing lists or other collections of contact or user profile information for Users for use outside of the Services; abuse referrals or promotions to get more credits than deserved; share, transfer, or otherwise provide access to an account designated for You to another person; access the Services to build a similar or competitive product or service or copy any ideas, features, functions, or graphics pertaining to the Services; sublicense, resell, timeshare, or similarly exploit the Services", "tokens": 507}
{"title": "Acceptable Use Policy", "content": "unless You have entered into an active and legally binding Partner Agreement with Rocket .Chat; access or use the Services on behalf of or for the benefit of any patent assertion entity . If our Services are accessed or used in any patent assertion, such use is in violation of this Acceptable Use Policy, and to the extent permitted by law, cannot be used in any related court filings; engage in activity that incites or encourages violence or hatred against individuals or groups, including but not limited to defaming, libeling, ridiculing, mocking, stalking, threatening, harassing, intimidating, or abusing anyone; or authorize, permit, enable, induce, or encourage any third party to do any of the above . We take the safety and well-being of our Users seriously. Thus, there are certain types of content we cannot allow . We prohibit posting or sharing \u201cHarmful Content,\u201d which is defined as content that: Is obscene, pornographic, violent or otherwise may offend human dignity, or contains nudity; Contains language or imagery which could reasonably be deemed offensive, or is likely to harass, upset, embarrass, or annoy any other person (including, but not limited to, any sort of language or imagery that could be deemed discriminatory against any race, religion, gender identity, sex, sexual orientation, color, ethnicity, national origin, or ability status); Is abusive, insulting, or threatening, discriminatory, or promoting of or encouraging racism, sexism, hatred or bigotry; Encourages any illegal activity including but not limited to, terrorism, inciting racial hatred, or the submission of which in itself constitutes committing a criminal offense; Is defamatory, untrue, or libelous; Relates to commercial activity, including but not limited to, sales, competitions, and advertising, and links to other websites or premium line telephone numbers; Infringes upon any rights of a third party, including but not limited to privacy and intellectual property rights; or Uses the name, image, or likeness of another person, or impersonates another person, without that person\u2019s consent (or in the case of a minor, without the consent of that minor\u2019s parent or legal guardian) or is an image or likeness of a minor unaccompanied by the minor\u2019s parent or legal guardian", "tokens": 486}
{"title": "Acceptable Use Policy", "content": ". If You come across any Harmful Content within our server, we encourage You to report it immediately. Reporting helps us maintain a positive and secure environment for all users . To report harmful content, please follow the steps outlined on the Censorship and Harmful Content page. For reporting Harmful Content on a customer workspace, please contact the respective Customer directly . They will be able to assist You in addressing any issues or concerns within their workspace. If you require further assistance or have additional questions, please contact legal@rocket.chat . Your cooperation in reporting Harmful Content is greatly appreciated as we work together to ensure a safe and respectful community. For Users utilizing the Rocket.Chat Open Server (\u200bhttps://open.rocket .chat), kindly be advised that our code of conduct applies to Your usage. Please familiarize yourself with our Rocket.Chat Code of Conduct . However, if You are accessing a Customer workspace, please note that the respective Customer may impose additional requirements and terms on You when using our Services that You must comply with. The applicable Customer will notify You of such terms and conditions . We recommend reviewing and adhering to any additional guidelines the Customer sets.", "tokens": 237}
{"title": "Master Service Agreement for Professional Services", "content": "Effective date: November 30th, 2023 This Professional Services Master Agreement (\u201cAgreement\u201d) describes your (\u201cCustomer\u2019s\u201d) rights and responsibilities when using our (\u201cRocket.Chat\u2019s\u201d) professional services. This Agreement applies to all Customers of Rocket .Chat\u2019s Professional Services and governs each Statement of Work (SOW) and Order Form that specifies services for a particular term or period (the \u201cOrder/SOW Term\u201d) . We may update this Agreement and we will let you know when we do through the Services (e.g., a bot notification) or by the Customer email address provided to Rocket.chat. \u200b\u200bPlease read this document carefully before using this service . \"Affiliate\" of a Person means any other Person that directly or indirectly, through one or more intermediaries, controls, is controlled by, or is under common control with, such Person . The term \"control\" (including the terms \"controlled by\" and \"under common control with\") means the possession, directly or indirectly, of the power to direct or cause the direction of the management and policies of a Person, whether through the ownership of voting securities, by contract, or otherwise . \"Authorized Service Recipients\" means the Affiliates of Customer as may be identified by Customer to Rocket.Chat from time to time, or Persons identified as such in a Statement of Work . \"Agreement\" has the meaning set forth in the preamble. \"Change Order\" has the meaning set forth in Section 5", "tokens": 310}
{"title": "Master Service Agreement for Professional Services", "content": ".2 \"Confidential Information\" means any information that is treated as confidential by a party, including but not limited to all non-public information about its business affairs, products or services, Intellectual Property Rights, trade secrets, third-party confidential information, and other sensitive or proprietary information, whether disclosed orally or in written, electronic, or other form or media, and whether or not marked, designated, or otherwise identified as \"confidential\" . Confidential Information shall not include information that: (a) is already known to the Receiving Party without restriction on use or disclosure prior to receipt of such information from the Disclosing Party; (b) is or becomes generally known by the public other than by breach of this Agreement by, or other wrongful act of, the Receiving Party; (c) is developed by the Receiving Party independently of, and without reference to, any Confidential Information of the Disclosing Party; or (d) is received by the Receiving Party from a third party who is not under any obligation to the Disclosing Party to maintain the confidentiality of such information . \"Customer\" has the meaning set forth in the preamble. \"Customer Contract Manager\" has the meaning set forth in Section 4.1(a) . \"Customer Materials\" means any documents, data, know-how, methodologies, software, and other materials provided to Rocket.Chat by Customer[, including computer programs, reports, and specifications . \"Deliverables\" means all documents, work product, and other materials that are delivered to Customer hereunder or prepared by or on behalf of Rocket .Chat in the course of performing the Services, including any items identified as such in a Statement of Work. \"Disclosing Party\" means a party that discloses Confidential Information under this Agreement . \u201cDocumentation\u201d means the official user documentation prepared and provided by Rocket.Chat to Customer on the use of the Services or Rocket.Chat software (as updated from time to time) . For the avoidance of doubt, any online community site, unofficial documentation, videos, white papers, or related media, or feedback do not constitute Documentation \"Effective date\" means the signature date of the SOW or Order Form in which the Services provided under this Agreement are foreseen", "tokens": 461}
{"title": "Master Service Agreement for Professional Services", "content": ". \"Intellectual Property Rights\" means all (a) patents, patent disclosures, and inventions (whether patentable or not), (b) trademarks, service marks, trade dress, trade names, logos, corporate names, and domain names, together with all of the goodwill associated therewith, (c) copyrights and copyrightable works (including computer programs), and rights in data and databases, (d) trade secrets, know-how, and other Confidential Information, and (e) all other intellectual property rights, in each case whether registered or unregistered and including all applications for, and renewals or extensions of, such rights, and all similar or equivalent rights or forms of protection in any part of the world . \"Key Personnel\" means any Rocket.Chat personnel identified as being key in a Statement of Work . \"Losses\" mean all losses, damages, liabilities, deficiencies, actions, judgments, interest, awards, penalties, fines, costs, or expenses of whatever kind, including reasonable attorneys' fees and the cost of enforcing any right to indemnification hereunder and the cost of pursuing any insurance providers . \u201cPerson\u201d means any individual or business entity that obtains Services as defined below . \"Pre-Existing Materials\" means the pre-existing materials specified in a Statement of Work, such as documents, data, know-how, methodologies, software, and other materials. \"Project\" means a project as described in a Statement of Work . \"Project Milestone\" means an event or task described in a Statement of Work which shall be completed by the relevant date set forth in the Statement of Work", "tokens": 341}
{"title": "Master Service Agreement for Professional Services", "content": ". \"Receiving Party\" means a party that receives or acquires Confidential Information directly or indirectly under this Agreement. \"Rocket.Chat Contract Manager\" means a primary contact with respect to this Agreement who will have the authority to act on behalf of Rocket .Chat in connection with matters pertaining to this Agreement \"Rocket.Chat Personnel\" means all employees and Subcontractors, if any, engaged by Rocket.Chat to perform the Services. \"Services\" mean the professional and other services to be provided by Rocket .Chat under this Agreement, as described in more detail in a Statement of Work, and Rocket.Chat's obligations under this Agreement. \"Statement of Work\" or \"SOW\" means each Statement of Work entered into by the parties. 2 .1 General. Rocket.Chat shall provide the Services to Customer and the Authorized Service Recipients as described in more detail in each SOW/Order Form in accordance with the terms and conditions of this Agreement . Customer acknowledges that (a) all aspects of the scope of work are described in the applicable SOW and no aspect of the scope of work is implied; (b) the signed SOW and the receipt of a purchase order constitutes authorization for Rocket .Chat to perform the Services under this Agreement and the applicable SOW and issue invoices as set forth in Section 7. 2.2 Statement of Work . Each Statement of Work shall include the following information, if applicable: a detailed description of the Services to be performed pursuant to the SOW; the date upon which the Services will commence and the term of such SOW; the names of Rocket .Chat Contract Manager and any Key Personnel; the fees to be paid to Rocket .Chat under the SOW; Project Milestones and payment schedules; any criteria for completion of the Services; procedures for the testing and acceptance of the Services and Deliverables by Customer; and any other terms and conditions agreed upon by the parties in connection with the Services to be performed pursuant to such SOW", "tokens": 402}
{"title": "Master Service Agreement for Professional Services", "content": ". 2.3 Documentation. The content and format of all Documentation produced under this Agreement and its supplements will be created according to Rocket.Chat standard practices . Except if clearly defined as part of the Services to be performed, Services under this Agreement do not include architecture for high availability or failover systems. 2.4 Service Language . All Services will be provided in a single language mutually agreed to by the parties and specified within the SOW. If no other language is specified in the Agreement or its supplements, the default language for Services provided will be English. 2 .5 Business Hours. The Services performed under this Agreement will be executed during business hours mutually agreed to by Rocket.Chat and the Customer Contract Manager. Rocket .Chat will not exceed the total estimated number of business days or hours described in the applicable SOW without prior written approval from Customer, as set forth in Section 5. 3.1 Rocket .Chat shall: before the date on which the Services are to start, obtain, and at all times during the term of this Agreement maintain, all necessary licenses and consents and comply with all relevant Laws applicable to the provision of the Services; comply with, and ensure that all Rocket .Chat Personnel comply with, all rules, regulations, and policies of Customer that are communicated to Rocket .Chat in writing, including security procedures concerning systems and data and remote access thereto, building security procedures and general security practices and procedures; provide (if applicable) the Customer with a project implementation plan including the timeframe within the term established in the applicable SOW", "tokens": 315}
{"title": "Master Service Agreement for Professional Services", "content": ". 3.2 Rocket.Chat Personnel. Rocket.Chat is responsible for all Rocket .Chat Personnel and for the payment of their compensation, including, if applicable, withholding of income taxes, and the payment and withholding of social security and other payroll taxes, unemployment insurance, workers' compensation insurance payments, and disability benefits. 3 .3 Timeframe. Rocket.Chat shall use reasonable efforts to meet any performance dates specified in a Statement of Work, and any such dates shall be estimates only. 4.1 Customer shall: cooperate with Rocket .Chat in all matters relating to the Services and appoint a Customer employee to serve as the primary contact with respect to this Agreement and who will have the authority to act on behalf of Customer with respect to matters pertaining to this Agreement (the \"Customer Contract Manager\"); respond promptly to any Rocket .Chat request to provide direction, information, approvals, authorizations, or decisions that are reasonably necessary for Rocket.Chat to perform Services in accordance with the requirements of this Agreement; provide such information as Rocket .Chat may request, in order to carry out the Services, in a timely manner, and ensure that it is complete and accurate in all material respects; provide (if applicable), access to Customer's premises and such office accommodations and other facilities as may reasonably be required by Rocket .Chat, for the purposes of performing the Services; notify Rocket.Chat of any laws, regulations, and/or statutes specific to Customer\u2019s industry that Rocket .Chat will be required to know to fulfill their obligations under this Agreement; provide suitably equipped and knowledgeable resource(s) to work with Rocket .Chat to refine the requirements, design, build and test the solution as per the scope of work section outlined in each SOW; provide the necessary resources to participate in meetings/workshops/communications needed to provide the required data or inputs necessary to deliver the", "tokens": 387}
{"title": "Master Service Agreement for Professional Services", "content": "contracted services (within a defined timeframe); take responsibility for the content of any Customer data file, control access to the files, and maintain their backup and recovery; obtain and maintain all necessary licenses and consents and comply with all applicable law in relation to the Services to the extent that such licenses, consents, and law relate to Customer's business, premises, staff, and equipment, in all cases before the date on which the Services are to start; 4 .2 Customer failure and delay. Customer acknowledges that any failure or delay in complying with the obligations described in this Section 4 may impact the estimated schedule and produce other effects as set forth in Section 5 (\"Change Order\"). 5 .1 Change Orders Procedure. If either party wishes to change the scope or performance of the Services, it shall submit details of the requested change to the other party in writing in accordance with the notice provisions in Section 13.2. Rocket .Chat shall, within a reasonable time (not to exceed 30 days) after receiving a Customer-initiated request, or at the same time that Rocket .Chat initiates such a request, provide a written estimate to Customer of: the likely time required to implement the change; any necessary variations to the fees and other charges for the Services arising from the change; the likely effect of the change on the Services; any other impact the change might have on the performance under this Agreement; and any other information reasonably requested by the Customer . 5.2 Change Orders Agreement. Promptly after receipt of the written estimate, the parties shall negotiate and agree in writing on the terms of such change (a \"Change Order\") . Neither party shall be bound by any Change Order unless mutually agreed upon in writing in accordance with Section 13.6. 6.1 Term . This Agreement shall commence as of the Effective Date and shall continue thereafter until the completion of the Services under all SOWs, unless sooner terminated pursuant to this Section 6. 6.2 Termination for Cause", "tokens": 402}
{"title": "Master Service Agreement for Professional Services", "content": ". Either party may terminate this Agreement or any SOW, effective upon written notice to the other party (the \"Defaulting Party\"), if the Defaulting Party: materially breaches this Agreement, and such breach is incapable of cure, or with respect to a material breach capable of cure, the Defaulting Party does not cure such breach within 30 days after receipt of written notice of such breach; or (i) becomes insolvent or admits its inability to pay its debts generally as they become due; (ii) becomes subject, voluntarily or involuntarily, to any proceeding under any domestic or foreign bankruptcy or insolvency law, which is not fully stayed within 30 business days or is not dismissed or vacated within 30 days after filing; (iii) is dissolved or liquidated or takes any corporate action for such purpose; (iv) makes a general assignment for the benefit of creditors; or (v) has a receiver, trustee, custodian, or similar agent appointed by order of any court of competent jurisdiction to take charge of or sell any material portion of its property or business . 6.3 Effects of Termination or Expiration. Upon expiration or termination of this Agreement for any reason: Rocket.Chat shall promptly deliver to Customer all Deliverables (whether complete or incomplete) for which Customer has paid . Each party shall (i) return to the other party all documents and tangible materials (and any copies) containing, reflecting, incorporating, or based on the other party's Confidential Information, (ii) permanently delete all of the other party's Confidential Information from its computer systems, and (iii) certify in writing to the other party that it has complied with the requirements of this clause . 6.4 Survival. The rights and obligations of the parties set forth in this Section 6 .5 and Section 1 (Definitions), Section 8 (Intellectual Property Rights; Ownership), Section 9 (Confidential Information), Section 10 Representations and Warranties., Section 12 (Limitation of Liability), Section 6 .4 Effects of Termination or Expiration, and Section 13 (Miscellaneous), and any right or obligation of the parties to this Agreement which, by its nature, should survive termination or expiration of this Agreement, will survive any such termination or expiration of this Agreement", "tokens": 474}
{"title": "Master Service Agreement for Professional Services", "content": ". 7.1 In General. In consideration of the provision of the Services by the Rocket.Chat and the rights granted to Customer under this Agreement, Customer shall pay the fees as follows: Time and Materials . For Services provided on a time and materials basis, Customer shall pay fees (the \"Fees\") calculated in accordance with Rocket.Chat's daily/hourly fee rates as set forth in [the applicable SOW. Fixed Price . Where Services are provided for a fixed price, the total Fees shall be the amount set out in the applicable SOW. 7.2 Expense Reimbursement. Customer agrees to reimburse Rocket .Chat for all actual, documented, and reasonable travel and out-of-pocket expenses incurred by Rocket.Chat in connection with the performance of the Services; 7.3 Invoicing and Payment . All information regarding payment and invoices such as payment terms and fines shall be set forth in the applicable SOW. Unless expressly provided otherwise in the SOW, payments shall be paid prior to the execution of the Services. 7.4 Taxes . Customer shall be responsible for all sales, use, and excise taxes, and any other similar taxes, duties, and charges of any kind imposed by any federal, state, or local governmental entity on any amounts payable by Customer hereunder except for any taxes imposed on, or with respect to, Rocket", "tokens": 284}
{"title": "Master Service Agreement for Professional Services", "content": ".Chat's income, revenues, gross receipts, personnel, or real or personal property or other assets. Each party will retain all right, title and interest in and to its Pre-Existing Intelectual Property. Rocket .Chat will retain all right, title, and interest in and to the Professional Services, Professional Services Materials, Deliverables, and Intelectual Property Rights embodied therein . In no event will Professional Services Materials be deemed to include Customer Pre-Existing Intelectual Property or Customer Confidential Information. Customer hereby grants Rocket .Chat a non-exclusive, worldwide, royalty-free, fully paid-up license to use Customer\u2019s Pre-Existing IP and Confidential Information for the sole purpose of performing the Professional Services and providing the Deliverables. Upon receipt of full payment, Rocket .Chat hereby grants to Customer a limited, non-exclusive, non-transferable, terminable license, with no right to sublicense, to use the Deliverables, including any Professional Services Materials incorporated in such Deliverables, solely as necessary to use the Deliverables and the Deliverables solely with the Services . Customer will not redistribute the Deliverables (including any Professional Services Materials incorporated therein) to any third parties without Rocket.Chat\u2019s prior written consent. 9", "tokens": 272}
{"title": "Master Service Agreement for Professional Services", "content": ".1 The Receiving Party agrees: not to disclose or otherwise make available Confidential Information of the Disclosing Party to any third party without the prior written consent of the Disclosing Party; provided, however, that the Receiving Party may disclose the Confidential Information of the Disclosing Party to its and its Affiliates, and their officers, employees, consultants, and legal advisors who have a \"need to know\", who have been apprised of this restriction, and who are themselves bound by nondisclosure obligations at least as restrictive as those set forth in this Section 9; to use the Confidential Information of the Disclosing Party only for the purposes of performing its obligations under the Agreement or, in the case of Customer, to make use of the Services and Deliverables; and to immediately notify the Disclosing Party in the event it becomes aware of any loss or disclosure of any of the Confidential Information of Disclosing Party . 9.2 Compelled disclosure . If the Receiving Party becomes legally compelled to disclose any Confidential Information, the Receiving Party shall provide: (a) prompt written notice of such requirement so that the Disclosing Party may seek, at its sole cost and expense, a protective order or other remedy; and (b) reasonable assistance, at the Disclosing Party's sole cost and expense, in opposing such disclosure or seeking a protective order or other limitations on disclosure . If, after providing such notice and assistance as required herein, the Receiving Party remains required by Law to disclose any Confidential Information, the Receiving Party shall disclose no more than that portion of the Confidential Information which, on the advice of the Receiving Party's legal counsel, the Receiving Party is legally required to disclose and, upon the Disclosing Party's request, shall use commercially reasonable efforts to obtain assurances from the applicable court or agency that such Confidential Information will be afforded confidential treatment . 9", "tokens": 389}
{"title": "Master Service Agreement for Professional Services", "content": ".3 Nothing in this Agreement shall prevent either party from using any general methodologies or know-how contained in the unaided memory of such party's personnel or those of its Affiliates developed or disclosed under this Agreement, provided that in doing so it is not in breach of its obligations of confidentiality under this section or using any Intellectual Property Rights of the other party or any of its Affiliates . 10.1 Mutual . Each party represents and warrants to the other party that: (a) it has the full right, power, and authority to enter into this Agreement, to grant the rights and licenses granted hereunder and to perform its obligations hereunder; and (b) when executed and delivered by such party, this Agreement will constitute the legal, valid and binding obligation of such party, enforceable against such party in accordance with its terms . 10.2 Rocket.Chat. Rocket .Chat represents and warrants to Customer that: (a) it shall perform the Services in a professional and workmanlike manner and in compliance with all applicable laws, and shall devote adequate resources to meet its obligations under this Agreement; (b) the Services and Deliverables shall conform in all respects with the specifications and will be performed to Customer's reasonable satisfaction; and (c) the Services and Deliverables, and Customer's use thereof, do not and will not infringe any third party rights . 10", "tokens": 293}
{"title": "Master Service Agreement for Professional Services", "content": ".3 EXCEPT FOR THE EXPRESS WARRANTIES IN THIS SECTION 10, (A) EACH PARTY HEREBY DISCLAIMS ALL WARRANTIES, EITHER EXPRESS, IMPLIED, STATUTORY, OR OTHERWISE UNDER THIS AGREEMENT, AND (B) ROCKET .CHAT SPECIFICALLY DISCLAIMS ALL IMPLIED WARRANTIES OF MERCHANTABILITY. 11.1 General . Each party (\"Indemnifying Party\") shall indemnify, defend, and hold harmless the other party (\"Indemnified Party\") against any and all losses, damages, liabilities, deficiencies, claims, actions, judgments, settlements, interest, awards, penalties, fines, costs (collectively, \"Losses\"), relating to any claim of a third party arising out of or occurring in connection with: (a) bodily injury, death of any person or damage to real or tangible, personal property resulting from Indemnifying Party's willful, fraudulent or negligent acts or omissions; or (b) Indemnifying Party's negligence, willful misconduct, or material breach of this Agreement, including but not limited to material breach of any representation or warranty made by Indemnifying Party in this Agreement . 11.2 Intellectual Property Infringement. Rocket .Chat shall defend, indemnify, and hold harmless the Customer from and against all losses based on a claim that any of the Services or Deliverables or Customer's receipt or use thereof infringes any Intellectual Property Right of a third party; provided, however, that Rocket", "tokens": 315}
{"title": "Master Service Agreement for Professional Services", "content": ".Chat shall have no obligations under this Section 11.2 with respect to claims to the extent arising out of (a) any instruction, information, designs, specifications, or other materials provided by Customer in writing to Rocket .Chat; (b) Customer's use of the Deliverables in combination with any materials or equipment not supplied to Customer or specified by Rocket.Chat in writing; or (c) any modifications or changes made to the Deliverables other than by Rocket.Chat . TO THE MAXIMUM EXTENT PERMITTED BY APPLICABLE LAW, (I) IN NO EVENT WILL ROCKET .CHAT AND ITS AFFILIATES, DIRECTORS, EMPLOYEES, OR AGENTS HAVE ANY LIABILITY, CONTINGENT OR OTHERWISE, FOR ANY INDIRECT, SPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, STATUTORY OR EXEMPLARY DAMAGES ARISING OUT OF OR RELATING TO THIS AGREEMENT, THE SERVICES, SOFTWARE, DOCUMENTATION, OR ANY OTHER PRODUCTS OR SERVICES PROVIDED HEREUNDER, INCLUDING, BUT NOT LIMITED TO LOST PROFITS, LOST OR CORRUPTED DATA, LOSS OF GOODWILL, WORK STOPPAGE, EQUIPMENT FAILURE OR MALFUNCTION, PROPERTY DAMAGE OR ANY OTHER DAMAGES OR LOSSES, EVEN IF A PARTY HAS BEEN ADVISED OF THE POSSIBILITY THEREOF, AND REGARDLESS OF THE LEGAL OR EQUITABLE THEORY (CONTRACT, TORT, STATUTE, INDEMNITY OR OTHERWISE) UPON WHICH ANY SUCH LIABILITY IS BASED; AND (II) THE AGGREGATE LIABILITY OF ROCKET .CHAT AND ITS AFFILIATES, DIRECTORS, EMPLOYEES, AND AGENTS, AND THE SOLE REMEDY AVAILABLE TO CUSTOMER ARISING OUT OF OR RELATING TO THIS AGREEMENT, THE SERVICES, SOFTWARE, OR ANY PRODUCTS OR SERVICES PROVIDED HEREUNDER SHALL BE LIMITED TO TERMINATION OF THIS AGREEMENT AND DAMAGES NOT TO EXCEED THE TOTAL AMOUNT PAYABLE OR PAID TO ROCKET .CHAT BY CUSTOMER UNDER THIS AGREEMENT DURING THE TWELVE (12) MONTHS PRIOR TO TERMINATION. 13.1 Independent Contractors . The parties are independent contractors, and nothing contained in this Agreement shall be construed as creating any agency, partnership, joint venture or other form of joint enterprise, employment, or fiduciary relationship between them", "tokens": 409}
{"title": "Master Service Agreement for Professional Services", "content": ". Neither party shall be authorized to contract for or bind the other party in any manner whatsoever 13.2 Notices. Except as otherwise set forth herein, all notices under this Agreement and its appendices shall be by email . Notices to customer shall be addressed to addresses set forth on the SOW, although Rocket.Chat may instead choose to provide notice to Customer through the Services (e.g., a bot notification). Notices to Rocket.Chat should be sent to legal@rocket .chat and include in copy Rocket.Chat\u2019s primary point of contact defined in the SOW . A notice will be deemed to have been duly given (a) the day after it is sent, in the case of a notice sent through email; and (b) the same day, in the case of a notice sent through the Services . Customer must keep all of its account information with Rocket.Chat current. 13.3 Entire Agreement; Order of Precedence", "tokens": 194}
{"title": "Master Service Agreement for Professional Services", "content": ". This Agreement, together with all schedules, exhibits, and Statements of Work, and any other documents incorporated herein by reference, constitutes the sole and entire agreement of the parties to this Agreement with respect to the subject matter contained herein, and supersedes all prior and contemporaneous understandings and agreements, both written and oral, with respect to such subject matter . In the event of any conflict between the terms and provisions of this Agreement and those of any schedule, exhibit or Statement of Work, the following order of precedence shall govern: (a) first, this Agreement, exclusive of its exhibits and schedules; (b) second, the applicable Statement of Work; and (c) third, any exhibits and schedules to this Agreement . 13.4 Assignment and Subcontractors. This Agreement shall be assignable by Rocket.Chat. Customer acknowledges that from time to time, Rocket. Chat may enlist a subcontractor to perform some of the Services provided to the Customer . In the event services to be performed as outlined in this Agreement are subcontracted to a third party, the third party shall accept responsibility for the performance of such activities. Rocket .Chat will cease to bear any responsibility related to the performance of subcontracted services; however Rocket.Chat will act as a liaison between the subcontractor and Customer, to monitor the performance of services to be provided by any third party. 13 .5 No Third-Party Beneficiaries . This Agreement is for the sole benefit of the parties hereto and their respective successors and permitted assigns and nothing herein, express or implied, is intended to or shall confer upon any other Person any legal or equitable right, benefit, or remedy of any nature whatsoever, under or by reason of this Agreement", "tokens": 361}
{"title": "Master Service Agreement for Professional Services", "content": ". 13.6 Amendment and Modification; Waiver. As our business evolves, we may change this Agreement . If we make a material change to these provisions, we will provide you with reasonable notice prior to the change taking effect either by emailing the email address associated with your account or by messaging you through the Services . You can review the most current version of the Customer Terms at any time by visiting this page . Any material revisions to these Customer Terms will become effective on the date set forth in our notice, and all other changes will become effective on the date we publish the change . If you use the Services after the effective date of any changes, that use will constitute your acceptance of the revised terms and conditions . No failure to exercise any right, remedy, power or privilege (\"Rights\") arising under this Agreement shall operate or be construed as a waiver thereof . No single or partial exercise of any Right hereunder precludes any other or further exercise thereof or the exercise of any other Right. 13.7 Severability . No invalidity, illegality, or unenforceability of any provision herein in any jurisdiction, shall affect any other term or provision of this Agreement or invalidate or render such provision unenforceable in any other jurisdiction . If any provision is determined to be invalid, illegal, or unenforceable, the parties hereto shall negotiate in good faith to modify this Agreement so as to effect the original intent of the parties as closely as possible. 13 .8 Governing Law: Submission to Jurisdiction . This Agreement shall be governed by the laws of the State of Delaware and of the United States, without regard to any conflict of law provisions, except that the United Nations Convention on the International Sale of Goods and the provisions of the Uniform Computer Information Transactions Act shall not apply to this Agreement . Customer hereby consent to the jurisdiction of the state and federal courts of Delaware . If this Agreement is translated into a language other than English and there are conflicts between the translations of this Agreement, Customer agrees that the English version of this Agreement shall prevail and control. 13.9 Non-Exclusivity. Rocket", "tokens": 440}
{"title": "Master Service Agreement for Professional Services", "content": ".Chat retains the right to perform the same or similar type of services for third parties during the term of this Agreement. 13.10 Force Majeure . Neither Party will be liable for nonperformance or delays caused by acts of God, wars, riots, strikes, fires, floods, hurricanes, earthquakes, government restrictions, terrorist acts or other causes beyond its reasonable control. In addition, Rocket .Chat shall have no liability for any failure or delay of performance by Rocket .Chat that is caused by or results from any failure or delay of performance by the Customer of any obligations it is required to undertake or deliverables it is required to provide under this Agreement, an SOW or any applicable Supplement. 13 .11 Equitable Relief; Cumulative Remedies . Each party acknowledges that a breach of Section 8 (Intellectual Property Rights; Ownership) or Section 9 (Confidentiality) may cause the non-breaching party irreparable damages, for which an award of damages would not be adequate compensation . In the event of such breach or threatened breach, the non-breaching party will be entitled to seek equitable relief . Except as expressly set forth in this Agreement, the rights and remedies under this Agreement are cumulative and in addition to any other rights or remedies available at law or in equity or otherwise. 13.12 Headings . The headings in this Agreement are for reference only and shall not affect the interpretation of this Agreement. 13.13 Counterparts . This Agreement may be executed in counterparts, each of which shall be deemed an original, but all of which together shall be deemed to be one and the same agreement . A signed copy of this Agreement delivered by facsimile, email or other means of electronic transmission shall be deemed to have the same legal effect as delivery of an original signed copy of this Agreement.", "tokens": 378}
{"title": "Cloud Services Terms", "content": "Rocket.Chat's Cloud Terms encompass the Cloud Services provided by Rocket.Chat. These terms supplement the Customer Terms of Service, addressing specific considerations related to Cloud usage. By using our Cloud Services or associated software or services, Customer agrees to be bound by these Cloud Services Terms. Cloud Hosting. Rocket.Chat Cloud Hosting is a service provided by Rocket.Chat, allowing customers to install and use the Rocket.Chat software on a cloud-hosted infrastructure. The terms and conditions that govern Rocket.Chat Cloud Hosting, the \"Cloud Hosting Terms\" services are explicitly detailed in Appendix II of the Customer Terms of Service. Marketplace Apps. As further described in the Rocket.Chat Marketplace and Apps Terms, the Rocket.Chat Markeplace lists a variety of Apps that may be used with Cloud Services, including both Rocket.Chat Apps and Third Party Apps. Rocket.Chat Apps for Cloud Services are considered \u201cCloud Services\u201d under these Terms (unless we specify otherwise through the Rocket.Chat Marketplace). Third-Party Apps are not Cloud Services and remain subject to their own applicable Vendor Terms. We may enable interoperation of the Cloud Services with Third Party Apps. The terms \u201cApps\u201d, \u201cRocket.Chat Apps\u201d, \u201cThird Party Apps\u201d, \u201cVendor\u201d and \u201cVendor Terms\u201d are defined in the Rocket.Chat Marketplace and Apps Terms, which is a separate agreement governing the use of the Rocket.Chat Marketplace. CONTACTING ROCKET.CHAT Please also feel free to contact us if you have any questions about this Agreement. You may contact us at legal@rocket.chat or at our mailing address below: Rocket.Chat Technologies Corp. 251 Little Falls Rd Wilmington, DE, 19808 USA", "tokens": 344}
{"title": "Marketplace and Apps", "content": "Marketplace and Apps Terms and Conditions Customers who utilize our Marketplace and install and enable either Rocket.Chat apps or third-party apps agree to comply with the Marketplace Terms. These Marketplace Terms are an addition to the Customer Terms of Service that apply to the Rocket .Chat Marketplace as part of the Customer Terms. In case of any conflict between the Marketplace Terms and the Customer Terms, the Customer Terms of Service shall take precedence . Please note that Customers are solely responsible for ensuring they have read, understood, and agreed to any app and third-party app they install and enable from the Rocket.Chat Marketplace. Orders. You can place Orders on the Marketplace . Your Order will identify the Vendor, your authorized scope of use of the App, and license or subscription term, as applicable. Once you complete your order or enable or install the App, Rocket.Chat will provide you with access to the applicable Apps . Third-Party Apps. For any Third Party App, you agree that Rocket.Chat is the Vendor\u2019s commercial agent, and you are required to make any related payments directly to Rocket .Chat, except where Third-Party Apps may be enabled or paid for through a third-party Vendor\u2019s own website. App Licensing . Apps are provided on a license, one-time paid, or subscription basis, and you do not acquire any ownership rights in the Marketplace or the Apps. Rocket.Chat reserves the right to offer exclusive apps for certain plans. Term and Termination 4", "tokens": 296}
{"title": "Marketplace and Apps", "content": ".1 Agreement Term. The term of this Agreement (the \u201cTerm\u201d) will begin on the Effective Date and continue until the Agreement is terminated as stated in Section 4 (Term and Termination) . Users may discontinue their use of the Marketplace or any Vendor Product. If such a situation occurs, Users must meet all financial obligations as specified in the Ordering Document, including the payment of all applicable fees . Upon termination, Users must cease using the relevant Vendor Products 4.2 Termination for Cause . In the event of a material breach or any other grounds for termination for cause, as outlined in the Termination for Cause section of the Customer Terms of Service, either party reserves the right to terminate this Agreement by providing written notice, in accordance with applicable law . 4.3 Effect of Termination . If the Agreement is terminated, then (a) all rights and access to the Marketplace and Vendor Products will terminate, unless otherwise described in this Agreement, and (b) all Fees owed by Customer to Rocket .Chat are immediately due upon the Customer\u2019s receipt of the final electronic bill or as set forth in the final invoice. If the Agreement terminates before the end of any outstanding subscription term for any Subscription Product for any reason other than Rocket .Chat\u2019s uncured material breach in accordance with the Agreement, all unpaid Fees remaining for the duration of the subscription term will become due and payable upon termination. 4.4 Termination of Trials. The Marketplace may also offer free trial periods for Apps . After the expiration of the trial period, if you do not place an Order or install and enable the App, the App will cease to function, and you must cease using and delete your copies of the App", "tokens": 346}
{"title": "Marketplace and Apps", "content": ". Marketplace Disclaimers and Liability Except as expressly provided for in the Terms, Rocket .Chat does not make and expressly disclaims to the fullest extent permitted by applicable law (a) any warranties of any kind, whether express, implied, statutory, or otherwise, including warranties of merchantability, fitness for a particular use, title, noninfringement, or error-free or uninterrupted use of the Marketplace and (b) any representations or warranties regarding any Vendor Products, including any representations or warranties, even if Rocket .Chat has reviewed, certified, or approved the Third Party App . Vendors are solely responsible for the services, information and any related content or materials included in the Apps and services they provide (i) related to the performance, functionality, or security of any Vendor Products or (ii) that any Vendor Product listings in the Marketplace are accurate or up-to-date . Rocket.Chat expressly disclaims any responsibility or liability related to a Vendor\u2019s provision of Vendor Products (including any related technical support) and any data shared with a Vendor in connection with these Terms or a Vendor Product. At any time, Rocket .Chat may remove an App from the Marketplace in accordance with applicable policies, and Vendors may also update, modify, or remove their own Apps at any time. Rocket.Chat makes no guarantee that any Apps will work properly with Rocket .Chat Products as they change over time. App Listing The listing for each App will identify the App provider (\u201cVendor\u201d), which may be Rocket.Chat or a third party. Apps for which Rocket.Chat is the Vendor is \"Rocket .Chat Apps,\u201d and Apps for which the Vendor is a third party are \u201cThird Party Apps\u201d. Third-party apps are not Rocket.Chat Services and remain subject to their own applicable Vendor Terms. We may enable interoperation of the Rocket", "tokens": 391}
{"title": "Marketplace and Apps", "content": ".Chat Services with Third-Party Apps as set forth in these Marketplace Terms. Access to Data 7.1 Data Handling and Usage of Third-Party Products and Services . You (including your End Users) may choose to use or procure other third-party products or services in connection with the Rocket.Chat Services, including Third Party Apps or implementation, customization, training, or other services . Your receipt or use of any third-party products or services (and the third parties\u2019 use of any of Your Data) is subject to a separate agreement between you and the third-party provider . If you enable or use third-party products or services with the Rocket.Chat Services (including third-party Apps), we will allow the third-party providers to access or use Your Data as required for the interoperation of their products and services with the Rocket .Chat Products. This may include transmitting, transferring, modifying, or deleting Your Data or storing Your Data on systems belonging to third-party providers or other third parties . Any third-party provider\u2019s use of Your Data is subject to the applicable agreement between you and such third-party provider . We are not responsible for any access to or use of Your Data by third-party providers or their products or services or for the security or privacy practices of any third-party provider or its products or services . You are solely responsible for your decision to permit any third-party provider or third-party product or service to use Your Data. It is your responsibility to carefully review the agreement between you and the third-party provider, as provided by the applicable third-party provider . WE DISCLAIM ALL LIABILITY AND RESPONSIBILITY FOR ANY THIRD-PARTY PRODUCTS OR SERVICES (WHETHER SUPPORT, AVAILABILITY, SECURITY, OR OTHERWISE) OR FOR THE ACTS OR OMISSIONS OF ANY THIRD-PARTY PROVIDERS OR VENDORS . 7.2 Data handling on Rocket.Chat Apps. For Rocket.Chat Apps, this access and use is covered by our Privacy Policy . Representations and Warranties You represent and warrant that you have all necessary authority to enter into and be legally bound by these Marketplace Terms, and Vendor Terms, to place any Orders, and to authorize Vendors to access and use your data and information", "tokens": 462}
{"title": "Marketplace and Apps", "content": ". Marketplace Specific Definitions All undefined terms mentioned in these Marketplace Terms shall have the meaning from the Customer Terms. \u201cRocket.Chat Marketplace\u201d is an online marketplace for plugins, addons, extensions, and integrations (\"Apps\") that work with Rocket .Chat\u2019s services and products, are available at https://www.rocket.chat/marketplace \u201cEnd Users\u201d means the individuals who are permitted by Customer to use the Marketplace or Vendor Products . \u201cSubscription Product\u201d means a Vendor Product made available to Customers on a subscription basis, with either a one-time payment or commitment to pay for a given time period . \u201cVendor Agreement \u201d means a separate agreement between Customer and Vendor governing the Customer\u2019s use of a Vendor Product . APPENDIX 1 - THIRD-PARTY SPECIFIC NOTICES, TERMS, AND POLICIES To assist you in using and accessing information, we may provide notices and information specific to certain third parties in this Section . However, please note that Rocket.Chat is not obligated to include information from all third parties in this section. The information provided here may change from time to time and does not bind Rocket.Chat . It is the Customer's responsibility always to check the third party's terms when contracting and using their products. As stated in the Marketplace Terms, Rocket", "tokens": 265}
{"title": "Marketplace and Apps", "content": ".Chat has no liability over any third-party vendor, but we will make our best efforts to assist you in your purchase with a third party. Notice Regarding Apple as a Third-Party Vendor . You agree to be bound by the then-current Apple Business Register Terms of Use as found on Apple\u2019s website: https://register.apple .com/tou/abr/latest/en if you order, access, or use the applicable Apple services, functions, or features described therein in connection with Rocket.Chat Services. In addition, you acknowledge that these Terms are between You and Rocket .Chat only, not with Apple Inc. (\u201cApple\u201d), and Apple is not responsible for the Services or the content thereof. Apple has no obligation to furnish any maintenance and support services with respect to the Services we provide you . To the maximum extent permitted by applicable law, Apple has no warranty obligations with respect to the Services . Apple is not responsible for addressing any claims by You or any third party relating to the Services or your possession and/or use of the Services, including (a) product liability claims, (b) any claim that the Services fail to conform to any applicable legal or regulatory requirement; or (c) claims arising under consumer protection or similar legislation . Apple is not responsible for the investigation, defense, settlement, and discharge of any third-party claim that the Services and/or Your possession and use of the Services infringe a third party\u2019s intellectual property rights . Apple and Apple\u2019s subsidiaries are third-party beneficiaries of these Terms, and upon Your acceptance of these Terms, Apple will have the right (and will be deemed to have accepted the right) to enforce these Terms against You as a third-party beneficiary of these Terms . You agree to comply with any applicable third-party terms when using the Services. You hereby represent and warrant that: (i) You are not located in a country that is subject to a U.S . Government embargo or that has been designated by the U.S. Government as a \u201cterrorist supporting\u201d country, and (ii) You are not listed on any U.S. Government list of prohibited or restricted parties", "tokens": 463}
{"title": "Marketplace and Apps", "content": ". At all times, any personal information collected through the use of the Services will be treated in accordance with Apple's Privacy Policy which can be viewed at: http://www.apple.com/legal/privacy/. Apple Business Chat Integration . For Apple Business Chat Integrations and related Services, the then-current Apple Business Register Terms of Use are available on Apple\u2019s website: https://register.apple.com/tou/abr/latest/en. These terms apply to such integrations and related Services . Notice Regarding 360 Dialog Integration For Whatsapp Business integration, the Customer agrees to the 360dialog Terms of Service, 360dialog Terms of Use , as well as the Facebook Client Terms of Use for Whatsapp available at https://hub.360dialog .com/lp/consent/facebook-client-terms-for-whatsapp. Note that for support tickets related to WhatsApp integration, do not explicitly follow the SLA of Rocket .Chat only, and are subject to the support services of 360 dialog, which runs on weekdays 9 am - 10 pm CET . Pricing costs for Whatsapp template messages are not included in the monthly license fee and are charged as of Facebook/ Whatsapp pricing in USD as stated under https://developers.facebook.com/docs/whatsapp/pricing plus local taxes . Prices are subject to change according to Facebook\u2019s pricing and policy. Notice Regarding Instagram Dialog Integration. For Instagram integration and related services, the then-current Terms of Use as found on Facebook's website https://developers.facebook .com/docs/messenger-platform/policy/policy-overview/ apply to such integrations and related services . Notice Regarding Pexip Services When purchasing Pexip services, please be aware that additional terms of deliverables may apply, which can be found at https://www.pexip.com/terms . By proceeding with your order, you acknowledge and agree to abide by these terms issued by Pexip. Please also feel free to contact us if you have any questions about Rocket.Chat\u2019s Marketplace Terms. You may contact us at legal@rocket .chat or at our mailing address below: Rocket.Chat Technologies Corp. 251 Little Falls Rd Wilmington, DE, 19808 USA", "tokens": 492}
{"title": "Data Processing Agreement (GDPR)", "content": "Are you a Rocket.Chat customer and looking for a GDPR-compliant Data Processing Agreement (DPA)? You can find one here: Link to Data Processing Agreement Signature Form It is pre-signed and only needs to be signed from your end for your compliance purposes. It contains EU standard contract clauses as a data transfer mechanism for data controllers subject to EU law. Keep in mind that our privacy policy is already part of any customer agreement and therefore already is deemed sufficient by most jurisdictions as a \"contractual agreement\" to prescribe our processing of personal data. The DPA covers our hosted offering. The DPA can also cover cases of customers, that run a self-managed instance of Rocket.Chat, but connect to Rocket.Chat services such as the push notification gateway or the marketplace. For this, you generally need to register your server. In these cases, personal data is processed by us to provide you with these services, and you might be required by the applicable laws to have a DPA in place. Our DPA is flexible enough to cover these cases as well. Info: The DPA is not valid for individual Rocket.Chat users (individual persons). For them, only the privacy policy of their Rocket.Chat workspace (provided by the data controller) applies. This DPA also does not cover the processing of third-party apps from our marketplace (beyond us providing the capability to consume such apps), and in case of multiple DPAs being submitted, only the most recent version applies. How does it work? What information is covered in the Data Processing Agreement (DPA), and how does it ensure GDPR compliance and data security For questions, contact privacy@rocket.chat", "tokens": 346}
{"title": "Set AssetUnset Asset", "content": "Set an asset by name. Permissions required: manage-assets. The authToken of the authenticated user. The userId of the authenticated user. Asset File to upload. Type of asset to upload. assetName can be one of these:logo, background, favicon_ico, favicon, favicon_16, favicon_32, favicon_192, favicon_512, touchicon_180, touchicon_180_pre, tile_70, tile_144, tile_150, tile_310_square, tile_310_wide, safari_pinned. If needs refresh all clients to apply changes immediately. Asset File to upload. Type of asset to upload. assetName can be one of these:logo, background, favicon_ico, favicon, favicon_16, favicon_32, favicon_192, favicon_512, touchicon_180, touchicon_180_pre, tile_70, tile_144, tile_150, tile_310_square, tile_310_wide, safari_pinned ] OK Unauthorized Unset an asset by name. Permissions required: manage-assets . The authToken of the authenticated user. The userId of the authenticated user. Asset name to unset. assetName can be one of these:logo, background, favicon_ico, favicon, favicon_16, favicon_32, favicon_192, favicon_512, touchicon_180, touchicon_180_pre, tile_70, tile_144, tile_150, tile_310_square, tile_310_wide, safari_pinned. If needs refresh all clients to apply changes immediately. OK Unauthorized", "tokens": 392}
{"title": "Remove WebDAV AccountGet WebDAV AccountsMailer Unsubscribe EndpointSend Mailer Endpoint", "content": "Remove a specific WebDAV account. The authorization token of the user. The user ID of the user. The WebDAV account ID that you want to remove. Bad Request Unauthorized Retrieves the user's WebDAV accounts. The authorization token of the user. The user ID of the user. Unauthorized Send emails to users from your workspace. The authToken of the authenticated user. The userId of the authenticated user. The user id of the user that created the mailer The time the mailer was created OK Unauthorized Send emails to users from your workspace. The authToken of the authenticated user. The userId of the authenticated user. A valid email address to send mails from. The subject of the email. The body of the email. You must use [unsubscribe] for the unsubscription link. You may use [name], [fname], [lname] for the user's full name, first name or last name, respectively. You may use [email] for the user's email. A boolean value. If true, will only send one email to the same address as in the From parameter. OK Bad Request Unauthorized", "tokens": 259}
{"title": "Get Password PolicyRegister New Agent or ManagerGet List of Agents or Managers", "content": "Get the current password policy for users in your workspace. The pw.getPolicyReset endpoint has been removed from 7.0. Use this endpoint instead. The user ID. The authentication token. OK Register a new agent or manager. Permission required: view-livechat-manager The authToken of the authenticated user. The userId of the authenticated user. The type of user that you want to register. The value can either be agent or manager. The user name that you want to register. OK Bad Request Unauthorized Forbidden The authToken of the authenticated user. The userId of the authenticated user. The type of user that you want to register. The value can either be agent or manager. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, sort = {\"value\": -1, \"_id\": 1} Enter the text you want to filter the search result with. OK Unauthorized Forbidden", "tokens": 265}
{"title": "Get Agent or Manager InformationRemove Agent or ManagerGet Livechat Custom Fields", "content": "Get information about a particular agent or a manager. Permission required: view-livechat-manager The authToken of the authenticated user. The userId of the authenticated user. The type of user. The value can either be agent or manager. The user ID. OK Unauthorized Forbidden Remove a user as an agent or a manager. Permission required: view-livechat-manager The authToken of the authenticated user. The userId of the authenticated user. The type of user. The value can either be agent or manager. The user ID. OK Unauthorized Forbidden Get a list of the Livechat custom fields. Permission required: view-l-room The authToken of the authenticated user. The userId of the authenticated user. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, sort = {\"value\": -1, \"_id\": 1} Enter the text to filter the search result. OK Unauthorized Forbidden", "tokens": 268}
{"title": "Send Custom Field ValueSend Array of Custom Field ValuesGet Custom Field InformationGet Livechat Message HistorySend New Livechat Message", "content": "Send the value for a custom field. The visitor token. The custom field. The value you want to set for the custom field. Overwrite the value of the custom field. OK Bad Request Send an array of values for different custom fields. The visitor token. The object in which you must enter the custom field information. The custom field. The value you want to set for the custom field. Overwrite the value of the custom field. OK Bad Request Get details about a specific custom field. Permission required: view-l-room The authToken of the authenticated user. The userId of the authenticated user. The custom field ID. OK Unauthorized Forbidden Get the entire message history of a conversation. The room ID. The visitor token. The timestamp to start loading the messages. The number of messages to load. Bad Request Send a new message in a Livechat room. The visitor token. The room ID. The message to send to the visitor. If you do not enter any value, a message ID is automatically generated. If you want to override the message ID in the database with your own, enter a random unique string. Enter the ID and the username of the agent to whom you want to send the message. Bad Request", "tokens": 267}
{"title": "Send Array of MessagesUpdate Livechat MessageGet a Livechat MessageDelete Livechat MessageSend Offline Livechat Message", "content": "Send an array of messsages in a Livechat room. The authToken of the authenticated user. The userId of the authenticated user. The vistor token. The array of messages. Bad Request Unauthorized Update a specific livechat message. The message ID that you want to update. The visitor token. The room ID. The updated message that you want to send. Retrieve specific livechat message information. The message ID that you want to update. The visitor token. The room ID. Bad Request Remove a specific livechat message. The message ID that you want to update. The visitor token. The room ID. Bad Request Send the offline message when no agent is available to attend the omnichannel conversation. Message name. The visitor email. Message text. The department name. The username of the agent. Bad Request", "tokens": 187}
{"title": "Get Visitor InformationRegister Livechat VisitorDelete VisitorGet Open Conversation of a VisitorSearch Visitors by Term", "content": "Get the details of a specific visitor. The visitor token. Register a visitor's information before creating a new Omnichannel room. You can set basic information such as name, phone, custom fields, and the initial department. Enter the body parameters in the visitor object. The visitor's name. The visitor's email. The department that the visitor wants to register to. Enter a random unique string as the visitor token. The visitor's phone number. The agent's username. Enter the custom field key, value, and whether you want to overwrite this information. Bad Request The visitor token. Retrieve open conversations associated with a particular visitor. The authToken of the authenticated user. The userId of the authenticated user. The visitor token. Unauthorized Search Livechat visitors using a specific term. The authToken of the authenticated user. The userId of the authenticated user. The visitor's name, username, email, or phone. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, sort = {\"value\": -1, \"_id\": 1} Bad Request Unauthorized", "tokens": 306}
{"title": "Get Pages Visited by Livechat VisitorGet Livechat Visitor Chat HistorySearch Visitor ChatAutocomplete Visitors", "content": "The authToken of the authenticated user. The userId of the authenticated user. The room ID. Unauthorized The authToken of the authenticated user. The userId of the authenticated user. The room ID. The visitor ID. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, sort = {\"value\": -1, \"_id\": 1} Unauthorized Get the Livechat information of a visitor. This endpoint returns only those chats that are served and closed. The authToken of the authenticated user. The userId of the authenticated user. The room ID. The visitor ID. Unauthorized Autocomplete a visitor's name. The authToken of the authenticated user. The userId of the authenticated user. Enter the exceptions or the conditions that you want to search for. For example, { \"exceptions\" : [], \"conditions\" : {\"username\": \"guest-5\"}} Bad Request Unauthorized", "tokens": 278}
{"title": "Set Visitor's StatusGet Visitor Information by IDSend Visitor navigation historyRemove Department", "content": "The visitor token. The visitor status. Bad Request Get the information of a specific visitor. The authToken of the authenticated user. The userId of the authenticated user. The visitor ID. Bad Request Unauthorized Retrieves the pages your omnichannel user navigated on your website. Enter the visitor token. Enter the room ID. Enter the page information OK Bad Request At least one of the following permissions is required: The authToken of the authenticated user. The userId of the authenticated user. The department ID. OK Unauthorized Forbidden", "tokens": 124}
{"title": "Get List of Departments", "content": "Get a list of the departments. At least one of the following permissions is required: The authToken of the authenticated user. The userId of the authenticated user. Filter the result with any text. Filter the result to only show enabled departments. The value can be boolean true or false. You can include the archived departments in the result. The value can be boolean true or false. This parameter is for users with managers or admin roles. It only displays the departments that you are an agent of. The department ID that you want to exclude from the result. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, sort = {\"value\": -1, \"_id\": 1} OK Unauthorized Forbidden", "tokens": 214}
{"title": "Register New Department", "content": "Permission required: manage-livechat-departments The authToken of the authenticated user. The userId of the authenticated user. The object which takes the department details. Whether you want to enable the department. The value can be boolean true or false. You can let visitors choose the department they want to talk to. The option will appear to your customer in the Live Chat widget. The value can be boolean true or false. The name of the department you are creating. The email ID associated with the department. If you want your department to be displayed during off-business hours. The value can be boolean true or false. A description of your department. The object with the agent details that you want to add to the department. The agent ID that you want to assign to the department. The number of chats served by the agent. Enter a value if you want to reset the stored value.\nNote: This field is used by the routing algorithm to determine the agents that have served the least number of chats and assign new chats to them. The order in which the agents are assigned to chats. Assign the department to a unit. Guidelines for assigning departments to a unit The id of the unit to assign the department. OK Bad Request Unauthorized Forbidden", "tokens": 264}
{"title": "Get Department InformationUpdate Department", "content": "Get information about a specific department using the department ID. At least one of the following permissions is required: The authToken of the authenticated user. The userId of the authenticated user. The department ID. If agents should be included in the result. By default, the value is true and the list of agents is returned. The agents field will only be returned if the user has the view-livechat-departments permission. OK Unauthorized Forbidden Update the details of a specific department. Permissions required: The authToken of the authenticated user. The userId of the authenticated user. The department ID. The object which takes the department details. Whether you want to enable the department. The value can be boolean true or false. You can let visitors choose the department they want to talk to. The option will appear to your customer in the Live Chat widget. The value can be boolean true or false. The name of the department you are creating. The email ID associated with the department. If you want your department to be displayed during off-business hours. The value can be boolean true or false. A description of your department. The agent ID that you want to assign to the department. Assign the department to a unit. Guidelines for assigning departments to a unit The id of the unit to assign the department. OK Bad Request Unauthorized Forbidden", "tokens": 286}
{"title": "Autocomplete DepartmentGet Agents of DepartmentUpdate Agents of Department", "content": "Autocomplete the department name. At least one of the following permissions is required: The authToken of the authenticated user. The userId of the authenticated user. Enter the exceptions or the conditions that you want to search for. Only displays the departments that you are assigned to. The value can be boolean true or false The result includes archived departments. The value can be Boolean true or false. OK Bad Request Unauthorized Get the agents of a specific department. At least one of the following permissions is required: The authToken of the authenticated user. The userId of the authenticated user. The department ID. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, sort = {\"value\": -1, \"_id\": 1} OK Unauthorized Forbidden Update the agents of a specific department. At least one of the following permissions is required: The authToken of the authenticated user. The userId of the authenticated user. The department ID. The object that contains the agent details. The agent ID. The user name of the agent. The object containing the details of the agent that you want to remove. OK Unauthorized Forbidden", "tokens": 311}
{"title": "Get Departments by IDGet Number of ChatsGet Average Service Time", "content": "Get a list of departments by department IDs. At least one of the following permissions is required: The authToken of the authenticated user. The userId of the authenticated user. The department ID. OK Bad Request Unauthorized Forbidden Gives the number of chat rooms by department. Permission required: view-livechat-manager The authToken of the authenticated user. The userId of the authenticated user. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. The start date. The end date. Whether the chats are answered or not. Enter the department ID for which you want the number of chats. OK Bad Request Unauthorized Forbidden Returns average service time (in seconds) for chats by department. Permission required: view-livechat-manager The authToken of the authenticated user. The userId of the authenticated user. The start date. The end date. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. Enter the department ID for which you want the average service time. OK Bad Request Unauthorized Forbidden", "tokens": 267}
{"title": "Get Average Chat DurationGet Total Service TimeGet Average Waiting Time", "content": "Returns the average chat duration of each department. Permission required: view-livechat-manager The authToken of the authenticated user. The userId of the authenticated user. The start date. The end date. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. Enter the department ID for which you want the average chat duration. OK Bad Request Unauthorized Forbidden Gives the total service time (in seconds) by department. Permission required: view-livechat-manager The authToken of the authenticated user. The userId of the authenticated user. The start date. The end date. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. Enter the department ID for which you want the total service time. OK Bad Request Unauthorized Forbidden Gives the average visitor waiting time (in seconds) by department. Permission required: view-livechat-manager The authToken of the authenticated user. The userId of the authenticated user. The start date. The end date. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. Enter the department ID for which you want the average waiting time. OK Bad Request Unauthorized Forbidden", "tokens": 307}
{"title": "Get Total Transferred ChatsGet Total Abandoned ChatsGet Percentage of Abandoned Chats", "content": "Gives the total number of transferred chats by department. Permission required: view-livechat-manager The authToken of the authenticated user. The userId of the authenticated user. The start date. The end date. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. Enter the department ID for which you want the total transferred chats. OK Bad Request Unauthorized Forbidden Gives the total number of abandoned chats (rooms) by department. Permission required: view-livechat-manager The authToken of the authenticated user. The userId of the authenticated user. The start date. The end date. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. Enter the department ID for which you want the total abandoned chats. OK Bad Request Unauthorized Forbidden Gives the percentage of abandoned chats per department. Permission required: view-livechat-manager The authToken of the authenticated user. The userId of the authenticated user. The start date. The end date. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. Enter the department ID for which you want the percentage of abandoned chats. OK Bad Request Unauthorized Forbidden", "tokens": 312}
{"title": "Get Available Departments by Unit IDGet Departments by Unit IDCreate Unit", "content": "Gives departments that have not been associated to another unit yet. This endpoint has been renamed to Get Available Departments by Unit Id from Rocket.Chat 5.0. The authToken of the authenticated user. The userId of the authenticated user. The unit ID. OK Gives departments included in a specific unit ID. This endpoint has been renamed to Get Departments by Unit ID as from Rocket.Chat 5.0 The authToken of the authenticated user. The userId of the authenticated user. The unit ID. The start date. The end date. OK Permission required: manage-livechat-units The authToken of the authenticated user. The userId of the authenticated user. The unit ID. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. Unauthorized Forbidden Create a unit to group departments. Permission required: manage-livechat-units The authToken of the authenticated user. The userId of the authenticated user. The object containing the unit information. The name of the unit that you are creating. The visibility of the unit. For example, public or private. The object containing the unit monitors information. The monitor ID that you want to add to the unit. The user name of the monitor. The object containing the department information. The department ID that you want to add to the unit. Bad Request Unauthorized Forbidden", "tokens": 314}
{"title": "Get List of UnitsUpdate UnitDelete a Unit", "content": "Permission required: manage-livechat-units The authToken of the authenticated user. The userId of the authenticated user. Enter some text to filter the results. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, sort = {\"value\": -1, \"_id\": 1} Unauthorized Forbidden Permission required: manage-livechat-units The authToken of the authenticated user. The userId of the authenticated user. The unit ID. The object containing the unit data. The name of the unit that you are creating. The visibility of the unit. For example, public or private. The object containing the unit monitors information. The monitor ID that you want to add to the unit. The user name of the monitor. The object containing the department information. The department ID that you want to add to the unit. Unauthorized Forbidden Permission required: manage-livechat-units The authToken of the authenticated user. The userId of the authenticated user. The unit ID. OK Unauthorized Forbidden", "tokens": 284}
{"title": "Get List of Unit MonitorsGet Available Departments by Unit IdList of UnitsGet One UnitGet a UnitDelete Livechat Transcript", "content": "Get the list of monitors associated with a specific unit.\nPermission required: manage-livechat-units The authToken of the authenticated user. The userId of the authenticated user. The unit ID. Unauthorized Forbidden Permission required: manage-livechat-units The authToken of the authenticated user. The userId of the authenticated user. The unit ID. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. Filter the result with the text. Whether you want the result for the departments that you are part of. Unauthorized Forbidden The authToken of the authenticated user. The userId of the authenticated user. The authToken of the authenticated user. The userId of the authenticated user. The unit ID. Get details of a specific unit.\nPermission required: manage-livechat-units The authToken of the authenticated user. The userId of the authenticated user. The unit ID. Unauthorized Forbidden This endpoint is used to cancel any transcript requests for an open room, meaning that the chat transcript won't be sent after the chat is closed. You can not Send Livechat Transcript twice at a time. You must delete the previous request with this endpoint before requesting again. Permission required: send-omnichannel-chat-transcript The userId of the authenticated user. The authToken of the authenticated user. The room ID. OK Unauthorized Forbidden", "tokens": 335}
{"title": "Request Livechat TranscriptSend Livechat TranscriptRequest PDF TranscriptGet Agent Analytics Overview", "content": "The endpoint is used by visitors to request a transcript of their chat to be sent to their email once the conversation ends. The room must be closed before you can send a transcript. You can also request transcripts for older conversations given that you know the older token and room ID. The room ID. The visitor token. The visitor's email ID where the transcript should be sent. OK Bad Request This endpoint is used by agents and managers to schedule an email transcript to be sent once the chat is closed. Permission required: send-omnichannel-chat-transcript The room must be opened. The authToken of the authenticated user. The userId of the authenticated user. The room ID. The email address where the transcript should be sent. The subject of the email. OK Bad Request Unauthorized Forbidden Request a PDF transcript for an Omnichannel conversation. The conversation must be closed before it can be exported. Permission required: request-pdf-transcript. Omnichannel managers and agents have this permission by default. The authToken of the authenticated user. The userId of the authenticated user. The room ID. OK Unauthorized Forbidden Get the analytics overview for the agents in your workspace. Permission required: view-livechat-manager The authToken of the authenticated user. The userId of the authenticated user. The data that you want to get. The available options are: The start date The end date The department ID to return results for. OK Bad Request Unauthorized Forbidden", "tokens": 322}
{"title": "Get Analytics OverviewDelete a triggerGet List of Livechat TriggersGet Livechat Trigger", "content": "Get the overview of omnichannel analytics in your workspace. Permission required: view-livechat-manager The authToken of the authenticated user. The userId of the authenticated user. The data that you want to get. The available options are: Productivity, Conversations The start date The end date The department ID to return results for. OK Bad Request Unauthorized Forbidden Permission required: view-livechat-manager The authToken of the authenticated user. The userId of the authenticated user. The trigger ID. OK Unauthorized Forbidden Permission required: view-livechat-manager The authToken of the authenticated user. The userId of the authenticated user. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, sort = {\"value\": -1, \"_id\": 1} OK Unauthorized Forbidden Get the details about a specific trigger. Permission required: view-livechat-manager The authToken of the authenticated user. The userId of the authenticated user. The trigger ID. OK Unauthorized Forbidden", "tokens": 291}
{"title": "Create or Update Livechat Triggers", "content": "Permission required: view-livechat-manager See the Livechat Triggers guide for more information. The authToken of the authenticated user. The userId of the authenticated user. If you want to update a trigger, enter the trigger ID. Enter a name for the trigger. Enter a description for the trigger. Whether the trigger is enabled for use or not. Whether the trigger will be run only once for each visitor. Enter the conditions for the trigger to execute. The condition that should take place for the trigger to execute. The possible values are: Enter the value of the page-url (string) or the time-on-site, in seconds (number). Otherwise, you can enter null. The actions that take place once the trigger is executed. The name of the trigger action that takes place. The possible values are: Enter the parameter values for the trigger action. The sender of the trigger action. The possible values are: Enter the name of the agent or bot that you want to use, if the sender is custom. Enter a message for the visitor, if the action name is send-message. Enter the external service URL you want to use, if the action name is use-external-service. Enter the service timeout value, in seconds, if the action name is use-external-service. Enter a message when the service is not accessible, if the action name is use-external-service. OK Bad Request Unauthorized Forbidden", "tokens": 305}
{"title": "Set Livechat AppearanceGet Livechat Appearance", "content": "Update the livechat widget appearance settings. Permission required: view-livechat-manager The authToken of the authenticated user. The userId of the authenticated user. An array of objects containing the _id and value of the settings to be updated. See Get LiveChat Appearance example response for the _id of each setting. OK Bad Request Unauthorized Forbidden Get the settings about the widget appearance. Permission required: view-livechat-manager The authToken of the authenticated user. The userId of the authenticated user. OK Unauthorized Forbidden", "tokens": 124}
{"title": "Set up Omnichannel webhook", "content": "Set up a webhook to easily integrate Omnichannel with your CRM. Permission required: view-livechat-manager. The authToken of the authenticated user. The userId of the authenticated user. The destination webhook URL where the data will be sent. A secret token that can be used to verify the webhook. The request timeout value When set to true, data is sent to the configured webhook URL each time a new chat starts. When set to true, data is sent to the configured webhook URL each time a chat is closed. When set to true, data is sent to the configured webhook URL each time a chat is taken. When set to true, data is sent to the configured webhook URL each time a chat is queued. When set to true, data is sent to the configured webhook URL each time a chat is forwarded. When set to true, data is sent to the configured webhook URL each time offline messages are sent. When set to true, data is sent to the configured webhook URL each time a visitor sends a message. When set to true, data is sent to the configured webhook URL each time an agent sends a message. OK", "tokens": 274}
{"title": "Test the Webhook IntegrationGet LicensesAdd License", "content": "This endpoint sends sample data to test whether the configured webhook URL is functioning correctly. Permission required: view-livechat-webhooks. The data you can expect on your webhook for this test follows this format: The authToken of the authenticated user. The userId of the authenticated user. OK Retrieves a list of all registered licenses and the details in the workspace. Permission required: view-privileged-setting. The licenses.isEnterprise and licenses.get endpoints have been removed from 7.0. Use this endpoint instead. The authToken of the authenticated user. The userId of the authenticated user. OK Unauthorized You may want to deploy your workspace in an air-gapped environment. Since the server has no internet to communicate with the cloud, we provide a license for your subscribed plan that you can apply manually to upgrade your workspace. Permission required: edit-privileged-setting. A successful response only means the license provided follows the accepted format. Check your workspace log or administration info to confirm if the license is valid and was applied to your workspace. Alternatively, you can check Confirm Enterprise License endpoint. The authToken of the authenticated user. The userId of the authenticated user. OK Unauthorized Forbidden", "tokens": 280}
{"title": "Get Maximum Active UserList Queued User InquiriesGet Inquiries List", "content": "Retrieves a list of the maximum active users. The authToken of the authenticated user. The userId of the authenticated user. OK Unauthorized Permission required: view-l-room The livechat/inquiries.queued endpoint has been removed from 7.0. Use this endpoint instead. The userId of the authenticated user. The authToken of the authenticated user. The department ID or name. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, sort = {\"value\": -1, \"_id\": 1} OK Unauthorized Forbidden Lists all open Livechat inquiries. An incoming chat that has not yet been taken by the agent is called an inquiry. After it's been taken by the agent it is referred to as room. Permission required: view-livechat-manager The authToken of the authenticated user. The userId of the authenticated user. The department ID or name. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, sort = {\"value\": -1, \"_id\": 1} OK Unauthorized Forbidden", "tokens": 358}
{"title": "Take InquiryGet Inquiry by RoomSet SLA Policy to Inquiry", "content": "Join an open inquiry. Permission required: view-l-room The authToken of the authenticated user. The userId of the authenticated user. If the userId is provided, the user must have the view-l-room permission. The inquiry ID. The user's (agent) ID who is taking the inquiry. The user must have view-l-room permission. OK Bad Request Unauthorized Forbidden Permission required: view-l-room The authToken of the authenticated user. The userId of the authenticated user. The room ID. OK Bad Request Unauthorized Forbidden Set SLA policy to an inquiry. You can only set the policy for an inquiry that has not been taken by an agent. At least one of the following permissions is required: The authToken of the authenticated user. The userId of the authenticated user. The room ID. Name or ID of the SLA policy. OK Bad Request Unauthorized Forbidden", "tokens": 204}
{"title": "Send a WhatsApp Template Message", "content": "Use this endpoint to send WhatsApp template messages directly to specified contacts from your workspace. Before sending template messages from Rocket.Chat through any WhatsApp App, ensure that you have set up the templates in respective WhatsApp provider account. Refer to the official guide for details on configuring template messages for each WhatsApp app. We strongly recommend including the + prefix for all phone numbers in the payload. While you can submit numbers without the leading + sign, we have encountered cases where WhatsApp will return an invalid response despite the number being in use. Recipient WhatsApp IDs where you want to send the template message. You can validate a WhatsApp id from here. The WhatsApp Number from which you want to send this template message. The WhatsApp number connected to your workspace via the app. Username of the agent you want to transfer the chat to when the WhatsApp user replies. Department name or ID where you want to transfer the chat to when the WhatsApp user replies. Provide the details of the template message you want to send. The structure of the template object may differ depending on the template defined within your WhatsApp provider account. For further clarification, refer to the official guide on sending template messages via API in Rocket.Chat. The example template object provided here is based on the configuration outlined in the official guide for the WhatsApp Cloud App. If your template message includes parameters, make sure to replace all of them with the appropriate information before sending. Failure to do so may lead to an error. OK Bad Request Unauthorized Forbidden", "tokens": 332}
{"title": "Get List of TeamsGet List of All Teams", "content": "Lists the public and private teams the request sender is part of. The authToken of the authenticated user. The userId of the authenticated user. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \"g\": query={ \"name\": { \"$regex\": \"g\" } } OK Note that the roomId is main room id of the team. Unauthorized Lists all the teams and their information. Permission required: view-all-teams The authToken of the authenticated user. The userId of the authenticated user. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. OK\nNote that the roomId is main room ID of the team. Unauthorized", "tokens": 280}
{"title": "Get Team InfoUpdate a TeamAdd Members to the TeamList Team Members", "content": "Gets a team's information. If the team is not public, the request sender must be a member of the team. The authToken of the authenticated user. The userId of the authenticated user. The team id. It is required if the teamName is not provided. The team name. It is required if the teamId is not provided. OK Note that the roomId is main room id of the team. Unauthorized Updates an existing team (name and type). Permission required: edit-team The authToken of the authenticated user. The userId of the authenticated user. The team ID. The new team name and type (0 - public, 1 - private). OK Unauthorized Add members to a team. Permissions required: add-team-member or edit-team-member The authToken of the authenticated user. The userId of the authenticated user. Enter the team ID. Alternatively, enter the teamName parameter and provide the team's name as the value. The users (IDs and roles) to add to the team. OK Unauthorized List all members of a team. The authToken of the authenticated user. The userId of the authenticated user. The team name. It is required if the teamId is not provided. The team id. It is required if the teamName is not provided. Search filter for the user's name Search filter for the user's username Search filter for the user's status OK Unauthorized", "tokens": 321}
{"title": "Update Team Member InfoLeave a TeamRemove Member from TeamDelete a Team", "content": "Updates a team member's roles. Permission required: edit-team-member The authToken of the authenticated user. The userId of the authenticated user. Enter the team ID. Alternatively, enter the teamName parameter and provide the team's name as the value. The users (IDs and roles) to add to the team. OK Unauthorized Leave a team The authToken of the authenticated user. The userId of the authenticated user. Enter the team ID. Alternatively, enter the teamName parameter and provide the team's name as the value. The team room IDs to remove the user from. OK Unauthorized Removes a member from a team. Permission required: edit-team-member The authToken of the authenticated user. The userId of the authenticated user. Enter the team ID. Alternatively, enter the teamName parameter and provide the team's name as the value. The user ID to remove from the team. The rooms (IDs) from which the user should be removed. OK Unauthorized Removes a team. Permission required: delete-team The authToken of the authenticated user. The userId of the authenticated user. Enter the team name. This parameter is required if teamId is not provided. Enter the team ID. This parameter is required if teamName is not provided. The room IDs to delete along with the team. OK Unauthorized", "tokens": 302}
{"title": "Autocomplete TeamConvert Team to ChannelAdd Rooms to a TeamRemove room from the TeamUpdate Room in a Team", "content": "List the teams whose names match a given pattern. The authToken of the authenticated user. The userId of the authenticated user. The pattern (search filter for team names). OK Unauthorized Convert a team to a channel. The authToken of the authenticated user. The userId of the authenticated user. The team ID that you want to convert to a channel. OK Bad Request Unauthorized Adds rooms to the team. Permission required: add-team-channel The authToken of the authenticated user. The userId of the authenticated user. Enter the team ID. Alternatively, enter the teamName parameter and provide the team's name as the value. The IDs of the rooms to be added to the team. OK Unauthorized Removes a room from a team. Permission required: remove-team-channel The userId of the authenticated user. The authToken of the authenticated user. Enter the team name. This parameter is required if teamId is not provided. Enter the team ID. This parameter is required if teamName is not provided. The room ID to be removed from the team. OK Unauthorized Updates a room from a team. Permission required: edit-team-channel The authToken of the authenticated user. The userId of the authenticated user. The room id. Sets the room as Auto-join (true) or not (false). OK Unauthorized", "tokens": 303}
{"title": "List Rooms of a TeamList User Rooms of a Team", "content": "List all rooms in a team. The authToken of the authenticated user. The userId of the authenticated user. The team id. It is required if the teamName is not provided. The team name. It is required if the teamId is not provided. The room's type (search filter). The number of items to return. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. OK Unauthorized Lists only the team's rooms the user has joined. Permission required: view-all-team-channels The userId of the authenticated user. The authToken of the authenticated user. The team name. It is required if the teamId is not provided. The team id. It is required if the teamName is not provided. The user id. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. OK Unauthorized", "tokens": 217}
{"title": "List Rooms and Discussions of a Team", "content": "Lists a particular team's public rooms, discussions, and the rooms (public/private) a user is part of from the team's main room. Currently, this endpoint returns the discussions from the parent team rooms only; discussions from sub-channels are not returned. The userId of the authenticated user. The authToken of the authenticated user. The team name. It is required if the teamId is not provided. The team id. It is required if the teamName is not provided. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} Filter the results using the text you want to find. You can choose the type of rooms you want in the response. Enter the value as channels or discussions. If you don't enter any value, both types are returned. The room ID. This parameter is required if you have not provided the teamId or the teamName. OK Bad Request Unauthorized", "tokens": 269}
{"title": "Get Group Online Users", "content": "Lists all online users of a group if the group's id is provided, otherwise it gets all online users of all groups. The authToken of the authenticated user. The userId of the authenticated user. The channel's id. OK Unauthorized", "tokens": 56}
{"title": "Get Group Integrations", "content": "Retrieves the integrations that the group/channel has. At least one of the following integration permissions is required: It will return the integrations based on the user's permission. The authToken of the authenticated user. The userId of the authenticated user. The room id. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \"g\": query={ \"name\": { \"$regex\": \"g\" } } This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } OK Unauthorized", "tokens": 258}
{"title": "Add All Users to GroupAdd Group LeaderAdd Group ModeratorAdd Group OwnerArchive a GroupClose Group", "content": "Add all users to the room. The authToken of the authenticated user. The userId of the authenticated user. Enter the the group ID Add only active users to the room. OK Bad Request Unauthorized Assign the leader role to a user in a group. Permission required: set-leader The authToken of the authenticated user. The userId of the authenticated user. The groups's id The user's id OK Bad Request Unauthorized Assign the moderator role to a user in a group. Permission required: set-moderator The authToken of the authenticated user. The userId of the authenticated user. The groups's id The user's id OK Unauthorized Assign owner role for a user in the current group. The authToken of the authenticated user. The userId of the authenticated user. OK Unauthorized Archive a group you belong to. The authToken of the authenticated user. The userId of the authenticated user. The group ID that you want to archive. OK Unauthorized Removes the group/channel from the user's list of groups, only if you're part of the group. The authToken of the authenticated user. The userId of the authenticated user. The group ID that you want to close. OK Unauthorized", "tokens": 282}
{"title": "Get Group CountersCreate GroupDelete Group", "content": "Get group counters for the authenticated user. Permission required: view-room-administration The authToken of the authenticated user. The userId of the authenticated user. The room id. It is required if the roomName is not provided. The room name. It is required if the roomId is not provided. Counters for provided user ID (need to have a view-room-administration right for calling user). OK Note: Creates a new group/channel, optionally including specified users. The group creator is always included. The authToken of the authenticated user. The userId of the authenticated user. Set if the group is read only or not. The default value is false. The users to add to the group when it is created. If set to true the user calling the endpoint is not automatically added as a member of the group. The default value is false. The name of the new private group. If you have defined custom fields for your workspace, you can provide them in this object parameter. Enter the following details for the object: For more information, see Channels. OK Unauthorized Delete a private group. The authToken of the authenticated user. The userId of the authenticated user. Enter the room ID. This parameter is required if no roomName is provided. Enter the room name. This parameter is required if no roomId is provided. OK Unauthorized", "tokens": 297}
{"title": "Get Group HistoryGet Group InformationInvite Users to Group", "content": "Retrieves the messages from a group/channel you belong to. The authToken of the authenticated user. The userId of the authenticated user. The room id. The end of time range of messages to retrieve. The default value is the current date and time. The start of the time range of messages to retrieve Whether messages which land on latest and oldest should be included. The default value is false. Whether the amount of unreads should be included. The default value is false. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. OK Unauthorized Retrieves the information about a private group you belong to. The userId of the authenticated user. The authToken of the authenticated user. The room id. It is required if the roomName is not provided. The room name. It is required if the roomId is not provided. OK Invite one user or bulk users to the group/channel. The authToken of the authenticated user. The userId of the authenticated user. The group ID The ID of the user to be invited. You can also use the parameter userIds as an array to invite more than one user. For example, [\"nSYqWzZ4GsKTX4dyK\", \"SYqWzZ4Gsasdfgh\"] OK Bad Request", "tokens": 302}
{"title": "Remove User from GroupGet List of User Groups", "content": "Remove a user from the group/channel. The authToken of the authenticated user. The userId of the authenticated user. OK Unauthorized Lists all of the groups/channels of any users. Permission required: view-room-administration The authToken of the authenticated user. The userId of the authenticated user. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \"g\": query={ \"name\": { \"$regex\": \"g\" } } This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } OK Unauthorized", "tokens": 268}
{"title": "Get GroupsList Group Members", "content": "Lists all of the groups/channels the user has joined. The authToken of the authenticated user. The userId of the authenticated user. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} OK Unauthorized Lists the members of a private group. Permission required if the room is broadcast.: view-broadcast-member-list The authToken of the authenticated user. The userId of the authenticated user. The room id. It is required if the roomName is not provided. The room name. It is required if the roomId is not provided. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} The number of items to return. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The user's status (search filter). Extra search filters to be applied to the fields defined in the Accounts_SearchFields setting. OK Unauthorized", "tokens": 322}
{"title": "Group Members By Highest Role", "content": "Lists the participants of a group/channel sorted by their room-scoped roles. Room members are sorted by their most important role in the room. The following hierarchy is used: Owner > Moderator > Other roles. The information related to each user's highest role is returned in the highestRole object within each of them. The highestRole object contains a numeric level field, which ranges from 0 to 2 The highestRole object also contains a role field, which has three possible values: owner, moderator or member, which are assigned to levels 0, 1, and 2, respectively. Requires view-broadcast-member-list if the room is a broadcast. The authToken of the authenticated user. The userId of the authenticated user. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} The room id. It is required if the roomName is not provided. The room name. It is required if the roomId is not provided. The user's status (search filter). Extra search filters to be applied to the fields defined in the Accounts_SearchFields setting. OK Unauthorized", "tokens": 308}
{"title": "Get Group Messages", "content": "Lists all the messages in a groups. The authToken of the authenticated user. The userId of the authenticated user. The room id. It is required if the roomName is not provided. The room name. It is required if the roomId is not provided. This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. Filter the messages where a user has been mentioned by the userId. For a set of userIds, use an array ([\"838ndhd79w\", \"dud0wu900\"]). Filter the messages a user have starred by userId. For a set of userIds, use an array ([\"838ndhd79w\", \"dud0wu900\"]). Filter pinned messages. OK Unauthorized", "tokens": 296}
{"title": "Get Group ModeratorsAdd Group to ListRemove Group LeaderRemove Group ModeratorRemove Group Owner", "content": "Lists all group moderators. The authToken of the authenticated user. The userId of the authenticated user. The room id. It is required if the roomName is not provided. The room name. It is required if the roomId is not provided. OK Unauthorized Adds the group/channel back to the user's list of groups. The authToken of the authenticated user. The userId of the authenticated user. The room ID. OK Unauthorized Remove the leader role from a user in a group. Permission required: set-leader The authToken of the authenticated user. The userId of the authenticated user. The group ID. The user ID. OK Bad Request Unauthorized Remove the moderator role from a user in a group. Permission required: set-moderator The authToken of the authenticated user. The userId of the authenticated user. The group id The id of the user to be romoved from moderator OK Unauthorized Remove the owner role from a user in a group. Permission required: set-owner The authToken of the authenticated user. The userId of the authenticated user. The room id The id of the user to be removed as owner OK Unauthorized", "tokens": 264}
{"title": "Rename GroupSet Group AnnouncementSets Group Custom FieldsSet Group DescriptionSet Group Purpose", "content": "Update the name of the private group. The authToken of the authenticated user. The userId of the authenticated user. The group's ID The new name of the private group. It can not be the same as another or the existing name. OK Set the group announcement. The authToken of the authenticated user. The userId of the authenticated user. The group id The announcement to set for the group. OK Unauthorized Sets the custom fields for the private group. The authToken of the authenticated user. The userId of the authenticated user. The private group's ID. Alternatively, use the roomName parameter and provide the room's name as the value. The custom fields to set for the private group. OK Set the description for the private group. The authToken of the authenticated user. The userId of the authenticated user. The group id The group description OK Unauthorized Sets the description for the group/channel (the same as groups.setDescription, obsolete). The authToken of the authenticated user. The userId of the authenticated user. The group id The group purpose OK", "tokens": 253}
{"title": "Set Group as Read OnlySet Group TopicSet Group TypeUnarchive Group", "content": "Set group as read-only or not. The authToken of the authenticated user. The userId of the authenticated user. The group id Boolean to represent the group read-only status OK Unauthorized Sets the topic for the group/channel. The authToken of the authenticated user. The userId of the authenticated user. The group id The group topic OK Unauthorized Set the group type. The group type can be either c (public) or p (private). The authToken of the authenticated user. The userId of the authenticated user. The group id The group type OK Unauthorized Unarchive a group. The authToken of the authenticated user. The userId of the authenticated user. The room ID that you want to unarchive. OK Unauthorized", "tokens": 177}
{"title": "Get Group Files", "content": "Get all files in a group. The authToken of the authenticated user. The userId of the authenticated user. The room name. It is required if the roomId is not provided. The room id. It is required if the roomName is not provided. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} This parameter allows you to use MongoDB query operators to search for specific data. For example, to query users with a name that contains the letter \"g\": query={ \"name\": { \"$regex\": \"g\" } } This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } OK Unauthorized", "tokens": 253}
{"title": "Set Group as EncryptedConvert a Group to TeamList Group RolesLeave Group", "content": "Set group encryption. The authToken of the authenticated user. The userId of the authenticated user. Whether or not to encrypt the room. The group ID. Alternatively, use the roomName parameter and enter the group name. OK Bad Request Unauthorized Convert a group to a team. The authToken of the authenticated user. The userId of the authenticated user. Enter the team name. This parameter is required if teamId is not provided. Enter the team ID. This parameter is required if teamName is not provided. The room IDs to delete along with the team. OK Bad Request Unauthorized List all the roles of users in the group. The authToken of the authenticated user. The userId of the authenticated user. OK Leave a group. The group owner must set another owner before leaving the group. The authToken of the authenticated user. The userId of the authenticated user. The group ID that you want to leave. OK Unauthorized", "tokens": 217}
{"title": "Directory", "content": "Search workspace directory for users, channels and teams. The authToken of the authenticated user. The userId of the authenticated user. The search term to be filtered It can be channels or users. When type is users you can send an additional workspace field, that can be local (default) or all. Workspace=all will work only if federation is enabled. It can be local or all( if federation is enabled). It is local by default. The query to search the workspace directory. When type is users you can send an additional workspace field, that can be local (default) or all. Workspace=all will work only if federation is enabled. Number of items to \"skip\" in the query, i.e. requests return count items, skipping the first offset items. The number of items to return. List of fields to order by, and in which direction. This is a JSON object, with properties listed in desired order, with values of 1 for ascending, or -1 for descending. For example, {\"value\": -1, \"_id\": 1} This parameter accepts a JSON object with properties that have a value of 1 or 0 to include or exclude them in the response. For example, to only retrieve the usernames of users: fields={ \"username\": 1 } OK Unauthorized", "tokens": 285}
{"title": "List Custom User StatusCreate Custom StatusUpdate Custom StatusDelete Custom User StatusList Slash CommandsGet Slash Commands", "content": "Lists all available custom user's status. The authToken of the authenticated user. The userId of the authenticated user. Filter list by the name of the custom status. Filter list by the _id of the custom status. OK Unauthorized Create a custom user status. The authToken of the authenticated user. The userId of the authenticated user. The name of the custom status. The statusType of the custom status. Valid status type includes: Online, Busy, Away, Offline. OK Bad Request Unauthorized Update a custom status. The authToken of the authenticated user. The userId of the authenticated user. The _id of the custom status. The updated name of the custom status. The updated statusType of the custom status OK Bad Request Unauthorized Delete a custom user status. The authToken of the authenticated user. The userId of the authenticated user. The _id of the custom status OK Bad Request Unauthorized Lists all available slash commands. The authToken of the authenticated user. The userId of the authenticated user. OK Unauthorized Get specification of the slash command. The authToken of the authenticated user. The userId of the authenticated user. The name of the command. OK Unauthorized", "tokens": 277}
{"title": "Get Command's Preview DataExecute command's preview itemExecute a Slash Command", "content": "Fetches the command's preview data or executes the preview item The authToken of the authenticated user. The userId of the authenticated user. The name of the command to be executed. The ID of the room. Parameters of the command if required. It is undefined by default. OK The authToken of the authenticated user. The userId of the authenticated user. The name of the command to be executed. The ID of the room. The ID of the thread to run the command. Parameters of the command if required. It is undefined by default. The triggerId generated by the client that allows the command to interact with the UI The data of the preview item to be executed by the command The ID of the selected preview item The type of the selected preview item The value of the selected preview item OK Execute a slash command in the specified room. The authToken of the authenticated user. The userId of the authenticated user. The name of the command to be executed. The ID of the room. Parameters of the command if required. It is undefined by default The ID of the thread to run the command. The triggerId generated by the client that allows the command to interact with the UI OK", "tokens": 263}
{"title": "List All PermissionsUpdate Permissions", "content": "Returns the list of permissions from the workspace. The authenticated user ID. The authenticated user token. Date as ISO string. If you include this parameter, the update and remove fields in the response will contain only those permissions updated and removed since this date and time. OK Unauthorized Update the permissions on the workspace. Permission required: access-permissions The authenticated user ID. The authenticated user token. The array of roles to overwrite. OK Bad Request Unauthorized", "tokens": 103}
